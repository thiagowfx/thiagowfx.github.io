<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Web on not just serendipity</title><link>https://www.perrotta.dev/tags/web/</link><description>Recent content in Web on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 · RSS · Made with ♥ in 🇨🇦</copyright><lastBuildDate>Thu, 01 Aug 2024 00:54:55 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Disallow AI scraping</title><link>https://www.perrotta.dev/2024/08/disallow-ai-scraping/</link><pubDate>Thu, 01 Aug 2024 00:54:55 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/disallow-ai-scraping/</guid><description>&lt;p>Although there&amp;rsquo;s never a guarantee, you can attempt to disallow &amp;ldquo;AI&amp;rdquo; from
scraping the posts in your blog, in the same spirit of &amp;ldquo;DNT - Do Not Track&amp;rdquo; in
modern web browsers.&lt;/p>
&lt;p>If you have control over your
&lt;a href="https://perrotta.dev/robots.txt">&lt;code>robots.txt&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
add something like the following to it:&lt;/p></description><content:encoded><![CDATA[<p>Although there&rsquo;s never a guarantee, you can attempt to disallow &ldquo;AI&rdquo; from
scraping the posts in your blog, in the same spirit of &ldquo;DNT - Do Not Track&rdquo; in
modern web browsers.</p>
<p>If you have control over your
<a href="https://perrotta.dev/robots.txt"><code>robots.txt</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
add something like the following to it:</p>
<pre tabindex="0"><code>User-agent: GPTBot
Disallow: /

User-agent: ChatGPT-User
Disallow: /

User-agent: CCBot
Disallow: /

User-agent: Google-Extended
Disallow: /

User-agent: anthropic-ai
Disallow: /

User-agent: Claude-Web
Disallow: /

User-agent: ClaudeBot
Disallow: /

User-agent: cohere-ai
Disallow: /

User-agent: PerplexityBot
Disallow: /

User-agent: FacebookBot
Disallow: /

# Default rule
User-agent: *
Disallow:
</code></pre><p>The list above is non-exhaustive and will not be kept up-to-date, it&rsquo;s just
meant as a reference and/or starting point.</p>
<p>You could always use Gen AI itself to help you populate it, credits go to
<a href="https://grubz.blog/ai-scrapers-post/">https://grubz.blog/ai-scrapers-post/</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You <em>really</em> should.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Pipes: RSS Manipulation</title><link>https://www.perrotta.dev/2024/07/pipes-rss-manipulation/</link><pubDate>Wed, 03 Jul 2024 21:50:24 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/pipes-rss-manipulation/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Yahoo!_Pipes">Yahoo! Pipes&lt;/a> is not around
anymore, however there is a modern replacement for it: &lt;a href="https://www.pipes.digital/">https://www.pipes.digital/&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Yahoo!_Pipes">Yahoo! Pipes</a> is not around
anymore, however there is a modern replacement for it: <a href="https://www.pipes.digital/">https://www.pipes.digital/</a>.</p>
<p>It was on Hacker News recently: <a href="https://news.ycombinator.com/item?id=40841980">https://news.ycombinator.com/item?id=40841980</a></p>
<p>Here is a practical use case for it: to filter out unwanted episodes from
podcast RSS feeds.</p>
<p>I follow <a href="https://jovemnerd.com.br/podcasts/nerdcast">Jovem Nerd - Nerdcasts</a>.
They are a Brazilian podcast.</p>
<p>However, in the recent years, they added a lot of other (unrelated) podcasts
from their network to the main NerdCast feed, effectively polluting it. The
cleaner and elegant action to do would have been to publish individual RSS feeds
for each of their podcast series, and perhaps an additional one to contain all
of them, for those who would like to subscribe to everything. But that&rsquo;s not
what they do.</p>
<p>This is an effective marketing strategy for them, because the smaller podcast
series benefit from the exposure in the main feed. At the same time, this is
hostile to listeners, as we end up receiving bundling of episodes we are not
looking for.</p>
<p>Enter the new Pipes.</p>
<p>With it I can build the following pipeline:</p>
<ul>
<li>fetch the nerdcast feed: <a href="https://api.jovemnerd.com.br/feed-nerdcast/">https://api.jovemnerd.com.br/feed-nerdcast/</a></li>
<li>filter only the items that contain &ldquo;NerdCast&rdquo; in <code>item.title</code></li>
<li>publish a new feed</li>
</ul>
<p>The end result (&ldquo;NerdCast ONLY&rdquo;):</p>
<ul>
<li>Preview: <a href="https://www.pipes.digital/feedpreview/VqaEW4qJ">https://www.pipes.digital/feedpreview/VqaEW4qJ</a></li>
<li>Raw feed: <a href="https://www.pipes.digital/feed/VqaEW4qJ">https://www.pipes.digital/feed/VqaEW4qJ</a>?</li>
</ul>
<p>You are welcome.</p>
<p>Documentation: <a href="https://www.pipes.digital/docs">https://www.pipes.digital/docs</a></p>]]></content:encoded></item><item><title>Force captive portal to open</title><link>https://www.perrotta.dev/2024/02/force-captive-portal-to-open/</link><pubDate>Thu, 22 Feb 2024 09:33:57 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/force-captive-portal-to-open/</guid><description>&lt;p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.&lt;/p></description><content:encoded><![CDATA[<p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.</p>
<p>The simplest way to force it to do so is to <a href="https://www.youtube.com/watch?v=DPqdyoTpyEs">turn the Wi-Fi off and on
again</a>.</p>
<p>Should it not work, the second way is to open your favorite browser and navigate
to <a href="https://captive.apple.com">captive.apple.com</a> (macOS, iOS).</p>]]></content:encoded></item><item><title>WHOIS</title><link>https://www.perrotta.dev/2024/02/whois/</link><pubDate>Sun, 04 Feb 2024 00:20:15 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/whois/</guid><description>&lt;p>I got myself a brand new domain! As I play with it, expect documentation to
be added.&lt;/p>
&lt;p>&lt;strong>How to query the WHOIS for the domain?&lt;/strong>&lt;/p></description><content:encoded><![CDATA[<p>I got myself a brand new domain! As I play with it, expect documentation to
be added.</p>
<p><strong>How to query the WHOIS for the domain?</strong></p>
<ol>
<li>From the command line: <code>$ whois &lt;domain&gt;</code></li>
<li>From the registrar WHOIS, e.g. <a href="https://porkbun.com/whois">https://porkbun.com/whois</a>, <a href="https://www.gandi.net/en/domain/p/whois">https://www.gandi.net/en/domain/p/whois</a></li>
<li>From the registry WHOIS, e.g. <a href="https://lookup.icann.org/">https://lookup.icann.org/</a>, <a href="https://www.registry.google/whois-lookup/">https://www.registry.google/whois-lookup/</a></li>
</ol>
<p>It&rsquo;s a good idea to set up WHOIS privacy, so that your domain registration
details stay private. Some registrars such as Porkbun and NearlyFreeSpeech will
gladly offer an option for that, either for free or at a low cost, respectively.</p>]]></content:encoded></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s discuss the <em>raison d&rsquo;etre</em> of <a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing</a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.</p>
<p><a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago</a>, web developers would run
(web) integration tests with <a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic</a> using Google Chrome (or Chromium)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This was a <a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era</a>.</p>
<p><em>&ldquo;Why?&rdquo;</em>, you may rightfully ask.</p>
<ul>
<li>The web browser and/or its components / extensions / etc could
<strong>auto-update</strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness</li>
<li>Chrome adds an <strong>info bar</strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.</li>
<li>There are no versioned Chrome builds for download. There&rsquo;s no <strong>browser
pinning</strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
<ul>
<li><strong>Corollary</strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
<a href="https://chromedriver.chromium.org/downloads">Chromedriver</a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ul>
</li>
</ul>
<p>In order to address these (and other) issues, <a href="https://goo.gle/chrome-for-testing">Chrome for
Testing</a> (hereafter &ldquo;CfT&rdquo;) was born. To
clarify, today where are three flavours of Chrom*:</p>
<ul>
<li><strong>Chromium</strong>: the open-source project, <a href="https://chromium.org/">https://chromium.org/</a>. The root of all
derivatives (Microsoft Edge, Brave, etc). It is available in full source
form, but there are no (official) pre-built binaries for it.</li>
<li><strong>Google Chrome</strong>: the proprietary, closed-source version of Chromium developed
by Google. Think of it as Chromium on steroids. Google distributes pre-built
Chrome binaries for every platform it supports.</li>
<li><strong>Google Chrome for Testing</strong>: think of it as &ldquo;reproducible (or pinned, or
frozen) Google Chrome&rdquo;. It is basically a snapshot of Google Chrome in a
fixed time in the past, plus a few bits of developer-oriented features
mentioned in this article.</li>
</ul>
<p>There are other <em>niceties</em> that Chrome for Testing accomplishes as of today:</p>
<ul>
<li>The <a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)</a> experiment
(&ldquo;Protocol Monitor&rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.</li>
<li>Mechanisms such as <a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts</a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
<a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable"><code>DEBIAN_FRONTEND=noninteractive</code></a>
when running <code>apt</code> in dockerfiles. You don&rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.</li>
<li>Completely agnostic to the concept of &ldquo;Stable&rdquo; / &ldquo;Beta&rdquo; / &ldquo;Dev&rdquo;. If you have
pinned versions, you don&rsquo;t need to care about any of that.</li>
<li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases</li>
</ul>
<p>Something important to note:</p>
<blockquote>
<p><strong>Warning</strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.</p>
</blockquote>
<p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&rsquo;s
package manager (e.g. <code>apt</code>, <code>dnf</code>, <code>pacman</code>, etc). Why should it be different
for Chrome for Testing?</p>
<p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&rsquo;t want end users to shoot themselves on the foot, therefore it&rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Because of that, CfT cannot be made the default system browser.</p>
<p>The easiest way to obtain CfT is via its public API, which is documented here:
<a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/</a>, or through the official
<a href="https://pptr.dev/browsers-api">CLI utility</a> that is part of Puppeteer.</p>
<p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.</p>
<h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?</h2>
<p>The <a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi</a> repository is an excellent (and simple-ish) example on how to do so<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Given a <code>.github/workflows/e2e.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">E2E tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">e2e</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is the exciting part wherein we fetch CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Despite the &#34;chromium&#34; name, this is actually CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We set a explicit shell to force &#34;set -eo pipefail&#34; so that,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># if the command fails, then the entire step fails.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We do not want &#34;cut&#34; to run if the download fails for some reason.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># version of the CLI tool, but that&#39;s how it should be done for now.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We store the location of the CfT binary in an environment variable.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Google Chrome for Testing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cft_binary=&#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&#39; &#39;)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;cft_binary=$cft_binary&#34; &gt;&gt; $GITHUB_ENV</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip install -r tests/requirements.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># out to CfT, using the environment variable set earlier.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run E2E tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm run e2e</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">BROWSER_BIN</span>: <span style="color:#ae81ff">${{ env.cft_binary }}</span>
</span></span></code></pre></div><p>You can find the complete version of this example in an <a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit</a>
within that repository. The reason I link to an older commit is due to its
direct usage of the <a href="https://pptr.dev/browsers-api">@puppeteer/browsers</a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.</p>
<p>To fully realize the benefits of reproducibility, you should not use <code>latest</code>.
Instead, pin the browser to a specific version.</p>
<p>If using an environment variable (or a command-line flag) is not an option for
some reason, then an alternative would be to create a symlink (<code>ln -s</code>) to
<code>$cft_binary</code> from a place in the front of your <code>$PATH</code>. Or, alternatively,
temporarily update your <code>$PATH</code> with the <code>dirname</code> of <code>$cft_binary</code>.</p>
<p>Also, if you cannot or do not want to install <code>npm</code> (<code>npx</code>) just for the sake
of fetching CfT<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, then just fetch it directly (use <code>curl</code> or <code>wget</code>) from
its <a href="https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints">API
endpoint</a>, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/121.0.6167.85/linux64/chrome-linux64.zip
</span></span></code></pre></div><p>Although note that this is not a future-proof way of fetching CfT. It&rsquo;s a
simple shortcut. The better way is to query the JSON metadata file for a
specific platform and browser version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% curl https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json | jq -r <span style="color:#e6db74">&#39;.builds.&#34;121.0.6167&#34;.downloads.chrome[] | select(.platform == &#34;linux64&#34;).url&#39;</span>
</span></span></code></pre></div><p>&hellip;so that the download works even if the URL changes in the future <a href="https://github.com/GoogleChromeLabs/chrome-for-testing/pull/102">for some
reason</a>.</p>
<h2 id="references">References</h2>
<ul>
<li>Chrome for Testing Design Document: <a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing</a></li>
<li><a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For simplicity, referred to as just <em>Chrome</em> hereafter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You can find lots of such reports <a href="https://groups.google.com/g/chromedriver-users">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The same way you wouldn&rsquo;t recommend Arch Linux for linux newbies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><strong>Disclaimer</strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I know, I know, JS bloat.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>The fundamental right to paste</title><link>https://www.perrotta.dev/2024/01/the-fundamental-right-to-paste/</link><pubDate>Mon, 22 Jan 2024 18:55:13 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/the-fundamental-right-to-paste/</guid><description>&lt;p>Some websites attempt to prevent users from pasting text (i.e. &lt;code>Ctrl+V&lt;/code> /
&lt;code>Cmd+V&lt;/code>) in web browsers.&lt;/p>
&lt;p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.&lt;/p></description><content:encoded><![CDATA[<p>Some websites attempt to prevent users from pasting text (i.e. <code>Ctrl+V</code> /
<code>Cmd+V</code>) in web browsers.</p>
<p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.</p>
<p>It is relatively easy to bypass most trivial blocks with plain JavaScript. Open a DevTools console (<code>Option + Cmd + I</code> in Google Chrome on macOS), then paste in the following snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">forceEnableCopyPaste</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">e</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;paste&#39;</span>, <span style="color:#e6db74">&#39;copy&#39;</span>].<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span> =&gt; {
</span></span><span style="display:flex;"><span>    document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span>, <span style="color:#a6e22e">forceEnableCopyPaste</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>})();
</span></span></code></pre></div><p><strong>Bonus points</strong>: it also works for copying text.</p>
<p>I can see the point of trying to attempt to block copying (e.g. copyright,
online exams), but there&rsquo;s little reason to prevent pasting.</p>
<p>The only <em>arguably valid</em> use case I&rsquo;ve seen to date for blocking pasting is
in some sign-up forms wherein you need to type in some piece of user ID (e.g.
your email, or your telephone number) twice. The second text field is
sometimes blocked, as to <em>encourage</em> you to double check it is absolutely
correct™, by the means of carefully typing it out.</p>
<p>The snippet above could also be easily converted to a bookmarklet.</p>
<p>Search for &ldquo;bookmarklet builder&rdquo; in your favorite search engine, go to a website such as <a href="https://caiorss.github.io/bookmarklet-maker/">https://caiorss.github.io/bookmarklet-maker/</a>, paste the above snippet therein, then get a compressed version such as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">Bjavascript</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#66d9ef">function</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">const</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#a6e22e">e</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">return</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">B</span><span style="color:#e6db74">&#39;paste&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#e6db74">&#39;copy&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span>
</span></span></code></pre></div><p>Now just create a web browser favorite with that resource. Clicking the
bookmark will yield the same effect as pasting the snippet into devtools.</p>]]></content:encoded></item><item><title>Start an HTTP server ASAP</title><link>https://www.perrotta.dev/2024/01/start-an-http-server-asap/</link><pubDate>Wed, 17 Jan 2024 16:41:41 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/start-an-http-server-asap/</guid><description>&lt;p>Sometimes I need to start a local HTTP server for a quick one-off task, often
just to serve static content. It is not important which one it is, so long as I
can do it quickly.&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I need to start a local HTTP server for a quick one-off task, often
just to serve static content. It is not important which one it is, so long as I
can do it quickly.</p>
<h2 id="option-1-use-python">Option #1: use <code>python</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% python3 -m http.server
</span></span><span style="display:flex;"><span>Serving HTTP on :: port <span style="color:#ae81ff">8000</span> <span style="color:#f92672">(</span>http://<span style="color:#f92672">[</span>::<span style="color:#f92672">]</span>:8000/<span style="color:#f92672">)</span> ...
</span></span></code></pre></div><p>This is often the most universal and convenient option, as <code>python</code> is widely
available out-of-the-box.</p>
<h2 id="option-2-use-darkhttpd">Option #2: use <code>darkhttpd</code></h2>
<p><a href="https://unix4lyfe.org/darkhttpd/"><code>darkhttpd</code></a> is available <a href="https://repology.org/project/darkhttpd/versions">almost
everywhere</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% darkhttpd .
</span></span><span style="display:flex;"><span>darkhttpd/1.14, copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2003-2022 Emil Mikulic.
</span></span><span style="display:flex;"><span>listening on: http://0.0.0.0:8080/
</span></span></code></pre></div><p>Their own <code>README</code> states:</p>
<blockquote>
<p>When you need a web server in a hurry.</p>
</blockquote>
<p>This is the most convenient option when you are in control of a package
manager, as it is one installation command away from your system. In
particular, it&rsquo;s available in both homebrew and nixpkgs.</p>
<h2 id="option-3-use-nodejs">Option #3: use <code>nodejs</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% npx http-server -p <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>Starting up http-server, serving ./
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http-server version: 14.1.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http-server settings:
</span></span><span style="display:flex;"><span>CORS: disabled
</span></span><span style="display:flex;"><span>Cache: <span style="color:#ae81ff">3600</span> seconds
</span></span><span style="display:flex;"><span>Connection Timeout: <span style="color:#ae81ff">120</span> seconds
</span></span><span style="display:flex;"><span>Directory Listings: visible
</span></span><span style="display:flex;"><span>AutoIndex: visible
</span></span><span style="display:flex;"><span>Serve GZIP Files: false
</span></span><span style="display:flex;"><span>Serve Brotli Files: false
</span></span><span style="display:flex;"><span>Default File Extension: none
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Available on:
</span></span><span style="display:flex;"><span>  http://127.0.0.1:8000
</span></span><span style="display:flex;"><span>Hit CTRL-C to stop the server
</span></span></code></pre></div><p>If you&rsquo;re already within the node ecosystem, this is also just one installation
away. I would typically not recommend this setup though if you don&rsquo;t already
have <code>npm</code> installed on your system.</p>
<h2 id="option-4-use-busybox">Option #4: use <code>busybox</code></h2>
<p>This option seemed very attractive for use on Linux systems:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% busybox httpd -f -p <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><p>However in an up-to-date Alpine Linux system (3.20) it does not work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% busybox httpd -f -p <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>httpd: applet not found
</span></span></code></pre></div><p>Therefore I don&rsquo;t consider it universal enough.</p>
<p><strong>Reference</strong>: <a href="https://gist.github.com/willurd/5720255">https://gist.github.com/willurd/5720255</a></p>]]></content:encoded></item><item><title>Send emails straight to spam</title><link>https://www.perrotta.dev/2022/03/send-emails-straight-to-spam/</link><pubDate>Fri, 25 Mar 2022 23:26:37 -0300</pubDate><guid>https://www.perrotta.dev/2022/03/send-emails-straight-to-spam/</guid><description>Just tested straight to spam today:
Love emails but hate people? Don’t want someone 🤡 at your party 🥳 but have to invite them 🤢 cause your mom 💁‍♀️ made you? Trust Straight 2 Spam to send your v important email 📧 straight to their spam 🗑
Click the button below👇 to copy a nasty ❌ ooey ❌ gooey ❌ spam-keyword filled invisible message 🔤 for your email that you totally sent on time ⏰ but the 🐦 dodo-brain 🧠 won&amp;rsquo;t see it because they didn’t check their spam folder 📂 (Just make sure you&amp;rsquo;re not in the recipient&amp;rsquo;s address book 📇, or all bets are off 🙅‍♀️)</description><content:encoded><![CDATA[<p>Just tested <a href="https://straight2spam.xyz">straight to spam</a> today:</p>
<blockquote>
<p>Love emails but hate people? Don’t want someone 🤡 at your party 🥳 but have to invite them 🤢 cause your mom 💁‍♀️ made you? Trust Straight 2 Spam to send your v important email 📧 straight to their spam 🗑</p>
<p>Click the button below👇 to copy a nasty ❌ ooey ❌ gooey ❌ spam-keyword filled invisible message 🔤 for your email that you totally sent on time ⏰ but the 🐦 dodo-brain 🧠 won&rsquo;t see it because they didn’t check their spam folder 📂 (Just make sure you&rsquo;re not in the recipient&rsquo;s address book 📇, or all bets are off 🙅‍♀️)</p>
</blockquote>
<p>It works exactly as advertised:</p>
<ul>
<li>Send an email to someone whose address book contains your email address, and it will <em>not</em> go to spam.</li>
<li>Send an email to someone whose address book does <em>not</em> contain your email address, and it goes straight to the spam folder.</li>
</ul>
<p>The email body is indeed invisible, at least in the Gmail web UI. Even <code>Ctrl+A</code> won&rsquo;t reveal it. If you click &ldquo;Show original&rdquo; to inspect the full message body and headers though, you&rsquo;ll see some junk like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello#1 $$$ 100% Act now Action Additional income Affordable All
</span></span><span style="display:flex;"><span>natural/new Amazed Apply now Avoid Be amazed/your own Bitcoin boss
</span></span><span style="display:flex;"><span>Beneficiary Billing Billion Bonus Boss Buy Call!!!!!! free/now Cancel
</span></span><span style="display:flex;"><span>Crypto Cash Casino
</span></span></code></pre></div><p>There&rsquo;s actually more, but I don&rsquo;t want to make this post too spammy for search engines.</p>
<p>The aforementioned text is wrapped in this HTML:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">dir</span><span style="color:#f92672">=</span><span style="color:#e6db74">3D&#34;ltr&#34;</span>&gt;Hello&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">3D&#34;color:rgb(255,255,255);font-family:&amp;quot;Comic</span> <span style="color:#a6e22e">Sans</span> <span style="color:#a6e22e">MS</span><span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#a6e22e">quot</span><span style="color:#960050;background-color:#1e0010">;;</span><span style="color:#a6e22e">font-size:1px</span><span style="color:#960050;background-color:#1e0010">&#34;</span>&gt;
</span></span></code></pre></div><p>Which explains why it is &lsquo;invisible&rsquo; (note the white color).</p>
]]></content:encoded></item><item><title>HTTPS Everywhere: So long and thanks for all the fish</title><link>https://www.perrotta.dev/2022/03/https-everywhere-so-long-and-thanks-for-all-the-fish/</link><pubDate>Tue, 22 Mar 2022 01:09:13 -0300</pubDate><guid>https://www.perrotta.dev/2022/03/https-everywhere-so-long-and-thanks-for-all-the-fish/</guid><description>&lt;p>EFF&amp;rsquo;s&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;a href="https://chrome.google.com/webstore/detail/https-everywhere/gcbommkclmclpchllfjekcdonpmejbdp">HTTPS Everywhere&lt;/a> is a browser extension available for all major browsers that automatically upgrades HTTP to HTTPS on supported websites.&lt;/p></description><content:encoded><![CDATA[<p>EFF&rsquo;s<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <a href="https://chrome.google.com/webstore/detail/https-everywhere/gcbommkclmclpchllfjekcdonpmejbdp">HTTPS Everywhere</a> is a browser extension available for all major browsers that automatically upgrades HTTP to HTTPS on supported websites.</p>
<p>Other than adblocking, it&rsquo;s one of the first extensions I add to a fresh browser installation.</p>
<p>Today I learned it is apparently not needed anymore. Both Google Chrome and Firefox have settings these days to perform exactly the same functionality of the extension.</p>
<p>In Google Chrome do: <a href="chrome://settings">chrome://settings</a> -&gt; Security and Privacy -&gt; Advanced -&gt; Toggle &lsquo;Always use secure connections&rsquo; on.</p>
<p>In Firefox the option is located on Settings -&gt; Privacy &amp; Security -&gt; HTTPs only mode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>EFF is a big proponent and advocate for a secure web, being one of the core responsible actors for <a href="http://certbot.eff.org">certbot</a> and <a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Bypass news article paywalls</title><link>https://www.perrotta.dev/2022/03/bypass-news-article-paywalls/</link><pubDate>Sun, 06 Mar 2022 21:49:53 -0500</pubDate><guid>https://www.perrotta.dev/2022/03/bypass-news-article-paywalls/</guid><description>&lt;p>I try to avoid websites with paywalls. If I really like the website and it
deserves my attention, I will throw in a monthly subscription for it.
High-quality content deserves to be supported. The fragmentation isn&amp;rsquo;t always
great and it&amp;rsquo;s often hard to keep track of multiple distinct news sources and
portals / subscriptions, but that&amp;rsquo;s a topic for another day.&lt;/p>
&lt;p>Sometimes people will link to news articles or websites with paywalls from
various sources (blogs, social media, other news articles, etc). I&amp;rsquo;d rather
know in advance that those articles are paywalled, but that&amp;rsquo;s not always
possible. After clicking them, curiosity already killed the cat.&lt;/p>
&lt;p>There are several ways to access those as one-offs. I will add a disclaimer
that I do not publicly endorse any of those methods, they are just mentioned
for educational purposes.&lt;/p></description><content:encoded><![CDATA[<p>I try to avoid websites with paywalls. If I really like the website and it
deserves my attention, I will throw in a monthly subscription for it.
High-quality content deserves to be supported. The fragmentation isn&rsquo;t always
great and it&rsquo;s often hard to keep track of multiple distinct news sources and
portals / subscriptions, but that&rsquo;s a topic for another day.</p>
<p>Sometimes people will link to news articles or websites with paywalls from
various sources (blogs, social media, other news articles, etc). I&rsquo;d rather
know in advance that those articles are paywalled, but that&rsquo;s not always
possible. After clicking them, curiosity already killed the cat.</p>
<p>There are several ways to access those as one-offs. I will add a disclaimer
that I do not publicly endorse any of those methods, they are just mentioned
for educational purposes.</p>
<p>The most typical way is to open an incognito tab or window in your browser with
the desired URL. This works because many paywalls are often implemented with
browser cookies.</p>
<p>The second most typical way is to use a VPN to appear that you&rsquo;re accessing the
URL from another IP address. This works for websites that add rolling article
limits per IP address.</p>
<p>Occasionally some large news websites will implement paywalls poorly:</p>
<blockquote>
<p>The idea is pretty simple, news sites want Google to index their content so
it shows up in search results. So they don&rsquo;t show a paywall to the Google
crawler. We benefit from this because the Google crawler will cache a copy of
the site every time it crawls it.</p>
<p>All we do is show you that cached, unpaywalled version of the page.</p>
</blockquote>
<p><a href="https://12ft.io/">12ft</a> automatically uses this mechanism to display cached
versions of news articles. If you&rsquo;re in <code>&lt;url&gt;</code>, just prepend <code>12ft.io</code> to it:
<code>https://12ft.io/&lt;url&gt;</code>.</p>
<p>Alternatively, <a href="https://outline.com/">Outline</a> used to be another
website/service to do so, but apparently it is
<a href="https://news.ycombinator.com/item?id=30564665">unavailable</a> since last week.
Outline displays a <em>pretty printed</em> version of text from an article, looking a
lot like a markdown-rendered version of a web page.</p>
<p>Someone on Hacker News suggested <a href="https://txtify.it/">txtify.it</a> as a
replacement to it. Indeed, Txtify is very similar to Outline, however it
displays plain text instead (i.e. no formatting at all).</p>
<p>Apparently some people even go further by installing <a href="https://github.com/iamadamdev/bypass-paywalls-chrome">browser
extensions</a> to do so.</p>
<p>Ultimately, whenever possible, prefer to access news sources from news portals
that aren&rsquo;t paywalled and/or that you are a subscriber of.</p>]]></content:encoded></item><item><title>HTTP: a few acronyms</title><link>https://www.perrotta.dev/2022/02/http-a-few-acronyms/</link><pubDate>Sun, 27 Feb 2022 21:48:03 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/http-a-few-acronyms/</guid><description>&lt;p>I keep forgetting these, so I wrote a small summary for my own reference.&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting these, so I wrote a small summary for my own reference.</p>
<h2 id="hsts">HSTS</h2>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">Wikipedia — HSTS</a>:</p>
<blockquote>
<p>HTTP Strict Transport Security (HSTS) is a policy mechanism that helps to
protect websites against man-in-the-middle attacks such as protocol downgrade
attacks and cookie hijacking. It allows web servers to declare that web
browsers (or other complying user agents) should automatically interact with
it using only HTTPS connections.</p>
</blockquote>
<p>In layman&rsquo;s terms: <em>Force HTTPS on a given domain</em>.</p>
<p><a href="https://hstspreload.org/">HSTS Preload List</a>:</p>
<blockquote>
<p>This form is used to submit domains for inclusion in Chrome&rsquo;s HTTP Strict
Transport Security (HSTS) preload list. This is a list of sites that are
hardcoded into Chrome as being HTTPS only.</p>
<p>Most major browsers (Chrome, Firefox, Opera, Safari, IE 11 and Edge) also
have HSTS preload lists based on the Chrome list. (See the HSTS compatibility
matrix.)</p>
</blockquote>
<p>If you add your website to that list, major browsers will honor it and only use
HTTPS for your domain.</p>
<p>Some <a href="https://en.wikipedia.org/wiki/Top-level_domain">TLDs</a> enforce HTTPS
through HSTS, some popular ones are <code>.app</code> and <code>.dev</code>.
<a href="https://serverfault.com/q/1067229/180092">Here</a> is a more comprehensive list.</p>
<p><code>HSTS</code> is fire-and-forget, you&rsquo;ll usually only need to worry about it once,
when configuring a SSL certificate (HTTPS) for your domain or subdomains.</p>
<h2 id="csp">CSP</h2>
<p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Wikipedia — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is a computer security standard introduced to
prevent cross-site scripting (XSS), clickjacking and other code injection
attacks resulting from execution of malicious content in the trusted web page
context.</p>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">MDN — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to
detect and mitigate certain types of attacks, including Cross-Site Scripting
(XSS) and data injection attacks. These attacks are used for everything from
data theft, to site defacement, to malware distribution.</p>
</blockquote>
<p>CSP can be configured in at least two distinct ways:</p>
<ol>
<li>Web server: return the <code>Content-Security-Policy</code> HTTP header:</li>
</ol>
<pre tabindex="0"><code>Content-Security-Policy: default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;
</code></pre><ol start="2">
<li>HTML <code>&lt;meta&gt;</code> tag:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&#34;</span>&gt;
</span></span></code></pre></div><p><code>CSP</code> is something to worry about at the application level. For example,
<a href="https://github.com/miniflux/v2/issues/748">miniflux</a> to fetch resources
(fonts) from another domain (Google Fonts).</p>
<h2 id="cors">CORS</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Wikipedia — CORS</a>:</p>
<blockquote>
<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted
resources on a web page to be requested from another domain outside the
domain from which the first resource was served.</p>
</blockquote>
<p>CORS can be configured via web server: return the <code>Access-Control-Allow-Origin</code> HTTP header:</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: *
Access-Control-Allow-Origin: http://example.com:8080
</code></pre><p><code>CORS</code> is something to worry about at the application level. For example,
<a href="https://keep.google.com/">https://keep.google.com/</a> ⟷ <a href="https://google.com/">https://google.com/</a> cookies.</p>
<h2 id="csrf">CSRF</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Wikipedia — CSRF</a>:</p>
<blockquote>
<p>Cross-site request forgery, also known as one-click attack or session riding
and abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of
malicious exploit of a website where unauthorized commands are submitted from
a user that the web application trusts.</p>
</blockquote>
<p><code>CSRF</code> is something to be aware of and to watch out for.
<a href="https://owasp.org/www-community/attacks/csrf">OWASP</a> has some additional
resources on it.</p>]]></content:encoded></item><item><title>What is my IP?</title><link>https://www.perrotta.dev/2022/02/what-is-my-ip/</link><pubDate>Sat, 26 Feb 2022 17:55:38 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/what-is-my-ip/</guid><description>&lt;p>This post contains a small handful of distinct services to query your machine
external IP address.&lt;/p></description><content:encoded><![CDATA[<p>This post contains a small handful of distinct services to query your machine
external IP address.</p>
<h2 id="googlehttpswwwgooglecomsearchqwhatismyip"><a href="https://www.google.com/search?q=what+is+my+ip">Google</a></h2>
<p>URL: <a href="https://www.google.com/search?q=what+is+my+ip">https://www.google.com/search?q=what+is+my+ip</a></p>
<p>As of this writing, this doesn&rsquo;t work on duckduckgo:
<a href="https://duckduckgo.com/?q=what+is+my+ip">https://duckduckgo.com/?q=what+is+my+ip</a>. I suppose this is related to their
philosophy of not tracking their users.</p>
<p>This is the easiest method when you have a web browser as you do not need to
memorize any URL.</p>
<h2 id="i-can-haz-iphttpsicanhazipcom"><a href="https://icanhazip.com/">I can haz ip</a></h2>
<p>URL: <a href="https://icanhazip.com/">https://icanhazip.com/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl icanhazip.com
</span></span><span style="display:flex;"><span>NNN.NNN.NNN.NNN
</span></span></code></pre></div><p>I love the simplicity of <em>I can haz ip</em>. It just returns your IP address in
plain text, nothing else. It also works from the web browser. You can find
details about it <a href="https://major.io/icanhazip-com-faq/">here</a>. <strong>TL;DR</strong>: It was
an <a href="https://github.com/major/icanhaz">open source</a> pet project of a single
person (<a href="https://major.io/">Major Hayden</a>), then it was eventually bought by
Cloudflare as it immensely grew.</p>
<p>It&rsquo;s also possible to query your IPv6 address <a href="https://apenwarr.ca/log/20170810">in case you have
one</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl -6 icanhazip.com
</span></span></code></pre></div><h2 id="ipinfohttpsipinfoio"><a href="https://ipinfo.io/">IPInfo</a></h2>
<p>URL: <a href="https://ipinfo.io/">https://ipinfo.io/</a></p>
<p>IPInfo returns structured data beyond just your IP address. There are several
similar services that do this, for example, <a href="https://www.whatismyip.com/">What is my
IP?</a> and <a href="https://ifconfig.co/">https://ifconfig.co/</a>, however IPInfo is the cleanest one I have
seen.</p>
<h2 id="pingeuhttpspingeu"><a href="https://ping.eu/">ping.eu</a></h2>
<p>URL: <a href="https://ping.eu/">https://ping.eu/</a></p>
<p>I&rsquo;ll also give an honourable mention to ping.eu as it contains a small handful
of utilities to check for things like Traceroute, DNS, whois, port check, etc.</p>
<h2 id="ifconfigiohttpsifconfigio"><a href="https://ifconfig.io/"><code>ifconfig.io</code></a></h2>
<p><strong>Update</strong> (2024-07-11): Add <code>ifconfig.io</code>.</p>
<p>URL: <a href="https://ifconfig.io/">https://ifconfig.io/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl ifconfig.io
</span></span></code></pre></div>]]></content:encoded></item><item><title>Website fonts: just use the system font stack</title><link>https://www.perrotta.dev/2022/02/website-fonts-just-use-the-system-font-stack/</link><pubDate>Sat, 26 Feb 2022 12:19:37 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/website-fonts-just-use-the-system-font-stack/</guid><description>&lt;p>When I created this blog, I pondered a lot about which typography to use. I
kept experimenting with several fonts available in &lt;a href="https://fonts.google.com/">Google
Fonts&lt;/a>, and settled on a few favorites for websites:&lt;/p></description><content:encoded><![CDATA[<p>When I created this blog, I pondered a lot about which typography to use. I
kept experimenting with several fonts available in <a href="https://fonts.google.com/">Google
Fonts</a>, and settled on a few favorites for websites:</p>
<ul>
<li>
<p>Header fonts (sans-serif): Inter, Fira Sans, Lato</p>
</li>
<li>
<p>Body fonts (serif): Crimson Pro, Vollkorn, Alegreya</p>
</li>
<li>
<p>Code fonts (mono): Fira Code, PT Mono, IBM Plex Mono</p>
</li>
</ul>
<p>Ultimately though, none of them mattered. I was motivated and
influenced by Kev Quirk&rsquo;s <a href="https://kevq.uk/how-local-fonts-can-save-the-environment/">Trying To Go Green With Local
Fonts</a>
and Steve&rsquo;s <a href="https://visitmy.website/2020/07/13/this-website-is-killing-the-planet/">This website is killing the
planet</a>,
which basically boils down to the same spirit of
<a href="https://motherfuckingwebsite.com/">https://motherfuckingwebsite.com/</a>: The web is too bloated
nowadays, most websites have a ton of unnecessary CSS and
JavaScript junk to fetch over and over again.</p>
<p>This is not a big deal if you have access to fast internet and
powerful computers, but that&rsquo;s not the case for many people in
the planet.</p>
<p>With the intent of not unnecessarily fetching fonts from the web, that&rsquo;s why my
current font stack just uses the existing fonts in your system, with a few
opinionated bits in case you have some of my favorite fonts already installed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Crimson Pro, Vollkorn, Alegreya, Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Noto Serif, Droid Serif, Times, Source Serif Pro, <span style="color:#66d9ef">serif</span>, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h1</span><span style="color:#f92672">,</span> <span style="color:#f92672">h2</span><span style="color:#f92672">,</span> <span style="color:#f92672">h3</span><span style="color:#f92672">,</span> <span style="color:#f92672">h4</span><span style="color:#f92672">,</span> <span style="color:#f92672">h5</span><span style="color:#f92672">,</span> <span style="color:#f92672">h6</span><span style="color:#f92672">,</span> <span style="color:#f92672">footer</span><span style="color:#f92672">,</span> <span style="color:#f92672">nav</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">toc</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">post-meta</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Inter, Fira Sans, Lato, system-ui, <span style="color:#f92672">-</span>apple-system, BlinkMacSystemFont, Avenir Next, Avenir, Segoe UI, Helvetica Neue, Helvetica, Ubuntu, Roboto, Noto, Cantarell, Arial, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">code</span><span style="color:#f92672">,</span> <span style="color:#f92672">pre</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Fira Code, PT Mono, IBM Plex Mono, Menlo, Consolas, Monaco, Liberation Mono, Ubuntu Mono, Lucida Console, <span style="color:#66d9ef">monospace</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The system font stack reference comes from <a href="https://systemfontstack.com/">https://systemfontstack.com/</a> and <a href="https://css-tricks.com/snippets/css/system-font-stack/">CSS Tricks</a>.</p>]]></content:encoded></item><item><title>Thoughts on Gemini</title><link>https://www.perrotta.dev/2022/02/thoughts-on-gemini/</link><pubDate>Tue, 08 Feb 2022 11:40:00 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/thoughts-on-gemini/</guid><description>&lt;p>From the &lt;a href="https://gemini.circumlunar.space">homepage&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Gemini is a new internet protocol which:&lt;/p>
&lt;ul>
&lt;li>Is heavier than gopher&lt;/li>
&lt;li>Is lighter than the web&lt;/li>
&lt;li>Will not replace either&lt;/li>
&lt;li>Strives for maximum power to weight ratio&lt;/li>
&lt;li>Takes user privacy very seriously&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s too abstract though. I prefer the way &lt;a href="https://kevq.uk/gemini-isnt-the-solution-to-the-broken-web/">Kev Quirk&lt;/a> puts it:&lt;/p>
&lt;blockquote>
&lt;p>To put that into human-digestible form; Gemini is basically a very light, text-only alternative to HTML.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p>From the <a href="https://gemini.circumlunar.space">homepage</a>:</p>
<blockquote>
<p>Gemini is a new internet protocol which:</p>
<ul>
<li>Is heavier than gopher</li>
<li>Is lighter than the web</li>
<li>Will not replace either</li>
<li>Strives for maximum power to weight ratio</li>
<li>Takes user privacy very seriously</li>
</ul>
</blockquote>
<p>That&rsquo;s too abstract though. I prefer the way <a href="https://kevq.uk/gemini-isnt-the-solution-to-the-broken-web/">Kev Quirk</a> puts it:</p>
<blockquote>
<p>To put that into human-digestible form; Gemini is basically a very light, text-only alternative to HTML.</p>
</blockquote>
<p>Gemini aims to replace &ldquo;lightweight HTML&rdquo;, but it already starts with a big barrier for entry and adoption: It&rsquo;s not obvious what it is by just reading its project homepage alone. This in my opinion comes off as elitist.</p>
<p>Furthermore, you need a custom piece of software in order to consume the so-called gemini <em>capsules</em> (a fancy name for what&rsquo;s the equivalent of a plain-text <a href="https://jamstack.org/generators/">SSG</a> website).</p>
<p>I tried out <a href="https://github.com/makeworld-the-better-one/amfora"><code>amfora</code></a> which is a popular CLI one<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Amfora is pretty decent and lightweight. The experience is very similar to a hybrid of using a CLI RSS reader like <a href="https://newsboat.org"><code>newsboat</code></a> to keep track of your favorite capsules, and a CLI Web browser like <code>elinks</code> or <code>w3m</code> to navigate them.</p>
<p>And that&rsquo;s part of the adoption problem: Why would you subject yourself to purposely using a text-only browser in the 2020s? It is a painful experience, and there&rsquo;s not any extra value compared to just using a minimalist RSS reader like <a href="https://miniflux.app">miniflux</a> to keep track of your favorite blogs / news portals via RSS.</p>
<p>Nowadays there are plenty of SSGs, for every programming language you can think of, even in plain shell scripting (POSIX <code>sh</code>). There&rsquo;s little reason to learn a new niche protocol given that it&rsquo;s relatively easy to publish simple blogs.</p>
<p>Conclusion: As Kev puts it:</p>
<blockquote>
<p>I’m not sure if you heard, but <a href="https://thewebisfucked.com">The Web Is F*cked</a> and techies everywhere are touting the Gemini protocol as its saviour. I disagree. A lot.</p>
</blockquote>
<p>I will end this article with a praise for Gemini, courtesy of <a href="https://drewdevault.com/2020/11/01/What-is-Gemini-anyway.html">Drew DeVault</a>. Drew argues that:</p>
<blockquote>
<p>My disdain for web browsers is well documented. Web browsers are extraordinarily complex, and any attempt to build a new one would be a Sisyphean task. Successfully completing that implementation, if even possible, would necessarily produce a Lovecraftian mess: unmaintainable, full of security vulnerabilities, with gigabytes in RAM use and hours in compile times. And given that all of the contemporary web browsers that implement a sufficiently useful subset of web standards are ass and getting assier, what should we do?</p>
</blockquote>
<p>Fine, but the beloved plain duo of HTML + CSS still works just fine. There&rsquo;s no need to create a new, difficult-to-use protocol to <em>force</em> people to keep things simple. Unless you just wanna have fun and treat it like a toy or learning project; then go for it. Nothing wrong with that.</p>
<p>My interest for Gemini ends as soon as this post is published. Q.E.D.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://repology.org/project/amfora/versions">Packaged</a> for every relevant platform out there nowadays.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Throwaway accounts for ephemeral use cases</title><link>https://www.perrotta.dev/2022/01/throwaway-accounts-for-ephemeral-use-cases/</link><pubDate>Wed, 26 Jan 2022 00:20:40 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/throwaway-accounts-for-ephemeral-use-cases/</guid><description>&lt;p>A brief list of disposable / throwaway account resources:&lt;/p></description><content:encoded><![CDATA[<p>A brief list of disposable / throwaway account resources:</p>
<h2 id="email-inbox">Email inbox</h2>
<ul>
<li><a href="https://dispostable.com/">https://dispostable.com/</a></li>
<li><a href="https://10minutemail.com/">https://10minutemail.com/</a></li>
<li><a href="https://yadim.dismail.de/">https://yadim.dismail.de/</a></li>
</ul>
<h2 id="nat--public-urls">NAT / public URLs</h2>
<ul>
<li><a href="https://ngrok.com/">https://ngrok.com/</a></li>
</ul>
<h2 id="pastebin">Pastebin</h2>
<ul>
<li><a href="https://paste.debian.net/">https://paste.debian.net/</a></li>
<li><a href="https://paste.dismail.de/">https://paste.dismail.de/</a></li>
<li><a href="https://paste.opensuse.org/">https://paste.opensuse.org/</a></li>
<li><a href="https://upaste.de/">https://upaste.de/</a> (produces short URLs, deleted after one hour)</li>
</ul>
<h2 id="sms">SMS</h2>
<ul>
<li><a href="https://smsreceivefree.com/">https://smsreceivefree.com/</a></li>
</ul>
<h2 id="appendix">Appendix</h2>
<ul>
<li><a href="https://blog.thenewoil.org/data-privacy-week-spotlight-backups-ngp6">The New Oil</a> has some good tips on disinformation for throwaway and/or ephemeral accounts.</li>
</ul>]]></content:encoded></item></channel></rss>