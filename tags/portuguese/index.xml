<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Portuguese on not just serendipity</title><link>https://www.perrotta.dev/tags/portuguese/</link><description>Recent content in Portuguese on not just serendipity</description><generator>Hugo -- 0.130.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 · RSS</copyright><lastBuildDate>Sun, 27 Feb 2022 22:47:09 -0500</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/portuguese/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux: US International keyboard layout</title><link>https://www.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p></description><content:encoded><![CDATA[<p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.</p>
<h2 id="intro">Intro</h2>
<p>There are basically two layouts:</p>
<ol>
<li>US (<em>&lsquo;vanilla&rsquo;</em>): type accents like <code>'^`~</code> and they will be emitted immediately</li>
<li>US International (INTL): accents are the so called <a href="https://en.wikipedia.org/wiki/Dead_key">&lsquo;dead keys&rsquo;</a>:</li>
</ol>
<blockquote>
<p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.</p>
</blockquote>
<p>We can switch between keyboard layouts with <code>setxkbmap</code>. It&rsquo;s also possible to
use <code>localectl</code> in systemd-based distros, but its syntax is harder to remember
so I won&rsquo;t even include it here.</p>
<h2 id="set-us-vanilla-keyboard-layout">Set US &lsquo;vanilla&rsquo; keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap us
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard should use to type in English.</p>
<h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap -layout us -variant intl
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> should use to type, for example, in Portuguese or in German.</p>
<h3 id="portuguese">Portuguese</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- á é í ó ú     :   &#39; + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- â ê î ô û     :   ^ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ã õ           :   ~ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- à             :   ` + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ç (cedilla)   :   Alt Gr + , (Option + c on macOS)
</span></span></code></pre></div><h3 id="german">German</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- ß (ss)  :   Alt Gr + s (Option + s on macOS)
</span></span><span style="display:flex;"><span>- ä ö ü   :   &#34; + &lt;vowel&gt;
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alt Gr is typically the Right Alt key.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Matroshka</title><link>https://www.perrotta.dev/2016/10/matroshka/</link><pubDate>Sun, 16 Oct 2016 15:49:01 -0200</pubDate><guid>https://www.perrotta.dev/2016/10/matroshka/</guid><description>&lt;p>Recentemente participei de uma
&lt;a href="https://ctf.tecland.com.br/Pwn2Win/game/scoreboard/">CTF&lt;/a> promovida pelo
&lt;a href="https://ctf-br.org/elt">ELT&lt;/a> (Epic Leet Team). Uma das &lt;em>challs&lt;/em> que consegui
resolver completamente foi a &lt;strong>matroshka&lt;/strong>, e aqui está um breve &lt;em>write-up&lt;/em>
sobre a mesma.&lt;/p>
&lt;p>Dado um arquivo &lt;code>matroshka.tar.gz&lt;/code>, precisávamos encontrar a &lt;em>flag&lt;/em>.&lt;/p></description><content:encoded><![CDATA[<p>Recentemente participei de uma
<a href="https://ctf.tecland.com.br/Pwn2Win/game/scoreboard/">CTF</a> promovida pelo
<a href="https://ctf-br.org/elt">ELT</a> (Epic Leet Team). Uma das <em>challs</em> que consegui
resolver completamente foi a <strong>matroshka</strong>, e aqui está um breve <em>write-up</em>
sobre a mesma.</p>
<p>Dado um arquivo <code>matroshka.tar.gz</code>, precisávamos encontrar a <em>flag</em>.</p>
<p>Não era difícil desconfiar do que esse arquivo / <em>chall</em> se tratava: matroshkas
são aquelas bonecas russas que se encaixam umas dentro das outras. Então&hellip;de
cara, logo já desconfiei: provavelmente existe um arquivo compactado dentro de
outro, dentro de outro, dentro de outro, e assim por diante&hellip;</p>
<p>Por experiência, não valeria a pena tentar descompactar tudo manualmente, pois
sabe-se lá quantos níveis de compactação esse negócio iria ter (provavelmente
mais do que 100).</p>
<p>De cara logo pensei em usar o <a href="https://brettcsmith.org/2007/dtrx/">dtrx</a>, que é
um excelente programa (não perco tempo e sempre rodo um <code>port install dtrx</code>)
para extrair arquivos sem ter que ficar se lembrando das sintaxes individuais de
cada programa. Nesse caso, não iria rolar: os arquivos eram renomeados de forma
a <em>trickear</em> o dtrx, que funciona através de heurísticas, uma delas é a
&rsquo;extensão&rsquo; do nome do arquivo. Por exemplo, vários arquivos (após
descompactados) eram renomeados na forma <code>*.elt</code>.</p>
<p>A segunda alternativa foi (<strong>serendipidade</strong>, não conhecia essa ferramenta
antes) tentar utilizar o <a href="http://www.nongnu.org/atool/">atool</a>. Por motivos
similares ao <code>dtrx</code>, não rolou.</p>
<p>Pois bem, então o jeito ia ser descompactar tudo na marra. Pensei em escrever um
programa que faria o seguinte:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>	unzip <span style="color:#f92672">&lt;</span>file<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>		tar xf <span style="color:#f92672">&lt;</span>file<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// ...e assim por diante
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Obviamente eu utilizaria os programas diretamente, então a coisa poderia ficar
um pouco mais simples, utilizando os return codes dos mesmos para detectar se
descompactaram o arquivo com sucesso. Por exemplo, <code>tar xf &lt;file&gt;</code> retorna <code>0</code>
se rodou corretamente, do contrário ele retorna algo diferente de zero. Isso se
mostrou válido para todos os programas de descompactação que utilizei, exceto o
lha, que insistia em retornar <code>0</code> de qualquer jeito, mesmo quando falhava.</p>
<p>Para automatizar essa tarefa, resolvi utilizar <code>python2</code>. <code>C/C++</code> provavelmente
também seriam bons candidatos, mas eu queria praticar o meu <code>python</code>.</p>
<p>Após algumas inspeções, notei que cada arquivo continha um e somente um arquivo
dentro dele, então a ideia base seria:</p>
<ul>
<li>mantenha uma lista com todos os arquivos conhecidos até então (no começo, só
haveria um);</li>
<li>descompacte esse arquivo;</li>
<li>detecte qual arquivo acabou de ser descompactado</li>
<li>continue fazendo isso até encontrar a <code>flag</code></li>
</ul>
<p>Meu código ficou assim:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TARGET_DIR <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;mat&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_kgb</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;kgb&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_gzip</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;gunzip&#34;</span>, <span style="color:#e6db74">&#34;-S&#34;</span>, <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">+</span> file<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;.&#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_tar</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;tar&#34;</span>, <span style="color:#e6db74">&#34;xvf&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_rar</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;unrar&#34;</span>, <span style="color:#e6db74">&#34;x&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_lha</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;lha&#34;</span>, <span style="color:#e6db74">&#34;e&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_zip</span>(file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;unzip&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_arj</span>(file):
</span></span><span style="display:flex;"><span>    subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;cp&#34;</span>, file, file <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.arj&#34;</span>])
</span></span><span style="display:flex;"><span>    err <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;arj&#34;</span>, <span style="color:#e6db74">&#34;x&#34;</span>, file])
</span></span><span style="display:flex;"><span>    subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;rm&#34;</span>, file <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.arj&#34;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> err
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">uncompress_7z</span>(file):
</span></span><span style="display:flex;"><span>    subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;7z&#34;</span>, <span style="color:#e6db74">&#34;x&#34;</span>, file])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">colorprint</span>(s):
</span></span><span style="display:flex;"><span>    print <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\033</span><span style="color:#e6db74">[93m&#39;</span> <span style="color:#f92672">+</span> repr(s) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\033</span><span style="color:#e6db74">[0m&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>os<span style="color:#f92672">.</span>chdir(TARGET_DIR)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    newbase <span style="color:#f92672">=</span> set(os<span style="color:#f92672">.</span>listdir(<span style="color:#e6db74">&#39;.&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    diff <span style="color:#f92672">=</span> newbase <span style="color:#f92672">-</span> base
</span></span><span style="display:flex;"><span>    colorprint(diff)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(diff) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;len(diff) &gt; 1&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> len(diff) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        print <span style="color:#e6db74">&#34;len(diff) == 0&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> file <span style="color:#f92672">in</span> diff:
</span></span><span style="display:flex;"><span>        err <span style="color:#f92672">=</span> uncompress_kgb(file)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            err <span style="color:#f92672">=</span> uncompress_gzip(file)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                err <span style="color:#f92672">=</span> uncompress_tar(file)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                    err <span style="color:#f92672">=</span> uncompress_rar(file)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                        err <span style="color:#f92672">=</span> uncompress_zip(file)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                            err <span style="color:#f92672">=</span> uncompress_arj(file)
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                                err <span style="color:#f92672">=</span> uncompress_7z(file)
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                                    err <span style="color:#f92672">=</span> uncompress_lha(file)
</span></span><span style="display:flex;"><span>                                    <span style="color:#66d9ef">if</span> err <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                                        print <span style="color:#e6db74">&#34;lha fail&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    base <span style="color:#f92672">=</span> newbase
</span></span></code></pre></div><p>Essa ideia funcionou bastante bem. A única coisa <em>overkill</em> foi que eu não
deletei arquivos anteriores; isso poderia ter simplificado significativamente o
problema (e os <em>sets</em> no python).</p>
<p>Ademais, uma das coisas chatas do <code>arj</code> é que ele só é capaz de extrair arquivos
que terminam em <code>*.arj</code>, então fui obrigado a renomear/copiar um arquivo antes
de tentar utilizá-lo para extrair seu conteúdo.</p>]]></content:encoded></item><item><title>Instalando o Gentoo a partir do Arch</title><link>https://www.perrotta.dev/2014/05/instalando-o-gentoo-a-partir-do-arch/</link><pubDate>Thu, 01 May 2014 02:20:00 +0000</pubDate><guid>https://www.perrotta.dev/2014/05/instalando-o-gentoo-a-partir-do-arch/</guid><description>&lt;p>&lt;strong>TL;DR&lt;/strong>: pequena TODO list sobre como instalar o Gentoo. Você vai passar 90% do seu tempo olhando para &lt;strong>texto&lt;/strong> dando scroll na tela (processo demorado…).&lt;/p></description><content:encoded><![CDATA[<p><strong>TL;DR</strong>: pequena TODO list sobre como instalar o Gentoo. Você vai passar 90% do seu tempo olhando para <strong>texto</strong> dando scroll na tela (processo demorado…).</p>
<p>Esse é o método mais tradicional possível (e que me interessa) que pude constatar. Adapte-o para as suas próprias necessidades:</p>
<ul>
<li>
<p>Boote em um ambiente com o Arch (na verdade, você pode fazer isso a partir de qualquer distro decente).</p>
</li>
<li>
<p>Crie uma partição <code>/</code>, do tipo ext4, para acomodar a instalação do Gentoo. De preferência, coloque um label decente lá. Sugestões de ferramentas para isso: <code>cfdisk</code> ou <code>gparted</code>.</p>
</li>
<li>
<p>Monte essa partição em <code>/mnt/gentoo</code>.</p>
</li>
<li>
<p>Continue a partir do <a href="http:www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part=1&amp;chap=4">handbook</a> oficial do Gentoo – nesse caso, para a arquitetura amd64. No entanto, <!-- raw HTML omitted -->atenção<!-- raw HTML omitted -->. Use <a href="https:wiki.gentoo.org/wiki/Installation_alternatives">esse</a> guia para perceber quais etapas de instalação e configuração são diferentes (em relação a se estivéssemos instalando pelo método oficial, a partir do live environment do gentoo), mais especificamente <!-- raw HTML omitted -->da parte 4 à parte 6<!-- raw HTML omitted -->.</p>
</li>
<li>
<p>Baixe o <code>PKGBUILD</code> <code>gentoo-mirrorselect</code> do AUR.</p>
</li>
<li>
<p>Use <code>mirrorselect -i -o</code> e então selecione interativamente os mirrors mais próximos da sua localização atual. Copie o valor da variável <code>GENTOO_MIRRORS</code> para o final do seu <code>/mnt/gentoo/etc/portage/make.conf</code>.</p>
</li>
<li>
<p>Copie o seu <code>/etc/resolv.conf</code> para <code>/mnt/gentoo/etc/resolv.conf</code>. Isso é <a href="https:bbs.archlinux.org/viewtopic.php?id=95865">importante</a> para ter conectividade dentro do ambiente de chroot.</p>
</li>
<li>
<p><code>CFLAGS</code> que recomendo para o <code>/etc/portake/make.conf</code> (<!-- raw HTML omitted -->helper<!-- raw HTML omitted -->):</p>
</li>
</ul>
<pre tabindex="0"><code>-march=native -O2 -pipe
</code></pre><ul>
<li>
<p>A partir daqui, nada especial, apenas continue seguindo o handbook do gentoo, até a parte do bootloader.</p>
</li>
<li>
<p>Chegando na parte do bootloader, optei por deixar o Arch gerenciá-lo. Nesse caso, basta rodar um típico <code>grub-mkconfig -o /boot/grub/grb.cfg</code> que o Gentoo deverá ser automaticamente detectado (supondo que o pacote <code>os-prober</code> esteja instalado).</p>
</li>
<li>
<p>Configure a rede no Gentoo. Isso é bastante específico, mas o procedimento é bem parecido com a configuração da rede no Arch. A única questão é que, ao dar emerge no <code>wpa_supplicant</code> (no caso de você utilizar Wi-fi), vai demorar bastante até todas as dependências serem instaladas (esse é o ponto principal que me afastou do Gentoo até hoje. Sem pacotes binários, ter que compilar tudo localmente…ao menos, se no final a otimização do sistema for maior, poderia ter valido mais a pena.)</p>
</li>
<li>
<p>Teste o Gentoo durante uma semana e diga o que você achou dele 😉</p>
</li>
<li>
<p>Decida se você gosta mais do Gentoo ou do Arch. Isso vale tanto para o sistema, tanto para a comunidade. Não tenho ideia de como seja a comunidade do Gentoo (a do Arch eu já tinha uma boa noção de como era mesmo antes de ter o sistema instalado).</p>
</li>
</ul>
<p>Valeu pessoal. Como sou 100% newbie no Gentoo, apreciarei quaisquer dicas! (Enquanto as dicas não aparecem, Wiki Pages e Forums Threads me esperam). Sabe, é bom, de vez em quando, ser newbie em alguma coisa. Claro que ser expert / muito bom / hacker em algumas aplicações é ótimo, mas eu acredito na importância de possuir uma boa base de conhecimento em geral (não necessariamente apenas para fins acadêmicos ou financeiros, mas também para satisfazer a mente: desafios são importantes!).</p>
<p>Ah, mais dois comentários:</p>
<ul>
<li>
<p>Terminando de escrever esse post e de editá-lo, a compilação dos (130) pacotes que o <code>wpa_supplicant</code> puxou não chegou nem na metade… (eu teria instalado uns três ou quatro Archs automatizados nesse tempo – tá bom, não vale comparar pacotes binários com código-fonte, eu sei)</p>
</li>
<li>
<p>Esse é o meu terceiro ou quarto post utilizando o <code>org2blog</code> (do emacs). Já ficou bastante claro para mim que vou passar a usá-lo de maneira fixa. O único problema é que eu ainda não sei a sintaxe de formatação dele direito, é muita informação. Não é nem que não seja intuitiva, mas já tem LaTeX, BBCode, Markdown, aí eu tenho que aprender mais uma markup language. Mas, provavelmente vou me submeter a isso, o <strong>orgmode</strong> é sensacional para <em>management</em> em geral.</p>
</li>
</ul>]]></content:encoded></item><item><title>Recovery típico via USB</title><link>https://www.perrotta.dev/2014/04/recovery-t%C3%ADpico-via-usb/</link><pubDate>Fri, 18 Apr 2014 16:38:36 +0000</pubDate><guid>https://www.perrotta.dev/2014/04/recovery-t%C3%ADpico-via-usb/</guid><description>Meu computador não boota! E agora? Possíveis sintomas: tela preta congelada, tela de splash congelada, systemd travado, upstart travado, corrupção (fsck não ficou satisfeito), bootloader (grub, syslinux, EFI) mal configurado (ou não configurado) Obter uma distro de Linux e gravá-la num USB Flash Drive (pendrive). Meu gosto pessoal: System rescue cd, Parted magic, Slitaz ou Arch Linux. Bootar a distro e imediatamente abrir um console / emulador de terminal. Com interface gráfica ou não, a gosto.</description><content:encoded><![CDATA[<ol>
<li>Meu computador não boota! E agora? Possíveis sintomas: tela preta congelada, tela de splash congelada, <code>systemd</code> travado, <code>upstart</code> travado, corrupção (<code>fsck</code> não ficou satisfeito), bootloader (grub, syslinux, EFI) mal configurado (ou não configurado)</li>
<li>Obter uma distro de Linux e gravá-la num USB Flash Drive (pendrive). Meu gosto pessoal: System rescue cd, Parted magic, Slitaz ou Arch Linux.</li>
<li>Bootar a distro e imediatamente abrir um console / emulador de terminal. Com interface gráfica ou não, a gosto.</li>
<li><code>fdisk -l</code> para detectar os discos do computador. Detectar o disco cujo sistema está com problema. Geralmente o que contém a partição <code>/boot</code> ou <code>/</code>. Identificar as partições também é usualmente importante.</li>
<li>Se você precisar formatar alguma partição, use <code>cfdisk</code> ou <code>parted</code>. Exemplo: <code>cfdisk /dev/sda1</code>.</li>
<li>Se você precisar (re)criar algum <em>filesystem</em>, use <code>mkfs</code> (por exemplo, <code>mkfs.ext4 -L &quot;archroot&quot; /dev/sda1</code>).</li>
<li>Para (re)montar o seu sistema de arquivos: (por exemplo) <code>mount /dev/sda1 /mnt</code>.</li>
<li><code>chroot</code> no sistema que você acabou de montar: <code>chroot /mnt</code>.</li>
<li>Para recuperar (na verdade, gerar novamente) o arquivo de configuração do grub <strong>dentro do chroot</strong>: <code>grub-mkconfig -o /boot/grub/grub.cfg</code>.</li>
<li>Para reinstalar o grub (<strong>fora do chroot</strong>!), use <code>grub-install</code>.</li>
<li>Explorar o diretório <code>/etc/systemd/system</code>.</li>
</ol>
<p>Usualmente um desses passos é um caminho para resolver o problema. No final das contas, as coisas são bastante específicas, dependem do contexto.</p>
]]></content:encoded></item><item><title>Testando uma ISO no Linux sem o VirtualBox</title><link>https://www.perrotta.dev/2014/01/testando-uma-iso-no-linux-sem-o-virtualbox/</link><pubDate>Tue, 07 Jan 2014 16:22:01 +0000</pubDate><guid>https://www.perrotta.dev/2014/01/testando-uma-iso-no-linux-sem-o-virtualbox/</guid><description>Não imagino que seja incomum o seguinte cenário:
News: uma nova versão da distro Debisuse está disponível. Usuário: vou baixar a ISO, criar uma máquina virtual no VirtualBox (ou no VMWare, vai que), Bootar a ISO a partir dela. Isso tudo é muito mais prático do que gravar a ISO num Flash (Pen) Drive e então testá-la com um novo boot. No entanto, podemos ser mais práticos ainda se utilizarmos, para isso, um único comando, com o qemu!</description><content:encoded><![CDATA[<p>Não imagino que seja incomum o seguinte cenário:</p>
<ul>
<li>News: uma nova versão da distro <em>Debisuse</em> está disponível.</li>
<li>Usuário: vou baixar a ISO,</li>
<li>criar uma máquina virtual no <em>VirtualBox</em> (ou no <em>VMWare</em>, vai que),</li>
<li>Bootar a ISO a partir dela.</li>
</ul>
<p>Isso tudo é muito mais prático do que gravar a ISO num Flash (Pen) Drive e então testá-la com um novo <em>boot</em>. No entanto, podemos ser mais práticos ainda se utilizarmos, para isso, <strong>um único comando</strong>, com o <code>qemu</code>! O comando típico é:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>qemu-system-x86_64 --enable-kvm -m 512M -cdrom ~/Downloads/debisuse-latest.iso
</span></span></code></pre></div><p>Se sua arquitetura for de 32 bits, você vai querer <em>qemu-system-i386</em>. O parâmetro <em>m</em> regula a quantidade de memória a ser alocada para a máquina virtual.</p>
<p>Para utilizar o QEMU, você vai precisar encontrar o pacote adequado na sua distro.</p>
<ul>
<li>No Debian/Ubuntu e openSUSE: <code>qemu</code> e <code>kvm</code> (não testei, mas tudo indica que são esses)</li>
<li>No Arch: <code>qemu</code> (veja https://wiki.archlinux.org/index.php/Kvm e https://wiki.archlinux.org/index.php/QEMU)</li>
</ul>
<p>OBS.: O <em>KVM</em> é para deixar a execução ainda mais rápida. Mas ele não é obrigatório, OK? Para poder usá-lo existe uma série de peculiaridades, tais como habilitar as opções de virtualização na sua <em>BIOS</em> (isso é mais comum em laptops) e assegurar-se de que o módulo adequado do kernel foi carregado (geralmente <code>kvm\_intel</code> ou <code>kvm\_amd</code>). Você pode conferir isso com o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>lsmod | grep kvm
</span></span></code></pre></div><p>Se ver alguma saída, existem boas chances de o módulo correto do <em>KVM</em> já ter sido carregado pelo seu kernel. Para fins de comparação, essa é a minha saída:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kvm_intel <span style="color:#ae81ff">131191</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>kvm <span style="color:#ae81ff">388773</span> <span style="color:#ae81ff">1</span> kvm_intel
</span></span></code></pre></div><p><em>Happy hacking!</em></p>
]]></content:encoded></item></channel></rss>