<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dev on not just serendipity</title><link>https://www.perrotta.dev/tags/dev/</link><description>Recent content in Dev on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright Â© 2021 - 2024 Thiago Perrotta Â· CC BY-NC-SA 4.0 Â· RSS Â· Made with â™¥ in ðŸ‡¨ðŸ‡¦</copyright><lastBuildDate>Mon, 16 Dec 2024 10:14:11 -0300</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes: debugging services</title><link>https://www.perrotta.dev/2024/12/kubernetes-debugging-services/</link><pubDate>Mon, 16 Dec 2024 10:14:11 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/kubernetes-debugging-services/</guid><description>&lt;p>I am deploying a new helm chart to our staging environments, and needed a way to
ensure its dependencies in &lt;code>values.yaml&lt;/code> are properly configured.&lt;/p>
&lt;p>From the official kubernetes
&lt;a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/">documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>An issue that comes up rather frequently for new installations of Kubernetes
is that a Service is not working properly. You&amp;rsquo;ve run your Pods through a
Deployment (or other workload controller) and created a Service, but you get
no response when you try to access it. This document will hopefully help you
to figure out what&amp;rsquo;s going wrong.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p>I am deploying a new helm chart to our staging environments, and needed a way to
ensure its dependencies in <code>values.yaml</code> are properly configured.</p>
<p>From the official kubernetes
<a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/">documentation</a>:</p>
<blockquote>
<p>An issue that comes up rather frequently for new installations of Kubernetes
is that a Service is not working properly. You&rsquo;ve run your Pods through a
Deployment (or other workload controller) and created a Service, but you get
no response when you try to access it. This document will hopefully help you
to figure out what&rsquo;s going wrong.</p>
</blockquote>
<h2 id="run-commands-in-a-brand-new-pod">Run commands in a brand new pod</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% kubectl run -it --rm --restart<span style="color:#f92672">=</span>Never busybox --image<span style="color:#f92672">=</span>gcr.io/google-containers/busybox sh
</span></span></code></pre></div><p>&hellip;quite verbose, but it works reliably, spawning a basic pod with
<a href="https://www.busybox.net/">busybox</a>.</p>
<p>I prefer to have a package manager at my fingertips, hence <code>alpine</code> is arguably
a better choice:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% kubectl run -it --rm --restart<span style="color:#f92672">=</span>Never busybox --image<span style="color:#f92672">=</span>alpine ash
</span></span></code></pre></div><p>You don&rsquo;t need to remember that alpine uses <code>ash</code> by default, <code>sh</code> works as
well. In fact:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>/ <span style="color:#75715e"># ls -al /bin | grep sh</span>
</span></span><span style="display:flex;"><span>lrwxrwxrwx    <span style="color:#ae81ff">1</span> root     root            <span style="color:#ae81ff">12</span> Dec  <span style="color:#ae81ff">5</span> 12:17 ash -&gt; /bin/busybox
</span></span><span style="display:flex;"><span>lrwxrwxrwx    <span style="color:#ae81ff">1</span> root     root            <span style="color:#ae81ff">12</span> Dec  <span style="color:#ae81ff">5</span> 12:17 fdflush -&gt; /bin/busybox
</span></span><span style="display:flex;"><span>lrwxrwxrwx    <span style="color:#ae81ff">1</span> root     root            <span style="color:#ae81ff">12</span> Dec  <span style="color:#ae81ff">5</span> 12:17 sh -&gt; /bin/busybox
</span></span></code></pre></div><p>Then I could do, for example, <code>apk update</code> + <code>apk add mtr nmap</code>.</p>
<p>Alpine is marvellous for this because <code>apk</code> is very lightweight (and, hence,
fast!) and the available packages from upstream are quite comprehensive.</p>
<h2 id="run-commands-in-an-already-existing-pod">Run commands in an already existing pod</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% kubectl exec &lt;POD-NAME&gt; -c &lt;CONTAINER-NAME&gt; -- &lt;COMMAND&gt;
</span></span></code></pre></div><p>&hellip;however you cannot choose a custom image this way. You&rsquo;re stuck with whatever
the pod is running.</p>
<p>The way around this is with the use of ephemeral debug containers. Newer
versions of kubernetes have the <code>kubectl debug</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% kubectl debug -it &lt;POD-NAME&gt; --image<span style="color:#f92672">=</span>alpine <span style="color:#f92672">[</span>--target<span style="color:#f92672">=</span>&lt;POD-NAME&gt;<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Happy debugging!</p>]]></content:encoded></item><item><title>â˜… Just</title><link>https://www.perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://github.com/casey/just">Just</a> is a command runner, a modern replacement
for GNU Make.</p>
<p>It is written in Rust, has sensible defaults, and lots of syntactic sugar.
A good analogy is <code>fish</code> versus <code>bash</code> when comparing <code>just</code> to <code>make</code>.</p>
<p>It&rsquo;s very easy to learn from its
<a href="https://github.com/casey/just?tab=readme-ov-file">README.md</a> alone as it&rsquo;s
quite comprehensive. There&rsquo;s also a <a href="https://just.systems/man/en/">gitbook</a>.</p>
<p><a href="https://til.simonwillison.net/django/just-with-django">Simon Willison</a> prompted
me to try it out.</p>
<p>As an exercise I decided to convert the <code>Makefile</code> used to manage this blog into
a <code>Justfile</code>.</p>
<p>The original <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-makefile" data-lang="makefile"><span style="display:flex;"><span><span style="color:#75715e"># Sitemap URL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>SITEMAP <span style="color:#f92672">=</span> https://www.perrotta.dev/sitemap.xml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Hugo port
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>PORT <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1313</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Abort if hugo is not installed.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">ifeq</span> <span style="color:#960050;background-color:#1e0010">(,</span> <span style="color:#66d9ef">$(</span>shell which hugo<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">$(</span>error &#34;No hugo in <span style="color:#66d9ef">$$</span>PATH, install it first&#34;<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">endif</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	hugo server --bind<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.0.0.0&#34;</span> --buildDrafts --port <span style="color:#66d9ef">$(</span>PORT<span style="color:#66d9ef">)</span> --watch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	hugo --environment production --gc --minify
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>RM<span style="color:#66d9ef">)</span> -r public/ resources/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ping</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Ping Google about changes in the sitemap</span>
</span></span><span style="display:flex;"><span>	curl -sS -o /dev/null <span style="color:#e6db74">&#34;https://www.google.com/ping?sitemap=</span><span style="color:#66d9ef">$(</span>SITEMAP<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Ping Bing (DuckDuckGo, etc) about changes in the sitemap</span>
</span></span><span style="display:flex;"><span>	curl -sS -o /dev/null <span style="color:#e6db74">&#34;https://www.bing.com/ping?sitemap=</span><span style="color:#66d9ef">$(</span>SITEMAP<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all build clean ping
</span></span></code></pre></div><p>Initially I asked ChatGPT to convert it to a <code>Justfile</code> but it was a disaster,
even after a couple of iterations. Then I did it myself<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The <code>Justfile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-justfile" data-lang="justfile"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">set</span> <span style="color:#960050;background-color:#1e0010">dotenv-load</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">watch</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	hugo server --buildDrafts --port <span style="color:#e6db74">${</span>PORT<span style="color:#66d9ef">:-</span>1313<span style="color:#e6db74">}</span> --watch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	hugo --environment production --gc --minify
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a new post. Usage: `just new &#34;advent of code day 8&#34;`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">new post</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	hugo new content/posts/<span style="color:#e6db74">`</span>date <span style="color:#e6db74">&#34;+%Y-%m-%d&#34;</span><span style="color:#e6db74">`</span>-<span style="color:#f92672">{{</span> kebabcase<span style="color:#f92672">(</span>post<span style="color:#f92672">)</span> <span style="color:#f92672">}}</span>.md
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	rm -rf public/ resources/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ping Google and Bing about changes in the sitemap
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">ping sitemap=&#34;https</span><span style="color:#f92672">:</span>//www.perrotta.dev/sitemap.xml&#34;:
</span></span><span style="display:flex;"><span>	curl -sS -o /dev/null <span style="color:#e6db74">&#34;https://www.google.com/ping?sitemap={{ sitemap }}&#34;</span>
</span></span><span style="display:flex;"><span>	curl -sS -o /dev/null <span style="color:#e6db74">&#34;https://www.bing.com/ping?sitemap={{ sitemap }}&#34;</span>
</span></span></code></pre></div><p>The main differences:</p>
<ul>
<li>Environment variables: use <code>{{ foo }}</code> instead of <code>$(FOO)</code></li>
<li>Exception: environment variables loaded from <code>.env</code> (via <code>set dotenv-load</code>)
use <code>$FOO</code> or <code>${FOO}</code> instead, like POSIX shell variables</li>
<li>Use <code>rm -rf</code> instead of <code>$(RM) -r</code></li>
<li>Rules accept parameters. Look at <code>new post</code> as an example. Example usage:
<code>just new &quot;advent of code day 8&quot;</code></li>
<li>Run shell commands within rules with backticks. <code>$(cmd)</code> does not work.</li>
<li>Some handy out-of-the-box functions such as <code>kebabcase()</code>. No need to
implement this kind of string manipulation in plain shell script!</li>
<li>Documentation comments above rules are recognized. They are displayed as help
/ usage text when running <code>just -l</code>. No need for hacky <a href="https://www.perrotta.dev/2024/08/self-documented-makefiles/">self-documented
<code>Makefile</code></a> setups!</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% just -l
</span></span><span style="display:flex;"><span>Available recipes:
</span></span><span style="display:flex;"><span>    build
</span></span><span style="display:flex;"><span>    clean
</span></span><span style="display:flex;"><span>    new post <span style="color:#75715e"># Create a new post. Usage: `just new &#34;advent of code day 8&#34;`</span>
</span></span><span style="display:flex;"><span>    ping sitemap<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.perrotta.dev/sitemap.xml&#34;</span> <span style="color:#75715e"># Ping Google and Bing about changes in the sitemap</span>
</span></span><span style="display:flex;"><span>    watch
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>With a bit of LLM prompting in lieu of Google or Stack Overflow searches.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Advent of Code: Day 7</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-7/</link><pubDate>Thu, 12 Dec 2024 23:12:31 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-7/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/7">Day #7&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/7">Day #7</a> puzzle.</p>
<p>Part one: dynamic programming!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calibrate_one</span>(test_value, operands):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_calibrate</span>(acc, index):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">==</span> test_value <span style="color:#f92672">and</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">&gt;</span> test_value <span style="color:#f92672">or</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> dp_calibrate(acc <span style="color:#f92672">+</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(acc <span style="color:#f92672">*</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dp_calibrate(operands[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>I learned this style from <a href="https://neetcode.io/">NeetCode</a>. An inner function to
drive the memoization alongside <code>lru_cache</code>. Beautiful!</p>
<p>In my initial solution I passed the whole operands tuple as the second argument.
Later on I changed it to pass the current index in the tuple, which is simpler.</p>
<p>Part two is a natural extension of part one, with an extra operator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calibrate_two</span>(test_value, operands):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_calibrate</span>(acc, index):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> acc <span style="color:#f92672">==</span> test_value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">&gt;</span> test_value:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> dp_calibrate(acc <span style="color:#f92672">+</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(acc <span style="color:#f92672">*</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(int(str(acc) <span style="color:#f92672">+</span> str(operands[index])), index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dp_calibrate(operands[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> lru_cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calibrate_one</span>(test_value, operands):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_calibrate</span>(acc, index):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">==</span> test_value <span style="color:#f92672">and</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">&gt;</span> test_value <span style="color:#f92672">or</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> dp_calibrate(acc <span style="color:#f92672">+</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(acc <span style="color:#f92672">*</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dp_calibrate(operands[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calibrate_two</span>(test_value, operands):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_calibrate</span>(acc, index):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> index <span style="color:#f92672">==</span> len(operands):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> acc <span style="color:#f92672">==</span> test_value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> acc <span style="color:#f92672">&gt;</span> test_value:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> dp_calibrate(acc <span style="color:#f92672">+</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(acc <span style="color:#f92672">*</span> operands[index], index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">or</span> dp_calibrate(int(str(acc) <span style="color:#f92672">+</span> str(operands[index])), index <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dp_calibrate(operands[<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    total_one <span style="color:#f92672">=</span> total_two <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        test_value, operands <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;:&#39;</span>)
</span></span><span style="display:flex;"><span>        test_value <span style="color:#f92672">=</span> int(test_value)
</span></span><span style="display:flex;"><span>        operands <span style="color:#f92672">=</span> [int(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> operands<span style="color:#f92672">.</span>split()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> calibrate_one(test_value, operands):
</span></span><span style="display:flex;"><span>            total_one <span style="color:#f92672">+=</span> test_value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> calibrate_two(test_value, operands):
</span></span><span style="display:flex;"><span>            total_two <span style="color:#f92672">+=</span> test_value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(total_one)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(total_two)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div>]]></content:encoded></item><item><title>Advent of Code: discussion group</title><link>https://www.perrotta.dev/2024/12/advent-of-code-discussion-group/</link><pubDate>Thu, 12 Dec 2024 19:30:53 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-discussion-group/</guid><description>Assuming you are following this year&amp;rsquo;s advent of code, you are welcome to join our Telegram discussion group here1. It is a supergroup, one of its channels is #adventofcode.
It&amp;rsquo;s a moderated group, and this invitation link will expire within 2 weeks of the time of this post.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description><content:encoded><![CDATA[<p>Assuming you are following this year&rsquo;s advent of code, you are welcome to join
our Telegram discussion group <a href="https://t.me/+mtPcW45EuFBjNGMx">here</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It is
a supergroup, one of its channels is <code>#adventofcode</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It&rsquo;s a moderated group, and this invitation link will expire within 2
weeks of the time of this post.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Advent of Code: Day 11</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-11/</link><pubDate>Thu, 12 Dec 2024 19:15:35 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-11/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/11">Day #11&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/11">Day #11</a> puzzle.</p>
<p>Part one can be done with a simulation.</p>
<p>It is very delightful to do it in python: lists are quite flexible, and
converting from integers to strings and vice-versa is seamless. Counting the
number of digits of <code>x</code> is just a matter of <code>len(str(x))</code>. In C++ it&rsquo;s a bit
kludgier with <code>std::string(x).size()</code> and <code>std::stoi(s)</code>, but then you need to
remember which header to import<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I thought of using <code>reduce</code> to do <code>blink(blink(stone))...</code> and so on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(len(reduce(<span style="color:#66d9ef">lambda</span> stone: blink(stone), range(<span style="color:#ae81ff">25</span>), stones)))
</span></span></code></pre></div><p>&hellip;nonetheless it&rsquo;s more readable to simply use a plain <code>for-range</code> loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">25</span>):
</span></span><span style="display:flex;"><span>    stones <span style="color:#f92672">=</span> blink(stones)
</span></span><span style="display:flex;"><span>print(len(stones))
</span></span></code></pre></div><p>The secret sauce is in <code>blink</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">blink</span>(stones):
</span></span><span style="display:flex;"><span>    stones_next <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> stones:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">=</span> str(stone)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> stone <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> len(s) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> len(s) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(int(s[:index]))
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(int(s[index:]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(stone <span style="color:#f92672">*</span> <span style="color:#ae81ff">2024</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stones_next
</span></span></code></pre></div><p>For part two we need to be cleverer. In principle the same approach would work,
however it takes too long to process due to its exponential nature. In my laptop
I can get up to the 42nd <code>blink</code> iteration without losing my patience to wait
even longer.</p>
<p>The main observation to account for is that we only care about the length of the
stone sequence, hence the original task transforms into a simple 2D dynamic
programming problem.</p>
<p>I call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(dp_blink(stones, <span style="color:#ae81ff">75</span>))
</span></span></code></pre></div><p>Which is defined this way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_blink</span>(stones, times):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> lru_cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp</span>(stone: int, times: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> times <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> sum([dp(stone, times <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> blink([stone])])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum([dp(stone, times) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> stones])
</span></span></code></pre></div><p>The DP consists of the stone, and how many times are left for you to blink at it.</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">blink</span>(stones):
</span></span><span style="display:flex;"><span>    stones_next <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> stones:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">=</span> str(stone)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> stone <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> len(s) <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> len(s) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(int(s[:index]))
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(int(s[index:]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            stones_next<span style="color:#f92672">.</span>append(stone <span style="color:#f92672">*</span> <span style="color:#ae81ff">2024</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stones_next
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp_blink</span>(stones, times):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> lru_cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dp</span>(stone: int, times: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> times <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> sum([dp(stone, times <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> blink([stone])])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum([dp(stone, times) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> stones])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    stones <span style="color:#f92672">=</span> [int(stone) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> lines[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">25</span>):
</span></span><span style="display:flex;"><span>        stones <span style="color:#f92672">=</span> blink(stones)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(len(stones))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This is very slow, with an exponential complexity runtime.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># What did you expect?</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># for i in range(50):  # 50 = 75 - 25</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#     print(i)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#     stones = blink(stones)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># # part two</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># print(len(stones))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    stones <span style="color:#f92672">=</span> [int(stone) <span style="color:#66d9ef">for</span> stone <span style="color:#f92672">in</span> lines[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split()]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(dp_blink(stones, <span style="color:#ae81ff">75</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It&rsquo;s <code>#include &lt;string&gt;</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Advent of Code: Day 6</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-6/</link><pubDate>Thu, 12 Dec 2024 15:26:35 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-6/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/6">Day #6&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/6">Day #6</a> puzzle.</p>
<p>Part one is a classic 2D matrix (graph) traversal problem.</p>
<p>To store state I created a <code>visited</code> set with the <code>(x, y)</code> coordinates.
Alternatively I could have changed the input inplace, but I didn&rsquo;t want to deal
with the immutability of python strings, i.e. given:</p>
<pre tabindex="0"><code>l = [&#34;.....&#34;]
</code></pre><p>&hellip;you can&rsquo;t simply do <code>l[0][0] = 'X'</code>, because python strings are immutable. We
could define a new string and assign it to <code>l[0]</code>, or we could change the input
to:</p>
<pre tabindex="0"><code>l = [&#39;.&#39;, &#39;.&#39;, &#39;.&#39;, &#39;.&#39;, &#39;.&#39;]
</code></pre><p>&hellip;so that replacing characters becomes trivial.</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find</span>(lines, c):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, line <span style="color:#f92672">in</span> enumerate(lines):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> c <span style="color:#f92672">in</span> line:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> i, line<span style="color:#f92672">.</span>index(c)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Could not find </span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74"> in lines&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">move</span>(pos, dir, lines, visited):
</span></span><span style="display:flex;"><span>    dirs_clockwise <span style="color:#f92672">=</span> ((<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>), (<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>), (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>), (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        next_pos <span style="color:#f92672">=</span> pos[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> dir[<span style="color:#ae81ff">0</span>], pos[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> dir[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> next_pos[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> next_pos[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&gt;=</span> len(lines) <span style="color:#f92672">or</span> next_pos[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> next_pos[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;=</span> len(lines[<span style="color:#ae81ff">0</span>]):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> lines[next_pos[<span style="color:#ae81ff">0</span>]][next_pos[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;.^&#39;</span>:
</span></span><span style="display:flex;"><span>            pos <span style="color:#f92672">=</span> next_pos
</span></span><span style="display:flex;"><span>            visited<span style="color:#f92672">.</span>add(pos)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> lines[next_pos[<span style="color:#ae81ff">0</span>]][next_pos[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;#&#39;</span>:
</span></span><span style="display:flex;"><span>            dir <span style="color:#f92672">=</span> dirs_clockwise[(dirs_clockwise<span style="color:#f92672">.</span>index(dir) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">=</span> find(lines, <span style="color:#e6db74">&#39;^&#39;</span>)
</span></span><span style="display:flex;"><span>    dir <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># up</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    visited <span style="color:#f92672">=</span> set((pos,))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    move(pos, dir, lines, visited)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(len(visited))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>I did not solve part two yet. I know how to do it, but my initial approach is
too brute force to my taste. Perhaps I&rsquo;ll come up with something clever later
on.</p>]]></content:encoded></item><item><title>Semantic versioning constraints</title><link>https://www.perrotta.dev/2024/12/semantic-versioning-constraints/</link><pubDate>Thu, 12 Dec 2024 12:34:39 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/semantic-versioning-constraints/</guid><description>&lt;p>When working with semantic versioning a.k.a. &lt;a href="https://semver.org/">semver&lt;/a>, it&amp;rsquo;s
often useful to use range constraints&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to express the versions you&amp;rsquo;re
interested in.&lt;/p>
&lt;p>The most useful ones are the tilde (&lt;code>~&lt;/code>) and the circumflex / hat / caret
(&lt;code>^&lt;/code>)&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>~4.2.1&lt;/code>: picks up &lt;code>4.2.x&lt;/code> for &lt;code>x &amp;gt;= 1&lt;/code>&lt;/li>
&lt;li>&lt;code>^5.0.2&lt;/code>: picks up &lt;code>5.x.y&lt;/code> for &lt;code>x &amp;gt;= 0&lt;/code> and &lt;code>y &amp;gt;= 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Popular software tooling that uses them include:&lt;/p>
&lt;ul>
&lt;li>nodejs / npm packages&lt;/li>
&lt;li>terraform&lt;/li>
&lt;li>ruby gems (here &lt;code>~&amp;gt;&lt;/code> is used instead of simply &lt;code>~&lt;/code>)&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p>When working with semantic versioning a.k.a. <a href="https://semver.org/">semver</a>, it&rsquo;s
often useful to use range constraints<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to express the versions you&rsquo;re
interested in.</p>
<p>The most useful ones are the tilde (<code>~</code>) and the circumflex / hat / caret
(<code>^</code>)<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<ul>
<li><code>~4.2.1</code>: picks up <code>4.2.x</code> for <code>x &gt;= 1</code></li>
<li><code>^5.0.2</code>: picks up <code>5.x.y</code> for <code>x &gt;= 0</code> and <code>y &gt;= 2</code></li>
</ul>
<p>Popular software tooling that uses them include:</p>
<ul>
<li>nodejs / npm packages</li>
<li>terraform</li>
<li>ruby gems (here <code>~&gt;</code> is used instead of simply <code>~</code>)</li>
</ul>
<p>Sometimes I use <a href="https://jubianchi.github.io/semver-check">https://jubianchi.github.io/semver-check</a> to double-check<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, or
to teach teammates how the range constraints work.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or constraint ranges? ðŸ¤”&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>In Portuguese we say &ldquo;acento circunflexo&rdquo; (circumflex accent). In English,
AFAIK, &ldquo;caret&rdquo; is the most precise term however people typically refer to it
as &ldquo;hat&rdquo;.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://jubianchi.github.io/semver-check/#/~0.1.1/0.1.3">Example</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>.gitignore without .gitignore</title><link>https://www.perrotta.dev/2024/12/.gitignore-without-.gitignore/</link><pubDate>Wed, 11 Dec 2024 11:44:12 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/.gitignore-without-.gitignore/</guid><description>&lt;p>&lt;code>.gitignore&lt;/code> is the canonical way to exclude files from your git repository.&lt;/p>
&lt;p>In some situations, however, you may want to exclude files without adding them
to &lt;code>.gitignore&lt;/code>, because they are only relevant to you, as opposed to your
teammates.&lt;/p>
&lt;p>Common examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ackrc&lt;/code>: exclude file patterns from search with &lt;code>ack&lt;/code> â€“ not everyone in your
team may use &lt;code>ack&lt;/code> at all&lt;/li>
&lt;li>&lt;code>.envrc&lt;/code>: &lt;code>direnv&lt;/code> integration to automatically run a couple of commands
whenever &lt;code>cd&lt;/code>&amp;lsquo;ing to within the repository â€“ not everyone in your team may use
&lt;code>direnv&lt;/code> at all&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p></description><content:encoded><![CDATA[<p><code>.gitignore</code> is the canonical way to exclude files from your git repository.</p>
<p>In some situations, however, you may want to exclude files without adding them
to <code>.gitignore</code>, because they are only relevant to you, as opposed to your
teammates.</p>
<p>Common examples:</p>
<ul>
<li><code>.ackrc</code>: exclude file patterns from search with <code>ack</code> â€“ not everyone in your
team may use <code>ack</code> at all</li>
<li><code>.envrc</code>: <code>direnv</code> integration to automatically run a couple of commands
whenever <code>cd</code>&lsquo;ing to within the repository â€“ not everyone in your team may use
<code>direnv</code> at all</li>
</ul>
<p>&hellip;and so on.</p>
<p>Is there a way to have a &ldquo;personal&rdquo; <code>.gitignore</code> file? Yes, in fact, many ways!</p>
<h2 id="1-per-repository">1) Per repository</h2>
<p>Use the <code>.git/info/exclude</code> file instead of <code>.gitignore</code>. Edits in this file are
not tracked by version control. The documentation says:</p>
<pre tabindex="0"><code># git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with &#39;#&#39; are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
.ackrc
.envrc
</code></pre><p>For example, I could add <code>.ackrc</code> to it.</p>
<h2 id="2-git-update-index">2) <code>git update-index</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git update-index --assume-unchanged .ackrc .envrc
</span></span></code></pre></div><p>If you make a mistake, it can be reversed with <code>--no-assume-unchanged</code>.</p>
<h2 id="3-globally">3) Globally</h2>
<p>This approach takes effect in <em>all</em> repositories.</p>
<p>Set <a href="https://git-scm.com/docs/gitignore#_configuration"><code>core.excludesFile</code></a> in
your <code>~/.gitconfig</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git config --global core.excludesFile <span style="color:#e6db74">&#39;~/.gitignore&#39;</span>
</span></span></code></pre></div><p>Now populate it as you normally would your repo <code>.gitignore</code>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/653454/how-do-you-make-git-ignore-files-without-using-gitignore">https://stackoverflow.com/questions/653454/how-do-you-make-git-ignore-files-without-using-gitignore</a></li>
<li><a href="https://gist.github.com/subfuzion/db7f57fff2fb6998a16c">https://gist.github.com/subfuzion/db7f57fff2fb6998a16c</a></li>
</ul>]]></content:encoded></item><item><title>Alpine Linux 3.21</title><link>https://www.perrotta.dev/2024/12/alpine-linux-3.21/</link><pubDate>Tue, 10 Dec 2024 19:52:33 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/alpine-linux-3.21/</guid><description>&lt;p>&lt;a href="https://alpinelinux.org/posts/Alpine-3.21.0-released.html">Alpine Linux 3.21.0&lt;/a>
got released last Thursday.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://alpinelinux.org/posts/Alpine-3.21.0-released.html">Alpine Linux 3.21.0</a>
got released last Thursday.</p>
<p>So what? I am credited as an aports commit contributor! :-)</p>
<p><a href="https://pkgs.alpinelinux.org/packages?name=&amp;branch=edge&amp;repo=&amp;arch=x86_64&amp;origin=&amp;flagged=&amp;maintainer=Thiago+Perrotta">Here</a>
is a list of all the packages I currently maintain, excluding dependencies:</p>
<ul>
<li>argocd</li>
<li>autotrash</li>
<li>bkt</li>
<li>fpp</li>
<li>gliderlabs-sigil</li>
<li>kubeseal</li>
<li>tfupdate</li>
<li>typos</li>
<li>urlwatch</li>
<li>yamlfmt</li>
</ul>
<p>&hellip;a total of <strong>10</strong> packages.</p>]]></content:encoded></item><item><title>Docker build: ignore cache</title><link>https://www.perrotta.dev/2024/12/docker-build-ignore-cache/</link><pubDate>Tue, 10 Dec 2024 19:45:42 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/docker-build-ignore-cache/</guid><description>&lt;p>To build a docker image completely from scratch, without reusing cache layers on
your system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker build --no-cache -f Dockerfile . -t &lt;span style="color:#f92672">{&lt;/span>image name&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>image tag&lt;span style="color:#f92672">}&lt;/span> --platform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p>To build a docker image completely from scratch, without reusing cache layers on
your system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker build --no-cache -f Dockerfile . -t <span style="color:#f92672">{</span>image name<span style="color:#f92672">}</span>:<span style="color:#f92672">{</span>image tag<span style="color:#f92672">}</span> --platform
</span></span><span style="display:flex;"><span>linux/amd64
</span></span></code></pre></div><ul>
<li>Pass an explicit platform in case e.g. you&rsquo;re building on a Mac M1 (arm64)
with the intent of running it on Linux in the cloud (amd64 typically).</li>
<li>The docker image full specification is: image =
<code>{registry}/{repository}:{tag}</code>. For example, the registry could be an AWS ECR
URL, whereas the repository is something like &ldquo;bitnami/sealed-secrets&rdquo;, and
the tag typically follows semantic versioning.</li>
</ul>]]></content:encoded></item><item><title>bash: glob hidden files recursively</title><link>https://www.perrotta.dev/2024/12/bash-glob-hidden-files-recursively/</link><pubDate>Mon, 09 Dec 2024 17:53:14 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/bash-glob-hidden-files-recursively/</guid><description>&lt;p>Assume you make a huge change to your git repository, that spawns several file
formats â€“ cpp, java, javascript, python, etc.&lt;/p>
&lt;p>In the end you want to revert the javascript changes, for the sake of splitting
your commit into self-contained chunks&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I like the following approach&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git checkout -- **/*.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Caveat&lt;/strong>: It does not include hidden files, or files in hidden directories.
Unless&amp;hellip;you set the &lt;code>dotglob&lt;/code> option:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% shopt -s dotglob
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>shopt&lt;/code> works in &lt;code>bash&lt;/code>, alas not in &lt;code>zsh&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Assume you make a huge change to your git repository, that spawns several file
formats â€“ cpp, java, javascript, python, etc.</p>
<p>In the end you want to revert the javascript changes, for the sake of splitting
your commit into self-contained chunks<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I like the following approach<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git checkout -- **/*.js
</span></span></code></pre></div><p><strong>Caveat</strong>: It does not include hidden files, or files in hidden directories.
Unless&hellip;you set the <code>dotglob</code> option:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% shopt -s dotglob
</span></span></code></pre></div><p>Note that <code>shopt</code> works in <code>bash</code>, alas not in <code>zsh</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://sscce.org/">https://sscce.org/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>In theory, this is a pre-requisite: <code>shopt -s globstar</code>. In practice, it
should be the default behavior.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Finding linters</title><link>https://www.perrotta.dev/2024/12/finding-linters/</link><pubDate>Sun, 08 Dec 2024 23:40:26 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/finding-linters/</guid><description>&lt;p>A no-brainer and effective way to increase code quality in an organization is by
the means of incorporating linters into your CI/CD pipeline.&lt;/p>
&lt;p>But where can you find them?&lt;/p></description><content:encoded><![CDATA[<p>A no-brainer and effective way to increase code quality in an organization is by
the means of incorporating linters into your CI/CD pipeline.</p>
<p>But where can you find them?</p>
<p>Some sources of inspiration include curated &ldquo;super-mega-hyper&rdquo; linter packages,
such as:</p>
<ul>
<li><a href="https://megalinter.io">https://megalinter.io</a></li>
<li><a href="https://github.com/super-linter/super-linter">https://github.com/super-linter/super-linter</a></li>
</ul>
<p>I am not generally a fan of employing these collections directly because it&rsquo;s
not possible to exert tight control over them, and there&rsquo;s no security or
reproducibility guarantee of their pipeline.</p>
<p>Instead, I cherry-pick interesting / useful linters from their packs,
effectively using them as serendipity sources for linters.</p>
<p>Bonus points whenever there&rsquo;s out-of-the-box integration with the pre-commit.com
framework i.e. whenever there&rsquo;s a <code>.pre-commit-config.yaml</code> file present at the
root of the git repo.</p>]]></content:encoded></item><item><title>Advent of Code: Day 5</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-5/</link><pubDate>Sun, 08 Dec 2024 23:24:27 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-5/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/5">Day #5&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/5">Day #5</a> puzzle.</p>
<p>It is a topological sort problem, plain and simple.</p>
<p>In part one all we care about is whether certain input sequences are valid,
within the sort constraints. It&rsquo;s very straightforward to verify that by
exhaustively checking all constraints (&ldquo;edges&rdquo;):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_correct</span>(update, edges):
</span></span><span style="display:flex;"><span>    position <span style="color:#f92672">=</span> defaultdict(<span style="color:#66d9ef">lambda</span>: sys<span style="color:#f92672">.</span>maxsize, {node: i <span style="color:#66d9ef">for</span> (i, node) <span style="color:#f92672">in</span> enumerate(update)})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (first, second) <span style="color:#f92672">in</span> edges:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> first <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> second <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> position[first] <span style="color:#f92672">&gt;</span> position[second]:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span></code></pre></div><p><code>position</code> is a dictionary representing in which index (position) each element
occurs. I make use of a <code>defaultdict</code> with a very large value set by default
(instead of a vanilla <code>dict</code>) to avoid the need to explicitly check for element
presence.</p>
<p>In part two we need to perform the actual topological sort. Or&hellip;do we? Doing
toposort would be the most efficient way to resolve it, however, in this case,
plain brute force is good enough:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">toposort</span>(update, edges):
</span></span><span style="display:flex;"><span>    position <span style="color:#f92672">=</span> defaultdict(<span style="color:#66d9ef">lambda</span>: sys<span style="color:#f92672">.</span>maxsize, {node: i <span style="color:#66d9ef">for</span> (i, node) <span style="color:#f92672">in</span> enumerate(update)})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    change <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> change:
</span></span><span style="display:flex;"><span>        change <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (first, second) <span style="color:#f92672">in</span> edges:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> first <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> second <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> position[first] <span style="color:#f92672">&gt;=</span> position[second]:
</span></span><span style="display:flex;"><span>                position[first] <span style="color:#f92672">=</span> position[second] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                change <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sorted(update, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: position[x])
</span></span></code></pre></div><p>Once again, we iterate through all the input constraints until we find a
violation. Whenever we find one, we fix the position of the element in the wrong
order by updating it to occur before the other element. We repeat this procedure
until there are no more violations.</p>
<p>The full source:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> defaultdict
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_correct</span>(update, edges):
</span></span><span style="display:flex;"><span>    position <span style="color:#f92672">=</span> defaultdict(<span style="color:#66d9ef">lambda</span>: sys<span style="color:#f92672">.</span>maxsize, {node: i <span style="color:#66d9ef">for</span> (i, node) <span style="color:#f92672">in</span> enumerate(update)})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (first, second) <span style="color:#f92672">in</span> edges:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> first <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> second <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> position[first] <span style="color:#f92672">&gt;</span> position[second]:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">toposort</span>(update, edges):
</span></span><span style="display:flex;"><span>    position <span style="color:#f92672">=</span> defaultdict(<span style="color:#66d9ef">lambda</span>: sys<span style="color:#f92672">.</span>maxsize, {node: i <span style="color:#66d9ef">for</span> (i, node) <span style="color:#f92672">in</span> enumerate(update)})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    change <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> change:
</span></span><span style="display:flex;"><span>        change <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (first, second) <span style="color:#f92672">in</span> edges:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> first <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> second <span style="color:#f92672">in</span> update <span style="color:#f92672">and</span> position[first] <span style="color:#f92672">&gt;=</span> position[second]:
</span></span><span style="display:flex;"><span>                position[first] <span style="color:#f92672">=</span> position[second] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                change <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sorted(update, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: position[x])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    edges <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    updates <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#f92672">in</span> line:
</span></span><span style="display:flex;"><span>            edges<span style="color:#f92672">.</span>append(list(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;|&#34;</span>))))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> len(line) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            updates<span style="color:#f92672">.</span>append(list(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    total_one <span style="color:#f92672">=</span> total_two <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> update <span style="color:#f92672">in</span> updates:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> is_correct(update, edges):
</span></span><span style="display:flex;"><span>            total_one <span style="color:#f92672">+=</span> update[len(update) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            sorted_update <span style="color:#f92672">=</span> toposort(update, edges)
</span></span><span style="display:flex;"><span>            total_two <span style="color:#f92672">+=</span> sorted_update[len(sorted_update) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(total_one)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(total_two)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div>]]></content:encoded></item><item><title>Advent of Code: Day 4</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-4/</link><pubDate>Fri, 06 Dec 2024 11:44:39 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-4/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/4">Day #4&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/4">Day #4</a> puzzle.</p>
<p>It&rsquo;s a pretty typical 2D matrix search problem, or a graph search problem, if
you will.</p>
<p>The problem is naturally unraveled into the following searches:</p>
<ul>
<li>horizontally</li>
<li>horizontally, reversed</li>
<li>vertically</li>
<li>vertically, reversed</li>
<li>diagonally, all 4 directions (NW, NE, SW, SE)</li>
</ul>
<p>It&rsquo;s possible to write a single pair of for loops that addresses the general
case. The (classic) idea is to think of all 8 compass directions to move along
the matrix:</p>
<ul>
<li>(1, 0)</li>
<li>(-1, 0)</li>
<li>(0, 1)</li>
<li>(0, -1)</li>
<li>(1, 1)</li>
<li>(-1, -1)</li>
<li>(-1, 1)</li>
<li>(1, -1)</li>
</ul>
<p>Within the inner iteration, change <code>x += dx</code> and <code>y += dy</code> (or <code>i += di</code>, <code>j += dj</code>, naming is hard). I did this many times in C++ though, and I want to write
elegant Python code.</p>
<p>Therefore I came up with the following solution instead, with nested list
comprehensions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_horizontal</span>(matrix, keyword):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum((<span style="color:#66d9ef">True</span> <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> matrix <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(row) <span style="color:#f92672">-</span> len(keyword) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(row[i:i <span style="color:#f92672">+</span> len(keyword)]) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]))
</span></span></code></pre></div><p>It follows the same principle as the original intent, however it leverages
list slices so that we can omit the <code>dx/dy</code> step.</p>
<p>The vertical search is pretty straightforward: it is just a matter of running
the horizontal search in the transposed matrix (<code>zip(*matrix)</code>).</p>
<p>I must confess that using <code>zip</code> to transpose matrices always felt magical and a
mere coincidence that it just worksâ„¢. Ruby has a <code>.transpose</code> method, which is
more readable.</p>
<p>For the diagonal search, I couldn&rsquo;t think of an elegant list comprehension
manner to address it. Is it even possible to &ldquo;2D slice&rdquo; in Python?</p>
<p>After-the-fact I decided to ask ChatGPT, and it is indeed possible, but it
requires NumPy:</p>
<blockquote>
<p>If a is 2-D, returns the diagonal of a with the given offset, i.e., the
collection of elements of the form a[i, i+offset]. If a has more than two
dimensions, then the axes specified by axis1 and axis2 are used to determine
the 2-D sub-array whose diagonal is returned. The shape of the resulting array
can be determined by removing axis1 and axis2 and appending an index to the
right equal to the size of the resulting diagonals.</p>
</blockquote>
<p>The method call resembles <code>numpy.array([[1, 2], [3, 4]]).diagonal(offset=1)</code>,
perhaps with the aid of <code>.flip()</code> to account for the other direction.</p>
<p>Anyway, my plain diagonal search is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_diagonal</span>(matrix, keyword):
</span></span><span style="display:flex;"><span>    rows <span style="color:#f92672">=</span> len(matrix)
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> len(matrix[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(rows):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(cols):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> rows <span style="color:#f92672">and</span> j <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> cols:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(matrix[i <span style="color:#f92672">+</span> k][j <span style="color:#f92672">+</span> k] <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(len(keyword))) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> rows <span style="color:#f92672">and</span> j <span style="color:#f92672">-</span> len(keyword) <span style="color:#f92672">&gt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(matrix[i <span style="color:#f92672">+</span> k][j <span style="color:#f92672">-</span> k] <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(len(keyword))) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> count
</span></span></code></pre></div><p>Part two is fundamentally a different problem.</p>
<p>One way to address it is to search for all <code>'A'</code> characters, and then look
around its &ldquo;edges&rdquo; to see if they contain exactly two <code>'M'</code> and two <code>'S'</code>, and
that they are properly arranged:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_double_mas</span>(matrix):
</span></span><span style="display:flex;"><span>    rows <span style="color:#f92672">=</span> len(matrix)
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> len(matrix[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, rows <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, cols <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> matrix[i][j] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;A&#39;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># look at a QWERTY keyboard to make sense of these variable names</span>
</span></span><span style="display:flex;"><span>            q <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            e <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            z <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            c <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            edges <span style="color:#f92672">=</span> [q, e, z, c]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> edges<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;M&#39;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">or</span> edges<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;S&#39;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> q <span style="color:#f92672">==</span> e <span style="color:#f92672">or</span> q <span style="color:#f92672">==</span> z:
</span></span><span style="display:flex;"><span>                count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> count
</span></span></code></pre></div><p>I couldn&rsquo;t find an opportunity for reuse of the solution from part one.</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_horizontal</span>(matrix, keyword):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum((<span style="color:#66d9ef">True</span> <span style="color:#66d9ef">for</span> row <span style="color:#f92672">in</span> matrix <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(row) <span style="color:#f92672">-</span> len(keyword) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(row[i:i <span style="color:#f92672">+</span> len(keyword)]) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_vertical</span>(matrix, keyword):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> search_horizontal(zip(<span style="color:#f92672">*</span>matrix), keyword)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_diagonal</span>(matrix, keyword):
</span></span><span style="display:flex;"><span>    rows <span style="color:#f92672">=</span> len(matrix)
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> len(matrix[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(rows):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(cols):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> rows <span style="color:#f92672">and</span> j <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> cols:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(matrix[i <span style="color:#f92672">+</span> k][j <span style="color:#f92672">+</span> k] <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(len(keyword))) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> len(keyword) <span style="color:#f92672">&lt;=</span> rows <span style="color:#f92672">and</span> j <span style="color:#f92672">-</span> len(keyword) <span style="color:#f92672">&gt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(matrix[i <span style="color:#f92672">+</span> k][j <span style="color:#f92672">-</span> k] <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(len(keyword))) <span style="color:#f92672">in</span> [keyword, keyword[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]:
</span></span><span style="display:flex;"><span>                    count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> count
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">search_double_mas</span>(matrix):
</span></span><span style="display:flex;"><span>    rows <span style="color:#f92672">=</span> len(matrix)
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> len(matrix[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, rows <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, cols <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> matrix[i][j] <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;A&#39;</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># look at a QWERTY keyboard to make sense of these variable names</span>
</span></span><span style="display:flex;"><span>            q <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            e <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            z <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            c <span style="color:#f92672">=</span> matrix[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            edges <span style="color:#f92672">=</span> [q, e, z, c]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> edges<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;M&#39;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">or</span> edges<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;S&#39;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> q <span style="color:#f92672">==</span> e <span style="color:#f92672">or</span> q <span style="color:#f92672">==</span> z:
</span></span><span style="display:flex;"><span>                count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> count
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    keyword <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;XMAS&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># [&#39;abcd&#39;, &#39;efgh&#39;, &#39;ijkl&#39;] -&gt; [[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;], [&#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;]]</span>
</span></span><span style="display:flex;"><span>    matrix <span style="color:#f92672">=</span> [list(line) <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(search_horizontal(matrix, keyword) <span style="color:#f92672">+</span> search_vertical(matrix, keyword) <span style="color:#f92672">+</span> search_diagonal(matrix, keyword))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(search_double_mas(matrix))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div>]]></content:encoded></item><item><title>Docker image size</title><link>https://www.perrotta.dev/2024/12/docker-image-size/</link><pubDate>Thu, 05 Dec 2024 13:05:44 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/docker-image-size/</guid><description>&lt;p>When trying to optimize docker images in terms of size, the workflow is as
follows:&lt;/p></description><content:encoded><![CDATA[<p>When trying to optimize docker images in terms of size, the workflow is as
follows:</p>
<h2 id="terminal-1">Terminal 1</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker build -f Dockerfile . -t argocd-download-tools
</span></span></code></pre></div><p>&hellip;possibly paired up with <code>entr</code> or <code>fswatch</code> depending on your eagerness for
automatic builds.</p>
<h2 id="terminal-2">Terminal 2</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker image inspect argocd-download-tools | jq -r <span style="color:#e6db74">&#39;.[0].Size&#39;</span> | numfmt --to<span style="color:#f92672">=</span>iec
</span></span><span style="display:flex;"><span>134M
</span></span></code></pre></div><p>&hellip;possibly prepended with <code>watch</code>.</p>
<p>I wasn&rsquo;t aware of <a href="https://man.archlinux.org/man/numfmt.1"><code>numfmt</code></a>:</p>
<blockquote>
<p>numfmt - Convert numbers from/to human-readable strings</p>
</blockquote>
<p>&hellip;instead of displaying plain bytes, it converts numbers to human-readable
strings (Ã  la <code>df -h</code> or <code>free -h</code>).</p>
<p>Regarding the <a href="https://en.wikipedia.org/wiki/Binary_prefix">units</a>: they don&rsquo;t
matter much, because we are only interested in an approximation, no need to
shave bytes off here. <code>SI</code> has 1k = 1000, whereas <code>IEC</code> has 1Ki = 1024.</p>]]></content:encoded></item><item><title>atools: unpack file archives agnostically</title><link>https://www.perrotta.dev/2024/12/atools-unpack-file-archives-agnostically/</link><pubDate>Wed, 04 Dec 2024 13:07:28 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/atools-unpack-file-archives-agnostically/</guid><description>&lt;p>When downloading software from the interwebs, it can come in many popular
archive formats: &lt;code>.zip&lt;/code>, &lt;code>.tar.gz&lt;/code>, &lt;code>.tar.xz&lt;/code>, &lt;code>.rar&lt;/code>, &lt;code>.7z&lt;/code>, etc.&lt;/p>
&lt;p>If you extract them via the CLI, normally you have to remember the right command
and flags to pass for each different format, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% unzip foo.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% tar xzvf foo.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not too bad but it&amp;rsquo;s unnecessary overhead that can be abstracted away. And
there are several ways to do so.&lt;/p></description><content:encoded><![CDATA[<p>When downloading software from the interwebs, it can come in many popular
archive formats: <code>.zip</code>, <code>.tar.gz</code>, <code>.tar.xz</code>, <code>.rar</code>, <code>.7z</code>, etc.</p>
<p>If you extract them via the CLI, normally you have to remember the right command
and flags to pass for each different format, e.g.:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% unzip foo.zip
</span></span><span style="display:flex;"><span>% tar xzvf foo.tar.gz
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>It&rsquo;s not too bad but it&rsquo;s unnecessary overhead that can be abstracted away. And
there are several ways to do so.</p>
<p>At some point I used <a href="https://github.com/dtrx-py/dtrx"><code>dtrx</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% dtrx vault_1.7.2_linux_amd64.zip
</span></span></code></pre></div><p>&hellip;but it used to be Python 2 only. These days there is a Python 3 version but
it was too late, at some point I switched to <code>atool</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% brew ls atool
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/acat
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/adiff
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/als
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/apack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/arepack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/atool
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/aunpack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/share/man/ <span style="color:#f92672">(</span><span style="color:#ae81ff">7</span> files<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>The only command I use from the package is <code>aunpack</code>, which behaves similarly to
<code>dtrx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% aunpack vault_1.7.2_linux_amd64.zip
</span></span></code></pre></div><p><code>atool</code> is <a href="https://repology.org/project/atool/versions">globally available</a> in
all software repositories I care about.</p>
<p>And then I can free up my mind.
With that said, it&rsquo;s still useful to remember the unpacking commands for at the very least <code>.zip</code> and <code>.tar.gz</code>.</p>]]></content:encoded></item><item><title>Advent of Code: Day 3</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-3/</link><pubDate>Tue, 03 Dec 2024 16:41:23 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-3/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/3">Day #3&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/3">Day #3</a> puzzle.</p>
<p>It&rsquo;s a pretty typical regex problem.
To choose not to use regex is to endeavour in pain.</p>
<p>The regex for part one to extract all occurrences of <code>mul</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;mul\(\d+,\d+\)&#39;</span>
</span></span></code></pre></div><p>Note that with <code>r</code> there is no need to escape the backslashes in Python.</p>
<p>Later on I extract the numbers with <code>r'\d+'</code>.</p>
<p>If we really wanted we could do everything with a single regex by using
capturing groups, however it would become less readable.</p>
<p>Once the numbers are captured, it&rsquo;s just a matter of accumulating their product.</p>
<p>I craft and test my regex with the support of <a href="https://regex101.com/">https://regex101.com/</a> and then
follow up with the Python interpreter in my laptop.</p>
<p>Part two adds two more operators, which we can easily account for with an or
(<code>|</code>).</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    prod <span style="color:#f92672">=</span> prod_two <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> memory <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        ops <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;mul\(\d+,\d+\)&#39;</span>, memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> op <span style="color:#f92672">in</span> ops:
</span></span><span style="display:flex;"><span>            (f1, f2) <span style="color:#f92672">=</span> map(int, re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\d+&#39;</span>, op))
</span></span><span style="display:flex;"><span>            prod <span style="color:#f92672">+=</span> f1 <span style="color:#f92672">*</span> f2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(prod)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> memory <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        ops <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;mul\(\d+,\d+\)|do\(\)|don&#39;t\(\)&#34;</span>, memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> op <span style="color:#f92672">in</span> ops:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;don&#39;t&#34;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#34;do&#34;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#39;mul&#39;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                (f1, f2) <span style="color:#f92672">=</span> map(int, re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\d+&#39;</span>, op))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> enabled:
</span></span><span style="display:flex;"><span>                    prod_two <span style="color:#f92672">+=</span> f1 <span style="color:#f92672">*</span> f2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(prod_two)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>I intended to use <a href="https://docs.python.org/3/whatsnew/3.10.html"><code>match</code></a> merely
for style points however it&rsquo;s only available from Python 3.10+, thus I sticked
with a mere <code>if-elif</code> construct.</p>]]></content:encoded></item><item><title>Advent of Code 2024: Day 2</title><link>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-2/</link><pubDate>Tue, 03 Dec 2024 01:15:00 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-2/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/2">Day #2&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/2">Day #2</a> puzzle.</p>
<p>The first part is straightforward. It felt right to use <a href="https://docs.python.org/3/library/itertools.html#itertools.pairwise"><code>pairwise</code></a> to compute the differences between each adjacent pair:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>diffs <span style="color:#f92672">=</span> [(b <span style="color:#f92672">-</span> a) <span style="color:#66d9ef">for</span> (a,b) <span style="color:#f92672">in</span> pairwise(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)))]
</span></span></code></pre></div><p>Then we combine it with <code>all</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_safe</span>(diffs):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs) <span style="color:#f92672">or</span> all(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span></code></pre></div><p>Note that it is necessary to use two <code>all</code> expressions. It feels tempting to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">or</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span></code></pre></div><p>&hellip;however that&rsquo;s incorrect. For example: <code>diffs = [1, -1, 1, -1]</code> with an input
such as <code>[1, 2, 1, 2]</code> would pass the test even though it shouldn&rsquo;t.</p>
<p>It also feels tempting to use <code>abs()</code> but then an additional check would be
necessary to ensure the diffs are either all positive or all negative.</p>
<p>The second part was trickier.</p>
<p>Initially I was doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>list(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)<span style="color:#f92672">.</span>count(<span style="color:#66d9ef">False</span>) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">or</span> list(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)<span style="color:#f92672">.</span>count(<span style="color:#66d9ef">False</span>) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>&hellip;but then I realized I misunderstood the problem.</p>
<p>The <code>1 2 7 8 9</code> line, whose diff is <code>[1, 5, 1, 1]</code>, illustrates it well: in
principle it would pass the test by dropping &ldquo;5&rdquo; from the diff. However, that
cannot be correct, because <code>2 -&gt; 8</code> is too big of a jump.</p>
<p>The brute force way is to drop elements one by one, splitting the original list
into two, and then checking <code>is_safe</code> in the merged sublists. That would
require computing <code>diffs</code> every time, which would yield an <code>O(n^2)</code> solution.</p>
<p>We can do better by pre-computing <code>diffs</code> only once, and then adding a bit of
manipulation to reconstruct what the merged diffs would be. The end goal is to
compute this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>is_safe(diffs[:i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> [l[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> l[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">+</span> diffs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]):
</span></span></code></pre></div><p>&hellip;i.e. the left part of <code>diffs</code>, the right part of <code>diffs</code>, and a rolling diff
element in the middle.</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> pairwise
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    safe <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    safe_damp <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_safe</span>(diffs):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs) <span style="color:#f92672">or</span> all(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        l <span style="color:#f92672">=</span> list(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)))
</span></span><span style="display:flex;"><span>        diffs <span style="color:#f92672">=</span> [(b <span style="color:#f92672">-</span> a) <span style="color:#66d9ef">for</span> (a,b) <span style="color:#f92672">in</span> pairwise(l)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        is_this_safe <span style="color:#f92672">=</span> is_safe(diffs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> is_this_safe:
</span></span><span style="display:flex;"><span>            safe <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(l)):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[<span style="color:#ae81ff">1</span>:]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">==</span> len(l) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[:i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> [l[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> l[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">+</span> diffs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(safe)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(safe_damp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>A few notes:</p>
<ul>
<li>there&rsquo;s no need for <code>pairwise</code>; a plain <code>for-range</code> loop would have done the
job just fine; <code>pairwise</code> is stylish though</li>
<li><code>1 &lt;= n &lt;= 3</code> is syntactic sugar for <code>1 &lt;= n and n &lt;= 3</code>. Python is sweet.</li>
<li>part two could become a bit more elegant by introducing another helper
function</li>
<li>naming is hard</li>
<li><code>pairwise</code> is only available from Python 3.10+. macOS 15 (Sequoia) ships with
Python 3.9. Oh well&hellip;I needed to use the Python binary from homebrew.</li>
</ul>]]></content:encoded></item><item><title>Advent of Code 2024: Day 1</title><link>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-1/</link><pubDate>Sun, 01 Dec 2024 22:29:19 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-1/</guid><description>&lt;p>Refer to the &lt;a href="https://www.perrotta.dev/2022/01/advent-of-code/">previous post&lt;/a> about AoC,
and to the &lt;a href="https://github.com/thiagowfx/adventofcode">git repository&lt;/a> with my
solutions in Python 3.&lt;/p>
&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/1">Day #1&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Refer to the <a href="https://www.perrotta.dev/2022/01/advent-of-code/">previous post</a> about AoC,
and to the <a href="https://github.com/thiagowfx/adventofcode">git repository</a> with my
solutions in Python 3.</p>
<p>Link to <a href="https://adventofcode.com/2024/day/1">Day #1</a> puzzle.</p>
<p>This is just a warm-up.</p>
<p>Given two lists of integers, iterate over them and sum the absolute difference
between each pair. <code>zip</code> + <code>sum</code> is the perfect pair<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> for the job.</p>
<p>Part two: iterate over the left list whilst accumulating how often the element
appears in the right list. &ldquo;How often&rdquo; has, almost always, the smell of a
<a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>Counter</code></a>.</p>
<p>The full solution<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    left <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    right <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        l, r <span style="color:#f92672">=</span> map(int, line<span style="color:#f92672">.</span>split())
</span></span><span style="display:flex;"><span>        left<span style="color:#f92672">.</span>append(l)
</span></span><span style="display:flex;"><span>        right<span style="color:#f92672">.</span>append(r)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    left<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>    right<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(sum(abs(l <span style="color:#f92672">-</span> r) <span style="color:#66d9ef">for</span> (l, r) <span style="color:#f92672">in</span> zip(left, right)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    freqs <span style="color:#f92672">=</span> Counter(right)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(sum(l <span style="color:#f92672">*</span> freqs[l] <span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> left))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.youtube.com/watch?v=3WpdCZC9q6w">I&rsquo;m not sure I like it, And Iâ€˜m so tired of
fighting</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The git repository is ever-evolving and the source of truth, whereas the
blog post is a snapshot. I&rsquo;ll experiment with cross-posting solutions here
even though it duplicates the repository ones.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Compress a .pdf in macOS with Preview.app</title><link>https://www.perrotta.dev/2024/11/compress-a-.pdf-in-macos-with-preview.app/</link><pubDate>Sat, 30 Nov 2024 00:22:38 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/compress-a-.pdf-in-macos-with-preview.app/</guid><description>&lt;p>All hail to &lt;a href="https://support.apple.com/en-ca/guide/preview/prvw1509/mac">Apple
Documentation&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>All hail to <a href="https://support.apple.com/en-ca/guide/preview/prvw1509/mac">Apple
Documentation</a>.</p>
<p>The instructions are very simple:</p>
<ul>
<li>open the <code>.pdf</code> file in Preview.app</li>
<li>export it (<code>File &gt; Export</code>)</li>
<li>in &ldquo;quartz filter&rdquo;, select the &ldquo;reduce file size&rdquo; option</li>
<li>save</li>
</ul>
<p>I observed a scanned document with ~3.3MiB of file size be compressed to
~350KiB. Not bad! And although not very customizable, it&rsquo;s very user-friendly
and easy to remember.</p>
<p>The alternative would have been to use GhostScript (<code>gs</code>). For example, ChatGPT
suggests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% gs -sDEVICE<span style="color:#f92672">=</span>pdfwrite -dCompatibilityLevel<span style="color:#f92672">=</span>1.4 -dPDFSETTINGS<span style="color:#f92672">=</span>/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile<span style="color:#f92672">=</span>output.pdf input.pdf
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>