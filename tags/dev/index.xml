<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dev on not just serendipity</title><link>https://www.perrotta.dev/tags/dev/</link><description>Recent content in Dev on not just serendipity</description><generator>Hugo -- 0.128.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 • RSS</copyright><lastBuildDate>Tue, 02 Jul 2024 12:33:37 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform perform a global update</title><link>https://www.perrotta.dev/2024/07/terraform-perform-a-global-update/</link><pubDate>Tue, 02 Jul 2024 12:33:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/terraform-perform-a-global-update/</guid><description>&lt;p>Given a &lt;code>terraform/modules&lt;/code> directory tree, we would like to globally update the
minimum required terraform version in all modules.&lt;/p></description><content:encoded><![CDATA[<p>Given a <code>terraform/modules</code> directory tree, we would like to globally update the
minimum required terraform version in all modules.</p>
<ul>
<li>Option 1: Use <code>ack</code> or <code>fd</code> + <code>sed</code>.</li>
<li>Option 2: Use <a href="https://github.com/minamijoyo/tfupdate"><code>tfupdate</code></a>, which can
be installed via <code>homebrew</code> or your favorite package manager (c.f.
<a href="https://repology.org/project/tfupdate/versions">repology</a>).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tfupdate terraform -r terraform/modules -v <span style="color:#e6db74">&#39;~&gt; 1.6.6&#39;</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Explain a crontab expression</title><link>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p></description><content:encoded><![CDATA[<p>Given, for example, <code>0 0 * * *</code>, how do you figure out when it will run?</p>
<ul>
<li>Option 1: Read the docs! The <a href="https://wiki.archlinux.org/title/Cron">ArchWiki</a>
is frequently a great reference. Alternatively, use your favorite search
engine.</li>
<li>Option 2: Ask ChatGPT! A simple <code>cron: 0 0 * * *</code> prompt is enough. No need
to embezzle it with <code>explain what this does</code> or <code>what does this do?</code>.</li>
<li>Option 3: Paste it into <a href="https://crontab.guru/">https://crontab.guru/</a>.</li>
</ul>]]></content:encoded></item><item><title>Localhost domain</title><link>https://www.perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:</p>
<ul>
<li><a href="http://localdev.me:1313/">http://localdev.me:1313/</a></li>
<li><a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/</a></li>
</ul>
<blockquote>
<p>When I’m doing local development, I sometimes need a domain name that routes
back to localhost. I’ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I’ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.</p>
</blockquote>
<blockquote>
<p><code>localdev.me</code> DNS is served through amazon. The domain name and any subdomains
point to <code>127.0.0.1</code>.</p>
</blockquote>
<blockquote>
<p>The next time you need a custom domain or subdomain for local development,
instead of hancking your hosts file you might consider localdev.me.</p>
</blockquote>
<p>Source: <a href="https://codeengineered.com/blog/2022/localdev-me/">https://codeengineered.com/blog/2022/localdev-me/</a></p>]]></content:encoded></item><item><title>Copy files from laptop to Steam Deck</title><link>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s say the files you want to copy are in <code>~/Downloads</code>.</p>
<p>Start a local HTTP server on your laptop:</p>
<pre tabindex="0"><code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
</code></pre><p>Find the IP address of your laptop within your LAN:</p>
<pre tabindex="0"><code>$ ifconfig  # macOS
$ ip addr   # linux
</code></pre><p>Now go to your Steam Deck, access <code>http://&lt;ip&gt;:8000</code> via the installed web
browser, and download your files.</p>
<p>Alternatively, run <code>wget</code> / <code>curl</code> in a terminal.</p>]]></content:encoded></item><item><title>Rename files in bulk</title><link>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever the files are in the same directory, <code>vidir</code> from <a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils</a> is the best
interactive tool.</p>
<p>If files are scattered across multiple directories, consider using the
<a href="https://man.archlinux.org/man/rename.1.en"><code>rename</code></a> utility from <code>util-linux</code>.</p>
<p>A simple example to rename all <code>readme.md</code> files to <code>README.md</code> for consistency:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>rename <span style="color:#e6db74">&#39;s/readme\.md/README.md/&#39;</span> **/*
</span></span></code></pre></div>]]></content:encoded></item><item><title>Sleep forever</title><link>https://www.perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p></description><content:encoded><![CDATA[<p>The following commands will make the shell sleep indefinitely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep inf
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep infinity
</span></span></code></pre></div><p>Previously I would call a command such as a <code>while true</code> loop or the <code>yes</code>
utility, but <code>sleep</code> is also handy.</p>]]></content:encoded></item><item><title>Bcrypt-hash a password</title><link>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure class="align-center ">&lt;a href="https://xkcd.com/936/">
&lt;img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> &lt;/a>&lt;figcaption>
&lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
&lt;/figcaption>
&lt;/figure></description><content:encoded><![CDATA[<p>Given the password <code>correct horse battery staple</code>, we would like to bcrypt-hash
it.</p>
<figure class="align-center "><a href="https://xkcd.com/936/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
         alt="Through 20 years of effort, we&#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Here&rsquo;s one way to do so via the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ htpasswd -nbBC <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#39;correct horse battery staple&#39;</span> | tr -d <span style="color:#e6db74">&#39;:\n&#39;</span> | sed <span style="color:#e6db74">&#39;s/$2y/$2a/&#39;</span>
</span></span></code></pre></div><p>&hellip;which yields:</p>
<pre tabindex="0"><code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
</code></pre><p>You could verify it matches e.g. via <a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/</a>.</p>
<p><strong>Context</strong>: <a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> expects a
bcrypt-hashed password in its config file.</p>]]></content:encoded></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description><content:encoded><![CDATA[<p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.</p>
<h2 id="assumptions">Assumptions</h2>
<ul>
<li>You have <code>git</code>, <code>jq</code> and the <a href="https://cli.github.com/"><code>gh</code></a> command-line tool
installed (<code>brew install gh</code>)</li>
<li>You have a github actions file in
<code>~/.github/workflows/package-release-dispatch.yml</code>.</li>
<li>The action has the following form:</li>
</ul>
<pre tabindex="0"><code>on:
  workflow_dispatch:
    inputs:
      ref:
        description: &#39;Ref to build from. This can either be a SHA or a branch/tag&#39;
        required: true
        type: string
  push:
    branches:
      - master
    paths:
      - &#39;.github/workflows/package-release-dispatch.yml&#39;
      - &#39;helm/**&#39;
</code></pre><p>The goal is to iterate on the <code>jobs:</code> section of the action.</p>
<h2 id="workflow">Workflow</h2>
<p>Trigger an action run from the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml <span style="color:#f92672">[</span>--ref master<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f ref<span style="color:#f92672">=</span>master<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><code>--ref</code> should be the git branch you&rsquo;re working on, for example,
<code>thiagowfx/my-cool-feature</code>.</p>
<p><code>-f</code> provides an input to the workflow. In this case, there&rsquo;s an input named
<code>ref</code>, which is meant to be the branch the action will act upon.</p>
<p>The action takes a little while to trigger, we can <code>sleep</code> to give it some time.
I found that <code>sleep 3</code> is a sensible value (3 seconds).</p>
<p>How to view the action?</p>
<p>First we need to get its ID. Here&rsquo;s one way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span>
</span></span></code></pre></div><h3 id="option-1-via-the-command-line">Option 1) Via the command-line</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run watch &lt;id&gt;
</span></span></code></pre></div><p>It&rsquo;s analogous to <code>watch</code>, continuously refreshing the action progress in the
background, step by step. Example:</p>
<pre tabindex="0"><code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
  ✓ Set up job
  ✓ Checkout source code
  ✓ Run azure/setup-helm@v4
  ✓ Install yq
  ✓ Install helm cm-push plugin
  ✓ Set up Helm repos
  * Helm package all charts sans blacklist
  * Publish all helm packages
  * Post Checkout source code
</code></pre><h3 id="option-2-via-the-web-browser">Option 2) Via the web browser</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run view &lt;id&gt; -w
</span></span></code></pre></div><p>It will open the system web browser in the right page, pertaining to the action
run.</p>
<h2 id="putting-everything-together">Putting everything together</h2>
<h3 id="option-1">Option 1)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run watch <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="option-2">Option 2)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run view <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span> -w
</span></span></code></pre></div>]]></content:encoded></item><item><title>Pritunl log in via CLI</title><link>https://www.perrotta.dev/2024/05/pritunl-log-in-via-cli/</link><pubDate>Tue, 07 May 2024 16:03:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/pritunl-log-in-via-cli/</guid><description>&lt;p>&lt;a href="https://pritunl.com/">Pritunl&lt;/a> is an Enterprise Distributed OpenVPN server.&lt;/p>
&lt;p>In order to run its client on macOS, an &lt;code>.app&lt;/code> is provided. However, using it to
log in every day is quite tedious.&lt;/p>
&lt;p>Let&amp;rsquo;s automate it so that we can connect to the VPN with a single command.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://pritunl.com/">Pritunl</a> is an Enterprise Distributed OpenVPN server.</p>
<p>In order to run its client on macOS, an <code>.app</code> is provided. However, using it to
log in every day is quite tedious.</p>
<p>Let&rsquo;s automate it so that we can connect to the VPN with a single command.</p>
<p>In order to fetch the credentials in this example in a secure manner, we&rsquo;ll be
using 1password. <a href="https://www.passwordstore.org/"><code>pass</code></a> would have worked just
as fine.</p>
<p>First, configure Pritunl via its app UI, creating a profile for your corp
credentials.</p>
<p>Then figure out what the profile ID you just created is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>profile_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r <span style="color:#e6db74">&#39;.[0].id&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Now, create an entry in 1Password for your Pritunl credentials associated with
the profile above.</p>
<p>Let&rsquo;s use the <code>op</code> official CLI tool from 1Password to fetch the password and
the OTP (one-time password) for the &ldquo;Pritunl (VPN)&rdquo; entry (change it
accordingly).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>op_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#39;Pritunl (VPN)&#39;</span> --format json | jq -r <span style="color:#e6db74">&#39;.id&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op read <span style="color:#e6db74">&#34;op://private/</span>$op_id<span style="color:#e6db74">/password&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>otp<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#34;</span>$op_id<span style="color:#e6db74">&#34;</span> --totp<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Now we can use the <code>pritunl-client</code> to log in programatically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pritunl-client start <span style="color:#e6db74">&#34;</span>$profile_id<span style="color:#e6db74">&#34;</span> --password <span style="color:#e6db74">&#34;</span>$password$otp<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Then verify it has indeed connected:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pritunl-client list
</span></span></code></pre></div><p>The trick is that it accepts the concatenation of the password with the OTP as
the password. There&rsquo;s not a separate <code>--otp</code> flag.</p>
<p>Putting everything together, we can create a function for our favorite shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Log into corp VPN</span>
</span></span><span style="display:flex;"><span>pritunl_login<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	local profile_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r <span style="color:#e6db74">&#39;.[0].id&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	local op_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#39;Pritunl (VPN)&#39;</span> --format json | jq -r <span style="color:#e6db74">&#39;.id&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	local password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op read <span style="color:#e6db74">&#34;op://private/</span>$op_id<span style="color:#e6db74">/password&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	local otp<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#34;</span>$op_id<span style="color:#e6db74">&#34;</span> --totp<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	pritunl-client start <span style="color:#e6db74">&#34;</span>$profile_id<span style="color:#e6db74">&#34;</span> --password <span style="color:#e6db74">&#34;</span>$password$otp<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	pritunl-client list
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Shell text substitution</title><link>https://www.perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p></description><content:encoded><![CDATA[<p>I learned a neat shell trick this week. In both <code>bash</code> and <code>zsh</code> you can use the
circumflex / caret (<code>^</code>) symbol to find &amp; replace a word from the previous
command.</p>
<p>Usage: <code>^prev^next</code>. It&rsquo;s best illustrated with examples:</p>
<h2 id="terraform">terraform</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform plan -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform apply -var-file /path/to/foo.tfvars
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>^init^plan
</span></span><span style="display:flex;"><span>^plan^apply
</span></span></code></pre></div><h2 id="systemd">systemd</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>sudo systemctl status nginx
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>^restart^status
</span></span></code></pre></div><h2 id="one-observation">one observation</h2>
<p><code>zsh</code> will run the substitution right away, whereas <code>bash</code> will allow you
to review and edit the replaced command before running it.</p>]]></content:encoded></item><item><title>pyenv</title><link>https://www.perrotta.dev/2024/03/pyenv/</link><pubDate>Sun, 10 Mar 2024 22:18:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/pyenv/</guid><description>&lt;p>When working on Python projects, &lt;a href="https://github.com/pyenv/pyenv">&lt;code>pyenv&lt;/code>&lt;/a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.&lt;/p></description><content:encoded><![CDATA[<p>When working on Python projects, <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.</p>
<p>I&rsquo;d recommend to install it with homebrew (<code>brew install pyenv</code>).</p>
<p>The upstream documentation is great. The commands you&rsquo;ll typically use are:</p>
<ul>
<li><code>pyenv versions</code>: list all installed versions</li>
<li><code>pyenv global &lt;version&gt;</code>: set a specific python version for your whole system</li>
<li><code>pyenv local</code>: set a specific python version only for a specific project
(directory)</li>
</ul>
<p>And then it&rsquo;s handy to add the following blurb to your shell rc file to make
<code>pyenv</code> work properly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># pyenv: https://github.com/pyenv/pyenv</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> hash pyenv &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	export PYENV_ROOT<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.pyenv&#34;</span>
</span></span><span style="display:flex;"><span>	path_munge <span style="color:#e6db74">&#34;</span>$PYENV_ROOT<span style="color:#e6db74">/bin&#34;</span>
</span></span><span style="display:flex;"><span>	eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>pyenv init -<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>Note that <code>path_munge</code> is a custom function, it merely appends the given
argument to the <code>$PATH</code>.</p>]]></content:encoded></item><item><title>chrome-fresh: start a fresh instance of Google Chrome</title><link>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</link><pubDate>Sun, 10 Mar 2024 21:55:16 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</guid><description>&lt;p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on &lt;a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing&lt;/a> in the Browser Automation team at
Google:&lt;/p></description><content:encoded><![CDATA[<p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on <a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing</a> in the Browser Automation team at
Google:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># start chrome with ephemeral settings (every run of Chrome is empty)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># usage: chrome-fresh out/Default/chrome</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TMPDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>trap <span style="color:#e6db74">&#39;rm -rf &#34;${TMPDIR}&#34;&#39;</span> EXIT
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CHROME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span>google-chrome<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; shift
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md</span>
</span></span><span style="display:flex;"><span>CHROME_FLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;--use-mock-keychain&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Darwin&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> *.app <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	open -n <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> --args <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>  <span style="color:#75715e"># &#34;Linux&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The script is self-documenting, it was properly tested on both Linux and macOS.</p>
<p>The typical use case would be to compile a new Google Chrome binary
(<code>/out/Default/chrome</code>), and then use the script to launch it with a fresh user
data directory, to ensure the previous launch settings do not interfere with the
current one.</p>]]></content:encoded></item><item><title>Set terminal language to English</title><link>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</link><pubDate>Thu, 22 Feb 2024 09:48:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</guid><description>&lt;p>I changed my macOS system language to German, with the intent of &lt;a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it&lt;/a>.&lt;/p>
&lt;p>One negative side effect is that most binaries I execute with my shell (for
example: &lt;code>git&lt;/code>) are now outputting German text as well&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In hindsight, this
should have been expected.&lt;/p></description><content:encoded><![CDATA[<p>I changed my macOS system language to German, with the intent of <a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it</a>.</p>
<p>One negative side effect is that most binaries I execute with my shell (for
example: <code>git</code>) are now outputting German text as well<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. In hindsight, this
should have been expected.</p>
<p>A simple fix is to override the environment locale with English. I made the
following
<a href="https://github.com/thiagowfx/.dotfiles/commit/4b784b1fa89f569623340cf3d58cc22d8504926a">addition</a>
to my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Force the system-wide language to English.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Both &#34;en_US&#34; and &#34;en_CA&#34; work here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We could also optionally set LC_ALL but it is not necessary.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verify current locale settings with `locale`.</span>
</span></span><span style="display:flex;"><span>export LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US&#34;</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You could argue that it&rsquo;s actually desirable to have terminal applications
output German. However, nothing beats the standardization, consistency and
familiarity of English for developer tooling. If I really need to have this
extreme exposure one day, it&rsquo;s always possible to just <code>unset LANG</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Integrating terraform with ansible</title><link>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p></description><content:encoded><![CDATA[<p>This post is a follow-up of <a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world</a>.</p>
<blockquote>
<p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.</p>
</blockquote>
<p>Before we extensively use Ansible to configure our VPS instance, first let&rsquo;s
set up a basic integration between Terraform and Ansible.</p>
<p>First of all, here&rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&rsquo;ll explain some of them
below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> var<span style="color:#a6e22e">iables</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_hostname&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_region&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>All variables were moved to a <code>variables.tf</code> file. This is to follow standard
terraform
<a href="https://developer.hashicorp.com/terraform/language/modules/develop/structure">conventions</a>
/ recommendations for module structures. Furthermore, it becomes easier to
manage variables when they are all stored in a single place.</p>
<p>The main module file now looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">main</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;nanode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>             = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>            = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>            = var.<span style="color:#a6e22e">linode_hostname</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span>           = var.<span style="color:#a6e22e">linode_region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">keys</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I removed the token from the linode provider. Now it is supplied via the
<code>LINODE_TOKEN</code> environment variable. In order to automatically populate that
variable, I use <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a>. There&rsquo;s an <code>.envrc</code> file that provides its value, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># terraform init</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export LINODE_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-token-here&#34;</span>
</span></span></code></pre></div><p>I also created a repository for this project:
<a href="https://github.com/thiagowfx/knol">https://github.com/thiagowfx/knol</a>. That&rsquo;s enough for preliminaries, now let&rsquo;s
go back to Ansible.</p>
<p>The first component we&rsquo;ll need is an Ansible
<a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">inventory</a>
file, containing the IP address of the host we&rsquo;ll manage. It could look like
this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[all]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">1.2.3.4 ansible_user</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
</span></span></code></pre></div><p>&hellip;wherein <code>1.2.3.4</code> is the IP address of our VPS.</p>
<p>That said, due to the fact the VPS instance is created dynamically, maintaining
that IP address manually would be tedious. Therefore, let&rsquo;s have Terraform
manage it.</p>
<p>We can do so with a
<a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file"><code>local_file</code></a>.
Heck, we could even use a
<a href="https://registry.terraform.io/providers/hashicorp/template/latest/docs/data-sources/file"><code>template_file</code></a>,
however it would be overkill as there are only two simple lines in our
inventory at this point. A <code>local_file</code> is created upon <code>terraform apply</code> and
deleted upon <code>terraform destroy</code>. Therefore it doesn&rsquo;t even need to be tracked
by our VCS:</p>
<pre tabindex="0"><code>resource &#34;local_file&#34; &#34;ansible_inventory&#34; {
  content  = &lt;&lt;-EOF
[all]
${linode_instance.nanode.ip_address} ansible_user=root
EOF
  filename = &#34;inventory.ini&#34;
  file_permission = &#34;0644&#34;
}
</code></pre><p>Once we run terraform (plan + apply), an <code>inventory.ini</code> file should be created
with the above contents.</p>
<p>Because the IP address is ephemeral and dynamic, we should have a
straightforward way to see its value. A terraform
<a href="https://developer.hashicorp.com/terraform/language/values/outputs"><code>output</code></a>
is perfect for that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">outputs</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">output</span> <span style="color:#e6db74">&#34;ip_address&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">value</span> = <span style="color:#a6e22e">linode_instance</span>.<span style="color:#a6e22e">nanode</span>.<span style="color:#a6e22e">ip_address</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Later on (after terraforming) we will be able to use <code>terraform output</code> to see
the server IP address.</p>
<p>We have the inventory file. Now we need a
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">playbook</a>.
A playbook contains a sequence of tasks to be applied to our server.</p>
<p>Let&rsquo;s start with a basic playbook that just installs and starts <code>nginx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">all</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install the web server (nginx)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.general.apk</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Start the web server</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">started</span>
</span></span></code></pre></div><p>Save this to a <code>playbook.yml</code> file.</p>
<p>After terraforming, we should now be able to run ansible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ansible-playbook -i inventory.ini playbook.yml
</span></span></code></pre></div><p>In order to make this setup more ergonomic, let&rsquo;s create a <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> terraform ansible
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ansible</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	ansible-playbook -i inventory.ini playbook.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> init
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> plan
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> destroy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all ansible terraform clean
</span></span></code></pre></div><p>Then we can just run <code>make terraform</code> or <code>make ansible</code> for granular steps. Or
just <code>make</code> to run everything in the right order.</p>
<p>I extracted the <code>terraform</code> binary to its own variable because it facilitates
the use of <a href="https://opentofu.org/">OpenTofu</a> (a fork) in lieu of terraform.</p>
<p>And that&rsquo;s it for today! In a future post, we&rsquo;ll look into extending our
Ansible usage to fully bootstrap Miniflux on the server.</p>]]></content:encoded></item><item><title>Hugo: rename a tag</title><link>https://www.perrotta.dev/2024/01/hugo-rename-a-tag/</link><pubDate>Mon, 29 Jan 2024 00:20:31 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/hugo-rename-a-tag/</guid><description>&lt;p>This blog is rendered by the means of a static site generator (SSG) called
&lt;a href="https://gohugo.io/">Hugo&lt;/a>. Each blog post has a set of one or more tags
associated to it. The more posts I create, the more consolidated the tags become.&lt;/p>
&lt;p>Sometimes I need to rename tags after-the-fact to better reflect the underlying
posts they represent.&lt;/p></description><content:encoded><![CDATA[<p>This blog is rendered by the means of a static site generator (SSG) called
<a href="https://gohugo.io/">Hugo</a>. Each blog post has a set of one or more tags
associated to it. The more posts I create, the more consolidated the tags become.</p>
<p>Sometimes I need to rename tags after-the-fact to better reflect the underlying
posts they represent.</p>
<p>This is how I typically do it. Start from the root of the git repository, then do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% <span style="color:#66d9ef">for</span> file in content/posts/**/*.md; <span style="color:#66d9ef">do</span> gsed -i -e <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span> <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>The example above renames <code>german</code> -&gt; <code>deutsch</code>.</p>
<p>This isn&rsquo;t the most robust way to do so, but it&rsquo;s the quickest one. For extra robustness, I&rsquo;d do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -t f -e md -e gsed -i -x <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span>
</span></span></code></pre></div><p>&hellip;however it&rsquo;s always easier to remember the for loop syntax than the <code>fd</code>
one.</p>
<h2 id="why-fd-instead-of-a-for-loop">Why <code>fd</code> instead of a <code>for</code> loop?</h2>
<p><code>fd(1)</code> is more elegant than shell wildcards. Although, in practice, both ways
are equivalent and should yield no difference.</p>
<h2 id="why-gsed-instead-of-sed">Why <code>gsed</code> instead of <code>sed</code>?</h2>
<p>I am on macOS. The GNU version of <code>sed</code> does not create backup files, which is what I want in most cases. There&rsquo;s no need for backups because everything is checked into git already; if I make a mistake, I can always <code>git reset --hard</code> or <code>git checkout</code>. The BSD version of <code>sed</code> will leave this mess behind:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -t f -e md -x /usr/bin/sed -i -e <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span>
</span></span><span style="display:flex;"><span>% git st
</span></span><span style="display:flex;"><span>On branch master
</span></span><span style="display:flex;"><span>Your branch is up to date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Changes not staged <span style="color:#66d9ef">for</span> commit:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	modified:   2022-02-27-linux-us-international-keyboard-layout.md
</span></span><span style="display:flex;"><span>	modified:   2022-04-03-translating-german-to-english.md
</span></span><span style="display:flex;"><span>	modified:   2024-01-29-anki-find-all-notes-with-an-empty-field.md
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Untracked files:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	2014-01-07-testando-uma-iso-no-linux-sem-o-virtualbox.md-e
</span></span><span style="display:flex;"><span>	2014-04-18-mini-recovery-tipico-via-usb.md-e
</span></span><span style="display:flex;"><span>	2014-05-01-instalando-o-gentoo-a-partir-do-arch.md-e
</span></span><span style="display:flex;"><span>	2014-09-28-my-first-ebuild.md-e
</span></span><span style="display:flex;"><span>	2015-01-07-the-eudyptula-challenge.md-e
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>There are even more of these <code>*-e</code> files, and they are super annoying. It&rsquo;s easy to get rid of them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% rm **/*-e
</span></span></code></pre></div><p>&hellip;but why bother, if we can just stick to the more familiar GNU <code>sed</code> anyway?</p>
<h2 id="caveats">Caveats</h2>
<p>Finally, note the caveat: this find and replace is naive and could end up replacing false positives! Nonetheless, I&rsquo;m still a big fan of this approach, because it&rsquo;s the quickest one. As my blog is checked into <code>git</code> anyway, I can always easily review the changes before committing them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git diff
</span></span></code></pre></div><p>If there are too many diffs, then prefer an incremental approach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git add -p
</span></span></code></pre></div><p>Happy tag renaming! Well, this only happens every once in a while anyway.</p>]]></content:encoded></item><item><title>sd-world: perform a full system upgrade</title><link>https://www.perrotta.dev/2024/01/sd-world-perform-a-full-system-upgrade/</link><pubDate>Sun, 28 Jan 2024 01:42:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/sd-world-perform-a-full-system-upgrade/</guid><description>&lt;p>Whenever I want to upgrade any one of my systems, I run &lt;code>sd-world&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I want to upgrade any one of my systems, I run <code>sd-world</code>.</p>
<p>You can find the current version of <code>sd-world</code>
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/scripts/.bin/sd-world">here</a>
in my dotfiles.</p>
<p>Here&rsquo;s a snapshot<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># perform a full system upgrade</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set -euo pipefail
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	local bold<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>tput bold<span style="color:#66d9ef">)</span> normal<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>bold<span style="color:#e6db74">}</span>$*<span style="color:#e6db74">${</span>normal<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>run_if_exists<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> command -v <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>			log <span style="color:#e6db74">&#34;Running </span>$1<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			log <span style="color:#e6db74">&#34;Running </span>$*<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> -d <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		shift
</span></span><span style="display:flex;"><span>		log <span style="color:#e6db74">&#34;Running </span>$*<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># usage: do_git &lt;path/to/git/repo&gt;</span>
</span></span><span style="display:flex;"><span>do_git<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -d <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> git -C <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> pull origin master
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>uname<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># linux</span>
</span></span><span style="display:flex;"><span>	Linux<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># alpine linux</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apk&#34;</span> doas apk upgrade
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># arch linux</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;pacman&#34;</span> sudo pacman -Syu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># debian linux</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># warning: macos has /usr/bin/apt which is a Java thing</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apt-get&#34;</span> sudo apt-get upgrade -y
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apt-get&#34;</span> sudo apt-get autoremove
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># macOS</span>
</span></span><span style="display:flex;"><span>	Darwin<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># homebrew</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;brew&#34;</span> brew upgrade
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;brew&#34;</span> brew cleanup
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># system update and app store</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># run_if_exists &#34;softwareupdate&#34; softwareupdate --install --all</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;mas&#34;</span> mas upgrade
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># windows</span>
</span></span><span style="display:flex;"><span>	MINGW*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># third-party package manager</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;scoop&#34;</span> scoop update
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flatpaks</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;flatpak&#34;</span> flatpak update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># nix</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;nix-channel&#34;</span> nix-channel --update
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;nix-env&#34;</span> nix-env -u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pihole</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># update pihole itself and gravity lists</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;pihole&#34;</span> pihole -up
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dotfiles</span>
</span></span><span style="display:flex;"><span>do_git <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.dotfiles&#34;</span>
</span></span><span style="display:flex;"><span>do_git <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.dotfiles_corp&#34;</span>
</span></span></code></pre></div><p>There&rsquo;s a lot to unpack here.</p>
<h2 id="why-is-it-called-sd-world">Why is it called <code>sd-world</code>?</h2>
<p><code>world</code> is an inspiration taken from <a href="https://www.gentoo.org/">Gentoo Linux</a>.
To upgrade a typical gentoo system, you usually run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>emerge --ask --quiet --update --changed-use --deep @world
</span></span></code></pre></div><p>There&rsquo;s something deeply inspiring about saying it out loud: &ldquo;emerge the
world&rdquo;. As if the whole world is at your fingertips.</p>
<p><code>sd</code> stands for &ldquo;script directory&rdquo;, it&rsquo;s an inspiration taken from <a href="https://ianthehenry.com/posts/sd-my-script-directory/">Ian
Henry</a>.</p>
<p><strong>Rationale</strong>: I tend to put scripts I run semi-frequently in a <code>.bin</code>
directory that is in my system <code>$PATH</code>. However, there&rsquo;s always a chance their
name could clash with a built-in one (e.g. in <code>/usr/bin/</code>). In order to prevent
(or mitigate) it from happening, a prefix is added. For a long time in my life
I used the <code>t-</code> prefix, merely because of my first name initial. At some point
I migrated to <code>sd-</code>. That&rsquo;s all, nothing fancy about it.</p>
<h2 id="why-bash">Why <code>bash</code>?</h2>
<p><code>bash</code> is the de-facto standard shell in most Linux distributions I care about.
And it&rsquo;s also easily available in macOS and BSDs. And it&rsquo;s POSIX compliant.</p>
<p><strong>Therefore</strong>: availability, portability and compatibility.</p>
<h2 id="why-usrbinenv-bash-instead-of-binbash">Why <code>/usr/bin/env bash</code> instead of <code>/bin/bash</code>?</h2>
<p>Because the <code>env</code> shebang is more portable. This is more relevant when working
with BSDs. On Linux <code>/bin/bash</code> should be mostly fine.</p>
<h2 id="why-set--euo-pipefail">Why <code>set -euo pipefail</code>?</h2>
<p>A well-established <a href="https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425">good
practice</a>.</p>
<h2 id="why-use-a-separare-log-function">Why use a separare <code>log</code> function?</h2>
<ol>
<li>Old habits die hard.</li>
<li>Consistent formatting.</li>
</ol>
<h2 id="why-run_if_exists">Why <code>run_if_exists</code>?</h2>
<p>Since the script attempts to upgrade (potentially) many package managers, at
the very least we try to skip the ones that aren&rsquo;t installed. For example,
there&rsquo;s no need to attempt to run <code>pacman</code> in a macOS system.</p>
<h2 id="what-else">What else?</h2>
<p>The rest should be quite straightforward to understand. Some design decisions:</p>
<ul>
<li><code>sudo</code> permissions are not asked upfront, because not every system uses
<code>sudo</code>. Notably, Alpine Linux and OpenBSD use <code>doas</code> by default. Also,
laziness is OK as the script is intended for interactive use.</li>
<li><code>git</code> is there merely for convenience. Updating my dotfiles could be done
from a separate script, but that would be overkill for my simple use case.</li>
<li>There&rsquo;s no concurrency / parallelism, and that&rsquo;s intentional. I prefer output
readability and system stability in this case.</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Scarface:_The_World_Is_Yours">The world is yours</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Prefer to refer to the up-to-date version in my
<a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a> repository though. I
included a snapshot merely because there&rsquo;s a non-zero chance the git
version could be moved elsewhere someday.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s discuss the <em>raison d&rsquo;etre</em> of <a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing</a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.</p>
<p><a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago</a>, web developers would run
(web) integration tests with <a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic</a> using Google Chrome (or Chromium)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This was a <a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era</a>.</p>
<p><em>&ldquo;Why?&rdquo;</em>, you may rightfully ask.</p>
<ul>
<li>The web browser and/or its components / extensions / etc could
<strong>auto-update</strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness</li>
<li>Chrome adds an <strong>info bar</strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.</li>
<li>There are no versioned Chrome builds for download. There&rsquo;s no <strong>browser
pinning</strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
<ul>
<li><strong>Corollary</strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
<a href="https://chromedriver.chromium.org/downloads">Chromedriver</a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ul>
</li>
</ul>
<p>In order to address these (and other) issues, <a href="https://goo.gle/chrome-for-testing">Chrome for
Testing</a> (hereafter &ldquo;CfT&rdquo;) was born. To
clarify, today where are three flavours of Chrom*:</p>
<ul>
<li><strong>Chromium</strong>: the open-source project, <a href="https://chromium.org/">https://chromium.org/</a>. The root of all
derivatives (Microsoft Edge, Brave, etc). It is available in full source
form, but there are no (official) pre-built binaries for it.</li>
<li><strong>Google Chrome</strong>: the proprietary, closed-source version of Chromium developed
by Google. Think of it as Chromium on steroids. Google distributes pre-built
Chrome binaries for every platform it supports.</li>
<li><strong>Google Chrome for Testing</strong>: think of it as &ldquo;reproducible (or pinned, or
frozen) Google Chrome&rdquo;. It is basically a snapshot of Google Chrome in a
fixed time in the past, plus a few bits of developer-oriented features
mentioned in this article.</li>
</ul>
<p>There are other <em>niceties</em> that Chrome for Testing accomplishes as of today:</p>
<ul>
<li>The <a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)</a> experiment
(&ldquo;Protocol Monitor&rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.</li>
<li>Mechanisms such as <a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts</a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
<a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable"><code>DEBIAN_FRONTEND=noninteractive</code></a>
when running <code>apt</code> in dockerfiles. You don&rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.</li>
<li>Completely agnostic to the concept of &ldquo;Stable&rdquo; / &ldquo;Beta&rdquo; / &ldquo;Dev&rdquo;. If you have
pinned versions, you don&rsquo;t need to care about any of that.</li>
<li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases</li>
</ul>
<p>Something important to note:</p>
<blockquote>
<p><strong>Warning</strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.</p>
</blockquote>
<p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&rsquo;s
package manager (e.g. <code>apt</code>, <code>dnf</code>, <code>pacman</code>, etc). Why should it be different
for Chrome for Testing?</p>
<p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&rsquo;t want end users to shoot themselves on the foot, therefore it&rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Because of that, CfT cannot be made the default system browser.</p>
<p>The easiest way to obtain CfT is via its public API, which is documented here:
<a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/</a>, or through the official
<a href="https://pptr.dev/browsers-api">CLI utility</a> that is part of Puppeteer.</p>
<p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.</p>
<h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?</h2>
<p>The <a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi</a> repository is an excellent (and simple-ish) example on how to do so<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Given a <code>.github/workflows/e2e.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">E2E tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">e2e</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is the exciting part wherein we fetch CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Despite the &#34;chromium&#34; name, this is actually CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We set a explicit shell to force &#34;set -eo pipefail&#34; so that,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># if the command fails, then the entire step fails.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We do not want &#34;cut&#34; to run if the download fails for some reason.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># version of the CLI tool, but that&#39;s how it should be done for now.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We store the location of the CfT binary in an environment variable.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Google Chrome for Testing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cft_binary=&#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&#39; &#39;)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;cft_binary=$cft_binary&#34; &gt;&gt; $GITHUB_ENV</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip install -r tests/requirements.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># out to CfT, using the environment variable set earlier.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run E2E tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm run e2e</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">BROWSER_BIN</span>: <span style="color:#ae81ff">${{ env.cft_binary }}</span>
</span></span></code></pre></div><p>You can find the complete version of this example in an <a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit</a>
within that repository. The reason I link to an older commit is due to its
direct usage of the <a href="https://pptr.dev/browsers-api">@puppeteer/browsers</a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.</p>
<p>To fully realize the benefits of reproducibility, you should not use <code>latest</code>.
Instead, pin the browser to a specific version.</p>
<p>If using an environment variable (or a command-line flag) is not an option for
some reason, then an alternative would be to create a symlink (<code>ln -s</code>) to
<code>$cft_binary</code> from a place in the front of your <code>$PATH</code>. Or, alternatively,
temporarily update your <code>$PATH</code> with the <code>dirname</code> of <code>$cft_binary</code>.</p>
<p>Also, if you cannot or do not want to install <code>npm</code> (<code>npx</code>) just for the sake
of fetching CfT<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, then just fetch it directly (use <code>curl</code> or <code>wget</code>) from
its <a href="https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints">API
endpoint</a>, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/121.0.6167.85/linux64/chrome-linux64.zip
</span></span></code></pre></div><p>Although note that this is not a future-proof way of fetching CfT. It&rsquo;s a
simple shortcut. The better way is to query the JSON metadata file for a
specific platform and browser version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% curl https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json | jq -r <span style="color:#e6db74">&#39;.builds.&#34;121.0.6167&#34;.downloads.chrome[] | select(.platform == &#34;linux64&#34;).url&#39;</span>
</span></span></code></pre></div><p>&hellip;so that the download works even if the URL changes in the future <a href="https://github.com/GoogleChromeLabs/chrome-for-testing/pull/102">for some
reason</a>.</p>
<h2 id="references">References</h2>
<ul>
<li>Chrome for Testing Design Document: <a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing</a></li>
<li><a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For simplicity, referred to as just <em>Chrome</em> hereafter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You can find lots of such reports <a href="https://groups.google.com/g/chromedriver-users">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The same way you wouldn&rsquo;t recommend Arch Linux for linux newbies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><strong>Disclaimer</strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I know, I know, JS bloat.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Terraforming a Linode: hello world</title><link>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I host my own <a href="https://miniflux.app/">Miniflux</a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running <a href="https://www.alpinelinux.org/">Alpine Linux</a>.</p>
<p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
<a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC</a>.</p>
<p>The current setup does not use any containers. I had proudly made it as KISS as
possible at the time:</p>
<ol>
<li>Linode is a very beginner-friendly (and cheap) VPS</li>
<li>Alpine Linux is a first-class citizen on Linode</li>
<li>There&rsquo;s an <code>apk</code> <a href="https://pkgs.alpinelinux.org/packages?name=miniflux">package</a> for <code>miniflux</code></li>
<li>There&rsquo;s an OpenRC<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> script for <code>miniflux</code> (so that it can be controlled via <code>service</code>)</li>
</ol>
<p>For the first part of this automation we will look into provisioning a Linode
with an Alpine Linux installation. In order to do so we will use HashiCorp
<a href="https://www.terraform.io/">Terraform</a>.</p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>Provision a new Linode</li>
<li>Deploy it in Europe</li>
<li>Use the smallest shape (a so-called <a href="https://www.linode.com/community/questions/211/what-is-a-nanode">Nanode</a>)</li>
<li>Run Alpine Linux</li>
<li>Set it up with my <a href="https://github.com/thiagowfx.keys">public ssh key</a>, which is hosted on Github</li>
</ul>
<h2 id="terraform-setup">Terraform setup</h2>
<ul>
<li>Install a provider for Linode: <a href="https://registry.terraform.io/providers/linode/linode/latest/docs">https://registry.terraform.io/providers/linode/linode/latest/docs</a></li>
</ul>
<p>Scaffold it like this, in a <code>main.tf</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform init
</span></span></code></pre></div><ul>
<li>Generate a Linode API token</li>
</ul>
<p>Go to <a href="https://cloud.linode.com/profile/tokens">https://cloud.linode.com/profile/tokens</a>, create a new token called
<code>terraform</code>. with the &ldquo;Linodes&rdquo; scope set to &ldquo;Read/Write&rdquo;.</p>
<ul>
<li>Append this API token to <code>main.tf</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">token</span> = <span style="color:#e6db74">&#34;&lt;your token here&gt;&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Add a
<a href="https://registry.terraform.io/providers/linode/linode/latest/docs/resources/instance"><code>linode_instance</code></a>
with the appropriate fields set according to the documentation:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>  = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>  = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>   = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = [<span style="color:#e6db74">&#34;&lt;your ssh public key here&gt;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan
</span></span></code></pre></div><p>&ldquo;Plan&rdquo; is basically a dry-run. Terraform will output what it intends to do, but nothing will be done yet.</p>
<ul>
<li>Analyze the output and double check that it looks correct.</li>
</ul>
<p>To actually perform the provisioning, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform apply
</span></span></code></pre></div><p>Then confirm the prompt.</p>
<p>Within a few seconds (or maybe minutes), you should see your new Linode in the
<a href="https://cloud.linode.com/">Linode Console</a>.</p>
<p>We can test our deployment by ssh&rsquo;ing to our new machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ssh root@&lt;public IP address&gt; -i ~/.ssh/my_ssh_key
</span></span><span style="display:flex;"><span>Welcome to Alpine!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Alpine Wiki contains a large amount of how-to guides and general
</span></span><span style="display:flex;"><span>information about administrating Alpine systems.
</span></span><span style="display:flex;"><span>See &lt;https://wiki.alpinelinux.org/&gt;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You can setup the system with the command: setup-alpine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You may change this message by editing /etc/motd.
</span></span></code></pre></div><p>Let&rsquo;s take a pause to appreciate how lightweight it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>localhost:~# df -h
</span></span><span style="display:flex;"><span>Filesystem                Size      Used Available Use% Mounted on
</span></span><span style="display:flex;"><span>devtmpfs                 10.0M         <span style="color:#ae81ff">0</span>     10.0M   0% /dev
</span></span><span style="display:flex;"><span>shm                     487.8M         <span style="color:#ae81ff">0</span>    487.8M   0% /dev/shm
</span></span><span style="display:flex;"><span>/dev/sda                 24.1G    238.1M     22.6G   1% /
</span></span><span style="display:flex;"><span>tmpfs                   195.1M    268.0K    194.8M   0% /run
</span></span></code></pre></div><p>Only 238 MiB!</p>
<p>To deprovision it, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -destroy
</span></span></code></pre></div><p>If everything looks correct, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform destroy
</span></span></code></pre></div><p><strong>Warning</strong>: It turns out the &ldquo;Linodes&rdquo; scope was not enough to do the
deprovisioning. I needed to create a new scope, with more permissions, in order
to do so.</p>
<p>As you can see, terraform makes it very trivial to deprovision systems.</p>
<p><strong>Bonus points</strong>: run <code>terraform fmt</code> to format your file. Never go <a href="https://www.youtube.com/watch?v=-CmadmM5cOk">out of
style</a>.</p>
<p><strong>Tip</strong>: At any point you can run <code>terraform validate</code> to verify your <code>main.tf</code>
file is syntatically correct.</p>
<p>Two things could be improved in the previous setup:</p>
<ul>
<li>We could use <code>authorized_users</code> to pass in our linode username. If we add an
SSH key to our linode account, then that key would be automatically deployed
to the system, thereby removing the need to specify <code>authorized_keys</code>.</li>
<li>Alternatively, we could fetch our key from an URL endpoint with the use of
the <code>hashicorp/http</code> provider, like so:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;thiagowfx_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/thiagowfx.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">thiagowfx_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The &ldquo;list comprehension&rdquo; above does line splitting magic to convert them to a
list of string, and the <code>compact</code> removes the empty new line at the end.</p>
<p>We could improve the example above even further.</p>
<p>For starters, let&rsquo;s parameterize out the username to a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;user_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We could then easily supply another username with <code>-var</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -var github_username<span style="color:#f92672">=</span>torvalds
</span></span></code></pre></div><p>Note that the above example leverages <a href="https://developer.hashicorp.com/terraform/language/expressions/strings">string interpolation</a>.</p>
<p>We could also extract the SSH keys list to its own &ldquo;variable&rdquo; (<a href="https://developer.hashicorp.com/terraform/language/values/locals">locals</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">ssh_keys</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>A more robust (and stable) way to query the key though is through the Github API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that a typical response body looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;id&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;&lt;ssh key&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>API endpoint documentation:
<a href="https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user">https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user</a></p>
<p>If we use <code>output</code> instead of <code>locals</code>, then we can debug (inspect) it with
<code>terraform output</code>.</p>
<p>And that&rsquo;s it for today! In a future post, we will continue from here by using
<a href="https://www.ansible.com/">Ansible</a> to install and set up Miniflux in our new
Linode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alpine Linux does not use <code>systemd</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>The fundamental right to paste</title><link>https://www.perrotta.dev/2024/01/the-fundamental-right-to-paste/</link><pubDate>Mon, 22 Jan 2024 18:55:13 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/the-fundamental-right-to-paste/</guid><description>&lt;p>Some websites attempt to prevent users from pasting text (i.e. &lt;code>Ctrl+V&lt;/code> /
&lt;code>Cmd+V&lt;/code>) in web browsers.&lt;/p>
&lt;p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.&lt;/p></description><content:encoded><![CDATA[<p>Some websites attempt to prevent users from pasting text (i.e. <code>Ctrl+V</code> /
<code>Cmd+V</code>) in web browsers.</p>
<p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.</p>
<p>It is relatively easy to bypass most trivial blocks with plain JavaScript. Open a DevTools console (<code>Option + Cmd + I</code> in Google Chrome on macOS), then paste in the following snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">forceEnableCopyPaste</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">e</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;paste&#39;</span>, <span style="color:#e6db74">&#39;copy&#39;</span>].<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span> =&gt; {
</span></span><span style="display:flex;"><span>    document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span>, <span style="color:#a6e22e">forceEnableCopyPaste</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>})();
</span></span></code></pre></div><p><strong>Bonus points</strong>: it also works for copying text.</p>
<p>I can see the point of trying to attempt to block copying (e.g. copyright,
online exams), but there&rsquo;s little reason to prevent pasting.</p>
<p>The only <em>arguably valid</em> use case I&rsquo;ve seen to date for blocking pasting is
in some sign-up forms wherein you need to type in some piece of user ID (e.g.
your email, or your telephone number) twice. The second text field is
sometimes blocked, as to <em>encourage</em> you to double check it is absolutely
correct™, by the means of carefully typing it out.</p>
<p>The snippet above could also be easily converted to a bookmarklet.</p>
<p>Search for &ldquo;bookmarklet builder&rdquo; in your favorite search engine, go to a website such as <a href="https://caiorss.github.io/bookmarklet-maker/">https://caiorss.github.io/bookmarklet-maker/</a>, paste the above snippet therein, then get a compressed version such as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">Bjavascript</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#66d9ef">function</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">const</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#a6e22e">e</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">return</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">B</span><span style="color:#e6db74">&#39;paste&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#e6db74">&#39;copy&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span>
</span></span></code></pre></div><p>Now just create a web browser favorite with that resource. Clicking the
bookmark will yield the same effect as pasting the snippet into devtools.</p>]]></content:encoded></item><item><title>Remove large files from your computer</title><link>https://www.perrotta.dev/2024/01/remove-large-files-from-your-computer/</link><pubDate>Sun, 21 Jan 2024 10:40:13 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/remove-large-files-from-your-computer/</guid><description>&lt;p>Whenever disk space gets almost full, I like to use the following software to
clean up (unnecessary) big files from my computers:&lt;/p></description><content:encoded><![CDATA[<p>Whenever disk space gets almost full, I like to use the following software to
clean up (unnecessary) big files from my computers:</p>
<h2 id="windows">Windows</h2>
<p><a href="https://windirstat.net/">WinDirStat</a>:</p>
<blockquote>
<p>WinDirStat is a disk usage statistics viewer and cleanup tool for various
versions of Microsoft Windows.</p>
</blockquote>
<p>It&rsquo;s user-friendly and open source.</p>
<h2 id="linux--macos">Linux / macOS</h2>
<p><a href="https://dev.yorhel.nl/ncdu">ncdu</a>:</p>
<blockquote>
<p>Ncdu is a disk usage analyzer with an ncurses interface. It is designed to
find space hogs on a remote server where you don’t have an entire graphical
setup available, but it is a useful tool even on regular desktop systems.
Ncdu aims to be fast, simple and easy to use, and should be able to run in
any minimal POSIX-like environment with ncurses installed.</p>
</blockquote>
<p>Naturally, the command line way™ prevails on Unix systems. It&rsquo;s one
installation command away from your favorite package manager. Usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ncdu /
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>