<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on not just serendipity</title><link>https://perrotta.dev/tags/dev/</link><description>Recent content in Dev on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 [Thiago Perrotta](mailto:tbperrotta@gmail.com) · [RSS](/index.xml) · a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Sun, 22 Dec 2024 23:39:25 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Online diff tool</title><link>https://perrotta.dev/2024/12/online-diff-tool/</link><pubDate>Sun, 22 Dec 2024 23:39:25 -0300</pubDate><guid>https://perrotta.dev/2024/12/online-diff-tool/</guid><description>&lt;p>Sometimes I have two snippets of text in my clipboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that I need to diff.&lt;/p>
&lt;p>The quickest way to do so is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR a &lt;span style="color:#75715e"># then paste&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR b &lt;span style="color:#75715e"># then paste the other one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% diff -uN a b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/">&lt;code>cdtmp&lt;/code>&lt;/a> was previously covered, it &lt;code>cd&lt;/code>s to a
temporary directory.&lt;/p>
&lt;p>The &lt;code>diff&lt;/code> tool in the CLI is not very important, you could pick any one between
&lt;code>diff -uN&lt;/code>, &lt;code>colordiff -uN&lt;/code> or &lt;a href="https://perrotta.dev/2024/07/icdiff-side-by-side-diff/">&lt;code>icdiff&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>★ Pre-commit</title><link>https://perrotta.dev/2024/12/pre-commit/</link><pubDate>Sat, 21 Dec 2024 23:24:23 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit/</guid><description>&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> is a CI framework for &lt;code>git&lt;/code>.
For those who are used to google3 tooling: it&amp;rsquo;s akin to the configuration part of &lt;code>TAP Presubmit&lt;/code>.&lt;/p>
&lt;p>You can plug in linters, formatters, code analyzers&amp;hellip;pretty much any tool or binary that analyzes files, potentially emitting errors whenever style or policy violations occur, is a potential good fit for a pre-commit hook.&lt;/p>
&lt;p>Once properly configured the whole pipeline can be run locally with &lt;code>pre-commit run&lt;/code>. By default, only the stashed files are inspected. In order to consider every file in the repository, pass &lt;code>--all-files&lt;/code>. Modified files that were not yet &lt;code>git add&lt;/code>ed are not included.&lt;/p></description></item><item><title>★ Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p></description></item><item><title>Advent of Code: Day 8</title><link>https://perrotta.dev/2024/12/advent-of-code-day-8/</link><pubDate>Fri, 20 Dec 2024 22:47:51 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-8/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/8">Day #8&lt;/a> puzzle.&lt;/p>
&lt;p>This is a problem in a 2D grid. I like to start by making a frequency map
(dictionary) from the frequencies to the coordinates where they occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># {&amp;#39;0&amp;#39;: ((1,8), ...)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>freq_map &lt;span style="color:#f92672">=&lt;/span> defaultdict(tuple)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x, line &lt;span style="color:#f92672">in&lt;/span> enumerate(lines):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> y, field &lt;span style="color:#f92672">in&lt;/span> enumerate(line):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> field&lt;span style="color:#f92672">.&lt;/span>isalnum():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_map[field] &lt;span style="color:#f92672">+=&lt;/span> ((x, y),)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then it&amp;rsquo;s just a matter of going through every coordinate pair for a given
frequency. &lt;code>combinations()&lt;/code> from &lt;code>itertools&lt;/code> is great for that:&lt;/p></description></item><item><title>hugo: merge two tags</title><link>https://perrotta.dev/2024/12/hugo-merge-two-tags/</link><pubDate>Fri, 20 Dec 2024 00:46:50 -0300</pubDate><guid>https://perrotta.dev/2024/12/hugo-merge-two-tags/</guid><description>&lt;p>So far I&amp;rsquo;ve been using the &lt;code>dev&lt;/code> and &lt;code>devops&lt;/code> tags pretty much interchangeably
(and inconsistently) in this blog. There&amp;rsquo;s no real difference: Dev and Ops work
overlap quite a lot. It&amp;rsquo;s time to do some house cleaning and merge them. I
choose &lt;code>dev&lt;/code> as it is more generic / agnostic.&lt;/p>
&lt;p>First step, use &lt;code>sed&lt;/code> to rename all &lt;code>devops&lt;/code> tags to &lt;code>dev&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ack -l -- &lt;span style="color:#e6db74">&amp;#34;^ - devops&amp;#34;&lt;/span> | xargs -n &lt;span style="color:#ae81ff">1&lt;/span> gsed -i -e &lt;span style="color:#e6db74">&amp;#39;s/^ - devops/ - dev/g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I use &lt;code>gsed&lt;/code>, the GNU flavour of &lt;code>sed&lt;/code>, in macOS via homebrew. This is necessary
because vanilla &lt;code>/usr/bin/sed&lt;/code> from macOS keeps littering my system with &lt;code>.-e&lt;/code>
files, the original files before inplace modification (&lt;code>-i&lt;/code>), whereas &lt;code>gsed&lt;/code>
doesn&amp;rsquo;t. It saves me from having to do &lt;code>rm **/*.-e&lt;/code> as an extra step.&lt;/p></description></item><item><title>git: push --force with style</title><link>https://perrotta.dev/2024/12/git-push--force-with-style/</link><pubDate>Fri, 20 Dec 2024 00:38:07 -0300</pubDate><guid>https://perrotta.dev/2024/12/git-push--force-with-style/</guid><description>&lt;p>TIL:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>git push --force&lt;/code>: This command forcefully pushes your changes to the remote
branch, even if it results in overwriting or losing commits. It does not
consider the current state of the remote branch. If someone else has pushed
changes to the same branch in the meantime, their changes will be lost.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>git push --force-with-lease&lt;/code>: This command is a safer alternative to git push
— force. It will only force push if the remote branch matches your
expectations. It checks if someone else has pushed changes to the branch in
the meantime. If the branch on the remote repository has not diverged (i.e.,
no new commits were pushed by others), your push will be allowed. If someone
else has pushed changes, the push will be rejected, ensuring you do not
accidentally overwrite someone else’s work.&lt;/p></description></item><item><title>★ pre-commit: create hooks for unsupported tools</title><link>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</link><pubDate>Tue, 17 Dec 2024 22:46:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</guid><description>&lt;p>When using &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a>, in an ideal world, every
formatter / linter / code analyzer would have a &lt;code>.pre-commit-config.yaml&lt;/code> file
in its repository root.&lt;/p>
&lt;p>In the real world, that&amp;rsquo;s not always the case.&lt;/p>
&lt;p>A recent example: &lt;a href="https://github.com/cloudflare/pint">cloudflare/pint&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Prometheus rule linter/validator&lt;/p>
&lt;/blockquote>
&lt;p>It is a golang binary that lints &lt;a href="https://prometheus.io/">prometheus&lt;/a> rules.&lt;/p>
&lt;p>Can we bridge the gap?&lt;/p>
&lt;p>The end goal is the ability to run &lt;code>pre-commit run --all-files pint&lt;/code> in our git
repository.&lt;/p>
&lt;p>For that, we&amp;rsquo;ll need to define a local / custom hook in our
&lt;code>~/.pre-commit-config.yaml&lt;/code>:&lt;/p></description></item><item><title>★ skopeo: operate container images and registries</title><link>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</link><pubDate>Tue, 17 Dec 2024 17:49:31 -0300</pubDate><guid>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</guid><description>&lt;p>When working with &lt;code>docker&lt;/code> and private image registries, a common workflow is to copy images from one private registry in the cloud to another. This can be done with &lt;a href="https://github.com/containers/skopeo/">&lt;code>skopeo&lt;/code>&lt;/a>.&lt;/p>
&lt;p>This post includes some common recipes for it.&lt;/p>
&lt;h2 id="usage-1-default--root-to-staging">Usage 1) Default / Root to Staging&lt;/h2>
&lt;p>From the default / root account registry to the staging registry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>skopeo sync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile default&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --dest-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile staging&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --override-os linux --override-arch amd64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src docker --dest docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_root&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>/&lt;span style="color:#f92672">{&lt;/span>repository&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>tag&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_staging&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example values&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p></description></item><item><title>Kubernetes: tail logs from pods with stern</title><link>https://perrotta.dev/2024/12/kubernetes-tail-logs-from-pods-with-stern/</link><pubDate>Tue, 17 Dec 2024 16:37:16 -0300</pubDate><guid>https://perrotta.dev/2024/12/kubernetes-tail-logs-from-pods-with-stern/</guid><description>&lt;p>You can always use &lt;code>kubectl logs -n {namespace} {pod} [-c {container}] -f&lt;/code> to
inspect logs from a specific pod&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Nonetheless that doesn&amp;rsquo;t scale when you don&amp;rsquo;t know which pod you want in the
first place.&lt;/p>
&lt;p>You could start with deployments, dive into replica sets, and then into
individual pods, one by one, but&amp;hellip; that is tedious and slow.&lt;/p>
&lt;p>We can do better with &lt;a href="https://github.com/stern/stern">stern&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>⎈ Multi pod and container log tailing for Kubernetes&lt;/p></description></item><item><title>Kubernetes: debugging services</title><link>https://perrotta.dev/2024/12/kubernetes-debugging-services/</link><pubDate>Mon, 16 Dec 2024 10:14:11 -0300</pubDate><guid>https://perrotta.dev/2024/12/kubernetes-debugging-services/</guid><description>&lt;p>I am deploying a new helm chart to our staging environments, and needed a way to
ensure its dependencies in &lt;code>values.yaml&lt;/code> are properly configured.&lt;/p>
&lt;p>From the official kubernetes
&lt;a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/">documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>An issue that comes up rather frequently for new installations of Kubernetes
is that a Service is not working properly. You&amp;rsquo;ve run your Pods through a
Deployment (or other workload controller) and created a Service, but you get
no response when you try to access it. This document will hopefully help you
to figure out what&amp;rsquo;s going wrong.&lt;/p></description></item><item><title>★ Just</title><link>https://perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p>
&lt;p>It is written in Rust, has sensible defaults, and lots of syntactic sugar.
A good analogy is &lt;code>fish&lt;/code> versus &lt;code>bash&lt;/code> when comparing &lt;code>just&lt;/code> to &lt;code>make&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s very easy to learn from its
&lt;a href="https://github.com/casey/just?tab=readme-ov-file">README.md&lt;/a> alone as it&amp;rsquo;s
quite comprehensive. There&amp;rsquo;s also a &lt;a href="https://just.systems/man/en/">gitbook&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://til.simonwillison.net/django/just-with-django">Simon Willison&lt;/a> prompted
me to try it out.&lt;/p>
&lt;p>As an exercise I decided to convert the &lt;code>Makefile&lt;/code> used to manage this blog into
a &lt;code>Justfile&lt;/code>.&lt;/p></description></item><item><title>Advent of Code: Day 7</title><link>https://perrotta.dev/2024/12/advent-of-code-day-7/</link><pubDate>Thu, 12 Dec 2024 23:12:31 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-7/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/7">Day #7&lt;/a> puzzle.&lt;/p>
&lt;p>Part one: dynamic programming!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">calibrate_one&lt;/span>(test_value, operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@lru_cache&lt;/span>(maxsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">dp_calibrate&lt;/span>(acc, index):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> acc &lt;span style="color:#f92672">==&lt;/span> test_value &lt;span style="color:#f92672">and&lt;/span> index &lt;span style="color:#f92672">==&lt;/span> len(operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> acc &lt;span style="color:#f92672">&amp;gt;&lt;/span> test_value &lt;span style="color:#f92672">or&lt;/span> index &lt;span style="color:#f92672">==&lt;/span> len(operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_calibrate(acc &lt;span style="color:#f92672">+&lt;/span> operands[index], index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">or&lt;/span> dp_calibrate(acc &lt;span style="color:#f92672">*&lt;/span> operands[index], index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_calibrate(operands[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I learned this style from &lt;a href="https://neetcode.io/">NeetCode&lt;/a>. An inner function to
drive the memoization alongside &lt;code>lru_cache&lt;/code>. Beautiful!&lt;/p>
&lt;p>In my initial solution I passed the whole operands tuple as the second argument.
Later on I changed it to pass the current index in the tuple, which is simpler.&lt;/p></description></item><item><title>Advent of Code: discussion group</title><link>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</link><pubDate>Thu, 12 Dec 2024 19:30:53 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</guid><description>&lt;p>Assuming you are following this year&amp;rsquo;s advent of code, you are welcome to join
our Telegram discussion group &lt;a href="https://t.me/+mtPcW45EuFBjNGMx">here&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. It is
a supergroup, one of its channels is &lt;code>#adventofcode&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s a moderated group, and this invitation link will expire within 2
weeks of the time of this post.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code: Day 11</title><link>https://perrotta.dev/2024/12/advent-of-code-day-11/</link><pubDate>Thu, 12 Dec 2024 19:15:35 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-11/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/11">Day #11&lt;/a> puzzle.&lt;/p>
&lt;p>Part one can be done with a simulation.&lt;/p>
&lt;p>It is very delightful to do it in python: lists are quite flexible, and
converting from integers to strings and vice-versa is seamless. Counting the
number of digits of &lt;code>x&lt;/code> is just a matter of &lt;code>len(str(x))&lt;/code>. In C++ it&amp;rsquo;s a bit
kludgier with &lt;code>std::string(x).size()&lt;/code> and &lt;code>std::stoi(s)&lt;/code>, but then you need to
remember which header to import&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I thought of using &lt;code>reduce&lt;/code> to do &lt;code>blink(blink(stone))...&lt;/code> and so on:&lt;/p></description></item><item><title>Advent of Code: Day 6</title><link>https://perrotta.dev/2024/12/advent-of-code-day-6/</link><pubDate>Thu, 12 Dec 2024 15:26:35 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-6/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/6">Day #6&lt;/a> puzzle.&lt;/p>
&lt;p>Part one is a classic 2D matrix (graph) traversal problem.&lt;/p>
&lt;p>To store state I created a &lt;code>visited&lt;/code> set with the &lt;code>(x, y)&lt;/code> coordinates.
Alternatively I could have changed the input inplace, but I didn&amp;rsquo;t want to deal
with the immutability of python strings, i.e. given:&lt;/p>
&lt;pre tabindex="0">&lt;code>l = [&amp;#34;.....&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;you can&amp;rsquo;t simply do &lt;code>l[0][0] = 'X'&lt;/code>, because python strings are immutable. We
could define a new string and assign it to &lt;code>l[0]&lt;/code>, or we could change the input
to:&lt;/p></description></item><item><title>Semantic versioning constraints</title><link>https://perrotta.dev/2024/12/semantic-versioning-constraints/</link><pubDate>Thu, 12 Dec 2024 12:34:39 -0300</pubDate><guid>https://perrotta.dev/2024/12/semantic-versioning-constraints/</guid><description>&lt;p>When working with semantic versioning a.k.a. &lt;a href="https://semver.org/">semver&lt;/a>, it&amp;rsquo;s
often useful to use range constraints&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to express the versions you&amp;rsquo;re
interested in.&lt;/p>
&lt;p>The most useful ones are the tilde (&lt;code>~&lt;/code>) and the circumflex / hat / caret
(&lt;code>^&lt;/code>)&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>~4.2.1&lt;/code>: picks up &lt;code>4.2.x&lt;/code> for &lt;code>x &amp;gt;= 1&lt;/code>&lt;/li>
&lt;li>&lt;code>^5.0.2&lt;/code>: picks up &lt;code>5.x.y&lt;/code> for &lt;code>x &amp;gt;= 0&lt;/code> and &lt;code>y &amp;gt;= 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Popular software tooling that uses them include:&lt;/p>
&lt;ul>
&lt;li>nodejs / npm packages&lt;/li>
&lt;li>terraform&lt;/li>
&lt;li>ruby gems (here &lt;code>~&amp;gt;&lt;/code> is used instead of simply &lt;code>~&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Sometimes I use &lt;a href="https://jubianchi.github.io/semver-check">https://jubianchi.github.io/semver-check&lt;/a> to double-check&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, or
to teach teammates how the range constraints work.&lt;/p></description></item><item><title>.gitignore without .gitignore</title><link>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</link><pubDate>Wed, 11 Dec 2024 11:44:12 -0300</pubDate><guid>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</guid><description>&lt;p>&lt;code>.gitignore&lt;/code> is the canonical way to exclude files from your git repository.&lt;/p>
&lt;p>In some situations, however, you may want to exclude files without adding them
to &lt;code>.gitignore&lt;/code>, because they are only relevant to you, as opposed to your
teammates.&lt;/p>
&lt;p>Common examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ackrc&lt;/code>: exclude file patterns from search with &lt;code>ack&lt;/code> – not everyone in your
team may use &lt;code>ack&lt;/code> at all&lt;/li>
&lt;li>&lt;code>.envrc&lt;/code>: &lt;code>direnv&lt;/code> integration to automatically run a couple of commands
whenever &lt;code>cd&lt;/code>&amp;lsquo;ing to within the repository – not everyone in your team may use
&lt;code>direnv&lt;/code> at all&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p></description></item><item><title>Alpine Linux 3.21</title><link>https://perrotta.dev/2024/12/alpine-linux-3.21/</link><pubDate>Tue, 10 Dec 2024 19:52:33 -0300</pubDate><guid>https://perrotta.dev/2024/12/alpine-linux-3.21/</guid><description>&lt;p>&lt;a href="https://alpinelinux.org/posts/Alpine-3.21.0-released.html">Alpine Linux 3.21.0&lt;/a>
got released last Thursday.&lt;/p>
&lt;p>So what? I am credited as an aports commit contributor! :-)&lt;/p>
&lt;p>&lt;a href="https://pkgs.alpinelinux.org/packages?name=&amp;amp;branch=edge&amp;amp;repo=&amp;amp;arch=x86_64&amp;amp;origin=&amp;amp;flagged=&amp;amp;maintainer=Thiago+Perrotta">Here&lt;/a>
is a list of all the packages I currently maintain, excluding dependencies:&lt;/p>
&lt;ul>
&lt;li>argocd&lt;/li>
&lt;li>autotrash&lt;/li>
&lt;li>bkt&lt;/li>
&lt;li>fpp&lt;/li>
&lt;li>gliderlabs-sigil&lt;/li>
&lt;li>kubeseal&lt;/li>
&lt;li>tfupdate&lt;/li>
&lt;li>typos&lt;/li>
&lt;li>urlwatch&lt;/li>
&lt;li>yamlfmt&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;a total of &lt;strong>10&lt;/strong> packages.&lt;/p></description></item><item><title>Docker build: ignore cache</title><link>https://perrotta.dev/2024/12/docker-build-ignore-cache/</link><pubDate>Tue, 10 Dec 2024 19:45:42 -0300</pubDate><guid>https://perrotta.dev/2024/12/docker-build-ignore-cache/</guid><description>&lt;p>To build a docker image completely from scratch, without reusing cache layers on
your system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker build --no-cache -f Dockerfile . -t &lt;span style="color:#f92672">{&lt;/span>image name&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>image tag&lt;span style="color:#f92672">}&lt;/span> --platform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Pass an explicit platform in case e.g. you&amp;rsquo;re building on a Mac M1 (arm64)
with the intent of running it on Linux in the cloud (amd64 typically).&lt;/li>
&lt;li>The docker image full specification is: image =
&lt;code>{registry}/{repository}:{tag}&lt;/code>. For example, the registry could be an AWS ECR
URL, whereas the repository is something like &amp;ldquo;bitnami/sealed-secrets&amp;rdquo;, and
the tag typically follows semantic versioning.&lt;/li>
&lt;/ul></description></item><item><title>bash: glob hidden files recursively</title><link>https://perrotta.dev/2024/12/bash-glob-hidden-files-recursively/</link><pubDate>Mon, 09 Dec 2024 17:53:14 -0300</pubDate><guid>https://perrotta.dev/2024/12/bash-glob-hidden-files-recursively/</guid><description>&lt;p>Assume you make a huge change to your git repository, that spawns several file
formats – cpp, java, javascript, python, etc.&lt;/p>
&lt;p>In the end you want to revert the javascript changes, for the sake of splitting
your commit into self-contained chunks&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I like the following approach&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git checkout -- **/*.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Caveat&lt;/strong>: It does not include hidden files, or files in hidden directories.
Unless&amp;hellip;you set the &lt;code>dotglob&lt;/code> option:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% shopt -s dotglob
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>shopt&lt;/code> works in &lt;code>bash&lt;/code>, alas not in &lt;code>zsh&lt;/code>.&lt;/p></description></item></channel></rss>