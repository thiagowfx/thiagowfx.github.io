<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dev on Not Just Serendipity</title><link>https://www.perrotta.dev/tags/dev/</link><description>Recent content in Dev on Not Just Serendipity</description><generator>Hugo -- 0.127.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta • CC BY-NC-SA 4.0 • RSS •</copyright><lastBuildDate>Wed, 19 Jun 2024 13:39:04 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Rename files in bulk</title><link>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever the files are in the same directory, <code>vidir</code> from <a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils</a> is the best
interactive tool.</p>
<p>If files are scattered across multiple directories, consider using the
<a href="https://man.archlinux.org/man/rename.1.en"><code>rename</code></a> utility from <code>util-linux</code>.</p>
<p>A simple example to rename all <code>readme.md</code> files to <code>README.md</code> for consistency:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>rename <span style="color:#e6db74">&#39;s/readme\.md/README.md/&#39;</span> **/*
</span></span></code></pre></div>]]></content:encoded></item><item><title>Sleep forever</title><link>https://www.perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p></description><content:encoded><![CDATA[<p>The following commands will make the shell sleep indefinitely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep inf
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep infinity
</span></span></code></pre></div><p>Previously I would call a command such as a <code>while true</code> loop or the <code>yes</code>
utility, but <code>sleep</code> is also handy.</p>]]></content:encoded></item><item><title>Bcrypt-hash a password</title><link>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure class="align-center ">&lt;a href="https://xkcd.com/936/">
&lt;img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> &lt;/a>&lt;figcaption>
&lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
&lt;/figcaption>
&lt;/figure></description><content:encoded><![CDATA[<p>Given the password <code>correct horse battery staple</code>, we would like to bcrypt-hash
it.</p>
<figure class="align-center "><a href="https://xkcd.com/936/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
         alt="Through 20 years of effort, we&#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Here&rsquo;s one way to do so via the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ htpasswd -nbBC <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#39;correct horse battery staple&#39;</span> | tr -d <span style="color:#e6db74">&#39;:\n&#39;</span> | sed <span style="color:#e6db74">&#39;s/$2y/$2a/&#39;</span>
</span></span></code></pre></div><p>&hellip;which yields:</p>
<pre tabindex="0"><code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
</code></pre><p>You could verify it matches e.g. via <a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/</a>.</p>
<p><strong>Context</strong>: <a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> expects a
bcrypt-hashed password in its config file.</p>]]></content:encoded></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description><content:encoded><![CDATA[<p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.</p>
<h2 id="assumptions">Assumptions</h2>
<ul>
<li>You have <code>git</code>, <code>jq</code> and the <a href="https://cli.github.com/"><code>gh</code></a> command-line tool
installed (<code>brew install gh</code>)</li>
<li>You have a github actions file in
<code>~/.github/workflows/package-release-dispatch.yml</code>.</li>
<li>The action has the following form:</li>
</ul>
<pre tabindex="0"><code>on:
  workflow_dispatch:
    inputs:
      ref:
        description: &#39;Ref to build from. This can either be a SHA or a branch/tag&#39;
        required: true
        type: string
  push:
    branches:
      - master
    paths:
      - &#39;.github/workflows/package-release-dispatch.yml&#39;
      - &#39;helm/**&#39;
</code></pre><p>The goal is to iterate on the <code>jobs:</code> section of the action.</p>
<h2 id="workflow">Workflow</h2>
<p>Trigger an action run from the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml <span style="color:#f92672">[</span>--ref master<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f ref<span style="color:#f92672">=</span>master<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><code>--ref</code> should be the git branch you&rsquo;re working on, for example,
<code>thiagowfx/my-cool-feature</code>.</p>
<p><code>-f</code> provides an input to the workflow. In this case, there&rsquo;s an input named
<code>ref</code>, which is meant to be the branch the action will act upon.</p>
<p>The action takes a little while to trigger, we can <code>sleep</code> to give it some time.
I found that <code>sleep 3</code> is a sensible value (3 seconds).</p>
<p>How to view the action?</p>
<p>First we need to get its ID. Here&rsquo;s one way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span>
</span></span></code></pre></div><h3 id="option-1-via-the-command-line">Option 1) Via the command-line</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run watch &lt;id&gt;
</span></span></code></pre></div><p>It&rsquo;s analogous to <code>watch</code>, continuously refreshing the action progress in the
background, step by step. Example:</p>
<pre tabindex="0"><code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
  ✓ Set up job
  ✓ Checkout source code
  ✓ Run azure/setup-helm@v4
  ✓ Install yq
  ✓ Install helm cm-push plugin
  ✓ Set up Helm repos
  * Helm package all charts sans blacklist
  * Publish all helm packages
  * Post Checkout source code
</code></pre><h3 id="option-2-via-the-web-browser">Option 2) Via the web browser</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run view &lt;id&gt; -w
</span></span></code></pre></div><p>It will open the system web browser in the right page, pertaining to the action
run.</p>
<h2 id="putting-everything-together">Putting everything together</h2>
<h3 id="option-1">Option 1)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run watch <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="option-2">Option 2)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run view <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span> -w
</span></span></code></pre></div>]]></content:encoded></item><item><title>Pritunl log in via CLI</title><link>https://www.perrotta.dev/2024/05/pritunl-log-in-via-cli/</link><pubDate>Tue, 07 May 2024 16:03:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/pritunl-log-in-via-cli/</guid><description>&lt;p>&lt;a href="https://pritunl.com/">Pritunl&lt;/a> is an Enterprise Distributed OpenVPN server.&lt;/p>
&lt;p>In order to run its client on macOS, an &lt;code>.app&lt;/code> is provided. However, using it to
log in every day is quite tedious.&lt;/p>
&lt;p>Let&amp;rsquo;s automate it so that we can connect to the VPN with a single command.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://pritunl.com/">Pritunl</a> is an Enterprise Distributed OpenVPN server.</p>
<p>In order to run its client on macOS, an <code>.app</code> is provided. However, using it to
log in every day is quite tedious.</p>
<p>Let&rsquo;s automate it so that we can connect to the VPN with a single command.</p>
<p>In order to fetch the credentials in this example in a secure manner, we&rsquo;ll be
using 1password. <a href="https://www.passwordstore.org/"><code>pass</code></a> would have worked just
as fine.</p>
<p>First, configure Pritunl via its app UI, creating a profile for your corp
credentials.</p>
<p>Then figure out what the profile ID you just created is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>profile_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r <span style="color:#e6db74">&#39;.[0].id&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Now, create an entry in 1Password for your Pritunl credentials associated with
the profile above.</p>
<p>Let&rsquo;s use the <code>op</code> official CLI tool from 1Password to fetch the password and
the OTP (one-time password) for the &ldquo;Pritunl (VPN)&rdquo; entry (change it
accordingly).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>op_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#39;Pritunl (VPN)&#39;</span> --format json | jq -r <span style="color:#e6db74">&#39;.id&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op read <span style="color:#e6db74">&#34;op://private/</span>$op_id<span style="color:#e6db74">/password&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>otp<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#34;</span>$op_id<span style="color:#e6db74">&#34;</span> --totp<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Now we can use the <code>pritunl-client</code> to log in programatically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pritunl-client start <span style="color:#e6db74">&#34;</span>$profile_id<span style="color:#e6db74">&#34;</span> --password <span style="color:#e6db74">&#34;</span>$password$otp<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Then verify it has indeed connected:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pritunl-client list
</span></span></code></pre></div><p>The trick is that it accepts the concatenation of the password with the OTP as
the password. There&rsquo;s not a separate <code>--otp</code> flag.</p>
<p>Putting everything together, we can create a function for our favorite shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Log into corp VPN</span>
</span></span><span style="display:flex;"><span>pritunl_login<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	local profile_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r <span style="color:#e6db74">&#39;.[0].id&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	local op_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#39;Pritunl (VPN)&#39;</span> --format json | jq -r <span style="color:#e6db74">&#39;.id&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	local password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op read <span style="color:#e6db74">&#34;op://private/</span>$op_id<span style="color:#e6db74">/password&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	local otp<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>op item get <span style="color:#e6db74">&#34;</span>$op_id<span style="color:#e6db74">&#34;</span> --totp<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	pritunl-client start <span style="color:#e6db74">&#34;</span>$profile_id<span style="color:#e6db74">&#34;</span> --password <span style="color:#e6db74">&#34;</span>$password$otp<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	pritunl-client list
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Shell text substitution</title><link>https://www.perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p></description><content:encoded><![CDATA[<p>I learned a neat shell trick this week. In both <code>bash</code> and <code>zsh</code> you can use the
circumflex / caret (<code>^</code>) symbol to find &amp; replace a word from the previous
command.</p>
<p>Usage: <code>^prev^next</code>. It&rsquo;s best illustrated with examples:</p>
<h2 id="terraform">terraform</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform plan -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform apply -var-file /path/to/foo.tfvars
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>^init^plan
</span></span><span style="display:flex;"><span>^plan^apply
</span></span></code></pre></div><h2 id="systemd">systemd</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>sudo systemctl status nginx
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>^restart^status
</span></span></code></pre></div><h2 id="one-observation">one observation</h2>
<p><code>zsh</code> will run the substitution right away, whereas <code>bash</code> will allow you
to review and edit the replaced command before running it.</p>]]></content:encoded></item><item><title>pyenv</title><link>https://www.perrotta.dev/2024/03/pyenv/</link><pubDate>Sun, 10 Mar 2024 22:18:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/pyenv/</guid><description>&lt;p>When working on Python projects, &lt;a href="https://github.com/pyenv/pyenv">&lt;code>pyenv&lt;/code>&lt;/a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.&lt;/p></description><content:encoded><![CDATA[<p>When working on Python projects, <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.</p>
<p>I&rsquo;d recommend to install it with homebrew (<code>brew install pyenv</code>).</p>
<p>The upstream documentation is great. The commands you&rsquo;ll typically use are:</p>
<ul>
<li><code>pyenv versions</code>: list all installed versions</li>
<li><code>pyenv global &lt;version&gt;</code>: set a specific python version for your whole system</li>
<li><code>pyenv local</code>: set a specific python version only for a specific project
(directory)</li>
</ul>
<p>And then it&rsquo;s handy to add the following blurb to your shell rc file to make
<code>pyenv</code> work properly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># pyenv: https://github.com/pyenv/pyenv</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> hash pyenv &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	export PYENV_ROOT<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.pyenv&#34;</span>
</span></span><span style="display:flex;"><span>	path_munge <span style="color:#e6db74">&#34;</span>$PYENV_ROOT<span style="color:#e6db74">/bin&#34;</span>
</span></span><span style="display:flex;"><span>	eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>pyenv init -<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>Note that <code>path_munge</code> is a custom function, it merely appends the given
argument to the <code>$PATH</code>.</p>]]></content:encoded></item><item><title>chrome-fresh: start a fresh instance of Google Chrome</title><link>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</link><pubDate>Sun, 10 Mar 2024 21:55:16 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</guid><description>&lt;p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on &lt;a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing&lt;/a> in the Browser Automation team at
Google:&lt;/p></description><content:encoded><![CDATA[<p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on <a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing</a> in the Browser Automation team at
Google:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># start chrome with ephemeral settings (every run of Chrome is empty)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># usage: chrome-fresh out/Default/chrome</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TMPDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>trap <span style="color:#e6db74">&#39;rm -rf &#34;${TMPDIR}&#34;&#39;</span> EXIT
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CHROME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span>google-chrome<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; shift
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md</span>
</span></span><span style="display:flex;"><span>CHROME_FLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;--use-mock-keychain&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Darwin&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> *.app <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	open -n <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> --args <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>  <span style="color:#75715e"># &#34;Linux&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The script is self-documenting, it was properly tested on both Linux and macOS.</p>
<p>The typical use case would be to compile a new Google Chrome binary
(<code>/out/Default/chrome</code>), and then use the script to launch it with a fresh user
data directory, to ensure the previous launch settings do not interfere with the
current one.</p>]]></content:encoded></item><item><title>Set terminal language to English</title><link>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</link><pubDate>Thu, 22 Feb 2024 09:48:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</guid><description>&lt;p>I changed my macOS system language to German, with the intent of &lt;a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it&lt;/a>.&lt;/p>
&lt;p>One negative side effect is that most binaries I execute with my shell (for
example: &lt;code>git&lt;/code>) are now outputting German text as well&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In hindsight, this
should have been expected.&lt;/p></description><content:encoded><![CDATA[<p>I changed my macOS system language to German, with the intent of <a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it</a>.</p>
<p>One negative side effect is that most binaries I execute with my shell (for
example: <code>git</code>) are now outputting German text as well<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. In hindsight, this
should have been expected.</p>
<p>A simple fix is to override the environment locale with English. I made the
following
<a href="https://github.com/thiagowfx/.dotfiles/commit/4b784b1fa89f569623340cf3d58cc22d8504926a">addition</a>
to my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Force the system-wide language to English.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Both &#34;en_US&#34; and &#34;en_CA&#34; work here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We could also optionally set LC_ALL but it is not necessary.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verify current locale settings with `locale`.</span>
</span></span><span style="display:flex;"><span>export LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US&#34;</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You could argue that it&rsquo;s actually desirable to have terminal applications
output German. However, nothing beats the standardization, consistency and
familiarity of English for developer tooling. If I really need to have this
extreme exposure one day, it&rsquo;s always possible to just <code>unset LANG</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Integrating terraform with ansible</title><link>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p></description><content:encoded><![CDATA[<p>This post is a follow-up of <a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world</a>.</p>
<blockquote>
<p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.</p>
</blockquote>
<p>Before we extensively use Ansible to configure our VPS instance, first let&rsquo;s
set up a basic integration between Terraform and Ansible.</p>
<p>First of all, here&rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&rsquo;ll explain some of them
below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> var<span style="color:#a6e22e">iables</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_hostname&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_region&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>All variables were moved to a <code>variables.tf</code> file. This is to follow standard
terraform
<a href="https://developer.hashicorp.com/terraform/language/modules/develop/structure">conventions</a>
/ recommendations for module structures. Furthermore, it becomes easier to
manage variables when they are all stored in a single place.</p>
<p>The main module file now looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">main</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;nanode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>             = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>            = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>            = var.<span style="color:#a6e22e">linode_hostname</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span>           = var.<span style="color:#a6e22e">linode_region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">keys</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I removed the token from the linode provider. Now it is supplied via the
<code>LINODE_TOKEN</code> environment variable. In order to automatically populate that
variable, I use <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a>. There&rsquo;s an <code>.envrc</code> file that provides its value, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># terraform init</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export LINODE_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-token-here&#34;</span>
</span></span></code></pre></div><p>I also created a repository for this project:
<a href="https://github.com/thiagowfx/knol">https://github.com/thiagowfx/knol</a>. That&rsquo;s enough for preliminaries, now let&rsquo;s
go back to Ansible.</p>
<p>The first component we&rsquo;ll need is an Ansible
<a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">inventory</a>
file, containing the IP address of the host we&rsquo;ll manage. It could look like
this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[all]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">1.2.3.4 ansible_user</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
</span></span></code></pre></div><p>&hellip;wherein <code>1.2.3.4</code> is the IP address of our VPS.</p>
<p>That said, due to the fact the VPS instance is created dynamically, maintaining
that IP address manually would be tedious. Therefore, let&rsquo;s have Terraform
manage it.</p>
<p>We can do so with a
<a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file"><code>local_file</code></a>.
Heck, we could even use a
<a href="https://registry.terraform.io/providers/hashicorp/template/latest/docs/data-sources/file"><code>template_file</code></a>,
however it would be overkill as there are only two simple lines in our
inventory at this point. A <code>local_file</code> is created upon <code>terraform apply</code> and
deleted upon <code>terraform destroy</code>. Therefore it doesn&rsquo;t even need to be tracked
by our VCS:</p>
<pre tabindex="0"><code>resource &#34;local_file&#34; &#34;ansible_inventory&#34; {
  content  = &lt;&lt;-EOF
[all]
${linode_instance.nanode.ip_address} ansible_user=root
EOF
  filename = &#34;inventory.ini&#34;
  file_permission = &#34;0644&#34;
}
</code></pre><p>Once we run terraform (plan + apply), an <code>inventory.ini</code> file should be created
with the above contents.</p>
<p>Because the IP address is ephemeral and dynamic, we should have a
straightforward way to see its value. A terraform
<a href="https://developer.hashicorp.com/terraform/language/values/outputs"><code>output</code></a>
is perfect for that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">outputs</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">output</span> <span style="color:#e6db74">&#34;ip_address&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">value</span> = <span style="color:#a6e22e">linode_instance</span>.<span style="color:#a6e22e">nanode</span>.<span style="color:#a6e22e">ip_address</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Later on (after terraforming) we will be able to use <code>terraform output</code> to see
the server IP address.</p>
<p>We have the inventory file. Now we need a
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">playbook</a>.
A playbook contains a sequence of tasks to be applied to our server.</p>
<p>Let&rsquo;s start with a basic playbook that just installs and starts <code>nginx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">all</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install the web server (nginx)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.general.apk</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Start the web server</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">started</span>
</span></span></code></pre></div><p>Save this to a <code>playbook.yml</code> file.</p>
<p>After terraforming, we should now be able to run ansible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ansible-playbook -i inventory.ini playbook.yml
</span></span></code></pre></div><p>In order to make this setup more ergonomic, let&rsquo;s create a <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> terraform ansible
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ansible</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	ansible-playbook -i inventory.ini playbook.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> init
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> plan
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> destroy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all ansible terraform clean
</span></span></code></pre></div><p>Then we can just run <code>make terraform</code> or <code>make ansible</code> for granular steps. Or
just <code>make</code> to run everything in the right order.</p>
<p>I extracted the <code>terraform</code> binary to its own variable because it facilitates
the use of <a href="https://opentofu.org/">OpenTofu</a> (a fork) in lieu of terraform.</p>
<p>And that&rsquo;s it for today! In a future post, we&rsquo;ll look into extending our
Ansible usage to fully bootstrap Miniflux on the server.</p>]]></content:encoded></item></channel></rss>