<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/dev/</link><description>Recent content in Dev on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Mon, 10 Mar 2025 15:03:24 +0100</lastBuildDate><atom:link href="https://perrotta.dev/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>How core git developers configure git</title><link>https://perrotta.dev/2025/03/how-core-git-developers-configure-git/</link><pubDate>Mon, 10 Mar 2025 15:03:24 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/how-core-git-developers-configure-git/</guid><description>&lt;p>&lt;a href="https://blog.gitbutler.com/how-git-core-devs-configure-git/">How Core Git Developers Configure
Git&lt;/a> by Git Butler:&lt;/p>
&lt;blockquote>
&lt;p>In this post, I&amp;rsquo;ll go through some of the perhaps obscure Git config settings
that I have personally globally enabled and go into them to explain what they
do and why they should probably be the default settings.&lt;/p>
&lt;/blockquote>
&lt;p>Lots of good defaults to adopt from there.&lt;/p>
&lt;p>I
&lt;a href="https://github.com/thiagowfx/.dotfiles/commit/31974676944732b91588e6604a29778ffa33099e">adopted&lt;/a>
a few. It turns out I already had most of them in my
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/git/.gitconfig">&lt;code>~/.gitconfig&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Reply to: Growth at BigTech</title><link>https://perrotta.dev/2025/03/reply-to-growth-at-bigtech/</link><pubDate>Thu, 06 Mar 2025 23:40:25 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/reply-to-growth-at-bigtech/</guid><description>&lt;p>Original article: &lt;a href="https://bhardwajrish.blogspot.com/2025/03/growth-at-bigtech.html">Growth at
BigTech&lt;/a>.&lt;/p>
&lt;p>I used to work in the same company as the author of the post&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, and yet I
followed a completely different approach than him.&lt;/p>
&lt;p>Do I have credibility? You don&amp;rsquo;t have to take my word for granted, and you
should make your own conclusions. The only transparency bit I&amp;rsquo;ll reveal is that
I got promoted from Junior (L3) to Mid (L4) within 1.5 year, and from Mid to
Senior (L5) within 2 years i.e. 3.5 years total to become Senior. Enough
&lt;del>humblebragging&lt;/del> boasting already, let&amp;rsquo;s do a rebuttal of the post. Just one
disclaimer: although it&amp;rsquo;s framed as a rebuttal, it&amp;rsquo;s important to acknowledge
that no two experiences are the same, and two truths can be simultaneously
valid.&lt;/p>
&lt;blockquote>
&lt;p>Become the person everyone in my working radius knows.&lt;/p>
&lt;/blockquote>
&lt;p>This is important, but only if you&amp;rsquo;re well-known for good things™. Sometimes
it&amp;rsquo;s better to stay in the shadow. That said, there&amp;rsquo;s virtually no downside to
being well-known if your impact is generally and non-controversially positive.&lt;/p>
&lt;blockquote>
&lt;p>Learn how a big org works, and learn to be effective in them.&lt;/p>
&lt;/blockquote>
&lt;p>This is very important. Knowledge is power. Everything is a game. Sometimes (not
always, but oftentimes) the game is political. Learning the rules of engagement
of the game can only bring clarity and perspective to making one play the game
more effectively.&lt;/p>
&lt;blockquote>
&lt;p>Eventually be in the room that leaders make decisions.&lt;/p>
&lt;/blockquote>
&lt;p>This is important if you&amp;rsquo;re Senior+. As a Junior or as a Mid Engineer, I would
argue, this is actually worse. Engaging in politics in an early career phase is
disastrous, it&amp;rsquo;s the kind of behavior that quickly degrades one&amp;rsquo;s motivation
and/or enthusiasm and/or passion&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> for building / evolving the product.&lt;/p>
&lt;blockquote>
&lt;p>here&amp;rsquo;s what I learned you need: Visibility. Visibility Visibility.&lt;/p>
&lt;/blockquote>
&lt;p>Again, more visibility is better than less (or no) visibility, but only when the
visibility is good. This point is debatable.&lt;/p>
&lt;blockquote>
&lt;p>Be where leaders are.&lt;/p>
&lt;/blockquote>
&lt;p>I don&amp;rsquo;t see the point. Again, staying away from politics is important to
maintain enthusiasm, especially during early years. If you chase leaders (too)
soon, you&amp;rsquo;ll be dragged down in the sea of despair. I believe this is good
advice &lt;em>only&lt;/em> when you&amp;rsquo;re Senior+.&lt;/p>
&lt;blockquote>
&lt;p>Look where leaders are looking.
Don&amp;rsquo;t work on things you think are important.
Don&amp;rsquo;t work on things your users think are important.
Work on things leadership thinks are important.&lt;/p>
&lt;/blockquote>
&lt;p>This is where our paths (significantly) diverge. There are two schools of
thought: one is to
&lt;a href="https://www.urbandictionary.com/define.php?term=boot-licking">appeal&lt;/a>
&lt;em>directly&lt;/em> to those who have the powers to promote you; the other one is to do
what&amp;rsquo;s best for your personal growth, aligned with your interests, whilst
keeping in mind the prioritization and direction of the project you&amp;rsquo;re working
on. Following the former route is akin to applying the advice from &lt;a href="https://www.goodreads.com/book/show/1303.The_48_Laws_of_Power">48 Laws of
Power by Robert
Greene&lt;/a>.
Following the latter is akin to following &lt;a href="https://www.goodreads.com/book/show/38900866-it-doesn-t-have-to-be-crazy-at-work">It Doesn&amp;rsquo;t Have to Be Crazy at Work
by David Heinemeier Hansson and Jason
Fried&lt;/a>.&lt;/p>
&lt;p>I feel my opinion on the matter is quite clear. Nonetheless, it&amp;rsquo;s still
crucial to do something useful. Moving the needle in the right direction every
day (or even every hour&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>!) is a great way to stay in touch with reality.&lt;/p>
&lt;blockquote>
&lt;p>Sound the alarm bells, often.&lt;/p>
&lt;p>Create a problem, become the hero.&lt;/p>
&lt;p>If you think there&amp;rsquo;s an important thing that needs to be solved, DON&amp;rsquo;T do it
silently. Make it a priority. Get leadership on board.&lt;/p>
&lt;p>And only then come in and save the day.&lt;/p>
&lt;/blockquote>
&lt;p>Oh no, please don&amp;rsquo;t.&lt;/p>
&lt;p>Sounding alarm bells often is good e.g. in the form of filing tickets /
reporting bugs frequently. Very few people have the enthusiasm to do so. Being
one of them makes you stand out, full stop. Investing in ways to make it easier
and quicker to report high-quality bugs is worthwhile.&lt;/p>
&lt;p>Now, if you happen to tackle these very same bugs, that gives you visibility.
Good visibility. And good visibility is great!&lt;/p>
&lt;p>Don&amp;rsquo;t create problems though. Don&amp;rsquo;t be a hero. In fact: go/no-heroes&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Regarding silence: In general, not every single issue one resolves needs to be
echoed everywhere. This is often perceived as bragging, which is not great. It&amp;rsquo;s
important to keep your manager well-informed (e.g. during weekly 1:1s, and/or in
a document that accumulates all your accomplishments). And it&amp;rsquo;s a good idea to
have your teammates and close leadership aware of your strengths and overall
accomplishments. That said, sometimes impact is realized in a bigger fashion
when accomplishments are done in the shadows.&lt;/p>
&lt;blockquote>
&lt;p>It isn&amp;rsquo;t your work - it&amp;rsquo;s the perception of your work that&amp;rsquo;s important.&lt;/p>
&lt;/blockquote>
&lt;p>We are all humans. This is one of our cognitive biases. Can&amp;rsquo;t disagree with that
statement.&lt;/p>
&lt;blockquote>
&lt;p>Work with as many people as possible.&lt;/p>
&lt;/blockquote>
&lt;p>I must digress. Quality triumphs quantity. Exceptions: 20% projects, citizenship
initiatives like readability review, mentoring, tech talks, etc. For core work,
this is not important.&lt;/p>
&lt;blockquote>
&lt;p>The more people support you, the higher your chances that you&amp;rsquo;re able to pull
your weight in getting things done.&lt;/p>
&lt;/blockquote>
&lt;p>Unless you play a political role or something that involves elections or a
popularity contest, having lots of people supporting you doesn&amp;rsquo;t really matter.
Nevertheless, having the right / important people support you does.&lt;/p>
&lt;blockquote>
&lt;p>Have a highly capable manager, who is great at representing you.&lt;/p>
&lt;/blockquote>
&lt;p>1000x agreed. To this date, I am grateful (and lucky&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>!) to always have had
great managers. This makes a huge difference.&lt;/p>
&lt;blockquote>
&lt;p>This means they understand what you do thoroughly, and they&amp;rsquo;re a great
salesperson. Your manager represents you during promotion committee rounds
where they convince others why you have to get promoted. If your manager isn&amp;rsquo;t
a great salesperson, you have to make sure others know you.&lt;/p>
&lt;/blockquote>
&lt;p>+1.&lt;/p>
&lt;blockquote>
&lt;p>Getting promoted at BigTech is one of those areas in life that isn&amp;rsquo;t based on
merit.&lt;/p>
&lt;p>Hard work ≠ reward. The &amp;ldquo;smart work&amp;rdquo; that actually gets you promoted isn&amp;rsquo;t
about pushing your project forward; it&amp;rsquo;s about pushing yourself forward.&lt;/p>
&lt;/blockquote>
&lt;p>s/BigTech/Tech&lt;/p>
&lt;p>Or, even: s/BigTech/any company whatsoever&lt;/p>
&lt;p>The only bit I&amp;rsquo;ll add: motivation / passion / enthusiasm does matter, and makes
a huge difference. That&amp;rsquo;s a topic for another post though.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For some reason he chose to omit naming the company, even though it&amp;rsquo;s
pretty obvious to find it out as he uses his real / full name, go figure 🤷.
That said, as good &lt;a href="https://en.wikipedia.org/wiki/Etiquette_in_technology#Netiqauette">blogging
etiquette&lt;/a>,
I won&amp;rsquo;t name it directly either.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Pick your poison.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Not continuously sustainable, but most certainly doable in
&lt;a href="https://github.blog/developer-skills/career-growth/how-to-get-in-the-flow-while-coding-and-why-its-important/">bursts&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>See &lt;a href="https://news.ycombinator.com/item?id=20374289">HN&lt;/a> and &lt;a href="https://rpadovani.com/no-heroes">this
post&lt;/a> by Ricardo Padovani.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>I mean, whenever you&amp;rsquo;re changing teams internally and/or actively
interviewing, you do have the possibility to get to know your future
manager(s). Therefore it&amp;rsquo;s not only luck, there&amp;rsquo;s a bit of a &amp;ldquo;vibe&amp;rdquo; checking
as well.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Using keep-sorted to keep your ~/.gitconfig tidy</title><link>https://perrotta.dev/2025/03/using-keep-sorted-to-keep-your-~/.gitconfig-tidy/</link><pubDate>Thu, 06 Mar 2025 22:53:23 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/using-keep-sorted-to-keep-your-~/.gitconfig-tidy/</guid><description>&lt;p>I tend to sort my
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/git/.gitconfig">&lt;code>~/.gitconfig&lt;/code>&lt;/a>
headings to keep the config tidy.&lt;/p>
&lt;p>An example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://git-scm.com/docs/git-rerere&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[rerere]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">autoUpdate&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">	enabled = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[status]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Show individual files in untracked directories.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">showUntrackedFiles&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">	short = true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">	branch = true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[submodule]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Clone new submodules in parallel with as many jobs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fetchJobs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[...]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This was done manually. Until&amp;hellip;today.&lt;/p>
&lt;p>It has just occurred to me&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> I could use
&lt;a href="https://github.com/google/keep-sorted">keep-sorted&lt;/a> with the headings.&lt;/p>
&lt;blockquote>
&lt;p>Previously:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://perrotta.dev/2024/12/keep-sorted/">keep-sorted&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://perrotta.dev/2024/12/pre-commit/">pre-commit&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>But&amp;hellip;how?!&lt;/p>
&lt;p>The usage to sort, say, aliases, is quite straightforward&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[alias]
	# keep-sorted begin
	bd = !branch=&amp;#34;$(git branch --show-current)&amp;#34; &amp;amp;&amp;amp; git default &amp;amp;&amp;amp; git branch -D &amp;#34;${branch:-$1}&amp;#34;
	blank = desc -m \&amp;#34;blank commit\&amp;#34;
	cm = commit
	co = checkout
	cp = cherry-pick
	dc = diff --cached
	default = !git checkout main &amp;amp;&amp;gt;/dev/null || git checkout master
	desc = commit --allow-empty -n
	emerge = !git add -A . &amp;amp;&amp;amp; git amend -n &amp;amp;&amp;amp; git pushm --force-with-lease
	nb = switch --create
 [...]
	# keep-sorted finish
&lt;/code>&lt;/pre>&lt;p>How can you apply the same technique to headings?&lt;/p>
&lt;p>The out-of-the-box utilization is OK-ish, but not great:&lt;/p>
&lt;p>From:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[fetch]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">prune&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[help]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">autocorrect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[format]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Automatically sign-off patches when using format-patch.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">signoff&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted finish&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[fetch]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">prune&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[format]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Automatically sign-off patches when using format-patch.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">signoff&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[help]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">autocorrect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(including the blank line at the top)&lt;/p>
&lt;p>It turns out all we have to do is a little bit of tweaking:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted begin block=yes newline_separated=yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[fetch]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">prune&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[help]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">autocorrect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[format]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Automatically sign-off patches when using format-patch.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">signoff&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted finish&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which then becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted begin block=yes newline_separated=yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[fetch]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">prune&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[format]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Automatically sign-off patches when using format-patch.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">signoff&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[help]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">autocorrect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted finish&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How nice!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Can you even imagine? Having original ideas? In 2025? Without LLMs?! Is
this even real??&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I replaced &lt;code>start -&amp;gt; begin&lt;/code> and &lt;code>end -&amp;gt; finish&lt;/code> otherwise &lt;code>keep-sorted&lt;/code>
would sort this blog post itself. If you copy and paste this example,
remember to change the words back to the original ones.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Create a git commit with multiple contributors</title><link>https://perrotta.dev/2025/03/create-a-git-commit-with-multiple-contributors/</link><pubDate>Mon, 03 Mar 2025 14:55:23 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/create-a-git-commit-with-multiple-contributors/</guid><description>&lt;ul>
&lt;li>&lt;strong>Step 1&lt;/strong>: Create a commit / pull request as usual.&lt;/li>
&lt;li>&lt;strong>Step 2&lt;/strong>: Collaborate 🪄. Different people push to the same remote branch.&lt;/li>
&lt;li>&lt;strong>Step 3&lt;/strong>: Once it&amp;rsquo;s done, add as many git footer elements as needed, like in
the following commit message example:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>feat: adopt time machine API

Address one of our main feature requests.

Allow users to go back in time by integrating with gravitational://infty.improbability/

Co-authored-by: Marvin &amp;lt;marv_is_happy@in.space&amp;gt;
Co-authored-by: Zaphod Beeblebrox &amp;lt;zaph@in.space&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Ideally, sort the &lt;code>Co-authored-by&lt;/code> field alphabetically.&lt;/p>
&lt;p>Sources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors">https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/7442112/how-to-attribute-a-single-commit-to-multiple-developers">https://stackoverflow.com/questions/7442112/how-to-attribute-a-single-commit-to-multiple-developers&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>gh pr view</title><link>https://perrotta.dev/2025/02/gh-pr-view/</link><pubDate>Tue, 25 Feb 2025 11:46:06 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/gh-pr-view/</guid><description>&lt;p>When working on a local git branch that has a github PR associated to it, at
some point you&amp;rsquo;ll want to open its pull request page.&lt;/p>
&lt;p>If you have the &lt;a href="https://cli.github.com/">github CLI&lt;/a> installed (&lt;code>gh&lt;/code>), you can do so with &lt;code>gh pr view --web&lt;/code>.&lt;/p>
&lt;p>If you don&amp;rsquo;t pass &lt;code>--web&lt;/code>, then it will simply output markdown.&lt;/p></description></item><item><title>Google Meet: dashes</title><link>https://perrotta.dev/2025/02/google-meet-dashes/</link><pubDate>Fri, 21 Feb 2025 17:02:45 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/google-meet-dashes/</guid><description>&lt;p>Whenever you need to join a Google Meet like &lt;a href="https://meet.google.com/aaa-bbbb-ccc">https://meet.google.com/aaa-bbbb-ccc&lt;/a> in a
conference room, instead of typing &lt;code>aaa-bbbb-ccc&lt;/code>, you can type just
&lt;code>aaabbbbccc&lt;/code>, i.e. the original meeting ID without the dashes.&lt;/p>
&lt;p>It saves a bit of time!&lt;/p></description></item><item><title>Kill the Newsletter</title><link>https://perrotta.dev/2025/02/kill-the-newsletter/</link><pubDate>Thu, 20 Feb 2025 15:34:30 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/kill-the-newsletter/</guid><description>&lt;p>I don&amp;rsquo;t like to sign up for newsletters. They are too noisy, pollute my inbox,
and have a lot of tracking built-in.&lt;/p>
&lt;p>Instead, I prefer RSS.&lt;/p>
&lt;p>Most newsletters provide a way to subscribe to them via RSS. Notably, Medium and
Substack do so. Most&amp;hellip;but not all.&lt;/p>
&lt;p>What to do when the only option is a newsletter? A popular example: James
Clear, author of Atomic Habits, with his &lt;a href="https://jamesclear.com/newsletter">3-2-1
Thursday&lt;/a> newsletter.&lt;/p>
&lt;p>Use &lt;a href="https://ktnrs.com/">Kill the Newsletter&lt;/a> by Leandro Facchinetti.&lt;/p>
&lt;p>Usage is quite simple:&lt;/p>
&lt;ul>
&lt;li>create a new entry e.g. &amp;ldquo;foo&amp;rdquo;&lt;/li>
&lt;li>it will generate an email e.g. &lt;code>abcdef@ktnrs.com&lt;/code>&lt;/li>
&lt;li>it will generate a RSS feed e.g. &lt;code>https://ktnrs.com/feeds/abcdef.xml&lt;/code>&lt;/li>
&lt;li>use the email to sign up for the newsletter&lt;/li>
&lt;li>use the RSS feed to subscribe to in your feed reader&lt;/li>
&lt;/ul>
&lt;p>And that&amp;rsquo;s it!&lt;/p>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t share these addresses.&lt;/p>
&lt;p>They contain an identifier that other people could use to send you spam and to
control your newsletter subscriptions.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s &lt;a href="https://github.com/leafac/kill-the-newsletter">open source&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Convert email newsletters into Atom feeds&lt;/p>
&lt;/blockquote>
&lt;p>Most blogs I subscribe to provide RSS feeds out-of-the-box, therefore I don&amp;rsquo;t
see the need to self-host this service merely for a few one-offs.&lt;/p></description></item><item><title>git: prune gone upstream branches</title><link>https://perrotta.dev/2025/02/git-prune-gone-upstream-branches/</link><pubDate>Thu, 20 Feb 2025 11:43:04 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/git-prune-gone-upstream-branches/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Delete all local git branches whose upstream counterparts
have already been merged (&amp;ldquo;gone&amp;rdquo; in git lingo).&lt;/p>
&lt;p>Augment your &lt;code>~/.gitconfig&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[alias]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">prune-gone&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">!git fetch -p &amp;amp;&amp;amp; git branch -vv | awk &amp;#39;/: gone]/{print $1}&amp;#39; | xargs -r git branch -D&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run &lt;code>git prune-gone&lt;/code>. That&amp;rsquo;s it.&lt;/p>
&lt;p>It lists all branches that are &amp;ldquo;gone&amp;rdquo; and deletes them.&lt;/p>
&lt;p>I have another git alias (&lt;code>'world'&lt;/code>) to do all this sort of &lt;em>clean-up&lt;/em> tasks at
once:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[alias]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">world&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">!git fetch --all &amp;amp;&amp;amp; git remote prune origin &amp;amp;&amp;amp; git prune-gone&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>zsh: setopt magic_equal_subst</title><link>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</link><pubDate>Tue, 18 Feb 2025 13:52:57 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Write the following command line in &lt;code>zsh&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#f92672">=&lt;/span>../../../config/global-dns-changer-
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now press &lt;code>&amp;lt;TAB&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Expected&lt;/strong>: Filename expansion.&lt;/p>
&lt;p>&lt;strong>Observed&lt;/strong>:&lt;/p>
&lt;pre tabindex="0">&lt;code>No matches for: `filename&amp;#39; or `file&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Ugh. How about some magic 🪄?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>setopt magic_equal_subst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#f92672">=&lt;/span>../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#f92672">{&lt;/span>foo&lt;span style="color:#f92672">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#f92672">{&lt;/span>bar&lt;span style="color:#f92672">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay!&lt;/p>
&lt;p>There&amp;rsquo;s a workaround if you don&amp;rsquo;t want to set the aforementioned option. Just
remove the &lt;code>=&lt;/code> character:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file ../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#f92672">{&lt;/span>foo&lt;span style="color:#f92672">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#f92672">{&lt;/span>bar&lt;span style="color:#f92672">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I find it&amp;rsquo;s more convenient to have this option work in both situations though.&lt;/p>
&lt;p>(via &lt;a href="https://www.reddit.com/r/zsh/comments/10o018l/glob_expansion_and_tab_completion_after_the_sign/">Reddit&lt;/a>)&lt;/p></description></item><item><title>Quick look preview YAML files on macOS</title><link>https://perrotta.dev/2025/02/quick-look-preview-yaml-files-on-macos/</link><pubDate>Tue, 18 Feb 2025 13:18:33 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/quick-look-preview-yaml-files-on-macos/</guid><description>&lt;p>You may be familiar with &lt;a href="https://support.apple.com/en-gb/guide/mac-help/mh14119/mac">Quick
Look&lt;/a> on macOS.&lt;/p>
&lt;p>On Finder, select a file, then press the space bar. A preview pop-up appears,
wherein you can take a quick glance at the file contents.&lt;/p>
&lt;p>Out-of-the-box many file formats are supported, even for images.&lt;/p>
&lt;p>For developers, two popular formats are not supported:&lt;/p>
&lt;ul>
&lt;li>markdown&lt;/li>
&lt;li>yaml&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve been using &lt;a href="https://github.com/sbarex/QLMarkdown">qlmarkdown&lt;/a> for markdown,
and it works well. There&amp;rsquo;s a homebrew package for it: &lt;code>brew install --cask qlmarkdown&lt;/code>.&lt;/p>
&lt;p>Lately I wanted to add YAML as well. I found
&lt;a href="https://github.com/smittytone/PreviewYaml">PreviewYaml&lt;/a>. It&amp;rsquo;s MIT-Licensed and
open source, but there&amp;rsquo;s no pre-built package for it, and it is not on homebrew
either. The author provides an app in the macOS App Store, but it&amp;rsquo;s not free.&lt;/p>
&lt;p>Upon digging deeper, I found
&lt;a href="https://github.com/sbarex/SourceCodeSyntaxHighlight">https://github.com/sbarex/SourceCodeSyntaxHighlight&lt;/a>. It supports pretty much
every popular extension you&amp;rsquo;ll need as a developer (including &lt;code>.yaml&lt;/code>!). There&amp;rsquo;s
a package for it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% brew install --no-quarantine syntax-highlight
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is simple and works as advertised.&lt;/p>
&lt;p>Should I uninstall &lt;code>qlmarkdown&lt;/code> then? Not really:&lt;/p>
&lt;blockquote>
&lt;p>Markdown files (.md, .rmd): please use QLMarkdown which allows you to choose
whether to display formatted output or the highlighted source code.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Markdown files are not supported&lt;/p>
&lt;p>This is a deliberate choice. Most users want to see the formatted output and
not the source code of their markdown files. If you need to view the markdown
files (also with the possibility of choosing whether to show the formatting or
the source code) I have developed QLMarkdown.&lt;/p>
&lt;/blockquote>
&lt;p>How nice! It turns out both extensions were developed by the same author. Thank
you, @sbarex!&lt;/p></description></item><item><title>Notify search engines of new posts</title><link>https://perrotta.dev/2025/02/notify-search-engines-of-new-posts/</link><pubDate>Tue, 18 Feb 2025 11:33:19 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/notify-search-engines-of-new-posts/</guid><description>&lt;p>I have the following rule in the &lt;a href="https://just.systems/man/en/">&lt;code>Justfile&lt;/code>&lt;/a> of
this blog:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-just" data-lang="just"># Ping Google and Bing about changes in the sitemap
ping sitemap=&amp;#34;https://perrotta.dev/sitemap.xml&amp;#34;:
	curl -sS -o /dev/null &amp;#34;https://www.google.com/ping?sitemap={{ sitemap }}&amp;#34;
	curl -sS -o /dev/null &amp;#34;https://www.bing.com/ping?sitemap={{ sitemap }}&amp;#34;
&lt;/code>&lt;/pre>&lt;p>It is invoked with &lt;code>$ just ping&lt;/code>.&lt;/p>
&lt;p>Recently I added it to CI (github actions):&lt;/p>
&lt;pre tabindex="0">&lt;code>steps:
 - name: Build
 run: just build
 - name: Deploy
 [...]
 - name: Ping search engines
 run: just ping
&lt;/code>&lt;/pre>&lt;p>Whenever I publish a new post, a sitemap notification is triggered.&lt;/p>
&lt;p>When writing this post, I learned this is just wishful thinking.&lt;/p>
&lt;p>Upon visiting &lt;a href="https://google.com/ping">https://google.com/ping&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Sitemaps ping is deprecated. See
&lt;a href="https://developers.google.com/search/blog/2023/06/sitemaps-lastmod-ping">https://developers.google.com/search/blog/2023/06/sitemaps-lastmod-ping&lt;/a>.&lt;/p>
&lt;p>Error 404&lt;/p>
&lt;/blockquote>
&lt;p>Deeper into the rabbit hole:&lt;/p>
&lt;blockquote>
&lt;p>The Sitemaps Protocol was introduced in 2005 to help search engines with the
discovery of new URLs, and also to help with scheduling new crawls of already
discovered URLs. It&amp;rsquo;s a wildly popular protocol that hasn&amp;rsquo;t changed for over
15 years. While the general idea is still useful, some aspects have become
less practical in today&amp;rsquo;s internet.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>To that end, we&amp;rsquo;re announcing deprecation of the sitemaps &amp;ldquo;ping&amp;rdquo; endpoint and
providing additional recommendations for the use of the lastmod element.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The sitemap protocol defines an unauthenticated REST method for submitting
sitemaps to search engines. Our internal studies—and also other search engines
such as Bing—tell us that at this point these unauthenticated sitemap
submissions are not very useful. In fact, in the case of Google Search, the
vast majority of the submissions lead to spam. To wit, we&amp;rsquo;re deprecating our
support for sitemaps ping and the endpoint will stop functioning in 6 months.
You can still submit your sitemaps through robots.txt and Search Console, but
the HTTP requests (&amp;ldquo;pings&amp;rdquo;) to the deprecated REST endpoint will result in a
404 error. Any existing code or plugins which use this endpoint will not cause
problems for Google Search; you don&amp;rsquo;t need to make any changes (but using the
endpoint will also not do anything useful).&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ll keep pinging it anyway, the cost is virtually free. You can&amp;rsquo;t just
&lt;a href="https://killedbygoogle.com/">deprecate&lt;/a> features people &lt;a href="https://www.hyrumslaw.com/">rely
on&lt;/a>.&lt;/p></description></item><item><title>Ruby: string escaping</title><link>https://perrotta.dev/2025/02/ruby-string-escaping/</link><pubDate>Mon, 17 Feb 2025 11:57:46 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/ruby-string-escaping/</guid><description>&lt;p>I needed to translate the following shell command (&lt;code>bash&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>instance&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;thiago-perrotta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get secret -n &lt;span style="color:#e6db74">&amp;#34;c-&lt;/span>$instance&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$instance&lt;span style="color:#e6db74">-factory&amp;#34;&lt;/span> -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.data.conf\.json}&amp;#39;&lt;/span> | base64 --decode | jq --arg url &lt;span style="color:#e6db74">&amp;#39;rabbitmq.url&amp;#39;&lt;/span> -r &lt;span style="color:#e6db74">&amp;#39;.[$url]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;to Ruby. It reads a JSON entry from a kubernetes secret and extracts a
specific key from it with &lt;code>jq&lt;/code>.&lt;/p>
&lt;p>I wrote a helper function to do so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">factory_conf_json_rabbitmq_url&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># amqp://{user}:{password}@{host}:{port}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Helpers&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">LocalShell&lt;/span>&lt;span style="color:#f92672">.&lt;/span>capture_without_error(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;kubectl get secret -n c-&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>@target&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>@target&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-factory -o jsonpath=&amp;#39;{.data.conf\.json}&amp;#39; | base64 --decode | jq --arg url &amp;#39;rabbitmq.url&amp;#39; -r &amp;#39;.[$url]&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )&lt;span style="color:#f92672">&amp;amp;.&lt;/span>strip&lt;span style="color:#f92672">&amp;amp;.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;@&amp;#39;&lt;/span>)&lt;span style="color:#f92672">&amp;amp;.&lt;/span>last&lt;span style="color:#f92672">&amp;amp;.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>)&lt;span style="color:#f92672">&amp;amp;.&lt;/span>first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It took me a long time to figure out what was wrong with that code. It was
returning an empty string.&lt;/p>
&lt;p>It turns out it was a very simple issue: string escaping!&lt;/p>
&lt;p>One must do &lt;code>{.data.conf\\.json}&lt;/code>. The backslash needs to be escaped.&lt;/p>
&lt;p>How did I figure it out? Heck, I didn&amp;rsquo;t. I just asked ChatGPT how to translate
the shell expression above into Ruby, and it has correctly emitted the escaped
string in Ruby.&lt;/p>
&lt;p>In hindsight, the error is quite obvious. Isn&amp;rsquo;t it always like that?&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I feel I should incorporate more AI in my daily dev workflows. However, I
want to do so efficiently. Paying for Claude / ChatGPT doesn&amp;rsquo;t make sense to
my use case as there&amp;rsquo;s no unlimited usage (yet?), and I don&amp;rsquo;t want to stress
over &amp;ldquo;wasting&amp;rdquo; prompts. It&amp;rsquo;s not a good user experience to worry about
getting close to the limit. It&amp;rsquo;s like when doing web searches: you don&amp;rsquo;t
stress over them because you know you can make new queries as many times as
you would like. So far I use only discrete chat conversations + Github
Copilot in VSCode.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>git: blank commit</title><link>https://perrotta.dev/2025/02/git-blank-commit/</link><pubDate>Fri, 14 Feb 2025 13:50:36 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/git-blank-commit/</guid><description>&lt;h2 id="how-can-we-create-an-empty-commit-in-git">How can we create an empty commit in &lt;code>git&lt;/code>?&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>mkdir repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit --allow-empty -n -m &lt;span style="color:#e6db74">&amp;#34;blank commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit effe4480543051e13838d4fbc127f01f658c07dc &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: Thiago Perrotta &amp;lt;&lt;span style="color:#f92672">{&lt;/span>redacted-email&lt;span style="color:#f92672">}&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Fri Feb &lt;span style="color:#ae81ff">14&lt;/span> 13:52:19 &lt;span style="color:#ae81ff">2025&lt;/span> +0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blank commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="why-is-this-useful">Why is this useful?&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide">dependabot&lt;/a>
&lt;a href="https://jongleberry.medium.com/accessing-github-actions-secrets-for-dependabot-pull-requests-on-private-repositories-b0dd6995f21b">cannot&lt;/a>
access secrets in github actions. There&amp;rsquo;s one workaround: check out the pull
request locally, add a blank commit on top of it, then push it back. &lt;em>Boom&lt;/em>.
The secrets are suddenly accessible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>create a commit &lt;em>in advance&lt;/em> of coding it, à la
&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD&lt;/a>. Declaring your
intent first can help with focus and scope. You can always update the commit
message afterwards with &lt;code>git commit --amend&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>2.1) create a pull request (merge request) &lt;em>in advance&lt;/em> of coding it. So that
you can have a PR number that can be shared with your teammates and/or linked to
from your bug tracker software.&lt;/p>
&lt;h2 id="my-aliases">My aliases&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% grep -E &lt;span style="color:#e6db74">&amp;#39;(alias|blank|desc)&amp;#39;&lt;/span> ~/.gitconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>alias&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blank &lt;span style="color:#f92672">=&lt;/span> desc -m &lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>blank commit&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desc &lt;span style="color:#f92672">=&lt;/span> commit --allow-empty -n
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Which I alias to &lt;code>git reword&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>ArgoCD: vertical-pod-autoscaler sync loop</title><link>https://perrotta.dev/2025/02/argocd-vertical-pod-autoscaler-sync-loop/</link><pubDate>Thu, 13 Feb 2025 13:17:36 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/argocd-vertical-pod-autoscaler-sync-loop/</guid><description>&lt;p>We&amp;rsquo;ve had a long time issue wherein our
&lt;a href="https://artifacthub.io/packages/helm/cowboysysop/vertical-pod-autoscaler">vertical-pod-autoscaler&lt;/a>
(VPA) ArgoCD application, deployed via its helm chart, got stuck in a sync loop.&lt;/p>
&lt;p>More specifically: the helm chart automatically generates a self-signed
certificate via the
&lt;a href="https://helm.sh/docs/chart_template_guide/function_list/#genca">GenCA&lt;/a> helm
function upon every change to our gitops repository. It turns out
&lt;a href="https://github.com/cowboysysop/charts/blob/9527602f8f2ea59f51cd3a7d3380810ba60c39fc/charts/vertical-pod-autoscaler/README.md?plain=1#L236">this&lt;/a>
is documented and we can see its corresponding manifest
&lt;a href="https://github.com/cowboysysop/charts/blob/9527602f8f2ea59f51cd3a7d3380810ba60c39fc/charts/vertical-pod-autoscaler/templates/admission-controller/tls-secret.yaml#L3C1-L3C91">here&lt;/a>.&lt;/p>
&lt;p>So that&amp;rsquo;s where the sync loop was coming from! ArgoCD was constantly reporting
(and resolving) a diff in the admission controller secret.&lt;/p>
&lt;p>The manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">data&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ca.crt&lt;/span>: &lt;span style="color:#ae81ff">++++++++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls.crt&lt;/span>: &lt;span style="color:#ae81ff">++++++++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls.key&lt;/span>: &lt;span style="color:#ae81ff">++++++++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">vertical-pod-autoscaler-admission-controller-tls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kube-system&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#ae81ff">...]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problematic are all the ones under &lt;code>data:&lt;/code>.&lt;/p>
&lt;p>I confirmed that was indeed the case in the &lt;a href="https://cloud-native.slack.com/archives/C01TSERG0KZ/p1739442822542539">CNCF
Slack&lt;/a>
&lt;code>#argo-cd&lt;/code>. Thanks Tim!&lt;/p>
&lt;p>How to address it?&lt;/p>
&lt;p>We leverage
&lt;a href="https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/">&lt;code>ignoreDifferences&lt;/code>&lt;/a>
(c.f. &lt;a href="https://stackoverflow.com/questions/77510338/argocd-show-as-out-of-sync-on-every-push-for-auto-generate-certs-password">Stack
Overflow&lt;/a>)
in the ArgoCD app manifest:&lt;/p>
&lt;pre tabindex="0">&lt;code>% git diff HEAD~2..HEAD
diff --git apps/base/vertical-pod-autoscaler/vertical-pod-autoscaler.yaml apps/base/vertical-pod-autoscaler/vertical-pod-autoscaler.yaml
index 92bfbcc..90d8435 100644
--- apps/base/vertical-pod-autoscaler/vertical-pod-autoscaler.yaml
+++ apps/base/vertical-pod-autoscaler/vertical-pod-autoscaler.yaml
@@ -34,3 +34,15 @@ spec:
 maxDuration: 1m
 syncOptions:
 - CreateNamespace=true
+ - RespectIgnoreDifferences=true
+ ignoreDifferences:
+ - group: &amp;#34;&amp;#34;
+ kind: Secret
+ name: vertical-pod-autoscaler-admission-controller-tls
+ jsonPointers:
+ - /data
+ - group: apps
+ kind: Deployment
+ name: vertical-pod-autoscaler-admission-controller
+ jsonPointers:
+ - /spec/template/metadata/annotations/checksum~1tls-secret
&lt;/code>&lt;/pre>&lt;p>In &lt;a href="https://www.rfc-editor.org/rfc/rfc6901">JSON Pointers&lt;/a> (RFC 6901), one
escapes the slash character with a &lt;code>~1&lt;/code> (c.f. section 3 in the spec):&lt;/p>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>Because the characters &amp;#39;~&amp;#39; (%x7E) and &amp;#39;/&amp;#39; (%x2F) have special meanings in
JSON Pointer, &amp;#39;~&amp;#39; needs to be encoded as &amp;#39;~0&amp;#39; and &amp;#39;/&amp;#39; needs to be encoded as
&amp;#39;~1&amp;#39; when these characters appear in a reference token.
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>Problem resolved!&lt;/p>
&lt;p>In general all helm charts that generate self-signed certificates (with &lt;code>genCA&lt;/code>)
may experience this sync loop when used with a CD framework such as Argo.&lt;/p></description></item><item><title>GitHub Distributed CODEOWNERS</title><link>https://perrotta.dev/2025/02/github-distributed-codeowners/</link><pubDate>Wed, 12 Feb 2025 13:57:29 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/github-distributed-codeowners/</guid><description>&lt;p>We recently adopted Andrew Ring&amp;rsquo;s &amp;ldquo;Distributed CODEOWNERS&amp;rdquo;
(&lt;a href="https://github.com/andrewring/github-distributed-owners">github&lt;/a>) in some
parts of our codebase.&lt;/p>
&lt;p>You know the concept of
&lt;a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/code_reviews.md">&lt;code>OWNERS&lt;/code>&lt;/a>
if you&amp;rsquo;ve worked at Google, or in the Chromium codebase. As far as I know, they
were the pioneers of this concept.&lt;/p>
&lt;p>Outside Google, GitHub has popularized it with
&lt;a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners">CODEOWNERS&lt;/a>.
It&amp;rsquo;s pretty much the same concept, it&amp;rsquo;s just implemented differently.&lt;/p>
&lt;h2 id="google">Google&lt;/h2>
&lt;p>You have distributed &lt;code>OWNERS&lt;/code> files throughout the whole repository. For
example:&lt;/p>
&lt;pre tabindex="0">&lt;code>java/
 OWNERS (a)
 project1/
 OWNERS (b)
 project2/
 OWNERS (c)
&lt;/code>&lt;/pre>&lt;p>&lt;code>OWNERS&lt;/code> in (b) have CL (ChangeList) / PR (Pull Request) approval permissions
for &lt;code>java/project1&lt;/code>, but not for &lt;code>java/project2&lt;/code>.&lt;/p>
&lt;p>&lt;code>OWNERS&lt;/code> in (a) have approval permissions for both projects.&lt;/p>
&lt;h2 id="github">GitHub&lt;/h2>
&lt;p>There&amp;rsquo;s a single &lt;code>.github/CODEOWNERS&lt;/code> file that controls the whole repository:&lt;/p>
&lt;pre tabindex="0">&lt;code>* a
/java/project1 b
/java/project2 c
&lt;/code>&lt;/pre>&lt;h2 id="distributed-codeowners">Distributed CODEOWNERS&lt;/h2>
&lt;p>What if we wanted to adopt the Google approach in GitHub? Use Andrew&amp;rsquo;s tool!&lt;/p>
&lt;p>What does it do? It collects all scattered &lt;code>OWNERS&lt;/code> in the repository and
consolidates them in a single &lt;code>.github/CODEOWNERS&lt;/code> file, expected by GitHub.
Win-win!&lt;/p>
&lt;p>I like to adopt it with a &lt;a href="https://pre-commit.com">pre-commit&lt;/a> hook:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">repos&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/andrewring/github-distributed-owners&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v0.1.9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">github-distributed-owners&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">files&lt;/span>: &lt;span style="color:#ae81ff">.*/OWNERS$|^\.github/CODEOWNERS$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then it gets automatically managed via CI and/or local commits. It can also be
triggered manually with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pre-commit run -a github-distributed-codeowners
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MLC Chat: off-line LLMs in your iPhone</title><link>https://perrotta.dev/2025/02/mlc-chat-off-line-llms-in-your-iphone/</link><pubDate>Sat, 08 Feb 2025 16:26:04 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/mlc-chat-off-line-llms-in-your-iphone/</guid><description>&lt;p>&lt;a href="https://apps.apple.com/us/app/mlc-chat/id6448482937">MLC Chat&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Large language models locally in phone&lt;/p>
&lt;p>MLC Chat lets users chat with open language models locally on ipads and
iphones. After a model is downloaded to the app, everything runs locally
without server support, and it works without internet connections do not
record any information.&lt;/p>
&lt;p>Because the models run locally, it only works for the devices with sufficient
VRAM depending on the models being used.&lt;/p>
&lt;p>MLC Chat is part of open source project MLC LLM, with allows any language
model to be deployed natively on a diverse set of hardware backends and native
applications. MLC Chat is a runtime that runs different open model
architectures on your phone. The app is intended for non-commercial purposes.
It allows you to run open-language models downloaded from the internet. Each
model can be subject to its respective licenses.&lt;/p>
&lt;/blockquote>
&lt;p>I originally heard about it last year via &lt;a href="https://simonwillison.net/">Simon
Willison&lt;/a>.&lt;/p>
&lt;p>I used the &lt;code>LLAMA-3.2-3B-Instruct&lt;/code> model on my iPhone 14 Pro, and it worked
quite well&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. The performance was quite acceptable for what I would expect of a
local LLM on my phone in 2024-25. It takes a few seconds to initialize / warm up
at startup.&lt;/p>
&lt;p>A noticeable side effect: my phone heats up &lt;em>significantly&lt;/em> when using it for a
couple of minutes. Battery drain is also perceivable.&lt;/p>
&lt;p>The app is super simple. There&amp;rsquo;s no chat history, it&amp;rsquo;s a single conversation.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>One minor annoyance: that model is quite verbose and somewhat overly
enthusiastic. Did someone give it the personality from Microsoft Word
Clippy?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Upcoming calendar meeting in macOS menu bar with Raycast</title><link>https://perrotta.dev/2025/02/upcoming-calendar-meeting-in-macos-menu-bar-with-raycast/</link><pubDate>Sat, 08 Feb 2025 13:56:42 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/upcoming-calendar-meeting-in-macos-menu-bar-with-raycast/</guid><description>&lt;p>Previously: &lt;a href="https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/">itsycal&lt;/a>.&lt;/p>
&lt;p>The same functionality is built into Raycast:&lt;/p>
&lt;ul>
&lt;li>Open Raycast settings&lt;/li>
&lt;li>Go to the Extensions tab&lt;/li>
&lt;li>Expand Calendar &amp;gt; My Schedule&lt;/li>
&lt;li>Under &amp;ldquo;Menu bar options &amp;gt; Show Events in menu bar&amp;rdquo;, select &amp;ldquo;1 hour before&amp;rdquo; (or
maybe &amp;ldquo;As long as they are upcoming&amp;rdquo;).&lt;/li>
&lt;li>Profit&lt;/li>
&lt;/ul>
&lt;p>It integrates out-of-the-box with the calendar accounts added to the system.&lt;/p>
&lt;p>Clicking the menu bar item displays an agenda overview of other events scheduled
later today.&lt;/p>
&lt;p>Neat and simple! Discovery credits to &lt;a href="https://www.youtube.com/watch?v=bDj7gNfLhog">Daniel
Miessler&lt;/a> – via his &lt;a href="https://newsletter.danielmiessler.com/">Unsupervised
Learning&lt;/a> podcast, which I strongly
recommend.&lt;/p></description></item><item><title>Kubernetes: create a pod in pending state</title><link>https://perrotta.dev/2025/02/kubernetes-create-a-pod-in-pending-state/</link><pubDate>Fri, 07 Feb 2025 13:58:36 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/kubernetes-create-a-pod-in-pending-state/</guid><description>&lt;p>We are making a non-trivial change to our cluster monitoring architecture, and I
needed to verify the new rollout is properly working in our infratesting
environment.&lt;/p>
&lt;p>A simple way to do so is to create a pod that never leaves the &amp;ldquo;Pending&amp;rdquo; state,
because we have an alert (a prometheus rule) that fires whenever a pod is in
that stack for too long (15 minutes is our threshold in most cases).&lt;/p>
&lt;p>Use the following manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">pending-pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">affinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">podAffinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">labelSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;non/existent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">operator&lt;/span>: &lt;span style="color:#ae81ff">In&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">topologyKey&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;sh&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-c&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;echo Hello, Kubernetes! &amp;amp;&amp;amp; sleep 3600&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;it creates a &lt;code>pending-pod&lt;/code> in the &lt;code>default&lt;/code> namespace that should never be
scheduled, due to its strict pod affinity rules.&lt;/p>
&lt;p>Save it as &lt;code>pending-pod.yaml&lt;/code>, deploy it with &lt;code>kubectl apply -f pending-pod.yaml&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get pod pending-pod -w
NAME READY STATUS RESTARTS AGE
pending-pod 0/1 Pending 0 21s
 pending-pod 0/1 Pending 0 65s
pending-pod 0/1 Pending 0 74s
pending-pod 0/1 Pending 0 2m6s
pending-pod 0/1 Pending 0 3m8s
pending-pod 0/1 Pending 0 4m8s
pending-pod 0/1 Pending 0 4m18s
&lt;/code>&lt;/pre>&lt;p>At some point the alert fires, as expected.
And now we can roll out these changes to prod!&lt;/p></description></item><item><title>Raycast snippets</title><link>https://perrotta.dev/2025/01/raycast-snippets/</link><pubDate>Wed, 29 Jan 2025 13:52:23 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/raycast-snippets/</guid><description>&lt;p>&lt;a href="https://www.raycast.com/">Raycast&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Your shortcut to everything.&lt;/p>
&lt;p>A collection of powerful productivity tools all within an extendable launcher.
Fast, ergonomic and reliable.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s for macOS only.
I originally heard of it via &lt;a href="https://world.hey.com/dhh">DHH&lt;/a>.&lt;/p>
&lt;p>One of its features I like is &lt;a href="https://manual.raycast.com/snippets">snippets&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Write faster by using snippets to store and insert frequently used text.
Expand them automatically with a keyword.&lt;/p>
&lt;p>Use the Create Snippet command to store a new snippet. If you specify a
keyword, you can simply type it in any application to have it auto-expand
in-place.&lt;/p>
&lt;p>Snippets are handy for frequently used text such as canned email responses,
code or emojis.&lt;/p>
&lt;/blockquote>
&lt;p>For example, I can assign a &lt;code>@@fzf&lt;/code> shortcut so that it expands to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[[&lt;/span> -f /usr/share/doc/fzf/examples/key-bindings.bash &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> source /usr/share/doc/fzf/examples/key-bindings.bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which is quicker than (i) typing it out, (ii) retrieving it from a wiki
and/or second brain app.&lt;/p>
&lt;p>Having text macros like these is handy whenever you do not have full control
over the environment.
If you happen to have control, you could always create a shell alias
and/or a &lt;code>Makefile&lt;/code> target for ergonomics and discoverability.&lt;/p>
&lt;p>These expansions can happen anywhere: terminal emulator, web browser, email
client, LLM prompt.&lt;/p>
&lt;p>A follow-up feature I am interested in exploring is the ability to export
snippets from Raycast to a location within version control, such as
&lt;a href="https://github.com/thiagowfx/.dotfiles">dotfiles&lt;/a>. It would be perfect if I
could manage them all via text in an easy to edit format such as YAML.&lt;/p>
&lt;p>Another snippet example: &lt;code>@@gca&lt;/code> expands to:&lt;/p>
&lt;pre tabindex="0">&lt;code>EDITOR=vim git commit --author=&amp;#34;Thiago Perrotta &amp;lt;{my-corp-email}&amp;gt;&amp;#34;
&lt;/code>&lt;/pre>&lt;p>I chose &lt;code>@@&lt;/code> because that&amp;rsquo;s a chord I am unlikely to type.&lt;/p></description></item><item><title>itsycal: system tray calendar on macOS</title><link>https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/</link><pubDate>Wed, 22 Jan 2025 00:24:51 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/</guid><description>&lt;p>Title says it all.&lt;/p>
&lt;p>&lt;a href="https://www.mowglii.com/itsycal/">Itsycal&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Itsycal is a tiny menu bar calendar.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s free, it&amp;rsquo;s available via homebrew, it&amp;rsquo;s discrete and elegant.&lt;/p>
&lt;p>The only caveat is not the app&amp;rsquo;s fault: iCloud calendar synchronization takes
forever&amp;hellip;that&amp;rsquo;s something I should investigate some other day.&lt;/p></description></item><item><title>JIRA: link issues</title><link>https://perrotta.dev/2025/01/jira-link-issues/</link><pubDate>Tue, 21 Jan 2025 02:33:17 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/jira-link-issues/</guid><description>&lt;p>Definitely not intuitive:&lt;/p>
&lt;ul>
&lt;li>Press &lt;code>Cmd + K&lt;/code>, type in &amp;ldquo;link&amp;rdquo;, &lt;code>ENTER&lt;/code>.&lt;/li>
&lt;li>Select the relationship kind (e.g. &amp;ldquo;is caused by&amp;rdquo;, &amp;ldquo;causes&amp;rdquo;, etc)&lt;/li>
&lt;li>Paste in the issue ID (e.g. INFRA-42) or link, or type in search keywords.&lt;/li>
&lt;/ul></description></item><item><title>Cloudflare DNS for families</title><link>https://perrotta.dev/2025/01/cloudflare-dns-for-families/</link><pubDate>Tue, 21 Jan 2025 01:42:59 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/cloudflare-dns-for-families/</guid><description>&lt;p>&lt;a href="https://developers.cloudflare.com/1.1.1.1/ip-addresses/">Cloudflare&lt;/a> has one of
the coolest DNS IP addresses on the planet: &lt;code>1.1.1.1&lt;/code> (primary) and &lt;code>1.0.0.1&lt;/code>
(secondary).&lt;/p>
&lt;p>Furthermore they have another class of DNS servers &lt;a href="https://blog.cloudflare.com/introducing-1-1-1-1-for-families/">&amp;ldquo;for
families&amp;rdquo;&lt;/a>,
intended to block malware and/or adult content.&lt;/p>
&lt;p>They are also quite memorable:&lt;/p>
&lt;ul>
&lt;li>Malware: &lt;code>1.1.1.2&lt;/code>, &lt;code>1.0.0.2&lt;/code>&lt;/li>
&lt;li>Adult content: &lt;code>1.1.1.3&lt;/code>, &lt;code>1.0.0.3&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>codespell: ignore words</title><link>https://perrotta.dev/2025/01/codespell-ignore-words/</link><pubDate>Mon, 20 Jan 2025 10:54:55 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/codespell-ignore-words/</guid><description>&lt;p>When using &lt;a href="https://github.com/codespell-project/codespell">codespell&lt;/a> to spell
check a git repository, sometimes you may run into false positive words.&lt;/p>
&lt;p>There are two ways to whitelist them.&lt;/p>
&lt;p>The first one is via command-line arguments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>codespell -L&lt;span style="color:#f92672">=&lt;/span>ist -L&lt;span style="color:#f92672">=&lt;/span>regio
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>codespell -L&lt;span style="color:#f92672">=&lt;/span>ist,regio
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The second one is with a dedicated &lt;code>.ignore-words.txt&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat .ignore-words.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>regio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># keep-sorted end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% codespell -I .ignore-words.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kindle Paperwhite: take a screenshot</title><link>https://perrotta.dev/2025/01/kindle-paperwhite-take-a-screenshot/</link><pubDate>Sun, 19 Jan 2025 04:26:30 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/kindle-paperwhite-take-a-screenshot/</guid><description>&lt;p>Today I &lt;em>incidentally&lt;/em> learned it&amp;rsquo;s possible to take a screenshot from your Kindle
Paperwhite.&lt;/p>
&lt;blockquote>
&lt;p>To take a screenshot on your Kindle Paperwhite, hold your fingers on either
the top left and bottom right corners or the top right and bottom left
corners. You&amp;rsquo;ll see the screen flash briefly, similar to taking a screenshot
on iPhone and iPad.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://www.idownloadblog.com/2020/10/26/take-view-screenshot-kindle-paperwhite/">via&lt;/a>)&lt;/p>
&lt;p>I figured it is possible upon connecting it to my computer and seeing a
screenshot file there. I must have done it accidentally at some point.&lt;/p></description></item><item><title>FOSDEM Calendar</title><link>https://perrotta.dev/2025/01/fosdem-calendar/</link><pubDate>Wed, 15 Jan 2025 00:53:18 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/fosdem-calendar/</guid><description>&lt;p>&lt;a href="https://fosdem.org/">FOSDEM&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>FOSDEM is a free event for software developers to meet, share ideas and
collaborate. Every year, thousands of developers of free and open source
software from all over the world gather at the event in Brussels. You don&amp;rsquo;t
need to register. Just turn up and join in!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://fosdem.org/2025/schedule/">FOSDEM 2025 schedule&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>FOSDEM is a rather busy conference. This edition features 1056 speakers, 1004
events, and 74 tracks. We do our best to provide you with as much information
and navigation options about the schedule as we can.&lt;/p>
&lt;/blockquote>
&lt;p>How can you keep track of which talks to attend? There&amp;rsquo;s a myriad of them!&lt;/p>
&lt;p>&lt;a href="https://fosdem.org/2025/schedule/mobile/">Mobile schedule apps&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Ways to have the schedule with you at all times, without wasting trees.&lt;/p>
&lt;/blockquote>
&lt;p>This year I signed up for &lt;a href="https://fosdem.sojourner.rocks/2025">Sojourner&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
It&amp;rsquo;s a no-frills &lt;a href="https://en.wikipedia.org/wiki/Progressive_web_app">PWA&lt;/a>. I
would recommend it!&lt;/p>
&lt;p>Back in FOSDEM 2023 I used the
&lt;a href="https://apps.apple.com/us/app/fosdem-app/id1513719757">FOSDEM.app&lt;/a> for iOS. It
was OK.&lt;/p>
&lt;p>There&amp;rsquo;s also an &lt;a href="https://fosdem.org/2025/schedule/ical">iCal&lt;/a> feed, but it&amp;rsquo;s too
noisy as it lists every single talk of the conference, and it doesn&amp;rsquo;t allow you
to filter out the ones you&amp;rsquo;re not interested in.&lt;/p>
&lt;p>&lt;em>PS. If you&amp;rsquo;re also going to FOSDEM this year, please do reach out! :D&lt;/em>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>There&amp;rsquo;s a great &lt;a href="https://www.thesojourngame.com/">videogame&lt;/a> with the same
name.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>What time is it in your timezone?</title><link>https://perrotta.dev/2025/01/what-time-is-it-in-your-timezone/</link><pubDate>Tue, 14 Jan 2025 16:31:27 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/what-time-is-it-in-your-timezone/</guid><description>&lt;p>Following the principles of &lt;a href="https://perrotta.dev/2024/07/timezones/">timezones&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://time.is/">https://time.is/&lt;/a> has one of the cleanest user experiences I&amp;rsquo;ve ever seen.&lt;/p>
&lt;p>&lt;strong>Alternatively&lt;/strong>: use your favorite search engine to query for &amp;ldquo;time in
London&amp;rdquo;, or similar. &lt;a href="https://duckduckgo.com/?q=time+in+london">Example&lt;/a>.&lt;/p></description></item><item><title>SSCCE</title><link>https://perrotta.dev/2025/01/sscce/</link><pubDate>Sat, 11 Jan 2025 04:29:42 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/sscce/</guid><description>&lt;p>&lt;strong>Short, Self Contained, Correct (Compilable), Example&lt;/strong> (&amp;ldquo;sscce&amp;rdquo;):&lt;/p>
&lt;p>If you are having a problem with some code and seeking help, preparing a Short,
Self Contained, Correct Example (SSCCE) is very useful. But what is an SSCCE?&lt;/p>
&lt;p>It is all in the name, really. Take a look at each part. The version prepared
for others to see should be:&lt;/p>
&lt;ul>
&lt;li>Short (Small): Minimise bandwidth for the example, do not bore the audience.&lt;/li>
&lt;li>Self Contained: Ensure everything is included, ready to go.&lt;/li>
&lt;li>Correct: Copy, paste, (compile,) see is the aim.&lt;/li>
&lt;li>Example: Displays the problem we are trying to solve.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Source&lt;/strong>: &lt;a href="https://www.sscce.org/">https://www.sscce.org/&lt;/a>&lt;/p>
&lt;p>One of my favorite resources to link to from Q&amp;amp;A (like Stack Overflow) and forums / BBS.&lt;/p></description></item><item><title>Cloudflare: Email Workers</title><link>https://perrotta.dev/2025/01/cloudflare-email-workers/</link><pubDate>Sat, 11 Jan 2025 01:48:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/cloudflare-email-workers/</guid><description>&lt;p>My journey into the
&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing">serverless&lt;/a> world hereby
starts.&lt;/p>
&lt;p>And I am very happy to have chosen &lt;a href="https://www.cloudflare.com/">the best™
provider&lt;/a> in the universe to delight me in this
sweet learning curve. ✨&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: I have my own domain, you have probably noticed that.&lt;/p>
&lt;p>Given a specific hypothetical email address &lt;code>neetflex@&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> within my own
domain, make it an email recipient that automatically forwards to both
&lt;code>user1@example.com&lt;/code> and &lt;code>user2@example.com&lt;/code>.&lt;/p>
&lt;p>The first attempt involves setting up an &lt;a href="https://developers.cloudflare.com/email-routing/">Email
Routing&lt;/a> rule. The issue is
that you can only do 1:1 mappings: &lt;code>neetflex@&lt;/code> -&amp;gt; &lt;code>user1@example.com&lt;/code>
would work, but it is impossible to add &lt;code>user2@example.com&lt;/code> for the same
recipient.&lt;/p>
&lt;p>&lt;strong>Workaround&lt;/strong>: &lt;a href="https://developers.cloudflare.com/email-routing/email-workers/">Email Workers&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>With Email Workers you can leverage the power of Cloudflare Workers to
implement any logic you need to process your emails and create complex rules.
These rules determine what happens when you receive an email.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>Aside&lt;/em>: The platform is such a delight to use, I am deeply enchanted. Their
documentation is absolutely superb. I am getting seduced and couldn&amp;rsquo;t agree more
with &lt;a href="https://danielmiessler.com/blog/google-has-opened-the-door-to-cloudflare">Daniel
Miessler&lt;/a>.&lt;/p>
&lt;p>I proceed to create an Email Worker with the following code&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">email&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;info@account.neetflex.com&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">address&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep-sorted start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user1@example.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;user2@example.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep-sorted end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">forward&lt;/span>(&lt;span style="color:#a6e22e">address&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;named &lt;code>neetflex-magic-link&lt;/code>.&lt;/p>
&lt;p>There&amp;rsquo;s an integrated testing tool that makes it a breeze to ensure my worker
logic works as intended.&lt;/p>
&lt;p>Once I am satisfied with the results, I deploy the email worker.&lt;/p>
&lt;p>&lt;strong>Final step&lt;/strong>: create an email route rule from &lt;code>neetflex@{domain}&lt;/code> to the
aforementioned email worker. Done, profit!$!&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>At the time of this post, you can
&lt;a href="https://developers.cloudflare.com/workers/languages/">choose&lt;/a> among JavaScript,
TypeScript, Python and Rust to code your worker in.&lt;/p>
&lt;p>Original idea:
&lt;a href="https://community.cloudflare.com/t/routing-an-email-to-more-than-one-address-from-the-same-user/437169/2">source&lt;/a>
from Cloudflare Community.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Don&amp;rsquo;t judge me if I am a fan of &lt;a href="https://neetcode.io/">neetcode&lt;/a>&amp;rsquo;s sense
of humour.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I miss(ed) programming in TypeScript! (even if only such a small snippet).&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;em>Literally&lt;/em>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>.gitkeep</title><link>https://perrotta.dev/2025/01/.gitkeep/</link><pubDate>Sat, 11 Jan 2025 00:43:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/.gitkeep/</guid><description>&lt;p>I&amp;rsquo;m not sure if this is well-known, so here&amp;rsquo;s a short anecdotal blog post:&lt;/p>
&lt;p>&lt;code>git&lt;/code> cannot track empty directories.&lt;/p>
&lt;p>I wanted to add a &lt;code>drafts/&lt;/code> folder to my blog repository, alongside a
&lt;code>.gitignore&lt;/code> containing &lt;code>drafts/*.md&lt;/code> so that my staging posts wouldn&amp;rsquo;t be
accidentally checked into version control.&lt;/p>
&lt;p>If &lt;code>drafts/&lt;/code> is supposed to be empty, then how can I check it into version
control?&lt;/p>
&lt;p>The &lt;a href="https://stackoverflow.com/a/7229996/1745064">answer&lt;/a> is to create a dummy
&lt;code>.gitkeep&lt;/code> file inside it with &lt;code>touch drafts/.gitkeep&lt;/code>. This way I can
&lt;a href="https://github.com/thiagowfx/thiagowfx.github.io/tree/master/drafts">push&lt;/a> the
&lt;code>drafts/&lt;/code> directory to VCS. And it will remain empty (of markdown files)!&lt;/p></description></item><item><title>Anki: insert emoji on macOS</title><link>https://perrotta.dev/2025/01/anki-insert-emoji-on-macos/</link><pubDate>Sat, 11 Jan 2025 00:28:48 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/anki-insert-emoji-on-macos/</guid><description>&lt;p>There&amp;rsquo;s a longstanding bug in &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> on macOS: it&amp;rsquo;s
not possible to insert an emoji in the editor view via the system emoji picker.&lt;/p>
&lt;p>Whenever you click an emoji, the emoji picker closes whilst nothing is inserted.&lt;/p>
&lt;p>This has always annoyed me.&lt;/p>
&lt;p>Today I found a
&lt;a href="https://forums.ankiweb.net/t/macos-emoji-picker-not-working-in-editor-view/4061">workaround&lt;/a> (thanks Luc!):&lt;/p>
&lt;blockquote>
&lt;p>For anyone who comes across this. I figured out a quick workaround. You have
to open the Emoji-Picker-Keyboard on your Mac and then select the Emoji and
pull it into the editor window with your mouse.&lt;/p>
&lt;/blockquote>
&lt;p>It works indeed!&lt;/p>
&lt;p>My previous alternative was to use the emoji picker to insert an emoji in
another application (e.g. the Notes.app), and then manually cut and paste it.&lt;/p></description></item><item><title>Why self-answer questions in your own blog instead of Stack Overflow?</title><link>https://perrotta.dev/2025/01/why-self-answer-questions-in-your-own-blog-instead-of-stack-overflow/</link><pubDate>Thu, 09 Jan 2025 21:39:29 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/why-self-answer-questions-in-your-own-blog-instead-of-stack-overflow/</guid><description>&lt;p>I am a fan of the &lt;a href="https://stackexchange.com/">Stack Exchange&lt;/a> network, which
includes &lt;a href="https://stackoverflow.com/">Stack Overflow&lt;/a>.&lt;/p>
&lt;p>At the time of this post, I even link to &lt;a href="https://stackoverflow.com/users/1745064/thiagowfx">my
profile&lt;/a> there from the
footer of this website.&lt;/p>
&lt;p>Nonetheless,
&lt;a href="https://substack.evancarroll.com/p/the-erasure-of-luigi-mangione">nothing&lt;/a>
beats &lt;a href="https://news.ycombinator.com/item?id=42642089">owning&lt;/a> your own
&lt;a href="https://gist.github.com/hopeseekr/f522e380e35745bd5bdc3269a9f0b132">content&lt;/a>:&lt;/p>
&lt;p>Theodore R. Smith:&lt;/p>
&lt;blockquote>
&lt;p>If someone with 20,000+ karma has their nicely-formatted questions closed so
quickly, what must the newbies and rank-in-file encounter? This is probably a
big reason why it&amp;rsquo;s declining.&lt;/p>
&lt;/blockquote>
&lt;p>Moderators tend to be extremely (nit)picky there, oftentimes in a way that is
obtrusive and wielding gatekeeping, especially to newcomers.&lt;/p>
&lt;p>It&amp;rsquo;s great when you&amp;rsquo;re under the radar and avoid them; otherwise, it can be
quite cumbersome although, statistically speaking, it&amp;rsquo;s unlikely that you would
encounter this experience. It only happened to me once in 12 years using the
site – but it&amp;rsquo;s worth to note I am not much active there.&lt;/p>
&lt;p>I am trying to post these &amp;ldquo;today I learned&amp;rdquo; posts in my own blog for a myriad of
reasons, some of them including a) owning my content, b) not having to fight for
the right of my own content to exist, c) not wasting time on &lt;a href="https://xkcd.com/386/">frivolous
discussions&lt;/a> with moderators.&lt;/p>
&lt;p>And there&amp;rsquo;s a bit of a psychological dopamine hit as well – it surely feels good
to look back at a subset of lessons from what I have accomplished / learned,
represented by textual blog posts.&lt;/p>
&lt;p>In my opinion though the dopamine is only healthy because the blog is a toy
project. If I had to commercialize it and/or have to care about viral content /
number of readers / impressions / ad revenue then it would sooner or later feel
burdensome and transactional.&lt;/p></description></item><item><title>ArgoCD: cache: key is missing</title><link>https://perrotta.dev/2025/01/argocd-cache-key-is-missing/</link><pubDate>Thu, 09 Jan 2025 20:20:03 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/argocd-cache-key-is-missing/</guid><description>&lt;p>If you experience the title error message in ArgoCD (e.g. via its web UI and/or
in pod logs), it&amp;rsquo;s related to
&lt;a href="https://github.com/argoproj/argo-cd/issues/5068">argo-cd#5068&lt;/a>. The full error
message is:&lt;/p>
&lt;pre tabindex="0">&lt;code>Unable to load data: cache: key is missing
&lt;/code>&lt;/pre>&lt;p>As I
&lt;a href="https://github.com/argoproj/argo-cd/issues/5068#issuecomment-2580878251">commented&lt;/a>
in the bug, here&amp;rsquo;s how to fix it:&lt;/p>
&lt;blockquote>
&lt;p>The following workaround sufficed for me: &lt;code>k delete pod -n argocd argocd-application-controller-0&lt;/code>.&lt;/p>
&lt;p>Initially I ran &lt;code>k rollout restart deployment -n argocd argocd-application-controller&lt;/code> but it didn&amp;rsquo;t work.&lt;/p>
&lt;/blockquote>
&lt;p>In my experience, this error only happens once, ephemerally, during ArgoCD
bootstrapping. Once fixed it does not reoccur.&lt;/p>
&lt;p>Another potential workaround is to disable redis / caching altogether, as ArgoCD
can fully operate without it, but I wouldn&amp;rsquo;t recommend that.&lt;/p></description></item><item><title>Quick and dirty random password generator</title><link>https://perrotta.dev/2025/01/quick-and-dirty-random-password-generator/</link><pubDate>Thu, 09 Jan 2025 16:41:15 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/quick-and-dirty-random-password-generator/</guid><description>&lt;p>On Linux / macOS, use &lt;code>/dev/urandom&lt;/code>, with a &lt;code>tr&lt;/code> pass-through filter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tr -dc &lt;span style="color:#e6db74">&amp;#39;A-Za-z0-9&amp;#39;&lt;/span> &amp;lt; /dev/urandom | head -c &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BLH1gVgdukdmTcvopOuC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above only alphanumeric characters are allowed.&lt;/p>
&lt;p>There are other popular ways to do so:&lt;/p>
&lt;ul>
&lt;li>Dice (&lt;a href="https://diceware.dmuth.org/">Douglas Muth&lt;/a>,
&lt;a href="https://www.eff.org/dice">EFF&lt;/a>).&lt;/li>
&lt;li>&lt;a href="https://pwgen.sourceforge.net/">&lt;code>pwgen&lt;/code>&lt;/a> (via &lt;code>brew home pwgen&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>YAML: enforce schema linting</title><link>https://perrotta.dev/2025/01/yaml-enforce-schema-linting/</link><pubDate>Thu, 09 Jan 2025 13:22:32 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/yaml-enforce-schema-linting/</guid><description>&lt;p>&lt;a href="https://yaml.org/">YAML&lt;/a> files can have a schema associated to them.&lt;/p>
&lt;p>&lt;a href="https://schemastore.org/">Schema store&lt;/a> is a popular source for schemas. Or you
could &lt;a href="https://json-schema.org/">write your own&lt;/a>.&lt;/p>
&lt;p>JSON Schemas work on YAML files just fine.&lt;/p>
&lt;p>Let&amp;rsquo;s say you found a schema. For example, for &lt;a href="https://json.schemastore.org/json-patch.json">JSON Patch&lt;/a>.&lt;/p>
&lt;p>Assume this sample &lt;code>.yaml&lt;/code> file:&lt;/p>
&lt;pre tabindex="0">&lt;code>- op: remove
 path: /spec/syncPolicy/automated
&lt;/code>&lt;/pre>&lt;p>How to enforce the schema above in CI?&lt;/p>
&lt;p>One approach I like is with &lt;a href="https://github.com/redhat-developer/yaml-language-server">YAML Language
Server&lt;/a> by Red Hat.&lt;/p>
&lt;p>You start by annotating the file with the desired schema:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># yaml-language-server: $schema=https://json.schemastore.org/json-patch.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">op&lt;/span>: &lt;span style="color:#ae81ff">remove&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/spec/syncPolicy/automated&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then you integrate it with a CI tool that is aware of it. I like
&lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a>. Assuming you follow the pre-commit
setup, integrate the hook:&lt;/p>
&lt;pre tabindex="0">&lt;code>repos:
 - repo: https://github.com/jmlrt/check-yamlschema
 rev: v0.0.4
 hooks:
 - id: check-yamlschema
&lt;/code>&lt;/pre>&lt;p>Then &lt;code>pre-commit run [--all-files] check-yamlschema&lt;/code> shall perform its job.&lt;/p>
&lt;p>&lt;a href="https://github.com/jmlrt/check-yamlschema">https://github.com/jmlrt/check-yamlschema&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A CLI and pre-commit hook for jsonschema validation in YAML files with
multiple documents&lt;/p>
&lt;p>Parse multi-documents YAML files, look for inline schema comments, and
validate the documents according to their schema.&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;a href="https://json.schemastore.org/any.json">&amp;lsquo;any&amp;rsquo;&lt;/a> schema&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> can be handy as an
opt-out mechanism:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;$schema&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://json-schema.org/draft-07/schema#&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;$id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://json.schemastore.org/any.json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;anyOf&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;object&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;array&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;number&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;boolean&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;null&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://github.com/SchemaStore/schemastore/pull/3885">Submitted&lt;/a> by yours truly.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>ghostty: find popular themes</title><link>https://perrotta.dev/2025/01/ghostty-find-popular-themes/</link><pubDate>Thu, 09 Jan 2025 02:56:37 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/ghostty-find-popular-themes/</guid><description>&lt;p>&lt;a href="https://ghostty.org/">Ghostty 1.0&lt;/a> was barely released and it&amp;rsquo;s already quite
popular.&lt;/p>
&lt;p>I&amp;rsquo;ve been &lt;a href="https://perrotta.dev/2024/12/ghostty/">daily driving&lt;/a> it since December
last year and it has been quite enjoyable. There are a few annoyances here and
there, but its minimalism and speed make up for them.&lt;/p>
&lt;p>Today I stumbled upon &lt;a href="https://ghostty.town/">ghostty.town&lt;/a>, which hosts
user-submitted configs. Reminds me of:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://terminal.love/">https://terminal.love/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://terminal.sexy/">https://terminal.sexy/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>My current config is quite simple (by design!):&lt;/p>
&lt;pre tabindex="0">&lt;code>cursor-style-blink = false
shell-integration-features = no-cursor

theme=catppuccin-macchiato

macos-titlebar-style=tabs
&lt;/code>&lt;/pre>&lt;p>I got inspired to use the &lt;a href="https://catppuccin.com/">Catppuccin&lt;/a> theme thanks to
&lt;a href="https://jnsgr.uk/2024/07/how-i-computer-in-2024/">Jon Seager&lt;/a>.&lt;/p>
&lt;p>There&amp;rsquo;s no need to customize the default font as it&amp;rsquo;s &lt;a href="https://perrotta.dev/2024/12/picking-a-monospaced-code-font/">quite sensible&lt;/a> (JetBrains Mono, &lt;a href="https://ghostty.org/docs/config">as
per&lt;/a>).&lt;/p></description></item><item><title>Helm: migrate chart dependencies from HTTPS to OCI</title><link>https://perrotta.dev/2025/01/helm-migrate-chart-dependencies-from-https-to-oci/</link><pubDate>Wed, 08 Jan 2025 18:45:57 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/helm-migrate-chart-dependencies-from-https-to-oci/</guid><description>&lt;p>I got aware of this due to
&lt;a href="https://blog.bitnami.com/2024/10/bitnami-helm-charts-moving-to-oci.html">Bitnami&lt;/a>&amp;rsquo;s
blog post.&lt;/p>
&lt;p>In &lt;code>Chart.yaml&lt;/code>, instead of depending on:&lt;/p>
&lt;pre tabindex="0">&lt;code>- https://charts.bitnami.com/bitnami/airflow-18.3.2.tgz
&lt;/code>&lt;/pre>&lt;p>Instead, depend on:&lt;/p>
&lt;pre tabindex="0">&lt;code>- oci://registry-1.docker.io/bitnamicharts/airflow:18.3.2
&lt;/code>&lt;/pre>&lt;p>The switch is transparent, it works out-of-the-box.&lt;/p>
&lt;p>However there&amp;rsquo;s one caveat: You cannot &lt;code>helm repo add oci://registry-1.docker.io/bitnamicharts&lt;/code>. That only works for &lt;code>https://&lt;/code>
registries.&lt;/p>
&lt;p>The workaround is to &lt;code>helm pull oci://[...] --version {version}&lt;/code> and/or to
browse available tags/versions via docker hub.&lt;/p></description></item><item><title>Alpine Linux: install / pin old packages</title><link>https://perrotta.dev/2025/01/alpine-linux-install-/-pin-old-packages/</link><pubDate>Wed, 08 Jan 2025 15:54:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/alpine-linux-install-/-pin-old-packages/</guid><description>&lt;p>Let&amp;rsquo;s say you want to install an older version of &lt;code>jq&lt;/code> in Alpine Linux.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>Alpine v3.18 has &lt;code>jq&lt;/code> 1.6&lt;/li>
&lt;li>Alpine v3.19 has &lt;code>jq&lt;/code> 1.7&lt;/li>
&lt;/ul>
&lt;p>You&amp;rsquo;re probably using Alpine v3.21 or edge today, which has an even newer
version of &lt;code>jq&lt;/code>. Hence &lt;code>doas apk add jq&lt;/code> will not do.&lt;/p>
&lt;p>Let&amp;rsquo;s assume you do not want to edit your &lt;code>/etc/apk/repositories&lt;/code>, as this is an
one-off, for a single package. What can you do then?&lt;/p>
&lt;p>Use the &lt;code>--repository&lt;/code> flag from &lt;code>apk&lt;/code>!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk add --no-cache --repository&lt;span style="color:#f92672">=&lt;/span>http://dl-cdn.alpinelinux.org/alpine/v3.18/main jq&lt;span style="color:#f92672">=&lt;/span>~1.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s also important to pin the package version (&lt;code>~1.6&lt;/code>), otherwise the latest
one available gets installed.&lt;/p></description></item><item><title>bash: distinguish between script invocation versus source</title><link>https://perrotta.dev/2025/01/bash-distinguish-between-script-invocation-versus-source/</link><pubDate>Tue, 07 Jan 2025 22:08:20 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/bash-distinguish-between-script-invocation-versus-source/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a &lt;code>main.sh&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> bash script that does a bunch of
variable &lt;code>export&lt;/code>s:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_ACCESS_KEY_ID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.AccessKeyId&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_SECRET_ACCESS_KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.SecretAccessKey&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_SESSION_TOKEN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.SessionToken&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;we want to source it so that these exported variables become available in the
current shell context&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ source ./main.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;at the same time, we want to prevent users from invoking it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./main.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;because, otherwise, the variables wouldn&amp;rsquo;t be exported.&lt;/p>
&lt;p>How can we distinguish between these two forms in &lt;code>bash&lt;/code>?&lt;/p>
&lt;p>The following snippet works in this scenario:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$0&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BASH_SOURCE[0]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;error: do not invoke this script directly; instead, run \`source &lt;/span>$0&lt;span style="color:#e6db74">\`&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The general scenario is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$0&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>BASH_SOURCE[0]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;The script was invoked with ./main.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;The script was invoked with source main.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="llm-moment">LLM moment&lt;/h2>
&lt;p>I got it from ChatGPT + personal amends. If you&amp;rsquo;re curious, this is the original
snippet obtained with the first prompt:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash

if [[ $0 = &amp;#34;$BASH_SOURCE&amp;#34; ]]; then
 echo &amp;#34;The script was invoked with ./main.sh&amp;#34;
else
 echo &amp;#34;The script was invoked with source main.sh&amp;#34;
fi
&lt;/code>&lt;/pre>&lt;p>Out of curiosity, I asked:&lt;/p>
&lt;blockquote>
&lt;p>improve this script&lt;/p>
&lt;/blockquote>
&lt;p>To which I got:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash

if [[ &amp;#34;${BASH_SOURCE[0]}&amp;#34; == &amp;#34;${0}&amp;#34; ]]; then
 echo &amp;#34;The script was invoked with ./main.sh&amp;#34;
else
 echo &amp;#34;The script was invoked with source main.sh or . main.sh&amp;#34;
fi
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;which is similar to my final version. Not bad! That said, you would hope
that, in 2025, this &amp;ldquo;improve this script&amp;rdquo; chain-of-thought prompt reasoning
would be part of the model out-of-the-box, oneshot. &lt;em>Oh, well.&lt;/em>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s for &lt;a href="https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/">this script&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>In this context the &lt;code>./&lt;/code> is optional and was added only for clarity.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Diffing two directories</title><link>https://perrotta.dev/2025/01/diffing-two-directories/</link><pubDate>Tue, 07 Jan 2025 15:23:55 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/diffing-two-directories/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given an &amp;lsquo;alpha&amp;rsquo; directory setup with a bunch of
configuration files (e.g. for CI/CD) that works for one cluster, and given
another &amp;lsquo;bravo&amp;rsquo; directory for a distinct cluster, how can you compare the
differences between both directories e.g. perhaps to reconcile them, or to make
them consistent and uniform?&lt;/p>
&lt;p>In this context, &lt;code>cp -r&lt;/code> or &lt;code>rsync&lt;/code> are out of scope. We do not want to clone
one directory into another: that would have been trivial.&lt;/p>
&lt;h2 id="diffoscope">Diffoscope&lt;/h2>
&lt;p>Main tool: &lt;a href="https://diffoscope.org/">Diffoscope&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>In-depth comparison of files, archives, and directories.&lt;/p>
&lt;p>diffoscope tries to get to the bottom of what makes files or directories
different. It will recursively unpack archives of many kinds and transform
various binary formats into more human-readable form to compare them. It can
compare two tarballs, ISO images, or PDF just as easily.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>diffoscope&lt;/code> gained a lot of popularity a few years ago, when linux
distributions started to care about &lt;a href="https://reproducible-builds.org/">reproducible
builds&lt;/a>. In fact, it&amp;rsquo;s highlighted in their
&lt;a href="https://reproducible-builds.org/tools/">tools&lt;/a> page.&lt;/p>
&lt;p>&lt;strong>Usage&lt;/strong>: Very similar to &lt;code>diff&lt;/code>. Run &lt;code>diffoscope {dir1} {dir2}&lt;/code>.&lt;/p>
&lt;h2 id="midnight-commander">Midnight Commander&lt;/h2>
&lt;p>The classic &lt;a href="https://midnight-commander.org/">&lt;code>mc&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>GNU Midnight Commander is a visual file manager, licensed under GNU General
Public License and therefore qualifies as Free Software. It&amp;rsquo;s a feature rich
full-screen text mode application that allows you to copy, move and delete
files and whole directory trees, search for files and run commands in the
subshell. Internal viewer and editor are included.&lt;/p>
&lt;/blockquote>
&lt;p>It has two side-by-side panes. The idea is to navigate to a directory in each
pane (toggle pane focus with &lt;code>Tab&lt;/code>), and then perform a visual inspection (use
arrow keys to navigate). The effect is comparable to having two side-by-side
&lt;code>tmux&lt;/code> panes with &lt;a href="https://github.com/ranger/ranger">&lt;code>ranger&lt;/code>&lt;/a> opened in each of
them.&lt;/p></description></item><item><title>nginx: add basic auth</title><link>https://perrotta.dev/2025/01/nginx-add-basic-auth/</link><pubDate>Tue, 07 Jan 2025 03:28:02 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/nginx-add-basic-auth/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: You want to expose a HTTPS service from your cloud VPS to
the public Internet. You do not wish to use a VPN (e.g.
&lt;a href="https://tailscale.com/">tailscale&lt;/a>) to do so – which is a great way to address
this, but it&amp;rsquo;s out of scope in this particular instance. How to proceed?&lt;/p>
&lt;p>Here&amp;rsquo;s a simple yet effective way: use / configure &lt;a href="https://nginx.org/">nginx&lt;/a>
as a reverse proxy.&lt;/p>
&lt;p>Then add &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication">HTTP basic
auth&lt;/a> to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas htpasswd -c /etc/nginx/.htpasswd myuser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command will prompt for a password.&lt;/p>
&lt;p>Once it&amp;rsquo;s set, add two lines to the corresponding &lt;code>server {}&lt;/code> block in your
nginx config:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">auth_basic&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Restricted&lt;/span> &lt;span style="color:#e6db74">Access&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">auth_basic_user_file&lt;/span> &lt;span style="color:#e6db74">/etc/nginx/.htpasswd&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally: run &lt;code>nginx -s reload&lt;/code>.&lt;/p>
&lt;p>Now, whenever you navigate to that host, you&amp;rsquo;ll be prompted to enter the basic
HTTP auth creds above.&lt;/p>
&lt;p>The beauty of this approach is that it works for any HTTPS server, as it is
service agnostic.&lt;/p>
&lt;p>The next level would be to integrate an SSO solution such as
&lt;a href="https://goauthentik.io/">Authentik&lt;/a>, however it&amp;rsquo;s quite more complex.&lt;/p></description></item><item><title>Logseq: linking and backlinking</title><link>https://perrotta.dev/2025/01/logseq-linking-and-backlinking/</link><pubDate>Mon, 06 Jan 2025 22:49:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/logseq-linking-and-backlinking/</guid><description>&lt;p>This is the first post with the &lt;a href="https://perrotta.dev/tags/pkm/">pkm&lt;/a> tag. Run before
it&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">too late&lt;/a>!&lt;/p>
&lt;p>Expect more of these as I find myself slowly migrating from
&lt;a href="https://obsidian.md/">Obsidian&lt;/a> to &lt;a href="https://logseq.com/">Logseq&lt;/a>. More on that
later.&lt;/p>
&lt;p>When creating pages in logseq, there are &lt;strong>two&lt;/strong> basic forms to link to other pages,
and they are essentially equivalent.&lt;/p>
&lt;p>The first one is to use a &lt;code>#hashtag&lt;/code> (or simply &amp;rsquo;tag&amp;rsquo;). For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>Books to read in 2010:

- The Hitchhiker&amp;#39;s Guide to the Galaxy by Douglas Adams #book #fiction
- Harry Potter and the Prisoner of Azkaban by J.K. Rowling #book #fiction
- Elite da Tropa by André Batista, Rodrigo Pimentel &amp;amp; Luiz Eduardo Soares #book #nonfiction
&lt;/code>&lt;/pre>&lt;p>&lt;em>^alpha&lt;/em>&lt;/p>
&lt;p>Under the hood it creates 3 pages: &lt;code>Book&lt;/code>, &lt;code>Fiction&lt;/code> and &lt;code>Nonfiction&lt;/code>. Clicking
any of these hashtags opens up the corresponding page. In the page it&amp;rsquo;s possible
to find a backlink to the original page / block that links to it.&lt;/p>
&lt;p>The second one is to use double brackets. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Elite da Tropa is a Brazilian [[book]] written by the ex-police officers André
 Batista and Rodrigo Pimentel together with Luiz Eduardo Soares. It was first
 published in 2006. The book originated the film Elite Squad.
 - Source: https://en.wikipedia.org/wiki/Elite_da_Tropa
&lt;/code>&lt;/pre>&lt;p>&lt;em>^bravo&lt;/em>&lt;/p>
&lt;p>Clicking &lt;code>[[book]]&lt;/code> goes to the same page as &lt;code>#book&lt;/code>.&lt;/p>
&lt;p>Why are there two forms? I don&amp;rsquo;t know. But here&amp;rsquo;s what I learned: it doesn&amp;rsquo;t
matter which one you choose to use, as they are effectively equivalent. For
example, you could have written instead:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Elite da Tropa is a Brazilian #book written by the ex-police officers André
 Batista and Rodrigo Pimentel together with Luiz Eduardo Soares. It was first
 published in 2006. The book originated the film Elite Squad.
 - Source: https://en.wikipedia.org/wiki/Elite_da_Tropa
&lt;/code>&lt;/pre>&lt;p>&lt;em>^charlie&lt;/em>&lt;/p>
&lt;p>&amp;hellip;the effect would have been the same.&lt;/p>
&lt;p>The idiomatic style seems to favour the use of double brackets when writing
prose (i.e. &lt;em>bravo&lt;/em>), and the use of hashtags when &amp;ldquo;tagging&amp;rdquo; or qualifying
sentences (i.e. &lt;em>alpha&lt;/em>). That said, intermixing them is harmless.&lt;/p></description></item><item><title>Linux is free if your time is worthless</title><link>https://perrotta.dev/2025/01/linux-is-free-if-your-time-is-worthless/</link><pubDate>Mon, 06 Jan 2025 01:32:57 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/linux-is-free-if-your-time-is-worthless/</guid><description>&lt;p>(&lt;a href="https://amontalenti.com/2025/01/05/linux-is-free">via Andrew Montalenti&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>One of my favorite old Linux jokes is, &amp;ldquo;Linux is free… if your time is
worthless.&amp;rdquo; This quote is possibly adapted from a jwz interview dating back to
1998. In it, he said:&lt;/p>
&lt;blockquote>
&lt;p>I think Linux is a great thing, because Linux is an alternative to [major
operating systems], and because, of all the operating systems that are at
all relevant today, Unix is the best of a bad lot. […] As we all know, Linux
is only free if your time has no value, and I find that my time is better
spent doing things other than the endless moving-target-upgrade dance.&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>Snark aside, that&amp;rsquo;s a good read.&lt;/p>
&lt;p>Ever since &lt;a href="https://www.cncf.io/">&amp;ldquo;Cloud Native&amp;rdquo;&lt;/a> became mainstream, developer
userspace tools became more valuable than whatever OS flavour you choose to run.
So pick &lt;a href="https://kevquirk.com/blog/on-virtue-signalling">whichever you like&lt;/a>,
work hard, and have fun.&lt;/p>
&lt;p>And yes, 2025 is finally the &lt;a href="https://yotld.com/">year of the linux desktop&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Or is it?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>LaTeX beamer slides with notes</title><link>https://perrotta.dev/2025/01/latex-beamer-slides-with-notes/</link><pubDate>Mon, 06 Jan 2025 01:02:56 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/latex-beamer-slides-with-notes/</guid><description>&lt;p>(&lt;a href="https://gist.github.com/andrejbauer/ac361549ac2186be0cdb">via Andrej Bauer&lt;/a> from University of Ljubljana, adapted):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tex" data-lang="tex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\documentclass&lt;/span>&lt;span style="color:#a6e22e">[12pt]&lt;/span>{beamer}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\usepackage&lt;/span>{pgfpages}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">%\setbeameroption{hide notes} % Only slides
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">%\setbeameroption{show only notes} % Only notes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">\setbeameroption&lt;/span>{show notes on second screen=right} &lt;span style="color:#75715e">% Both
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">% Give a slight yellow tint to the notes page
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">\setbeamertemplate&lt;/span>{note page}{&lt;span style="color:#66d9ef">\pagecolor&lt;/span>{yellow!5}&lt;span style="color:#66d9ef">\insertnote&lt;/span>}&lt;span style="color:#66d9ef">\usepackage&lt;/span>{palatino}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\title&lt;/span>{How to make Beamer slides with notes}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\author&lt;/span>{Thiago Perrotta&lt;span style="color:#66d9ef">\\&lt;/span>Universidade Federal do Rio de Janeiro}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\date&lt;/span>{&lt;span style="color:#66d9ef">\small&lt;/span> &lt;span style="color:#66d9ef">\today&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\begin&lt;/span>{document}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\begin&lt;/span>{frame}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\titlepage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\note&lt;/span>&lt;span style="color:#a6e22e">[item]&lt;/span>{Thank the audience for being awake.}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\end&lt;/span>{frame}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\begin&lt;/span>{frame}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\begin&lt;/span>{itemize}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\item&lt;/span> Here are
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\item&lt;/span> some very boring bullets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\item&lt;/span> about nothing.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\end&lt;/span>{itemize}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\note&lt;/span>&lt;span style="color:#a6e22e">[item]&lt;/span>{Note that this slide is boring.}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\note&lt;/span>&lt;span style="color:#a6e22e">[item]&lt;/span>{Observe that there are no actual bullets here.}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">\note&lt;/span>&lt;span style="color:#a6e22e">[item]&lt;/span>{Future work: add another bullet.}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\end&lt;/span>{frame}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">\end&lt;/span>{document}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I created a sample LaTeX project on &lt;a href="https://www.overleaf.com/">Overleaf&lt;/a>
because I did not want to install the full &lt;a href="https://tug.org/texlive/">texlive&lt;/a>
suite on my Mac.&lt;/p>
&lt;p>It compiled successfully and worked beautifully.&lt;/p>
&lt;p>The workflow is: 1) Generate the notes:&lt;/p>
&lt;pre tabindex="0">&lt;code>\setbeameroption{hide notes} % Only slides
%\setbeameroption{show only notes} % Only notes
%\setbeameroption{show notes on second screen=right} % Both
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Generate the slides:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>%\setbeameroption{hide notes} % Only slides
\setbeameroption{show only notes} % Only notes
%\setbeameroption{show notes on second screen=right} % Both
&lt;/code>&lt;/pre>&lt;p>Then present the slides in the projector whilst keeping the notes open in your
laptop.&lt;/p>
&lt;p>The author suggests to use &lt;a href="https://skim-app.sourceforge.io/">Skim.app&lt;/a> to sync
both documents. It&amp;rsquo;s a good idea, I had used it at the time when I wrote my
undergrad thesis.&lt;/p>
&lt;p>Overleaf is quite different today than from 8 years ago:&lt;/p>
&lt;ul>
&lt;li>There is a visual editor (ala &lt;a href="https://www.lyx.org/">LyX&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>)&lt;/li>
&lt;li>There&amp;rsquo;s first-class integration with Academia (Zotero, Mendeley)&lt;/li>
&lt;li>There&amp;rsquo;s an &lt;a href="https://www.overleaf.com/learn/how-to/Writefull_integration">AI-based language feedback
feature&lt;/a> (is this
surprising in 2025?)&lt;/li>
&lt;li>There&amp;rsquo;s first-class git integration / github sync&lt;/li>
&lt;/ul>
&lt;p>Very cool!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I used to love LyX. It used to be my favorite way to create slides /
presentations for university. I am happy to see it&amp;rsquo;s still under active
development.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Mindmaps in markdown</title><link>https://perrotta.dev/2025/01/mindmaps-in-markdown/</link><pubDate>Mon, 06 Jan 2025 00:28:20 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/mindmaps-in-markdown/</guid><description>&lt;p>&lt;a href="https://markmap.js.org/">Markmap&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Visualize your Markdown with mindmaps&lt;/p>
&lt;/blockquote>
&lt;p>They do provide a &lt;a href="https://markmap.js.org/repl">REPL&lt;/a>.&lt;/p>
&lt;p>A typical document may look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span># Food
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Fruit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Apple
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Banana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Orange
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Sweets
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Cake
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Pastel de Nata
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Chocolate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Bitter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Crunchy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Milk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each heading level maps to a deeper mindmap node.
Headings at the same level and lists create edges from the parent heading.&lt;/p>
&lt;p>Besides the REPL, there&amp;rsquo;s a &lt;a href="https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode">VSCode extension&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to export the resulting mindmap to interactive HTML and to SVG.&lt;/p>
&lt;p>I originally discovered this tool via a &lt;a href="https://training.linuxfoundation.org/full-catalog/">Linux
Foundation&lt;/a> course.&lt;/p>
&lt;p>It is a good complement to &lt;a href="https://perrotta.dev/2024/10/mermaid-rich-diagrams-in-markdown/">Mermaid&lt;/a>.&lt;/p></description></item><item><title>Reply to: Mistakes engineers make in large established codebases</title><link>https://perrotta.dev/2025/01/reply-to-mistakes-engineers-make-in-large-established-codebases/</link><pubDate>Sun, 05 Jan 2025 03:15:47 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/reply-to-mistakes-engineers-make-in-large-established-codebases/</guid><description>&lt;p>&lt;a href="https://www.seangoedecke.com/large-established-codebases/">Sean Goedecke&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The cardinal mistake is inconsistency&lt;/p>
&lt;p>There&amp;rsquo;s one mistake I see more often than anything else, and it&amp;rsquo;s absolutely
deadly: ignoring the rest of the codebase and just implementing your feature
in the most sensible way. In other words, limiting your touch points with the
existing codebase in order to keep your nice clean code uncontaminated by
legacy junk. For engineers that have mainly worked on small codebases, this is
very hard to resist. But you must resist it! In fact, you must sink as deeply
into the legacy codebase as possible, in order to maintain consistency.&lt;/p>
&lt;p>Why is consistency so important in large codebases? Because it protects you
from nasty surprises, it slows down the codebase&amp;rsquo;s progression into a mess,
and it allows you to take advantage of future improvements.&lt;/p>
&lt;p>[&amp;hellip;]&lt;/p>
&lt;p>Consistency is the most important thing. Let me quickly run through some other
concerns as well, though:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Consistency, consistency, consistency&lt;/strong>. Hell yeah!&lt;/p>
&lt;p>Consistency isn&amp;rsquo;t only about &lt;a href="https://google.github.io/styleguide/">style
guides&lt;/a>. There&amp;rsquo;s no point in adopting
style guides if they aren&amp;rsquo;t
&lt;a href="https://abseil.io/resources/swe-book/html/ch03.html">enforced&lt;/a>.&lt;/p>
&lt;p>Consistency is about uniformity. Enforcing invariants. Keeping the codebase tidy
and organized. Whenever done right, even if only in disjoint subsets of the
codebase, it&amp;rsquo;s elegant. It&amp;rsquo;s beautiful. All hail to consistent codebases.&lt;/p>
&lt;p>But hey, no one said there&amp;rsquo;s only one way to achieve consistency&amp;hellip;&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/927/">&lt;img src="https://imgs.xkcd.com/comics/standards.png"
 alt="Fortunately, the charging one has been solved now that we&amp;#39;ve all standardized on mini-USB. Or is it micro-USB? Shit.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>
</description></item><item><title>pre-commit + vim integration</title><link>https://perrotta.dev/2025/01/pre-commit--vim-integration/</link><pubDate>Sun, 05 Jan 2025 01:46:06 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/pre-commit--vim-integration/</guid><description>&lt;p>Is it possible to transparently invoke &lt;code>pre-commit&lt;/code> in the background upon saving in &lt;code>vim&lt;/code> (&lt;code>:w&lt;/code>)?&lt;/p>
&lt;p>Initially I found this &lt;a href="https://stackoverflow.com/questions/70713450/pre-commit-results-in-vim">Stack
Overflow&lt;/a>
question, but it had no answer.&lt;/p>
&lt;p>Digging a bit deeper I realized that I could do it with an &lt;code>autocmd&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">BufWritePost&lt;/span> * &lt;span style="color:#66d9ef">execute&lt;/span> &lt;span style="color:#e6db74">&amp;#39;! if [ -e $(git root)/.pre-commit-config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ]; then pre-commit run; fi&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That trashes the screen upon completion. This can be resolved by invoking
&lt;code>:redraw!&lt;/code> afterwards:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">BufWritePost&lt;/span> * &lt;span style="color:#66d9ef">execute&lt;/span> &lt;span style="color:#e6db74">&amp;#39;! if [ -e $(git root)/.pre-commit-config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ]; then pre-commit run; fi&amp;#39;&lt;/span> | &lt;span style="color:#a6e22e">redraw&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can be less intrusive by prepending &lt;code>silent!&lt;/code> so that, even if the command
fails, it doesn&amp;rsquo;t get in the way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">BufWritePost&lt;/span> * &lt;span style="color:#a6e22e">silent&lt;/span>! &lt;span style="color:#66d9ef">execute&lt;/span> &lt;span style="color:#e6db74">&amp;#39;! if [ -e $(git root)/.pre-commit-config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ]; then pre-commit run; fi&amp;#39;&lt;/span> | &lt;span style="color:#a6e22e">redraw&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And last but not least, ideally &lt;code>pre-commit&lt;/code> should run only on the file
associated with the current buffer. Pass &lt;code>--files&lt;/code> to pre-commit with the &lt;code>%&lt;/code>
argument:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">BufWritePost&lt;/span> * &lt;span style="color:#a6e22e">silent&lt;/span>! &lt;span style="color:#66d9ef">execute&lt;/span> &lt;span style="color:#e6db74">&amp;#39;! if [ -e $(git root)/.pre-commit-config.yaml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ]; then pre-commit run --files %; fi&amp;#39;&lt;/span> | &lt;span style="color:#a6e22e">redraw&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach works as intended.
There&amp;rsquo;s a brief period in which you can see &lt;code>pre-commit&lt;/code> running in the
background. It&amp;rsquo;s arguable whether that&amp;rsquo;s a feature or a bug.&lt;/p>
&lt;p>Ah, and &lt;code>git root&lt;/code> is simply an alias in my &lt;code>~/.gitconfig&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>root = rev-parse --show-toplevel
&lt;/code>&lt;/pre>&lt;p>Whenever there are pre-commit violations (e.g. &lt;code>end-of-file-fixer&lt;/code>) they are
applied inplace. There&amp;rsquo;s no need to run &lt;code>:e!&lt;/code>.&lt;/p>
&lt;p>This is bare, but I am happy.&lt;/p>
&lt;p>Perhaps the only missing piece is to extend it in such a way it&amp;rsquo;s only executed
in the repositories I opt into.&lt;/p>
&lt;p>If this turns out to be too intrusive, I am thinking to switch to using a vim
keymap e.g. &lt;code>&amp;lt;leader&amp;gt;p&lt;/code> instead of an &lt;code>autocmd&lt;/code>.&lt;/p></description></item><item><title>iOS lockdown mode</title><link>https://perrotta.dev/2025/01/ios-lockdown-mode/</link><pubDate>Sat, 04 Jan 2025 23:58:11 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/ios-lockdown-mode/</guid><description>&lt;p>&lt;a href="https://www.dedoimedo.com/computers/iphone-lockdown-mode.html">dedoimedo&lt;/a> makes
me realize that the iOS lockdown mode is actually quite usable, even for us
normies:&lt;/p>
&lt;blockquote>
&lt;p>For a while now, I&amp;rsquo;ve been hearing about this tool. Mostly in regard to
high-profile zero-day, zero-click, hands-free, security vulnerabilities in
iPhones and subsequent hacking of said devices by nation-state actors. Sounds
blockbustery, which piqued my interest. I am usually rather disdainful of
mainstream media reporting of tech affairs, but that does not mean there isn&amp;rsquo;t
something genuinely cool behind flashy, scary headlines. And so I decided to
test the Lockdown Mode.&lt;/p>
&lt;/blockquote>
&lt;p>What are its effects?&lt;/p>
&lt;blockquote>
&lt;p>Specifically, most attachments are blocked in Messages, websites that use
JavaScript engines that run Just-in-Time (JIT) compilers or use remote fonts
will not render their pages correctly, various app invitations and calls are
blocked from people you haven&amp;rsquo;t approved beforehand, location information for
shared photos is excluded, Wi-Fi connectivity to insecure networks is limited,
and so on.&lt;/p>
&lt;/blockquote>
&lt;p>Aren&amp;rsquo;t these all sensible defaults anyway?&lt;/p>
&lt;blockquote>
&lt;p>Pretty much everything in the list above makes absolute sense. None of the
&amp;ldquo;restricted&amp;rdquo; features are actually important or desired. Think about it. Calls
from people you don&amp;rsquo;t know? Check! Photo location blocking? Check! Web pages
with pointless remote fonts? Double check! Sounds like an Internet reset,
going back to 2010, when the computing world was nicer, saner, cleaner!&lt;/p>
&lt;/blockquote>
&lt;p>Enabling it is trivial, the prompts are perhaps a bit scarier than necessary
though:&lt;/p>
&lt;blockquote>
&lt;p>You get a whole bunch of explanations and warnings. Confirm. Reboot. The
iPhone will load without any visible signs that it&amp;rsquo;s actually running in a
&amp;ldquo;restricted&amp;rdquo; mode. Now. Launch Safari, and you will see a notification
displayed below the address bar. This is the first indication that the phone
is using the Lockdown Mode. But that does not mean you will be affected. Far
from it. I spent quite some time browsing, and I didn&amp;rsquo;t notice any website not
working correctly. Then again, the sites I go to are normal, sane sites, with
no sensory overload.&lt;/p>
&lt;/blockquote>
&lt;p>Initially Logseq and Obsidian would not properly work: they didn&amp;rsquo;t seem to be
able to read files from iCloud. I had to explicitly whitelist them in lockdown
mode settings. All other apps worked just fine.&lt;/p>
&lt;p>When web browsing with Safari I didn&amp;rsquo;t find any issue (so far) in the websites I
normally surf. The only noticeable UI difference is that, as web fonts are
blocked, the visual identity of websites are gone&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This is not necessarily a negative point: blocking web fonts has the positive
side effect of loading less remote data / reducing bandwidth.&lt;/p>
&lt;p>Furthermore, by making websites look more generic, perhaps that doubles-down as
a feature to make them less appealing / interesting, akin to using a
software filter to make your phone display everything in black-and-white; we&amp;rsquo;re
all spending a lot of screen time after all.&lt;/p>
&lt;p>I am curious how long it will take until I run into some limitation and/or
strong annoyance from using lockdown mode. If that doesn&amp;rsquo;t ever happen though,
perhaps it&amp;rsquo;s a good idea to stick to it.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Ironically, not mine, as I &lt;a href="https://perrotta.dev/2022/02/website-fonts-just-use-the-system-font-stack/">don&amp;rsquo;t&lt;/a> use any custom
fonts in this blog.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Cookiecutter: document variables</title><link>https://perrotta.dev/2025/01/cookiecutter-document-variables/</link><pubDate>Fri, 03 Jan 2025 19:29:00 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/cookiecutter-document-variables/</guid><description>&lt;p>Follow-up of &lt;a href="https://perrotta.dev/2024/12/cookiecutter/">the previous post&lt;/a>.&lt;/p>
&lt;p>Ever since &lt;a href="https://github.com/cookiecutter/cookiecutter/pull/1881">July 2023&lt;/a>
it&amp;rsquo;s possible to document
&lt;a href="https://github.com/cookiecutter/cookiecutter">cookiecutter&lt;/a> parameters / variables.&lt;/p>
&lt;p>Add a &lt;code>__prompts__&lt;/code> key. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;app_name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app-name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;patch_disable_auto_sync&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;__prompts__&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;app_name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;The ArgoCD application name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;patch_disable_auto_sync&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Disable auto sync for the ArgoCD application?&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>git: update master to main</title><link>https://perrotta.dev/2025/01/git-update-master-to-main/</link><pubDate>Fri, 03 Jan 2025 12:16:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/git-update-master-to-main/</guid><description>&lt;p>In your Forge (most likely Github or Gitlab), update the default branch from
&lt;code>master&lt;/code> to &lt;code>main&lt;/code>. Normally this has the effect of renaming &lt;code>master&lt;/code> to &lt;code>main&lt;/code>
automatically.&lt;/p>
&lt;p>In your clients, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git branch -m master main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git fetch origin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -u origin/main main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote set-head origin -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Done!&lt;/p>
&lt;p>How to refer to the default branch in scripts and aliases?&lt;/p>
&lt;p>Set the following &lt;code>git&lt;/code> alias:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat ~/.gitconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>alias&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	default &lt;span style="color:#f92672">=&lt;/span> !git symbolic-ref refs/remotes/origin/HEAD | sed &lt;span style="color:#e6db74">&amp;#39;s@^refs/remotes/origin/@@&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It outputs &lt;code>master&lt;/code> or &lt;code>main&lt;/code> – there&amp;rsquo;s no &lt;code>origin/&lt;/code> prefix.&lt;/p>
&lt;p>The &lt;code>default&lt;/code> alias only works if you have a &lt;code>origin&lt;/code> remote set up.
It will fail if the repository is fully local:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/tmp/thiago.perrotta-2025-01-03-pk0GPp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Initialized empty Git repository in /private/tmp/thiago.perrotta-2025-01-03-pk0GPp/.git/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% git default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: ref refs/remotes/origin/HEAD is not a symbolic ref
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>git: configure identities for work</title><link>https://perrotta.dev/2025/01/git-configure-identities-for-work/</link><pubDate>Wed, 01 Jan 2025 17:22:05 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/git-configure-identities-for-work/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given two sets of git configurations, one for personal
projects and one for work, how can you effectively separate them?&lt;/p>
&lt;h2 id="workflow">Workflow&lt;/h2>
&lt;p>I like the following workflow.&lt;/p>
&lt;p>First, create your usual &lt;code>~/.gitconfig&lt;/code>. It will be used for your personal
project:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">[user]
 name = Thiago Perrotta
 email = {personal-email}

[...]

# Import corp configs if any.
[include]
 path = .gitconfig_corp
&lt;/code>&lt;/pre>&lt;p>This config should live in your personal laptop and in your work laptop.&lt;/p>
&lt;p>Normally I include it via my &lt;a href="https://github.com/thiagowfx/.dotfiles">.dotfiles&lt;/a>
(git repo) i.e. with a simple &lt;code>stow git&lt;/code> away.&lt;/p>
&lt;p>And we are done with our personal laptop.&lt;/p>
&lt;p>Now, for the work laptop, create &lt;code>~/.gitconfig_corp&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">[includeIf &amp;#34;gitdir:~/Orgname/**&amp;#34;]
 path = .gitconfig_orgname

[includeIf &amp;#34;hasconfig:remote.*.url:git@github.com:orgname/**&amp;#34;]
 path = .gitconfig_orgname

# vim: ft=gitconfig
&lt;/code>&lt;/pre>&lt;p>The corp config is conditionally included / used in the following scenarios:&lt;/p>
&lt;ol>
&lt;li>whenever I am working on a git repository that lives within &lt;code>~/Orgname&lt;/code>&lt;/li>
&lt;li>whenever the git remote of the repository I am working on is a git repository
under the organization &lt;code>orgname&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>This config is usually included via my corp dotfiles (named &lt;code>.dotfiles_corp&lt;/code> in
&lt;code>git&lt;/code>), which is a separate git repository. There&amp;rsquo;s no fiddling with git
submodules: both git repositories are cloned and managed independently.&lt;/p>
&lt;p>And now, last but not least, is the actual git config for work:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">% cat ~/.gitconfig_orgname
[user]
 name = Thiago Perrotta
 email = {work-email}

# vim: ft=gitconfig
&lt;/code>&lt;/pre>&lt;p>Inspired by &lt;a href="https://www.benji.dog/articles/git-config/">benji.dog&lt;/a>.&lt;/p></description></item></channel></rss>