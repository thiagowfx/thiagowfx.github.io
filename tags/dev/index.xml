<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>dev on Not Just Serendipity</title><link>https://thiagowfx.github.io/tags/dev/</link><description>Recent content in dev on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2023 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Tue, 27 Dec 2022 16:16:36 +0100</lastBuildDate><atom:link href="https://thiagowfx.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>AIs galore</title><link>https://thiagowfx.github.io/2022/12/ais-galore/</link><pubDate>Tue, 27 Dec 2022 16:16:36 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/12/ais-galore/</guid><description>&lt;p>2022 was an amazing year for AIs.&lt;/p></description><content:encoded><![CDATA[<p>2022 was an amazing year for AIs.</p>
<h2 id="chatgptchatgpt"><a href="https://chat.openai.com/chat/">ChatGPT</a></h2>
<ul>
<li>
<p><a href="https://chat.openai.com/chat/"><code>ChatGPT</code></a> can effectively replace Stack
Overflow to a large extent, if you learn how to ask questions to it. Example queries that work amazingly, returning exactly what you would expect, with detailed explanation and/or context:</p>
<ul>
<li>PKGBUILD how to specify git version</li>
<li>python how to sort list reverse</li>
<li>systemd create unit file that forks</li>
<li>xorg start i3wm with startx</li>
<li>git update all submodules to latest tip</li>
<li>typescript make simple post request</li>
<li>chromium difference between args and declare_args</li>
<li>sekiro versus elden ring</li>
<li>generate random number between 10 and 20
<ul>
<li>I cannot run the code. Please generate a random number for me</li>
<li>between 10 and 20 though</li>
</ul>
</li>
<li>add pasta before or after boiling water?</li>
<li>what is the difference between auszahlen and Bargeld abheben?</li>
<li>write a trip packing checklist for me</li>
</ul>
<p>Someone even wrote a Chrome extension to query <code>ChatGPT</code> alongside a Google search: <a href="https://github.com/wong2/chat-gpt-google-extension">https://github.com/wong2/chat-gpt-google-extension</a> (chatgpt4google.com). I couldn&rsquo;t get it to work for some reason though.</p>
</li>
</ul>
<h2 id="stable-diffusionstable-diffusion"><a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a></h2>
<p>Given a query (text), it generates an image for you. It pairs up quite nicely with Slides (when looking for inspiration) and can effectively replace Google Images to some extent.</p>]]></content:encoded></item><item><title>macOS terminal app gripes</title><link>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p></description><content:encoded><![CDATA[<p><code>Terminal.app</code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.</p>
<h2 id="1-no-osc-52-support">1. No OSC-52 support</h2>
<p><a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty</a>:</p>
<blockquote>
<p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.</p>
</blockquote>
<blockquote>
<p>Although <code>Terminal.app</code> does NOT support OSC 52, here [osc52pty] is the workaround for it.</p>
</blockquote>
<p>I dislike this workaround because it requires an external binary. Even though it is a single binary because it is a Golang executable, I still dislike the external dependency.</p>
<h2 id="2-no-true-color-256-colors">2. No true color (256 colors)</h2>
<p>What is true color? See <a href="https://stackoverflow.com/questions/6403744/are-there-terminals-that-support-true-color">stack overflow</a> for context.</p>
<p>Run the <a href="https://gist.github.com/XVilka/8346728">following</a> to print a color band, a smooth (gradient) output indicates true color support:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;BEGIN{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    s=&#34;/\\/\\/\\/\\/\\&#34;; s=s s s s s s s s;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    for (colnum = 0; colnum&lt;77; colnum++) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r = 255-(colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        g = (colnum*510/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b = (colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if (g&gt;255) g = 510-g;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[48;2;%d;%d;%dm&#34;, r,g,b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[38;2;%d;%d;%dm&#34;, 255-r,255-g,255-b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;%s\033[0m&#34;, substr(s,colnum+1,1);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    printf &#34;\n&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span></code></pre></div><p><code>Terminal.app</code> will not print a gradient.</p>
<h2 id="3-no-gpu-acceleration">3. No GPU acceleration</h2>
<p><a href="https://unix.stackexchange.com/q/658709">https://unix.stackexchange.com/q/658709</a>:</p>
<blockquote>
<p>Q: What are the advantages of hardware-accelerated terminal emulators?</p>
</blockquote>
<blockquote>
<p>A: They can potentially be faster at outputting and refreshing vast amounts of information. It could also allow for smooth(er) scrolling. Human beings however are quite slow at reading this information, [&hellip;] the average person is unlikely to be able to comprehend it anyways. CPU usage could be lower but it needs to be tested.</p>
</blockquote>
<p><code>Terminal.app</code> isn&rsquo;t GPU accelerated.</p>
<h2 id="recommendations">Recommendations</h2>
<p>Both <a href="https://alacritty.org">alacritty</a> and <a href="https://sw.kovidgoyal.net/kitty/">kitty</a> are decent replacements (or complements) for <code>Terminal.app</code> that work out-of-the-box, with sensible defaults including all the aforementioned points.</p>]]></content:encoded></item><item><title>Ninite: Bootstrap a Windows installation</title><link>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</link><pubDate>Thu, 17 Mar 2022 14:37:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</guid><description>&lt;p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.&lt;/p>
&lt;p>In my opinion, &lt;a href="https://ninite.com">Ninite&lt;/a> is the best way to do so.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.</p>
<p>In my opinion, <a href="https://ninite.com">Ninite</a> is the best way to do so.</p>
<p>All you need to do is to select a few checkboxes. The Ninite installer will then automatically download and install all selected applications and software, one-by-one, with sensible defaults<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and a decent progress report:</p>
<pre tabindex="0"><code>App1	OK
App2	Installing
App3	Waiting to install
App4	Downloading
App5	Waiting to download
</code></pre><p>I dunno why they do it one-by-one, but it&rsquo;s in principle reasonable, probably intended to avoid potential conflicts of multiple installers trying to fiddle with each other at the same time.</p>
<p>The Ninite installer also has an interesting reuse<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> property: You could save it to run it again in the future: it will end up updating the existing applications – and maybe reinstalling them, in case some of them were uninstalled in the meantime.</p>
<p>If you bookmark the URL generated by the webapp, which looks like <a href="https://ninite.com/7zip-chrome-irfanview-steam/">https://ninite.com/7zip-chrome-irfanview-steam/</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the same set of applications could be bootstrapped once again in the future, which is useful to do batch installations in multiple computers, or to reinstall everything after a factory reset.</p>
<p>This is the URL I used to install sensible applications for my parents:</p>
<p><a href="https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/">https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, by saying &lsquo;No&rsquo; to junk like browser toolbars, add-ons and &ldquo;extras&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I wanted to say &lsquo;reproducibility&rsquo;, but it&rsquo;s not quite what it means.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>You can add more pieces of software as needed.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Miniflux v2.0.36 is out</title><link>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</link><pubDate>Fri, 11 Mar 2022 10:30:18 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</guid><description>&lt;p>Miniflux &lt;a href="https://miniflux.app/releases/2.0.36.html">2.0.36&lt;/a> has been released this week. This is a dear release to me because I was responsible for many of its changes:&lt;/p></description><content:encoded><![CDATA[<p>Miniflux <a href="https://miniflux.app/releases/2.0.36.html">2.0.36</a> has been released this week. This is a dear release to me because I was responsible for many of its changes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ PAGER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cat&#34;</span> git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> 2.0.35..2.0.36
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Add pagination on top of all entries. Closes <span style="color:#75715e">#1305.</span>
</span></span><span style="display:flex;"><span>      Add links to scraper/rewrite/filtering docs when editing feeds
</span></span><span style="display:flex;"><span>      Add several icons to menus according to their roles
</span></span><span style="display:flex;"><span>      Add new keyboard shortcut: <span style="color:#e6db74">&#39;M&#39;</span> - toggle read/unread, go to prev item
</span></span><span style="display:flex;"><span>      refactor handleEntryStatus / goToNextListItem / goToPrevListItem
</span></span><span style="display:flex;"><span>      Add <span style="color:#f92672">(</span>+<span style="color:#f92672">)</span> action next to Feeds to quickly add new feeds
</span></span><span style="display:flex;"><span>      Add <span style="color:#e6db74">&#39;+&#39;</span> shortcut <span style="color:#66d9ef">for</span> new subscription page
</span></span><span style="display:flex;"><span>      Gray out pagination buttons when they are not applicable
</span></span></code></pre></div><p>This is the first open source project I self-host in a serious manner that I am contributing back to. It is very exciting and fulfilling, and it sparks a lot of joy in my heart.</p>
<p>I have a few other ideas for improving the miniflux user experience and functionality, while still keeping it simple and elegant. As everything else in life, time is the only constraint&hellip;</p>]]></content:encoded></item><item><title>HTTP: a few acronyms</title><link>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</link><pubDate>Sun, 27 Feb 2022 21:48:03 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</guid><description>&lt;p>I keep forgetting these, so I wrote a small summary for my own reference.&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting these, so I wrote a small summary for my own reference.</p>
<h2 id="hsts">HSTS</h2>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">Wikipedia — HSTS</a>:</p>
<blockquote>
<p>HTTP Strict Transport Security (HSTS) is a policy mechanism that helps to
protect websites against man-in-the-middle attacks such as protocol downgrade
attacks and cookie hijacking. It allows web servers to declare that web
browsers (or other complying user agents) should automatically interact with
it using only HTTPS connections.</p>
</blockquote>
<p>In layman&rsquo;s terms: <em>Force HTTPS on a given domain</em>.</p>
<p><a href="https://hstspreload.org/">HSTS Preload List</a>:</p>
<blockquote>
<p>This form is used to submit domains for inclusion in Chrome&rsquo;s HTTP Strict
Transport Security (HSTS) preload list. This is a list of sites that are
hardcoded into Chrome as being HTTPS only.</p>
<p>Most major browsers (Chrome, Firefox, Opera, Safari, IE 11 and Edge) also
have HSTS preload lists based on the Chrome list. (See the HSTS compatibility
matrix.)</p>
</blockquote>
<p>If you add your website to that list, major browsers will honor it and only use
HTTPS for your domain.</p>
<p>Some <a href="https://en.wikipedia.org/wiki/Top-level_domain">TLDs</a> enforce HTTPS
through HSTS, some popular ones are <code>.app</code> and <code>.dev</code>.
<a href="https://serverfault.com/q/1067229/180092">Here</a> is a more comprehensive list.</p>
<p><code>HSTS</code> is fire-and-forget, you&rsquo;ll usually only need to worry about it once,
when configuring a SSL certificate (HTTPS) for your domain or subdomains.</p>
<h2 id="csp">CSP</h2>
<p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Wikipedia — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is a computer security standard introduced to
prevent cross-site scripting (XSS), clickjacking and other code injection
attacks resulting from execution of malicious content in the trusted web page
context.</p>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">MDN — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to
detect and mitigate certain types of attacks, including Cross-Site Scripting
(XSS) and data injection attacks. These attacks are used for everything from
data theft, to site defacement, to malware distribution.</p>
</blockquote>
<p>CSP can be configured in at least two distinct ways:</p>
<ol>
<li>Web server: return the <code>Content-Security-Policy</code> HTTP header:</li>
</ol>
<pre tabindex="0"><code>Content-Security-Policy: default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;
</code></pre><ol start="2">
<li>HTML <code>&lt;meta&gt;</code> tag:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&#34;</span>&gt;
</span></span></code></pre></div><p><code>CSP</code> is something to worry about at the application level. For example,
<a href="https://github.com/miniflux/v2/issues/748">miniflux</a> to fetch resources
(fonts) from another domain (Google Fonts).</p>
<h2 id="cors">CORS</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Wikipedia — CORS</a>:</p>
<blockquote>
<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted
resources on a web page to be requested from another domain outside the
domain from which the first resource was served.</p>
</blockquote>
<p>CORS can be configured via web server: return the <code>Access-Control-Allow-Origin</code> HTTP header:</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: *
Access-Control-Allow-Origin: http://example.com:8080
</code></pre><p><code>CORS</code> is something to worry about at the application level. For example,
<a href="https://keep.google.com/">https://keep.google.com/</a> ⟷ <a href="https://google.com/">https://google.com/</a> cookies.</p>
<h2 id="csrf">CSRF</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Wikipedia — CSRF</a>:</p>
<blockquote>
<p>Cross-site request forgery, also known as one-click attack or session riding
and abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of
malicious exploit of a website where unauthorized commands are submitted from
a user that the web application trusts.</p>
</blockquote>
<p><code>CSRF</code> is something to be aware of and to watch out for.
<a href="https://owasp.org/www-community/attacks/csrf">OWASP</a> has some additional
resources on it.</p>]]></content:encoded></item><item><title>What is my IP?</title><link>https://thiagowfx.github.io/2022/02/what-is-my-ip/</link><pubDate>Sat, 26 Feb 2022 17:55:38 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/what-is-my-ip/</guid><description>&lt;p>This post contains a small handful of distinct services to query your machine
external IP address.&lt;/p></description><content:encoded><![CDATA[<p>This post contains a small handful of distinct services to query your machine
external IP address.</p>
<h2 id="googlehttpswwwgooglecomsearchqwhatismyip"><a href="https://www.google.com/search?q=what+is+my+ip">Google</a></h2>
<p>URL: <a href="https://www.google.com/search?q=what+is+my+ip">https://www.google.com/search?q=what+is+my+ip</a></p>
<p>As of this writing, this doesn&rsquo;t work on duckduckgo:
<a href="https://duckduckgo.com/?q=what+is+my+ip">https://duckduckgo.com/?q=what+is+my+ip</a>. I suppose this is related to their
philosophy of not tracking their users.</p>
<p>This is the easiest method when you have a web browser as you do not need to
memorize any URL.</p>
<h2 id="i-can-haz-iphttpsicanhazipcom"><a href="https://icanhazip.com/">I can haz ip</a></h2>
<p>URL: <a href="https://icanhazip.com/">https://icanhazip.com/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl icanhazip.com
</span></span><span style="display:flex;"><span>NNN.NNN.NNN.NNN
</span></span></code></pre></div><p>I love the simplicity of <em>I can haz ip</em>. It just returns your IP address in
plain text, nothing else. It also works from the web browser. You can find
details about it <a href="https://major.io/icanhazip-com-faq/">here</a>. <strong>TL;DR</strong>: It was
an <a href="https://github.com/major/icanhaz">open source</a> pet project of a single
person (<a href="https://major.io/">Major Hayden</a>), then it was eventually bought by
Cloudflare as it immensely grew.</p>
<p>It&rsquo;s also possible to query your IPv6 address <a href="https://apenwarr.ca/log/20170810">in case you have
one</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl -6 icanhazip.com
</span></span></code></pre></div><h2 id="ipinfohttpsipinfoio"><a href="https://ipinfo.io/">IPInfo</a></h2>
<p>URL: <a href="https://ipinfo.io/">https://ipinfo.io/</a></p>
<p>IPInfo returns structured data beyond just your IP address. There are several
similar services that do this, for example, <a href="https://www.whatismyip.com/">What is my
IP?</a>, however IPInfo is the cleanest one I have
seen.</p>
<h2 id="pingeuhttpspingeu"><a href="https://ping.eu/">ping.eu</a></h2>
<p>URL: <a href="https://ping.eu/">https://ping.eu/</a></p>
<p>I&rsquo;ll also give an honourable mention to ping.eu as it contains a small handful
of utilities to check for things like Traceroute, DNS, whois, port check, etc.</p>]]></content:encoded></item><item><title>Screenshot a web page from within chrome devtools</title><link>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</link><pubDate>Sat, 19 Feb 2022 22:43:59 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</guid><description>&lt;p>Suppose you want to take a screenshot from a web page, maybe to add to a &lt;a href="https://github.com/miniflux/v2/pull/1341">pull
request&lt;/a> of a project you&amp;rsquo;re working
on.&lt;/p>
&lt;p>(i) The straightforward way to do so is to use your OS tool:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Windows&lt;/strong>: &lt;a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool&lt;/a>
or hit the &lt;em>PrintScreen&lt;/em> key&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>: &lt;a href="">&lt;code>scrot&lt;/code>&lt;/a> or something from your Desktop Environment (DE) such as
&lt;code>xfce4-screenshooter&lt;/code>. For a full-featured one, I&amp;rsquo;d recommend
&lt;a href="https://flameshot.org/">&lt;code>flameshot&lt;/code>&lt;/a> (first) or
&lt;a href="https://shutter-project.org/">&lt;code>shutter&lt;/code>&lt;/a> (second). For Wayland people seem
to like &lt;a href="https://wayland.emersion.fr/grim/">&lt;code>grim&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;strong>macOS&lt;/strong>: Hit &lt;code>Cmd + Shift + 4&lt;/code> or one of its
&lt;a href="https://support.apple.com/en-ca/HT201361">variations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Even &lt;a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks&lt;/a>
have a way to do so these days.&lt;/p>
&lt;p>However, maybe you didn&amp;rsquo;t know you can also use &lt;a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome&lt;/a> to take screenshots! Here&amp;rsquo;s how:&lt;/p>
&lt;ul>
&lt;li>Go to the page you want to screenshot.&lt;/li>
&lt;li>Open DevTools (&lt;code>Ctrl + Shift + J&lt;/code> on Linux).&lt;/li>
&lt;li>Hit &lt;code>Ctrl + Shift + P&lt;/code> à la VSCode to pop up a command bar, type &amp;lsquo;screenshot&amp;rsquo;.&lt;/li>
&lt;li>Choose one option. I like the &amp;lsquo;Capture area screenshot&amp;rsquo; one which allows me to drag a square for the area I want to capture.&lt;/li>
&lt;li>Hit &lt;code>Enter&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>You will then be prompted where you want to save your screenshot. Profit!&lt;/p></description><content:encoded><![CDATA[<p>Suppose you want to take a screenshot from a web page, maybe to add to a <a href="https://github.com/miniflux/v2/pull/1341">pull
request</a> of a project you&rsquo;re working
on.</p>
<p>(i) The straightforward way to do so is to use your OS tool:</p>
<ul>
<li><strong>Windows</strong>: <a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool</a>
or hit the <em>PrintScreen</em> key</li>
<li><strong>Linux</strong>: <a href=""><code>scrot</code></a> or something from your Desktop Environment (DE) such as
<code>xfce4-screenshooter</code>. For a full-featured one, I&rsquo;d recommend
<a href="https://flameshot.org/"><code>flameshot</code></a> (first) or
<a href="https://shutter-project.org/"><code>shutter</code></a> (second). For Wayland people seem
to like <a href="https://wayland.emersion.fr/grim/"><code>grim</code></a>.</li>
<li><strong>macOS</strong>: Hit <code>Cmd + Shift + 4</code> or one of its
<a href="https://support.apple.com/en-ca/HT201361">variations</a>.</li>
</ul>
<p>Even <a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks</a>
have a way to do so these days.</p>
<p>However, maybe you didn&rsquo;t know you can also use <a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome</a> to take screenshots! Here&rsquo;s how:</p>
<ul>
<li>Go to the page you want to screenshot.</li>
<li>Open DevTools (<code>Ctrl + Shift + J</code> on Linux).</li>
<li>Hit <code>Ctrl + Shift + P</code> à la VSCode to pop up a command bar, type &lsquo;screenshot&rsquo;.</li>
<li>Choose one option. I like the &lsquo;Capture area screenshot&rsquo; one which allows me to drag a square for the area I want to capture.</li>
<li>Hit <code>Enter</code>.</li>
</ul>
<p>You will then be prompted where you want to save your screenshot. Profit!</p>]]></content:encoded></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>I am currently evaluating <a href="https://nixos.org/download.html">Nix</a> as a
replacement for <a href="https://brew.sh">Homebrew</a> CLI apps in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
<a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others</a>
<a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have</a>
<a href="https://ghedam.at/15490/so-tell-me-about-nix">previously</a> written about this.</p>
<p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &hellip;). The good news is that those components
are for the most part modular, there&rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.</p>
<p>For now, I am only adopting <code>nix-env</code> and <code>nix-shell</code>, with no <code>*.nix</code> config
files. This post covers <code>nix-env</code>.</p>
<p>For simplicity, think of <code>nix-env</code> as a package manager, akin to <code>apk</code>,
<code>pacman</code>, <code>brew</code>, <code>apt</code>, <code>pkg</code>, etc.</p>
<h2 id="install-a-package">Install a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i moreutils
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>I see some guides using <code>nix-env -iA</code> but <code>-i</code> seems to suffice. We could
optionally specify the <code>nixpkgs.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i nixpkgs.moreutils
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;nixpkgs.moreutils&#39;</span> matches no derivations
</span></span></code></pre></div><p>Oh no! Maybe that&rsquo;s what the <code>-A</code> is for?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -iA nixpkgs.moreutils
</span></span><span style="display:flex;"><span>replacing old <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span></code></pre></div><p>Indeed! Apparently that <code>-A</code> thing stands for attribute. The only thing I know
is that there are both <code>nixpkgs.*</code> and <code>nixos.*</code>. But I don&rsquo;t care about NixOS
at this point. I&rsquo;ll just ignore <code>-A</code> from now on, for the time being.</p>
<h2 id="list-installed-packages">List installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span></code></pre></div><p>Easy! This actually gets displayed in my <code>less</code> pager.</p>
<h2 id="upgrade-installed-packages">Upgrade installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -u
</span></span></code></pre></div><p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&rsquo;s some update to one of my
installed CLI applications. I&rsquo;ve heard there&rsquo;s something called nix channel to
control that. Leaving it for another day though.</p>
<p><strong>Update(2022-02-18)</strong>: I learned that <code>nix-env -u</code> is akin to <code>apt upgrade</code> or
<code>apk upgrade</code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
<code>apt update</code> or <code>apk update</code>, use <code>nix-channel --update</code>.</p>
<p><strong>Note</strong>: On macOS this needs to be <code>sudo -i nix-channel --update</code>. See
<a href="https://github.com/NixOS/nix/issues/3595">issue</a>.</p>
<h2 id="uninstall-a-package">Uninstall a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env --uninstall moreutils
</span></span><span style="display:flex;"><span>uninstalling <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>Easy!</p>
<h2 id="search-for-packages">Search for packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP <span style="color:#e6db74">&#39;.*moreutils.*&#39;</span>
</span></span></code></pre></div><p>The <code>.*</code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &lsquo;derivation&rsquo; in Nix):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutils
</span></span><span style="display:flex;"><span>nixpkgs.moreutils  moreutils-0.67
</span></span></code></pre></div><p>If I write the wrong package name, the following happens:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutil
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;moreutil&#39;</span> matches no derivations, maybe you meant:
</span></span><span style="display:flex;"><span>       moreutils
</span></span></code></pre></div><p>It was helpful in this case, but I wouldn&rsquo;t always count on that. It is a bit
annoying that there&rsquo;s no <code>nix search moreutils</code> command, but it seems that
<code>nix-env</code> is very heavily tailored to use short flags, just like <code>pacman</code> in
Arch Linux. I got used to <code>pacman</code>, hopefully I can get used to the <code>nix-env</code>
short flags at some point.</p>
<p>Actually I tried it out and there is a <code>nix search</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix search moreutils
</span></span><span style="display:flex;"><span>error: experimental Nix feature <span style="color:#e6db74">&#39;nix-command&#39;</span> is disabled; use <span style="color:#e6db74">&#39;--extra-experimental-features nix-command&#39;</span> to override
</span></span></code></pre></div><p>This isn&rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the <code>nix-env</code> form for now.</p>
<p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>atool-0.39.0
</span></span><span style="display:flex;"><span>bash-interactive-5.1-p12
</span></span><span style="display:flex;"><span>coreutils-9.0
</span></span><span style="display:flex;"><span>exa-0.10.1
</span></span><span style="display:flex;"><span>fpp-0.9.2
</span></span><span style="display:flex;"><span>fzf-0.29.0
</span></span><span style="display:flex;"><span>git-2.34.1
</span></span><span style="display:flex;"><span>htop-3.1.2
</span></span><span style="display:flex;"><span>hugo-0.92.0
</span></span><span style="display:flex;"><span>jq-1.6
</span></span><span style="display:flex;"><span>less-600
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span><span style="display:flex;"><span>ncdu-1.16
</span></span><span style="display:flex;"><span>perl5.34.0-ack-3.5.0
</span></span><span style="display:flex;"><span>ranger-1.9.3
</span></span><span style="display:flex;"><span>stow-2.3.1
</span></span><span style="display:flex;"><span>tmux-3.2a
</span></span><span style="display:flex;"><span>tree-1.8.0
</span></span><span style="display:flex;"><span>vim-8.2.4186
</span></span><span style="display:flex;"><span>watch-procps-3.3.16
</span></span><span style="display:flex;"><span>wget-1.21.2
</span></span><span style="display:flex;"><span>zoxide-0.8.0
</span></span></code></pre></div><p>Those were very intuitive to find, with the exception of <code>ack</code> and <code>bash-interactive</code>:</p>
<ul>
<li><code>bash</code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
<code>~/.bashrc</code> wrecked havoc with the non-interactive version.</li>
<li><code>ack</code> is very oddly named. Really. Also: <code>nix-env -i ack</code> doesn&rsquo;t work, but
<code>nix-env -iA nixpkgs.ack</code> does. I suspect it will be hard to ignore <code>-A</code> in
the future.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking there&rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, <a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu</a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ SSH plus tmux automatically</title><link>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description><content:encoded><![CDATA[<p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.</p>
<p>To persist those connections, a terminal multiplexer is often used, <code>tmux</code> and <code>screen</code> being the two most popular ones.</p>
<p>In this post I will cover a few different client-side and server-side ways to have <code>ssh</code> automatically spawn <code>tmux</code> upon connection.</p>
<h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)</h2>
<p>Start <code>tmux</code>, forcing unicode, attaching to and/or creating a session named <em>main</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- tmux -u new -A -s main
</span></span></code></pre></div><p><code>-u</code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&rsquo;s safer to always include <code>-u</code> just in case.</p>
<p>Tip: If it&rsquo;s annoying to remember to type the full command above, consider adding an <code>alias</code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the <a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell</a> extension.</p>
<h2 id="option-2-use-sshconfig-client-side">Option #2: Use <code>~/.ssh/config</code> (client-side)</h2>
<p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.ssh/config
</span></span><span style="display:flex;"><span>Host *
</span></span><span style="display:flex;"><span>  RequestTTY yes
</span></span><span style="display:flex;"><span>  RemoteCommand tmux -u new -A -s main
</span></span></code></pre></div><p>You don&rsquo;t need to match all hosts (<code>Host *</code>), if you&rsquo;d rather match one or more specific hosts, refer to the ssh config syntax <code>ssh_config(5)</code> to add them. A simple example would be <code>Host mymachine.example.org</code>.</p>
<p><strong>Caveat</strong>: I&rsquo;ve found this method interferes with <code>git</code> + <code>ssh</code> authentication. More specifically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git remote -v
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ git push
</span></span><span style="display:flex;"><span>Cannot execute command-line and remote command.
</span></span><span style="display:flex;"><span>fatal: Could not read from remote repository.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please make sure you have the correct access rights
</span></span><span style="display:flex;"><span>and the repository exists.
</span></span></code></pre></div><p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&rsquo;t use it with <code>Host *</code>.</p>
<h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use <code>~/.bash_profile</code> or similar (server-side, recommended)</h2>
<p>This method leverages your login shell startup config file (<code>~/.bash_profile</code>, <code>~/.zprofile</code>, etc) to automatically spawn <code>tmux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.</span>
</span></span><span style="display:flex;"><span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The session is called `main`.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Escape hatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ssh &lt;host&gt; -t -- NOTMUX=1 &lt;shell&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$NOTMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$TMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$SSH_TTY<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> $- <span style="color:#f92672">=</span>~ i <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  tmux -u new -A -s main
</span></span><span style="display:flex;"><span>  exit
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The <code>if</code> basically checks:</p>
<ul>
<li>whether we&rsquo;re not already inside a tmux session (we shouldn&rsquo;t be), so that we don&rsquo;t nest <code>tmux</code></li>
<li>whether we&rsquo;re accessing the shell via <code>ssh</code> (we should be)</li>
<li>whether we&rsquo;re accessing an interactive shell (we should be), so that it doesn&rsquo;t interefere with oneshot <code>ssh</code> commands</li>
</ul>
<p>There&rsquo;s also a escape hatch. If you want to get an interactive shell but bypass <code>tmux</code> for some reason<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, just set <code>NOTMUX=1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- NOTMUX<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> bash
</span></span></code></pre></div><h2 id="final-remarks">Final remarks</h2>
<p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn <code>tmux</code> server-side, or selectively spawn <code>tmux</code> client-side.</p>
<p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your <code>ssh</code> host settings. That said, in scenarios where I fully control a host and it&rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, maybe if <code>tmux</code> broke due to a recent upgrade, or if the <code>~/.tmux.conf</code> is invalid.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Python: interactive completion</title><link>https://thiagowfx.github.io/2022/02/python-interactive-completion/</link><pubDate>Sat, 12 Feb 2022 23:11:44 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/python-interactive-completion/</guid><description>&lt;p>Sometimes I fire up a &lt;code>python&lt;/code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.&lt;/p>
&lt;p>For example, how should I invoke &lt;code>subprocess.call&lt;/code>?&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I fire up a <code>python</code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.</p>
<p>For example, how should I invoke <code>subprocess.call</code>?</p>
<p>The most straightforward action at this point is to simply <a href="https://www.google.com/search?q=python+subprocess.call">google
it</a>, no shame. The first result helpfully redirects me to the official python <a href="https://docs.python.org/3/library/subprocess.html">documentation</a>, as one would expect.</p>
<p>From the documentation, I&rsquo;d run something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-al&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span></code></pre></div><p>What if I wanted to figure out the correct way to do so from the command line though?</p>
<h2 id="bpython">bpython</h2>
<p>Enter <a href="https://bpython-interpreter.org/"><code>bpython</code></a>:</p>
<blockquote>
<p><code>bpython</code> is a fancy interface to the Python interpreter for Linux, BSD, OS X and Windows (with some work). bpython is released under the MIT License. It has the following (special) features:</p>
</blockquote>
<p>It should be available in your favorite linux distribution. Once it&rsquo;s installed, a typical session would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> bpython
</span></span><span style="display:flex;"><span>bpython version <span style="color:#ae81ff">0.22.1</span> on top of Python <span style="color:#ae81ff">3.10.2</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>python
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>call: (<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> call                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>                                       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])                                                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>To see all <code>Popen</code> arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>Popen(
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>Popen: (args, bufsize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, executable<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdin<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stderr<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, preexec_fn<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, close_fds<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, shell<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, cwd<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, env<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> universal_newlines<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, startupinfo<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, creationflags<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, restore_signals<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,    <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> start_new_session<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, pass_fds<span style="color:#f92672">=</span>(), <span style="color:#f92672">*</span>, user<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, group<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, extra_groups<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> encoding<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, errors<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, umask<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, pipesize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>)                        <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Popen                                                                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Execute a child program <span style="color:#f92672">in</span> a new process<span style="color:#f92672">.</span>                                            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> For a complete description of the arguments see the Python documentation<span style="color:#f92672">.</span>            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Arguments:                                                                           <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   args: A string, <span style="color:#f92672">or</span> a sequence of program arguments<span style="color:#f92672">.</span>                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># output truncated for brevity; bpython displays it all</span>
</span></span></code></pre></div><p>As you can see, it wouldn&rsquo;t be difficult to have a rough idea of which
arguments are available and what they do.</p>
<p>I could keep going:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>run([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> args               check_returncode   returncode         stderr                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stdout                                                                               <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>args<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> append         clear          copy           count          extend                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> index          insert         pop            remove         reverse                  <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> sort                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>Out-of-the-box it also displays autosuggestions based on the history of my previous commands<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It also supports python 3. For the full list of features, refer to <a href="https://bpython-interpreter.org/">https://bpython-interpreter.org/</a>.</p>
<h2 id="ipython">ipython</h2>
<p>Alternatively <a href="https://ipython.org/"><code>ipython</code></a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> is comparable to <code>bpython</code>, however I find it a bit less user-friendly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>iPython <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>             builtins           contextlib         io                 select             threading
</span></span><span style="display:flex;"><span>             call()             DEVNULL            list2cmdline()     selectors          time
</span></span><span style="display:flex;"><span>             CalledProcessError errno              os                 signal             TimeoutExpired
</span></span><span style="display:flex;"><span>             check_call()       fcntl              PIPE               STDOUT             types
</span></span><span style="display:flex;"><span>             check_output()     getoutput()        Popen              SubprocessError    warnings
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call(
</span></span><span style="display:flex;"><span>  abs()                     <span style="color:#66d9ef">False</span>                     <span style="color:#a6e22e">ModuleNotFoundError</span>       <span style="color:#a6e22e">SystemError</span>
</span></span><span style="display:flex;"><span>  all()                     <span style="color:#a6e22e">FileExistsError</span>           <span style="color:#a6e22e">NameError</span>                 <span style="color:#a6e22e">SystemExit</span>
</span></span><span style="display:flex;"><span>  any()                     <span style="color:#a6e22e">FileNotFoundError</span>         next()                    <span style="color:#a6e22e">TabError</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ArithmeticError</span>           filter()                  <span style="color:#66d9ef">None</span>                      timeout<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  ascii()                   float                     <span style="color:#a6e22e">NotADirectoryError</span>        <span style="color:#a6e22e">TimeoutError</span>
</span></span></code></pre></div><p>The tab completion after <code>call(</code> doesn&rsquo;t display the documentation for it. However, appending a <code>?</code> works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>Python <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call<span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span>Signature: subprocess<span style="color:#f92672">.</span>call(<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>Docstring:
</span></span><span style="display:flex;"><span>Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>
</span></span><span style="display:flex;"><span>timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])
</span></span><span style="display:flex;"><span>File:      <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>python3<span style="color:#ae81ff">.10</span><span style="color:#f92672">/</span>subprocess<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>Type:      function
</span></span></code></pre></div><p>Furthermore, <code>subprocess.Popen?</code> opens a pager with the documentation for the method.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Both <code>bpython</code> and <code>ipython</code> are excellent tools to enhance the user experience
within the python interpreter, being great for quick prototyping,
experimentation or exploration. <code>bpython</code> seems a bit more user-friendly and
intuitive upon first usage, <code>ipython</code> takes a bit getting used to.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://fishshell.com/"><code>fish</code></a> shell and <a href="https://github.com/zsh-users/zsh-autosuggestions"><code>zsh-autosuggestions</code></a> users should know what I&rsquo;m talking about.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>ipython</code> has been around for longer and these days there&rsquo;s the whole Jupyter Notebook ecosystem around it.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>