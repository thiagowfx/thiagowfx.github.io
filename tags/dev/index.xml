<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>dev on Not Just Serendipity</title><link>https://thiagowfx.github.io/tags/dev/</link><description>Recent content in dev on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Mon, 15 Jan 2024 14:42:51 -0300</lastBuildDate><atom:link href="https://thiagowfx.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Synchronized in Python</title><link>https://thiagowfx.github.io/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<blockquote>
<p><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the <code>synchronized</code>
keyword. Is there anything that can achieve the same results in
Python?</a></p>
</blockquote>
<p>Without having prior knowledge of any python libraries to do so, the primitive interface
I would expect resembles the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>This isn&rsquo;t robust: if an exception happens in <code>perform_mutation</code> the lock would
never be released. A small improvement we can make is to wrap it with
<code>try/finally</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>However it turns out there&rsquo;s a more pythonic way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How can we test this? First, let&rsquo;s use a single thread.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  foo<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;hello from the main thread&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use multiple threads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>write, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>Without the lock this is one of the results I get locally:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 6
hello from thread 8
hello from thread 7
hello from thread 5
hello from thread 9
</code></pre><p>With the lock I always get the following, as you would predict:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 5
hello from thread 6
hello from thread 7
hello from thread 8
hello from thread 9
</code></pre><p>We could go one level deeper in the abstraction by using a <code>@synchronized</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@synchronized</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How do we implement it?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">synchronized</span>(member):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(member)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> lock <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>setdefault(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, Lock())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> lock:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> member(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span></code></pre></div><p>One last concept to learn: <code>RLock</code> a.k.a. reentrant lock.</p>
<p>Consider the following program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock, Thread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeA</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeAandB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeA(bytes) <span style="color:#75715e"># a usual lock would block here</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeB(bytes)
</span></span></code></pre></div><p>Invoked as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeA, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> A&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> B&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeAandB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> AB&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>It will not work as expected. As soon as the first <code>changeAandB</code> gets called, its inner
<code>self.changeA</code> call will block. This is because the lock can only be acquired once.</p>
<p>In this specific example, the straightforward way to fix the issue is to use an <code>RLock</code>:
<code>self.lock = RLock()</code>. The reentrant lock can be locked multiple times.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://theorangeduck.com/page/synchronized-python">https://theorangeduck.com/page/synchronized-python</a></li>
<li><a href="https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances">https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances</a></li>
<li><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized</a></li>
<li><a href="https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock">https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock</a></li>
</ul>]]></content:encoded></item><item><title>Python: all hail to cache memoization</title><link>https://thiagowfx.github.io/2024/01/python-all-hail-to-cache-memoization/</link><pubDate>Fri, 12 Jan 2024 14:37:13 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/python-all-hail-to-cache-memoization/</guid><description>&lt;p>In a typical dynamic programming (DP) problem, you&amp;rsquo;ll usually instantiate a
variable to hold previously computed data (cache).&lt;/p></description><content:encoded><![CDATA[<p>In a typical dynamic programming (DP) problem, you&rsquo;ll usually instantiate a
variable to hold previously computed data (cache).</p>
<p>For example, let&rsquo;s consider a naive implementation of the factorial function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>Now let&rsquo;s add a cache to improve it, upon a use case wherein it would be called
multiple times in a row:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cache: dict[int, int] <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">in</span> cache:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> cache[n]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  cache[n] <span style="color:#f92672">=</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> cache[n]
</span></span></code></pre></div><p>This is straightforward, the only caveat to watch out for is the scope of the
cache. In general you wouldn&rsquo;t want to store it globally.</p>
<p>One elegant way to address this is with <code>lru_cache</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> lru_cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>The snippet above creates and maintains a cache under the hood. The main caveat
of that snippet is that it&rsquo;s not easy to remember:</p>
<ul>
<li>is it <code>max_size</code> or <code>maxsize</code>?</li>
<li>is it <code>maxsize=0</code> or <code>maxsize=None</code>?</li>
</ul>
<p>This week I found out that there&rsquo;s an even more ergonomic decorator, which it is
super easy to remember!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@cache</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p><code>@cache</code> is equivalent to <code>lru_cache(maxsize=None)</code>.</p>
<p>With this trick, you won&rsquo;t ever need to manually memoize any function in python
anymore!</p>
<p>This works for any number of arguments so long as they can be used as
dictionary keys, i.e. the arguments must be
<a href="https://docs.python.org/3/glossary.html#term-hashable">hashable</a>. Practically
speaking, this means lists are not cacheable, but tuples are.</p>
<p>Happy dynamic programming!</p>
<p><strong>Reference</strong>: <a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a></p>]]></content:encoded></item><item><title>Python: debugging tip with print and f-strings</title><link>https://thiagowfx.github.io/2024/01/python-debugging-tip-with-print-and-f-strings/</link><pubDate>Mon, 08 Jan 2024 18:36:47 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/python-debugging-tip-with-print-and-f-strings/</guid><description>&lt;p>It&amp;rsquo;s 2024, &lt;a href="https://yotld.com/">the year of the linux desktop&lt;/a>, and the best™
way to debug computer programs is still the good ol&amp;rsquo; &lt;code>print&lt;/code> statement.&lt;/p></description><content:encoded><![CDATA[<p>It&rsquo;s 2024, <a href="https://yotld.com/">the year of the linux desktop</a>, and the best™
way to debug computer programs is still the good ol&rsquo; <code>print</code> statement.</p>
<p>Since Python 3.6 it is possible to use
<a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498">f-strings</a>.</p>
<p>One of my favorite ways to use them for debugging is with the <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">equal
sign</a>
(<code>=</code>):</p>
<blockquote>
<p>To display both the expression text and its value after evaluation, (useful
in debugging), an equal sign <code>'='</code> may be added after the expression.</p>
</blockquote>
<p>Here is one example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_full_word_match</span>(token, words):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;  is_full_word_match: </span><span style="color:#e6db74">{</span>token<span style="color:#e6db74">=}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>words<span style="color:#e6db74">=}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> token <span style="color:#f92672">in</span> words
</span></span></code></pre></div><p>If you call it like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>is_full_word_match(<span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#e6db74">&#34;hello world&#34;</span>)
</span></span></code></pre></div><p>Then it will print the following:</p>
<pre tabindex="0"><code>  is_full_word_match: token=&#39;hello&#39; words=&#39;hello world&#39;
</code></pre><p>This is a more ergonomic (and quicker) way to write than the classic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;  is_full_word_match: token=&#39;</span> <span style="color:#f92672">+</span> token <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; words=&#39;</span> <span style="color:#f92672">+</span> words)
</span></span></code></pre></div><p>Or even:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;  is_full_word_match: token=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> words=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(token, words))
</span></span></code></pre></div>]]></content:encoded></item><item><title>macOS: remove all empty directories</title><link>https://thiagowfx.github.io/2023/12/macos-remove-all-empty-directories/</link><pubDate>Fri, 29 Dec 2023 02:02:19 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2023/12/macos-remove-all-empty-directories/</guid><description>&lt;p>For some odd reason my &lt;a href="https://calibre-ebook.com">Calibre&lt;/a> backup to cloud
storage had a bunch of empty directories. I&amp;rsquo;ve been meaning to remove them, but
it&amp;rsquo;s cumbersome to do so from the web client.&lt;/p></description><content:encoded><![CDATA[<p>For some odd reason my <a href="https://calibre-ebook.com">Calibre</a> backup to cloud
storage had a bunch of empty directories. I&rsquo;ve been meaning to remove them, but
it&rsquo;s cumbersome to do so from the web client.</p>
<p>Instead, let&rsquo;s do it from a local client.</p>
<p>Upon installing the cloud storage software, a local directory is exposed under
<code>/Users/$USER/Library/CloudStorage</code> (macOS).</p>
<p>My first instinct is to use <a href="https://man.archlinux.org/man/find.1.en"><code>find(1)</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find -empty -type d -delete
</span></span></code></pre></div><p>However that does not work on macOS:</p>
<pre tabindex="0"><code>find: illegal option -- e
usage: find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
       find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]
</code></pre><p>My second go to choice is <a href="https://man.archlinux.org/man/fd.1.en"><code>fd(1)</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd -t e -x rmdir
</span></span></code></pre></div><p>&hellip;this lists all empty directories and invokes <code>rmdir</code> on each of them.</p>]]></content:encoded></item><item><title>Gerrit v3.9 is out</title><link>https://thiagowfx.github.io/2023/12/gerrit-v3.9-is-out/</link><pubDate>Sat, 23 Dec 2023 22:10:00 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2023/12/gerrit-v3.9-is-out/</guid><description>&lt;p>Gerrit &lt;a href="https://www.gerritcodereview.com/3.9.html">3.9&lt;/a> has been released recently. This is a dear release to me because I was responsible for some of its changes&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p></description><content:encoded><![CDATA[<p>Gerrit <a href="https://www.gerritcodereview.com/3.9.html">3.9</a> has been released recently. This is a dear release to me because I was responsible for some of its changes<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ PAGER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cat&#34;</span> git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> v3.8.0..v3.9.0
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>3<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Add <span style="color:#e6db74">&#39;description&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span> aliases <span style="color:#66d9ef">for</span> the <span style="color:#e6db74">&#39;message&#39;</span> search operator
</span></span><span style="display:flex;"><span>      Add <span style="color:#e6db74">&#39;m&#39;</span> alias <span style="color:#66d9ef">for</span> the <span style="color:#e6db74">&#39;message&#39;</span> search operator
</span></span><span style="display:flex;"><span>      UX: <span style="color:#e6db74">&#34;Your Turn&#34;</span> -&gt; <span style="color:#e6db74">&#34;Your turn&#34;</span>
</span></span></code></pre></div><p>This is not the first Google open source project I contributed to, however I
wanted to note these contributions here nonetheless.</p>
<p>One of my favorite aspects of Google culture is the ability to contribute to
any project in the company at any time in any capacity (the so called &ldquo;20%
contributions&rdquo;).</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The output was edited to remove duplicate entries and merge commits
because the Gerrit project does not maintain a clean history of their
commits i.e. they do not adopt a rebase workflow.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Enhance adblock lists with uBlock origin dev filter</title><link>https://thiagowfx.github.io/2023/12/enhance-adblock-lists-with-ublock-origin-dev-filter/</link><pubDate>Wed, 06 Dec 2023 00:01:31 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2023/12/enhance-adblock-lists-with-ublock-origin-dev-filter/</guid><description>&lt;p>&lt;a href="https://github.com/quenhus/uBlock-Origin-dev-filter">uBlock-Origin-dev-filter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Filters to block and remove copycat-websites from DuckDuckGo, Google and
other search engines. Used to be specific to dev websites like StackOverflow
or GitHub, but it currently supports others like Wikipedia.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p><a href="https://github.com/quenhus/uBlock-Origin-dev-filter">uBlock-Origin-dev-filter</a>:</p>
<blockquote>
<p>Filters to block and remove copycat-websites from DuckDuckGo, Google and
other search engines. Used to be specific to dev websites like StackOverflow
or GitHub, but it currently supports others like Wikipedia.</p>
</blockquote>
<p>1-click to subscribe to a blocking list via <a href="https://chromewebstore.google.com/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm">uBlock
origin</a>,
customizable on a per search engine basis (e.g. Google, DuckDuckGo, etc).</p>
<p>Credits: <a href="https://www.lkhrs.com/blog/2022/04/block-domains-from-search/">https://www.lkhrs.com/blog/2022/04/block-domains-from-search/</a></p>]]></content:encoded></item><item><title>Maccy macOS clipboard manager</title><link>https://thiagowfx.github.io/2023/12/maccy-macos-clipboard-manager/</link><pubDate>Sat, 02 Dec 2023 15:27:06 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2023/12/maccy-macos-clipboard-manager/</guid><description>&lt;p>&lt;strong>Strongly recommended&lt;/strong> to all software developers who use macOS: &lt;a href="https://maccy.app/">Maccy&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Clipboard manager for macOS which does one job - keep your copy history at hand. Period.&lt;/p>
&lt;p>Lightweight. Open source. No fluff.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p><strong>Strongly recommended</strong> to all software developers who use macOS: <a href="https://maccy.app/">Maccy</a>.</p>
<blockquote>
<p>Clipboard manager for macOS which does one job - keep your copy history at hand. Period.</p>
<p>Lightweight. Open source. No fluff.</p>
</blockquote>
<p><strong>Shortcut</strong>: <code>Cmd + Shift + C</code> to open a clipboard menu with all your recently
copied items, plus a search bar for quick grepping.</p>
<p>Hands down this is the best piece of software I added to my workflow in 2023,
competing with <a href="https://obsidian.md/">Obsidian</a> and
<a href="https://culturedcode.com/things/">Things</a> in terms of productivity.</p>]]></content:encoded></item><item><title>AIs galore</title><link>https://thiagowfx.github.io/2022/12/ais-galore/</link><pubDate>Tue, 27 Dec 2022 16:16:36 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/12/ais-galore/</guid><description>&lt;p>2022 was an amazing year for AIs.&lt;/p></description><content:encoded><![CDATA[<p>2022 was an amazing year for AIs.</p>
<h2 id="chatgptchatgpt"><a href="https://chat.openai.com/chat/">ChatGPT</a></h2>
<ul>
<li>
<p><a href="https://chat.openai.com/chat/"><code>ChatGPT</code></a> can effectively replace Stack
Overflow to a large extent, if you learn how to ask questions to it. Example queries that work amazingly, returning exactly what you would expect, with detailed explanation and/or context:</p>
<ul>
<li>PKGBUILD how to specify git version</li>
<li>python how to sort list reverse</li>
<li>systemd create unit file that forks</li>
<li>xorg start i3wm with startx</li>
<li>git update all submodules to latest tip</li>
<li>typescript make simple post request</li>
<li>chromium difference between args and declare_args</li>
<li>sekiro versus elden ring</li>
<li>generate random number between 10 and 20
<ul>
<li>I cannot run the code. Please generate a random number for me</li>
<li>between 10 and 20 though</li>
</ul>
</li>
<li>add pasta before or after boiling water?</li>
<li>what is the difference between auszahlen and Bargeld abheben?</li>
<li>write a trip packing checklist for me</li>
</ul>
<p>Someone even wrote a Chrome extension to query <code>ChatGPT</code> alongside a Google search: <a href="https://github.com/wong2/chat-gpt-google-extension">https://github.com/wong2/chat-gpt-google-extension</a> (chatgpt4google.com). I couldn&rsquo;t get it to work for some reason though.</p>
</li>
</ul>
<h2 id="stable-diffusionstable-diffusion"><a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a></h2>
<p>Given a query (text), it generates an image for you. It pairs up quite nicely with Slides (when looking for inspiration) and can effectively replace Google Images to some extent.</p>]]></content:encoded></item><item><title>macOS terminal app gripes</title><link>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p></description><content:encoded><![CDATA[<p><code>Terminal.app</code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.</p>
<h2 id="1-no-osc-52-support">1. No OSC-52 support</h2>
<p><a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty</a>:</p>
<blockquote>
<p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.</p>
</blockquote>
<blockquote>
<p>Although <code>Terminal.app</code> does NOT support OSC 52, here [osc52pty] is the workaround for it.</p>
</blockquote>
<p>I dislike this workaround because it requires an external binary. Even though it is a single binary because it is a Golang executable, I still dislike the external dependency.</p>
<h2 id="2-no-true-color-256-colors">2. No true color (256 colors)</h2>
<p>What is true color? See <a href="https://stackoverflow.com/questions/6403744/are-there-terminals-that-support-true-color">stack overflow</a> for context.</p>
<p>Run the <a href="https://gist.github.com/XVilka/8346728">following</a> to print a color band, a smooth (gradient) output indicates true color support:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;BEGIN{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    s=&#34;/\\/\\/\\/\\/\\&#34;; s=s s s s s s s s;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    for (colnum = 0; colnum&lt;77; colnum++) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r = 255-(colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        g = (colnum*510/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b = (colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if (g&gt;255) g = 510-g;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[48;2;%d;%d;%dm&#34;, r,g,b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[38;2;%d;%d;%dm&#34;, 255-r,255-g,255-b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;%s\033[0m&#34;, substr(s,colnum+1,1);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    printf &#34;\n&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span></code></pre></div><p><code>Terminal.app</code> will not print a gradient.</p>
<h2 id="3-no-gpu-acceleration">3. No GPU acceleration</h2>
<p><a href="https://unix.stackexchange.com/q/658709">https://unix.stackexchange.com/q/658709</a>:</p>
<blockquote>
<p>Q: What are the advantages of hardware-accelerated terminal emulators?</p>
</blockquote>
<blockquote>
<p>A: They can potentially be faster at outputting and refreshing vast amounts of information. It could also allow for smooth(er) scrolling. Human beings however are quite slow at reading this information, [&hellip;] the average person is unlikely to be able to comprehend it anyways. CPU usage could be lower but it needs to be tested.</p>
</blockquote>
<p><code>Terminal.app</code> isn&rsquo;t GPU accelerated.</p>
<h2 id="recommendations">Recommendations</h2>
<p>Both <a href="https://alacritty.org">alacritty</a> and <a href="https://sw.kovidgoyal.net/kitty/">kitty</a> are decent replacements (or complements) for <code>Terminal.app</code> that work out-of-the-box, with sensible defaults including all the aforementioned points.</p>]]></content:encoded></item><item><title>Computers are fast</title><link>https://thiagowfx.github.io/2022/03/computers-are-fast/</link><pubDate>Sun, 20 Mar 2022 15:55:24 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/computers-are-fast/</guid><description>&lt;p>&lt;a href="https://computers-are-fast.github.io">Computers are fast&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://computers-are-fast.github.io">Computers are fast</a>.</p>
<blockquote>
<p>Let&rsquo;s find out how well you know computers! All of these programs have a variable NUMBER in them. Your mission: guess how big NUMBER needs to get before the program takes 1 second to run.</p>
<p>You don&rsquo;t need to guess exactly: they&rsquo;re all between 1 and a billion. Just try to guess the right order of magnitude!</p>
</blockquote>
<p>This is basically an interactive version of <a href="https://gist.github.com/jboner/2841832">Latency Numbers Every Programmer Should Know</a>, originally coined by Jeff Dean.</p>]]></content:encoded></item></channel></rss>