<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>dev on Not Just Serendipity</title><link>https://thiagowfx.github.io/tags/dev/</link><description>Recent content in dev on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2023 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Tue, 27 Dec 2022 16:16:36 +0100</lastBuildDate><atom:link href="https://thiagowfx.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>AIs galore</title><link>https://thiagowfx.github.io/2022/12/ais-galore/</link><pubDate>Tue, 27 Dec 2022 16:16:36 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/12/ais-galore/</guid><description>&lt;p>2022 was an amazing year for AIs.&lt;/p></description><content:encoded><![CDATA[<p>2022 was an amazing year for AIs.</p>
<h2 id="chatgptchatgpt"><a href="https://chat.openai.com/chat/">ChatGPT</a></h2>
<ul>
<li>
<p><a href="https://chat.openai.com/chat/"><code>ChatGPT</code></a> can effectively replace Stack
Overflow to a large extent, if you learn how to ask questions to it. Example queries that work amazingly, returning exactly what you would expect, with detailed explanation and/or context:</p>
<ul>
<li>PKGBUILD how to specify git version</li>
<li>python how to sort list reverse</li>
<li>systemd create unit file that forks</li>
<li>xorg start i3wm with startx</li>
<li>git update all submodules to latest tip</li>
<li>typescript make simple post request</li>
<li>chromium difference between args and declare_args</li>
<li>sekiro versus elden ring</li>
<li>generate random number between 10 and 20
<ul>
<li>I cannot run the code. Please generate a random number for me</li>
<li>between 10 and 20 though</li>
</ul>
</li>
<li>add pasta before or after boiling water?</li>
<li>what is the difference between auszahlen and Bargeld abheben?</li>
<li>write a trip packing checklist for me</li>
</ul>
<p>Someone even wrote a Chrome extension to query <code>ChatGPT</code> alongside a Google search: <a href="https://github.com/wong2/chat-gpt-google-extension">https://github.com/wong2/chat-gpt-google-extension</a> (chatgpt4google.com). I couldn&rsquo;t get it to work for some reason though.</p>
</li>
</ul>
<h2 id="stable-diffusionstable-diffusion"><a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a></h2>
<p>Given a query (text), it generates an image for you. It pairs up quite nicely with Slides (when looking for inspiration) and can effectively replace Google Images to some extent.</p>]]></content:encoded></item><item><title>macOS terminal app gripes</title><link>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p></description><content:encoded><![CDATA[<p><code>Terminal.app</code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.</p>
<h2 id="1-no-osc-52-support">1. No OSC-52 support</h2>
<p><a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty</a>:</p>
<blockquote>
<p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.</p>
</blockquote>
<blockquote>
<p>Although <code>Terminal.app</code> does NOT support OSC 52, here [osc52pty] is the workaround for it.</p>
</blockquote>
<p>I dislike this workaround because it requires an external binary. Even though it is a single binary because it is a Golang executable, I still dislike the external dependency.</p>
<h2 id="2-no-true-color-256-colors">2. No true color (256 colors)</h2>
<p>What is true color? See <a href="https://stackoverflow.com/questions/6403744/are-there-terminals-that-support-true-color">stack overflow</a> for context.</p>
<p>Run the <a href="https://gist.github.com/XVilka/8346728">following</a> to print a color band, a smooth (gradient) output indicates true color support:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;BEGIN{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    s=&#34;/\\/\\/\\/\\/\\&#34;; s=s s s s s s s s;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    for (colnum = 0; colnum&lt;77; colnum++) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r = 255-(colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        g = (colnum*510/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b = (colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if (g&gt;255) g = 510-g;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[48;2;%d;%d;%dm&#34;, r,g,b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[38;2;%d;%d;%dm&#34;, 255-r,255-g,255-b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;%s\033[0m&#34;, substr(s,colnum+1,1);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    printf &#34;\n&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span></code></pre></div><p><code>Terminal.app</code> will not print a gradient.</p>
<h2 id="3-no-gpu-acceleration">3. No GPU acceleration</h2>
<p><a href="https://unix.stackexchange.com/q/658709">https://unix.stackexchange.com/q/658709</a>:</p>
<blockquote>
<p>Q: What are the advantages of hardware-accelerated terminal emulators?</p>
</blockquote>
<blockquote>
<p>A: They can potentially be faster at outputting and refreshing vast amounts of information. It could also allow for smooth(er) scrolling. Human beings however are quite slow at reading this information, [&hellip;] the average person is unlikely to be able to comprehend it anyways. CPU usage could be lower but it needs to be tested.</p>
</blockquote>
<p><code>Terminal.app</code> isn&rsquo;t GPU accelerated.</p>
<h2 id="recommendations">Recommendations</h2>
<p>Both <a href="https://alacritty.org">alacritty</a> and <a href="https://sw.kovidgoyal.net/kitty/">kitty</a> are decent replacements (or complements) for <code>Terminal.app</code> that work out-of-the-box, with sensible defaults including all the aforementioned points.</p>]]></content:encoded></item><item><title>Ninite: Bootstrap a Windows installation</title><link>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</link><pubDate>Thu, 17 Mar 2022 14:37:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</guid><description>&lt;p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.&lt;/p>
&lt;p>In my opinion, &lt;a href="https://ninite.com">Ninite&lt;/a> is the best way to do so.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.</p>
<p>In my opinion, <a href="https://ninite.com">Ninite</a> is the best way to do so.</p>
<p>All you need to do is to select a few checkboxes. The Ninite installer will then automatically download and install all selected applications and software, one-by-one, with sensible defaults<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and a decent progress report:</p>
<pre tabindex="0"><code>App1	OK
App2	Installing
App3	Waiting to install
App4	Downloading
App5	Waiting to download
</code></pre><p>I dunno why they do it one-by-one, but it&rsquo;s in principle reasonable, probably intended to avoid potential conflicts of multiple installers trying to fiddle with each other at the same time.</p>
<p>The Ninite installer also has an interesting reuse<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> property: You could save it to run it again in the future: it will end up updating the existing applications – and maybe reinstalling them, in case some of them were uninstalled in the meantime.</p>
<p>If you bookmark the URL generated by the webapp, which looks like <a href="https://ninite.com/7zip-chrome-irfanview-steam/">https://ninite.com/7zip-chrome-irfanview-steam/</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the same set of applications could be bootstrapped once again in the future, which is useful to do batch installations in multiple computers, or to reinstall everything after a factory reset.</p>
<p>This is the URL I used to install sensible applications for my parents:</p>
<p><a href="https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/">https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, by saying &lsquo;No&rsquo; to junk like browser toolbars, add-ons and &ldquo;extras&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I wanted to say &lsquo;reproducibility&rsquo;, but it&rsquo;s not quite what it means.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>You can add more pieces of software as needed.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Miniflux v2.0.36 is out</title><link>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</link><pubDate>Fri, 11 Mar 2022 10:30:18 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</guid><description>&lt;p>Miniflux &lt;a href="https://miniflux.app/releases/2.0.36.html">2.0.36&lt;/a> has been released this week. This is a dear release to me because I was responsible for many of its changes:&lt;/p></description><content:encoded><![CDATA[<p>Miniflux <a href="https://miniflux.app/releases/2.0.36.html">2.0.36</a> has been released this week. This is a dear release to me because I was responsible for many of its changes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ PAGER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cat&#34;</span> git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> 2.0.35..2.0.36
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Add pagination on top of all entries. Closes <span style="color:#75715e">#1305.</span>
</span></span><span style="display:flex;"><span>      Add links to scraper/rewrite/filtering docs when editing feeds
</span></span><span style="display:flex;"><span>      Add several icons to menus according to their roles
</span></span><span style="display:flex;"><span>      Add new keyboard shortcut: <span style="color:#e6db74">&#39;M&#39;</span> - toggle read/unread, go to prev item
</span></span><span style="display:flex;"><span>      refactor handleEntryStatus / goToNextListItem / goToPrevListItem
</span></span><span style="display:flex;"><span>      Add <span style="color:#f92672">(</span>+<span style="color:#f92672">)</span> action next to Feeds to quickly add new feeds
</span></span><span style="display:flex;"><span>      Add <span style="color:#e6db74">&#39;+&#39;</span> shortcut <span style="color:#66d9ef">for</span> new subscription page
</span></span><span style="display:flex;"><span>      Gray out pagination buttons when they are not applicable
</span></span></code></pre></div><p>This is the first open source project I self-host in a serious manner that I am contributing back to. It is very exciting and fulfilling, and it sparks a lot of joy in my heart.</p>
<p>I have a few other ideas for improving the miniflux user experience and functionality, while still keeping it simple and elegant. As everything else in life, time is the only constraint&hellip;</p>]]></content:encoded></item><item><title>HTTP: a few acronyms</title><link>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</link><pubDate>Sun, 27 Feb 2022 21:48:03 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</guid><description>&lt;p>I keep forgetting these, so I wrote a small summary for my own reference.&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting these, so I wrote a small summary for my own reference.</p>
<h2 id="hsts">HSTS</h2>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">Wikipedia — HSTS</a>:</p>
<blockquote>
<p>HTTP Strict Transport Security (HSTS) is a policy mechanism that helps to
protect websites against man-in-the-middle attacks such as protocol downgrade
attacks and cookie hijacking. It allows web servers to declare that web
browsers (or other complying user agents) should automatically interact with
it using only HTTPS connections.</p>
</blockquote>
<p>In layman&rsquo;s terms: <em>Force HTTPS on a given domain</em>.</p>
<p><a href="https://hstspreload.org/">HSTS Preload List</a>:</p>
<blockquote>
<p>This form is used to submit domains for inclusion in Chrome&rsquo;s HTTP Strict
Transport Security (HSTS) preload list. This is a list of sites that are
hardcoded into Chrome as being HTTPS only.</p>
<p>Most major browsers (Chrome, Firefox, Opera, Safari, IE 11 and Edge) also
have HSTS preload lists based on the Chrome list. (See the HSTS compatibility
matrix.)</p>
</blockquote>
<p>If you add your website to that list, major browsers will honor it and only use
HTTPS for your domain.</p>
<p>Some <a href="https://en.wikipedia.org/wiki/Top-level_domain">TLDs</a> enforce HTTPS
through HSTS, some popular ones are <code>.app</code> and <code>.dev</code>.
<a href="https://serverfault.com/q/1067229/180092">Here</a> is a more comprehensive list.</p>
<p><code>HSTS</code> is fire-and-forget, you&rsquo;ll usually only need to worry about it once,
when configuring a SSL certificate (HTTPS) for your domain or subdomains.</p>
<h2 id="csp">CSP</h2>
<p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Wikipedia — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is a computer security standard introduced to
prevent cross-site scripting (XSS), clickjacking and other code injection
attacks resulting from execution of malicious content in the trusted web page
context.</p>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">MDN — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to
detect and mitigate certain types of attacks, including Cross-Site Scripting
(XSS) and data injection attacks. These attacks are used for everything from
data theft, to site defacement, to malware distribution.</p>
</blockquote>
<p>CSP can be configured in at least two distinct ways:</p>
<ol>
<li>Web server: return the <code>Content-Security-Policy</code> HTTP header:</li>
</ol>
<pre tabindex="0"><code>Content-Security-Policy: default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;
</code></pre><ol start="2">
<li>HTML <code>&lt;meta&gt;</code> tag:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&#34;</span>&gt;
</span></span></code></pre></div><p><code>CSP</code> is something to worry about at the application level. For example,
<a href="https://github.com/miniflux/v2/issues/748">miniflux</a> to fetch resources
(fonts) from another domain (Google Fonts).</p>
<h2 id="cors">CORS</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Wikipedia — CORS</a>:</p>
<blockquote>
<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted
resources on a web page to be requested from another domain outside the
domain from which the first resource was served.</p>
</blockquote>
<p>CORS can be configured via web server: return the <code>Access-Control-Allow-Origin</code> HTTP header:</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: *
Access-Control-Allow-Origin: http://example.com:8080
</code></pre><p><code>CORS</code> is something to worry about at the application level. For example,
<a href="https://keep.google.com/">https://keep.google.com/</a> ⟷ <a href="https://google.com/">https://google.com/</a> cookies.</p>
<h2 id="csrf">CSRF</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Wikipedia — CSRF</a>:</p>
<blockquote>
<p>Cross-site request forgery, also known as one-click attack or session riding
and abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of
malicious exploit of a website where unauthorized commands are submitted from
a user that the web application trusts.</p>
</blockquote>
<p><code>CSRF</code> is something to be aware of and to watch out for.
<a href="https://owasp.org/www-community/attacks/csrf">OWASP</a> has some additional
resources on it.</p>]]></content:encoded></item><item><title>What is my IP?</title><link>https://thiagowfx.github.io/2022/02/what-is-my-ip/</link><pubDate>Sat, 26 Feb 2022 17:55:38 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/what-is-my-ip/</guid><description>&lt;p>This post contains a small handful of distinct services to query your machine
external IP address.&lt;/p></description><content:encoded><![CDATA[<p>This post contains a small handful of distinct services to query your machine
external IP address.</p>
<h2 id="googlehttpswwwgooglecomsearchqwhatismyip"><a href="https://www.google.com/search?q=what+is+my+ip">Google</a></h2>
<p>URL: <a href="https://www.google.com/search?q=what+is+my+ip">https://www.google.com/search?q=what+is+my+ip</a></p>
<p>As of this writing, this doesn&rsquo;t work on duckduckgo:
<a href="https://duckduckgo.com/?q=what+is+my+ip">https://duckduckgo.com/?q=what+is+my+ip</a>. I suppose this is related to their
philosophy of not tracking their users.</p>
<p>This is the easiest method when you have a web browser as you do not need to
memorize any URL.</p>
<h2 id="i-can-haz-iphttpsicanhazipcom"><a href="https://icanhazip.com/">I can haz ip</a></h2>
<p>URL: <a href="https://icanhazip.com/">https://icanhazip.com/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl icanhazip.com
</span></span><span style="display:flex;"><span>NNN.NNN.NNN.NNN
</span></span></code></pre></div><p>I love the simplicity of <em>I can haz ip</em>. It just returns your IP address in
plain text, nothing else. It also works from the web browser. You can find
details about it <a href="https://major.io/icanhazip-com-faq/">here</a>. <strong>TL;DR</strong>: It was
an <a href="https://github.com/major/icanhaz">open source</a> pet project of a single
person (<a href="https://major.io/">Major Hayden</a>), then it was eventually bought by
Cloudflare as it immensely grew.</p>
<p>It&rsquo;s also possible to query your IPv6 address <a href="https://apenwarr.ca/log/20170810">in case you have
one</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl -6 icanhazip.com
</span></span></code></pre></div><h2 id="ipinfohttpsipinfoio"><a href="https://ipinfo.io/">IPInfo</a></h2>
<p>URL: <a href="https://ipinfo.io/">https://ipinfo.io/</a></p>
<p>IPInfo returns structured data beyond just your IP address. There are several
similar services that do this, for example, <a href="https://www.whatismyip.com/">What is my
IP?</a>, however IPInfo is the cleanest one I have
seen.</p>
<h2 id="pingeuhttpspingeu"><a href="https://ping.eu/">ping.eu</a></h2>
<p>URL: <a href="https://ping.eu/">https://ping.eu/</a></p>
<p>I&rsquo;ll also give an honourable mention to ping.eu as it contains a small handful
of utilities to check for things like Traceroute, DNS, whois, port check, etc.</p>]]></content:encoded></item><item><title>Screenshot a web page from within chrome devtools</title><link>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</link><pubDate>Sat, 19 Feb 2022 22:43:59 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</guid><description>&lt;p>Suppose you want to take a screenshot from a web page, maybe to add to a &lt;a href="https://github.com/miniflux/v2/pull/1341">pull
request&lt;/a> of a project you&amp;rsquo;re working
on.&lt;/p>
&lt;p>(i) The straightforward way to do so is to use your OS tool:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Windows&lt;/strong>: &lt;a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool&lt;/a>
or hit the &lt;em>PrintScreen&lt;/em> key&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>: &lt;a href="">&lt;code>scrot&lt;/code>&lt;/a> or something from your Desktop Environment (DE) such as
&lt;code>xfce4-screenshooter&lt;/code>. For a full-featured one, I&amp;rsquo;d recommend
&lt;a href="https://flameshot.org/">&lt;code>flameshot&lt;/code>&lt;/a> (first) or
&lt;a href="https://shutter-project.org/">&lt;code>shutter&lt;/code>&lt;/a> (second). For Wayland people seem
to like &lt;a href="https://wayland.emersion.fr/grim/">&lt;code>grim&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;strong>macOS&lt;/strong>: Hit &lt;code>Cmd + Shift + 4&lt;/code> or one of its
&lt;a href="https://support.apple.com/en-ca/HT201361">variations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Even &lt;a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks&lt;/a>
have a way to do so these days.&lt;/p>
&lt;p>However, maybe you didn&amp;rsquo;t know you can also use &lt;a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome&lt;/a> to take screenshots! Here&amp;rsquo;s how:&lt;/p>
&lt;ul>
&lt;li>Go to the page you want to screenshot.&lt;/li>
&lt;li>Open DevTools (&lt;code>Ctrl + Shift + J&lt;/code> on Linux).&lt;/li>
&lt;li>Hit &lt;code>Ctrl + Shift + P&lt;/code> à la VSCode to pop up a command bar, type &amp;lsquo;screenshot&amp;rsquo;.&lt;/li>
&lt;li>Choose one option. I like the &amp;lsquo;Capture area screenshot&amp;rsquo; one which allows me to drag a square for the area I want to capture.&lt;/li>
&lt;li>Hit &lt;code>Enter&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>You will then be prompted where you want to save your screenshot. Profit!&lt;/p></description><content:encoded><![CDATA[<p>Suppose you want to take a screenshot from a web page, maybe to add to a <a href="https://github.com/miniflux/v2/pull/1341">pull
request</a> of a project you&rsquo;re working
on.</p>
<p>(i) The straightforward way to do so is to use your OS tool:</p>
<ul>
<li><strong>Windows</strong>: <a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool</a>
or hit the <em>PrintScreen</em> key</li>
<li><strong>Linux</strong>: <a href=""><code>scrot</code></a> or something from your Desktop Environment (DE) such as
<code>xfce4-screenshooter</code>. For a full-featured one, I&rsquo;d recommend
<a href="https://flameshot.org/"><code>flameshot</code></a> (first) or
<a href="https://shutter-project.org/"><code>shutter</code></a> (second). For Wayland people seem
to like <a href="https://wayland.emersion.fr/grim/"><code>grim</code></a>.</li>
<li><strong>macOS</strong>: Hit <code>Cmd + Shift + 4</code> or one of its
<a href="https://support.apple.com/en-ca/HT201361">variations</a>.</li>
</ul>
<p>Even <a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks</a>
have a way to do so these days.</p>
<p>However, maybe you didn&rsquo;t know you can also use <a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome</a> to take screenshots! Here&rsquo;s how:</p>
<ul>
<li>Go to the page you want to screenshot.</li>
<li>Open DevTools (<code>Ctrl + Shift + J</code> on Linux).</li>
<li>Hit <code>Ctrl + Shift + P</code> à la VSCode to pop up a command bar, type &lsquo;screenshot&rsquo;.</li>
<li>Choose one option. I like the &lsquo;Capture area screenshot&rsquo; one which allows me to drag a square for the area I want to capture.</li>
<li>Hit <code>Enter</code>.</li>
</ul>
<p>You will then be prompted where you want to save your screenshot. Profit!</p>]]></content:encoded></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>I am currently evaluating <a href="https://nixos.org/download.html">Nix</a> as a
replacement for <a href="https://brew.sh">Homebrew</a> CLI apps in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
<a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others</a>
<a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have</a>
<a href="https://ghedam.at/15490/so-tell-me-about-nix">previously</a> written about this.</p>
<p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &hellip;). The good news is that those components
are for the most part modular, there&rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.</p>
<p>For now, I am only adopting <code>nix-env</code> and <code>nix-shell</code>, with no <code>*.nix</code> config
files. This post covers <code>nix-env</code>.</p>
<p>For simplicity, think of <code>nix-env</code> as a package manager, akin to <code>apk</code>,
<code>pacman</code>, <code>brew</code>, <code>apt</code>, <code>pkg</code>, etc.</p>
<h2 id="install-a-package">Install a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i moreutils
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>I see some guides using <code>nix-env -iA</code> but <code>-i</code> seems to suffice. We could
optionally specify the <code>nixpkgs.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i nixpkgs.moreutils
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;nixpkgs.moreutils&#39;</span> matches no derivations
</span></span></code></pre></div><p>Oh no! Maybe that&rsquo;s what the <code>-A</code> is for?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -iA nixpkgs.moreutils
</span></span><span style="display:flex;"><span>replacing old <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span></code></pre></div><p>Indeed! Apparently that <code>-A</code> thing stands for attribute. The only thing I know
is that there are both <code>nixpkgs.*</code> and <code>nixos.*</code>. But I don&rsquo;t care about NixOS
at this point. I&rsquo;ll just ignore <code>-A</code> from now on, for the time being.</p>
<h2 id="list-installed-packages">List installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span></code></pre></div><p>Easy! This actually gets displayed in my <code>less</code> pager.</p>
<h2 id="upgrade-installed-packages">Upgrade installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -u
</span></span></code></pre></div><p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&rsquo;s some update to one of my
installed CLI applications. I&rsquo;ve heard there&rsquo;s something called nix channel to
control that. Leaving it for another day though.</p>
<p><strong>Update(2022-02-18)</strong>: I learned that <code>nix-env -u</code> is akin to <code>apt upgrade</code> or
<code>apk upgrade</code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
<code>apt update</code> or <code>apk update</code>, use <code>nix-channel --update</code>.</p>
<p><strong>Note</strong>: On macOS this needs to be <code>sudo -i nix-channel --update</code>. See
<a href="https://github.com/NixOS/nix/issues/3595">issue</a>.</p>
<h2 id="uninstall-a-package">Uninstall a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env --uninstall moreutils
</span></span><span style="display:flex;"><span>uninstalling <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>Easy!</p>
<h2 id="search-for-packages">Search for packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP <span style="color:#e6db74">&#39;.*moreutils.*&#39;</span>
</span></span></code></pre></div><p>The <code>.*</code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &lsquo;derivation&rsquo; in Nix):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutils
</span></span><span style="display:flex;"><span>nixpkgs.moreutils  moreutils-0.67
</span></span></code></pre></div><p>If I write the wrong package name, the following happens:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutil
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;moreutil&#39;</span> matches no derivations, maybe you meant:
</span></span><span style="display:flex;"><span>       moreutils
</span></span></code></pre></div><p>It was helpful in this case, but I wouldn&rsquo;t always count on that. It is a bit
annoying that there&rsquo;s no <code>nix search moreutils</code> command, but it seems that
<code>nix-env</code> is very heavily tailored to use short flags, just like <code>pacman</code> in
Arch Linux. I got used to <code>pacman</code>, hopefully I can get used to the <code>nix-env</code>
short flags at some point.</p>
<p>Actually I tried it out and there is a <code>nix search</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix search moreutils
</span></span><span style="display:flex;"><span>error: experimental Nix feature <span style="color:#e6db74">&#39;nix-command&#39;</span> is disabled; use <span style="color:#e6db74">&#39;--extra-experimental-features nix-command&#39;</span> to override
</span></span></code></pre></div><p>This isn&rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the <code>nix-env</code> form for now.</p>
<p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>atool-0.39.0
</span></span><span style="display:flex;"><span>bash-interactive-5.1-p12
</span></span><span style="display:flex;"><span>coreutils-9.0
</span></span><span style="display:flex;"><span>exa-0.10.1
</span></span><span style="display:flex;"><span>fpp-0.9.2
</span></span><span style="display:flex;"><span>fzf-0.29.0
</span></span><span style="display:flex;"><span>git-2.34.1
</span></span><span style="display:flex;"><span>htop-3.1.2
</span></span><span style="display:flex;"><span>hugo-0.92.0
</span></span><span style="display:flex;"><span>jq-1.6
</span></span><span style="display:flex;"><span>less-600
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span><span style="display:flex;"><span>ncdu-1.16
</span></span><span style="display:flex;"><span>perl5.34.0-ack-3.5.0
</span></span><span style="display:flex;"><span>ranger-1.9.3
</span></span><span style="display:flex;"><span>stow-2.3.1
</span></span><span style="display:flex;"><span>tmux-3.2a
</span></span><span style="display:flex;"><span>tree-1.8.0
</span></span><span style="display:flex;"><span>vim-8.2.4186
</span></span><span style="display:flex;"><span>watch-procps-3.3.16
</span></span><span style="display:flex;"><span>wget-1.21.2
</span></span><span style="display:flex;"><span>zoxide-0.8.0
</span></span></code></pre></div><p>Those were very intuitive to find, with the exception of <code>ack</code> and <code>bash-interactive</code>:</p>
<ul>
<li><code>bash</code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
<code>~/.bashrc</code> wrecked havoc with the non-interactive version.</li>
<li><code>ack</code> is very oddly named. Really. Also: <code>nix-env -i ack</code> doesn&rsquo;t work, but
<code>nix-env -iA nixpkgs.ack</code> does. I suspect it will be hard to ignore <code>-A</code> in
the future.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking there&rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, <a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu</a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ SSH plus tmux automatically</title><link>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description><content:encoded><![CDATA[<p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.</p>
<p>To persist those connections, a terminal multiplexer is often used, <code>tmux</code> and <code>screen</code> being the two most popular ones.</p>
<p>In this post I will cover a few different client-side and server-side ways to have <code>ssh</code> automatically spawn <code>tmux</code> upon connection.</p>
<h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)</h2>
<p>Start <code>tmux</code>, forcing unicode, attaching to and/or creating a session named <em>main</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- tmux -u new -A -s main
</span></span></code></pre></div><p><code>-u</code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&rsquo;s safer to always include <code>-u</code> just in case.</p>
<p>Tip: If it&rsquo;s annoying to remember to type the full command above, consider adding an <code>alias</code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the <a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell</a> extension.</p>
<h2 id="option-2-use-sshconfig-client-side">Option #2: Use <code>~/.ssh/config</code> (client-side)</h2>
<p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.ssh/config
</span></span><span style="display:flex;"><span>Host *
</span></span><span style="display:flex;"><span>  RequestTTY yes
</span></span><span style="display:flex;"><span>  RemoteCommand tmux -u new -A -s main
</span></span></code></pre></div><p>You don&rsquo;t need to match all hosts (<code>Host *</code>), if you&rsquo;d rather match one or more specific hosts, refer to the ssh config syntax <code>ssh_config(5)</code> to add them. A simple example would be <code>Host mymachine.example.org</code>.</p>
<p><strong>Caveat</strong>: I&rsquo;ve found this method interferes with <code>git</code> + <code>ssh</code> authentication. More specifically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git remote -v
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ git push
</span></span><span style="display:flex;"><span>Cannot execute command-line and remote command.
</span></span><span style="display:flex;"><span>fatal: Could not read from remote repository.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please make sure you have the correct access rights
</span></span><span style="display:flex;"><span>and the repository exists.
</span></span></code></pre></div><p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&rsquo;t use it with <code>Host *</code>.</p>
<h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use <code>~/.bash_profile</code> or similar (server-side, recommended)</h2>
<p>This method leverages your login shell startup config file (<code>~/.bash_profile</code>, <code>~/.zprofile</code>, etc) to automatically spawn <code>tmux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.</span>
</span></span><span style="display:flex;"><span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The session is called `main`.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Escape hatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ssh &lt;host&gt; -t -- NOTMUX=1 &lt;shell&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$NOTMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$TMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$SSH_TTY<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> $- <span style="color:#f92672">=</span>~ i <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  tmux -u new -A -s main
</span></span><span style="display:flex;"><span>  exit
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The <code>if</code> basically checks:</p>
<ul>
<li>whether we&rsquo;re not already inside a tmux session (we shouldn&rsquo;t be), so that we don&rsquo;t nest <code>tmux</code></li>
<li>whether we&rsquo;re accessing the shell via <code>ssh</code> (we should be)</li>
<li>whether we&rsquo;re accessing an interactive shell (we should be), so that it doesn&rsquo;t interefere with oneshot <code>ssh</code> commands</li>
</ul>
<p>There&rsquo;s also a escape hatch. If you want to get an interactive shell but bypass <code>tmux</code> for some reason<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, just set <code>NOTMUX=1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- NOTMUX<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> bash
</span></span></code></pre></div><h2 id="final-remarks">Final remarks</h2>
<p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn <code>tmux</code> server-side, or selectively spawn <code>tmux</code> client-side.</p>
<p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your <code>ssh</code> host settings. That said, in scenarios where I fully control a host and it&rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, maybe if <code>tmux</code> broke due to a recent upgrade, or if the <code>~/.tmux.conf</code> is invalid.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Python: interactive completion</title><link>https://thiagowfx.github.io/2022/02/python-interactive-completion/</link><pubDate>Sat, 12 Feb 2022 23:11:44 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/python-interactive-completion/</guid><description>&lt;p>Sometimes I fire up a &lt;code>python&lt;/code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.&lt;/p>
&lt;p>For example, how should I invoke &lt;code>subprocess.call&lt;/code>?&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I fire up a <code>python</code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.</p>
<p>For example, how should I invoke <code>subprocess.call</code>?</p>
<p>The most straightforward action at this point is to simply <a href="https://www.google.com/search?q=python+subprocess.call">google
it</a>, no shame. The first result helpfully redirects me to the official python <a href="https://docs.python.org/3/library/subprocess.html">documentation</a>, as one would expect.</p>
<p>From the documentation, I&rsquo;d run something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-al&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span></code></pre></div><p>What if I wanted to figure out the correct way to do so from the command line though?</p>
<h2 id="bpython">bpython</h2>
<p>Enter <a href="https://bpython-interpreter.org/"><code>bpython</code></a>:</p>
<blockquote>
<p><code>bpython</code> is a fancy interface to the Python interpreter for Linux, BSD, OS X and Windows (with some work). bpython is released under the MIT License. It has the following (special) features:</p>
</blockquote>
<p>It should be available in your favorite linux distribution. Once it&rsquo;s installed, a typical session would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> bpython
</span></span><span style="display:flex;"><span>bpython version <span style="color:#ae81ff">0.22.1</span> on top of Python <span style="color:#ae81ff">3.10.2</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>python
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>call: (<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> call                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>                                       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])                                                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>To see all <code>Popen</code> arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>Popen(
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>Popen: (args, bufsize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, executable<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdin<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stderr<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, preexec_fn<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, close_fds<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, shell<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, cwd<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, env<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> universal_newlines<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, startupinfo<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, creationflags<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, restore_signals<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,    <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> start_new_session<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, pass_fds<span style="color:#f92672">=</span>(), <span style="color:#f92672">*</span>, user<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, group<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, extra_groups<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> encoding<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, errors<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, umask<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, pipesize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>)                        <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Popen                                                                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Execute a child program <span style="color:#f92672">in</span> a new process<span style="color:#f92672">.</span>                                            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> For a complete description of the arguments see the Python documentation<span style="color:#f92672">.</span>            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Arguments:                                                                           <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   args: A string, <span style="color:#f92672">or</span> a sequence of program arguments<span style="color:#f92672">.</span>                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># output truncated for brevity; bpython displays it all</span>
</span></span></code></pre></div><p>As you can see, it wouldn&rsquo;t be difficult to have a rough idea of which
arguments are available and what they do.</p>
<p>I could keep going:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>run([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> args               check_returncode   returncode         stderr                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stdout                                                                               <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>args<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> append         clear          copy           count          extend                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> index          insert         pop            remove         reverse                  <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> sort                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>Out-of-the-box it also displays autosuggestions based on the history of my previous commands<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It also supports python 3. For the full list of features, refer to <a href="https://bpython-interpreter.org/">https://bpython-interpreter.org/</a>.</p>
<h2 id="ipython">ipython</h2>
<p>Alternatively <a href="https://ipython.org/"><code>ipython</code></a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> is comparable to <code>bpython</code>, however I find it a bit less user-friendly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>iPython <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>             builtins           contextlib         io                 select             threading
</span></span><span style="display:flex;"><span>             call()             DEVNULL            list2cmdline()     selectors          time
</span></span><span style="display:flex;"><span>             CalledProcessError errno              os                 signal             TimeoutExpired
</span></span><span style="display:flex;"><span>             check_call()       fcntl              PIPE               STDOUT             types
</span></span><span style="display:flex;"><span>             check_output()     getoutput()        Popen              SubprocessError    warnings
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call(
</span></span><span style="display:flex;"><span>  abs()                     <span style="color:#66d9ef">False</span>                     <span style="color:#a6e22e">ModuleNotFoundError</span>       <span style="color:#a6e22e">SystemError</span>
</span></span><span style="display:flex;"><span>  all()                     <span style="color:#a6e22e">FileExistsError</span>           <span style="color:#a6e22e">NameError</span>                 <span style="color:#a6e22e">SystemExit</span>
</span></span><span style="display:flex;"><span>  any()                     <span style="color:#a6e22e">FileNotFoundError</span>         next()                    <span style="color:#a6e22e">TabError</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ArithmeticError</span>           filter()                  <span style="color:#66d9ef">None</span>                      timeout<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  ascii()                   float                     <span style="color:#a6e22e">NotADirectoryError</span>        <span style="color:#a6e22e">TimeoutError</span>
</span></span></code></pre></div><p>The tab completion after <code>call(</code> doesn&rsquo;t display the documentation for it. However, appending a <code>?</code> works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>Python <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call<span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span>Signature: subprocess<span style="color:#f92672">.</span>call(<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>Docstring:
</span></span><span style="display:flex;"><span>Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>
</span></span><span style="display:flex;"><span>timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])
</span></span><span style="display:flex;"><span>File:      <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>python3<span style="color:#ae81ff">.10</span><span style="color:#f92672">/</span>subprocess<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>Type:      function
</span></span></code></pre></div><p>Furthermore, <code>subprocess.Popen?</code> opens a pager with the documentation for the method.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Both <code>bpython</code> and <code>ipython</code> are excellent tools to enhance the user experience
within the python interpreter, being great for quick prototyping,
experimentation or exploration. <code>bpython</code> seems a bit more user-friendly and
intuitive upon first usage, <code>ipython</code> takes a bit getting used to.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://fishshell.com/"><code>fish</code></a> shell and <a href="https://github.com/zsh-users/zsh-autosuggestions"><code>zsh-autosuggestions</code></a> users should know what I&rsquo;m talking about.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>ipython</code> has been around for longer and these days there&rsquo;s the whole Jupyter Notebook ecosystem around it.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>nix-shell in a nutshell</title><link>https://thiagowfx.github.io/2022/02/nix-shell-in-a-nutshell/</link><pubDate>Thu, 10 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/nix-shell-in-a-nutshell/</guid><description>&lt;p>As soon as we finish installing &lt;a href="https://nixos.org/download.html">&lt;code>Nix&lt;/code>&lt;/a> on
Darwin, we&amp;rsquo;re greeted with a call to action:&lt;/p>
&lt;pre tabindex="0">&lt;code>Alright! We&amp;#39;re done!
Try it! Open a new terminal, and type:
$ nix-shell -p nix-info --run &amp;#34;nix-info -m&amp;#34;
Thank you for using this installer. If you have any feedback or need
help, don&amp;#39;t hesitate:
You can open an issue at https://github.com/nixos/nix/issues
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>As soon as we finish installing <a href="https://nixos.org/download.html"><code>Nix</code></a> on
Darwin, we&rsquo;re greeted with a call to action:</p>
<pre tabindex="0"><code>Alright! We&#39;re done!
Try it! Open a new terminal, and type:

  $ nix-shell -p nix-info --run &#34;nix-info -m&#34;

Thank you for using this installer. If you have any feedback or need
help, don&#39;t hesitate:

You can open an issue at https://github.com/nixos/nix/issues
</code></pre><h2 id="hello-world-bloated">Hello world (bloated)</h2>
<p>All right then, let&rsquo;s do it!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p nix-info --run <span style="color:#e6db74">&#34;nix-info -m&#34;</span>
</span></span><span style="display:flex;"><span> - system: <span style="color:#e6db74">`</span><span style="color:#e6db74">&#34;aarch64-darwin&#34;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - host os: <span style="color:#e6db74">`</span>Darwin 21.3.0, macOS 12.2<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - multi-user?: <span style="color:#e6db74">`</span>yes<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - sandbox: <span style="color:#e6db74">`</span>no<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - version: <span style="color:#e6db74">`</span>nix-env <span style="color:#f92672">(</span>Nix<span style="color:#f92672">)</span> 2.6.0<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - channels<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>: <span style="color:#e6db74">`</span><span style="color:#e6db74">&#34;nixpkgs&#34;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - nixpkgs: <span style="color:#e6db74">`</span>/nix/var/nix/profiles/per-user/root/channels/nixpkgs<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>Cool, it works. Let&rsquo;s break it down a bit.</p>
<h2 id="hello-world-classic">Hello world (classic)</h2>
<p>Nix shell creates an ephemeral shell environment with the customizations you
want. The most basic customization is to make a given set of packages
available. There&rsquo;s a <code>hello</code> package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p hello
</span></span><span style="display:flex;"><span>$ hello
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>In case you&rsquo;re curious, this is a GNU binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ hello --version
</span></span><span style="display:flex;"><span>hello <span style="color:#f92672">(</span>GNU Hello<span style="color:#f92672">)</span> 2.10
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2014</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span></code></pre></div><p>I have no idea why they are in version 2.10 and what their changelog is. It&rsquo;s
such a simple binary&hellip;</p>
<p>If you exit the shell, <code>hello</code> seemingly vanishes:</p>
<pre tabindex="0"><code>$ exit
exit
$ hello
zsh: command not found: hello
</code></pre><p>An easy way to think of <code>nix-shell</code> is like an ephemeral sandbox where all your
desired packages are made available when you enter it. It&rsquo;s possible to provide
more than one package, naturally. It&rsquo;s also possible to provide a <code>shell.nix</code>
file with the package declarations, so that when you can <code>nix-shell</code> without
any arguments.</p>
<pre tabindex="0"><code>$ cat shell.nix
{ pkgs ? import &lt;nixpkgs&gt; {} }:
  pkgs.mkShell {
    # nativeBuildInputs is usually what you want -- tools you need to run
    nativeBuildInputs = [ pkgs.buildPackages.hello ];
}
$ nix-shell
$ hello
Hello, world!
</code></pre><h2 id="hello-world-oneshot">Hello world (oneshot)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p hello --run hello
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>This oneshot style doesn&rsquo;t enter the shell, it just runs the given <code>--run</code>
command and then exits.</p>
<p>This post just scratched the surface of what <code>nix-shell</code> can do. See the
references below for more in-depth guides about it.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cuddly-octo-palm-tree.com/posts/2021-12-19-tyska-nix-shell/">Tools You Should Know About: nix-shell</a></li>
<li><a href="https://ghedam.at/15978/an-introduction-to-nix-shell">An introduction to nix-shell</a></li>
<li><a href="https://nixos.org/manual/nix/stable/command-ref/nix-shell.html">NixOS manual: <code>nix-shell</code></a></li>
</ul>]]></content:encoded></item><item><title>Transfer bash history to zsh</title><link>https://thiagowfx.github.io/2022/02/transfer-bash-history-to-zsh/</link><pubDate>Fri, 04 Feb 2022 21:58:50 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/transfer-bash-history-to-zsh/</guid><description>&lt;p>After years of using &lt;code>bash&lt;/code> as my default interactive shell at $DAYJOB,
I decided to switch to &lt;code>zsh&lt;/code>. I didn&amp;rsquo;t want to start from scratch and lose all
my history though:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ wc -l ~/.bash_history | cut -f1 -d&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">64002&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus my goal was to first migrate all my history from &lt;code>bash&lt;/code> to &lt;code>zsh&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>After years of using <code>bash</code> as my default interactive shell at $DAYJOB,
I decided to switch to <code>zsh</code>. I didn&rsquo;t want to start from scratch and lose all
my history though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wc -l ~/.bash_history | cut -f1 -d<span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64002</span>
</span></span></code></pre></div><p>Thus my goal was to first migrate all my history from <code>bash</code> to <code>zsh</code>.</p>
<p>The <code>bash-to-zsh-hist.py</code> python script in this
<a href="https://gist.github.com/muendelezaji/c14722ab66b505a49861b8a74e52b274">gist</a>
did most of the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This is how I used it:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># $ cat ~/.bash_history | python bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    timestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>readlines():
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;#&#39;</span>) <span style="color:#f92672">and</span> timestamp <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            t <span style="color:#f92672">=</span> line[<span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> t<span style="color:#f92672">.</span>isdigit():
</span></span><span style="display:flex;"><span>                timestamp <span style="color:#f92672">=</span> t
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            sys<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">:0;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> (timestamp <span style="color:#f92672">or</span> time<span style="color:#f92672">.</span>time(), line))
</span></span><span style="display:flex;"><span>            timestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>To use it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wget https://gist.githubusercontent.com/muendelezaji/c14722ab66b505a49861b8a74e52b274/raw/49f0fb7f661bdf794742257f58950d209dd6cb62/bash-to-zsh-hist.py
</span></span><span style="display:flex;"><span>$ chmod +x ./bash-to-zsh-hist.py
</span></span><span style="display:flex;"><span>$ cat .bash_history | ./bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history
</span></span></code></pre></div><p>However, that didn&rsquo;t fully work. Upon running <code>zsh</code>, there was an error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ zsh
</span></span><span style="display:flex;"><span>zsh: corrupt history file /usr/local/google/home/tperrotta/.zsh_history
</span></span></code></pre></div><p>A quick google search led me to <a href="https://shapeshed.com/zsh-corrupt-history-file/">a blog post</a>. I adapted the command suggest therein<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ strings -eS .zsh_history | sponge .zsh_history
</span></span></code></pre></div><p>And that fixed the issue!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><code>sponge</code> comes from the <a href="https://joeyh.name/code/moreutils/">moreutils</a> package.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Watch files and react to changes during development</title><link>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p></description><content:encoded><![CDATA[<p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.</p>
<h2 id="context">Context</h2>
<p>I am contributing to <a href="https://github.com/miniflux/v2">miniflux</a>, a minimalist and opinionated RSS reader. Miniflux&rsquo;s stack is as minimalist as the app itself: It&rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive <a href="https://github.com/miniflux/v2/blob/master/Makefile"><code>Makefile</code></a>.</p>
<p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&rsquo;s needed is to execute <code>make run</code> whenever any<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> file in the repository is changed.</p>
<p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.</p>
<h2 id="option-1-entr-recommended">Option #1: entr (recommended)</h2>
<p><a href="https://eradman.com/entrproject/"><code>entr(1)</code></a>:</p>
<blockquote>
<p>Run arbitrary commands when files change</p>
</blockquote>
<p>The following invocation does the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd | entr -r -- make run
</span></span></code></pre></div><p>However, we could do better. From the upstream docs:</p>
<blockquote>
<p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git</p>
</blockquote>
<p>I am happy with <code>fd</code> for this use case though. To limit <code>entr</code> to <code>.go</code> files only, we could do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd -e go | entr -r -- make run
</span></span></code></pre></div><p>It took me less than 5 minutes to install and figure out how to use <code>entr</code>.</p>
<p><a href="https://schauderbasis.de/posts/entr/">This blog post</a> covers it in more detail.</p>
<h2 id="option-2-watchman">Option #2: watchman</h2>
<p><a href="https://facebook.github.io/watchman/"><code>watchman</code></a> from Facebook Open Source:</p>
<blockquote>
<p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.</p>
</blockquote>
<p>Watchman&rsquo;s workflow doesn&rsquo;t seem to be very suited for this job though. It&rsquo;s much more centered on subscribing to <code>inotify</code> events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;repository root&gt;
</span></span><span style="display:flex;"><span>watchman watch .
</span></span></code></pre></div><p>&hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># set up a trigger named &#39;buildme&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># will run &#39;minify-css&#39; whenever a CSS file is changed</span>
</span></span><span style="display:flex;"><span>watchman -- trigger . buildme <span style="color:#e6db74">&#39;*.css&#39;</span> -- minify-css
</span></span></code></pre></div><p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.</p>
<p>That said, for the simple use case of triggering (and reloading) <code>make run</code>, it seems overkill. I also found its <a href="https://facebook.github.io/watchman/docs/install.html">official docs</a> too verbose and lacking sample usages for simple <code>Makefile</code>-based projects like miniflux.</p>
<p>One caveat of <a href="https://repology.org/project/watchman/versions"><code>watchman</code></a> is that it&rsquo;s less widely available than <a href="https://repology.org/project/entr/versions"><code>entr</code></a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.</p>
<p>It took me several minutes to figure out what&rsquo;s the gist of watchman, only to realize it is more bloated than warranted.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For simple projects, <code>entr</code> is the way to go, hands down. For complex webdev projects, I would look into <code>watchman</code> more deeply.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To be truly strict, only changes to <code>.go</code> files matter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>ChromeOS hterm: customize fonts</title><link>https://thiagowfx.github.io/2022/01/chromeos-hterm-customize-fonts/</link><pubDate>Wed, 26 Jan 2022 19:48:52 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/chromeos-hterm-customize-fonts/</guid><description>&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">ChromeOS hterm&lt;/a> (&amp;ldquo;Secure Shell extension&amp;rdquo;) is one of my favorite chrome extensions.
It is a bit dull with its out-of-the-box monospace font though.
In this post we&amp;rsquo;ll learn how to customize it.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">ChromeOS hterm</a> (&ldquo;Secure Shell extension&rdquo;) is one of my favorite chrome extensions.
It is a bit dull with its out-of-the-box monospace font though.
In this post we&rsquo;ll learn how to customize it.</p>
<h2 id="google-fonts">Google Fonts</h2>
<p>The easiest way to customize the Secure Shell extension to use a custom font is to select one from <a href="https://fonts.google.com/">Google Fonts</a>.
Once you select a font from there, it will give you information like this:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">Use on the web
To embed a font, copy the code into the &lt;head&gt; of your html
( ) &lt;link&gt; (x) @import

&lt;style&gt;
@import url(&#39;https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;display=swap&#39;);
&lt;/style&gt;

font-family: &#39;IBM Plex Sans&#39;, sans-serif;
</code></pre><p>All we have to do is to copy the URL within the <code>url('...')</code> fragment above,
go to the <a href="chrome-extension://iodihamcpbpeioajjeobimgagajmlibd/html/nassh_preferences_editor.html">settings</a> of the Secure Shell extension,
and then paste it there:</p>
<pre tabindex="0"><code class="language-none" data-lang="none"># Example 1: IBM Plex Sans
Custom CSS (URI): https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;display=swap

# Example 2: Fira Code
Custom CSS (URI): https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&amp;display=swap

# Example 3: Combine both
https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&amp;family=IBM+Plex+Sans&amp;display=swap
</code></pre><p>And then set the extension to use it:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">Text font family: &#34;IBM Plex Sans&#34;, &#34;Fira Code&#34;, monospace
</code></pre><p>From Secure Shell <a href="https://chromium.googlesource.com/apps/libapps/+/master/nassh/doc/FAQ.md">FAQ</a>:</p>
<blockquote>
<p>By default, we disable ligatures. Some fonts actively enable them like macOS&rsquo;s Menlo (e.g. “ae” is rendered as “æ”). This messes up copying and pasting and is, arguably, not terribly legible for a terminal.</p>
</blockquote>
<p>If your font supports <a href="https://en.wikipedia.org/wiki/Ligature_(writing)">ligatures</a>, consider enabling them:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">Custom CSS (inline text):

* {
    -webkit-font-feature-settings: &#34;liga&#34; on, &#34;calt&#34; on;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
}
</code></pre><p>Not all fonts are available on Google Fonts though.
For example, <a href="https://pcaro.es/p/hermit/">Hermit</a> is one of my current monospace favorites: it&rsquo;s not there<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="github">Github</h2>
<p>Many fonts are available on GitHub (or in other forges), checked into a git repository.</p>
<p>If you happen to find a <code>.woff2</code> web font file laying therein, you could also use it in hterm:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">Custom CSS (inline text):

@font-face {
  font-family: &#34;Anonymous Pro&#34;;
  src: url(https://cdn.rawgit.com/wernight/powerline-web-fonts/8040cf32c146c7cd4f776c1484d23dc40685c1bc/fonts/AnonymousPro.woff2);
}
</code></pre><p>And then set the extension to use it:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">Text font family: &#34;Anonymous Pro&#34;, monospace
</code></pre><p><strong>Note</strong>: I couldn&rsquo;t get this method to work with <code>.ttf</code> or <code>.otf</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/pcaro90/hermit/issues/2">https://github.com/pcaro90/hermit/issues/2</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Alpine Linux: New APKBUILD Workflow</title><link>https://thiagowfx.github.io/2022/01/alpine-linux-new-apkbuild-workflow/</link><pubDate>Sun, 23 Jan 2022 19:15:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/alpine-linux-new-apkbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>APKBUILDs&lt;/code> for the
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository in &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>This document describes my workflow to manage <code>APKBUILDs</code> for the
<a href="https://gitlab.alpinelinux.org/alpine/aports">aports</a> repository in <a href="https://alpinelinux.org/">Alpine Linux</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>First of all, this post is not a substitute to the <a href="https://wiki.alpinelinux.org/wiki/Main_Page">AlpineWiki</a>
and it will likely get outdated at some point. In particular, refer to the
following articles for up-to-date documentation that will outlive this blog:</p>
<ul>
<li><a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers">https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Aports_tree">https://wiki.alpinelinux.org/wiki/Aports_tree</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package</a></li>
</ul>
<p>This article is not a tutorial, as such it assumes you already know what an
<code>APKBUILD</code> is and how to use <code>abuild</code>. In particular, you should have the
<code>alpine-sdk</code>, <code>atools</code> and <code>spdx-licenses-list</code> packages installed in your
system.</p>
<h2 id="structure">Structure</h2>
<p>I manage my packages with <code>git</code>. Create a GitLab account on
<a href="https://gitlab.alpinelinux.org/">https://gitlab.alpinelinux.org/</a>, fork the <a href="https://gitlab.alpinelinux.org/alpine/aports"><code>aports</code></a> tree, and <code>git clone</code> your fork.</p>
<p>The structure follows Alpine Linux repositories:</p>
<pre tabindex="0"><code>$ git clone https://gitlab.alpinelinux.org/alpine/aports.git &amp;&amp; tree -L 1 aports
aports
├── CODINGSTYLE.md
├── COMMITSTYLE.md
├── README.md
├── community
├── main
├── non-free
├── scripts
├── testing
└── unmaintained
</code></pre><h2 id="bootstrapping">Bootstrapping</h2>
<p>I am going to illustrate with a package I added recently, <a href="https://packages.debian.org/source/sensible-utils"><code>sensible-utils</code></a>:</p>
<ul>
<li>
<p>Before you even begin, check if the package already exists, do a quick search in the <a href="https://pkgs.alpinelinux.org/packages?name=sensible%2Dutils">Alpine Repositories</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
</li>
<li>
<p>Start by scaffolding a new <code>APKBUILD</code> from the base template:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cd aports/testing  <span style="color:#75715e"># Always add new packages in testing/ first.</span>
</span></span><span style="display:flex;"><span>$ newapkbuild sensible-utils
</span></span><span style="display:flex;"><span>$ cd sensible-utils
</span></span><span style="display:flex;"><span>$ $EDITOR APKBUILD
</span></span></code></pre></div><p><strong>Note</strong>: If you have a language-specific package (e.g. perl, python, rust),
use the language-specific template instead of the base one. Run <code>newapkbuild -h</code> to list available templates. There are also some <code>apkbuild-*</code> helpers such
as <code>apkbuild-pypi</code> and <code>apkbuild-cpan</code>.</p>
<ul>
<li>
<p>Fill in <code>APKBUILD</code> metadata like <code>pkgname=</code>, <code>url=</code>, etc. Refer to the AlpineWiki for up-to-date best practices.</p>
</li>
<li>
<p>By doing so, I produced the following <code>APKBUILD</code>:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>sensible-utils
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.0.14
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Utilities for sensible alternative selection&#34;</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://packages.debian.org/source/sensible-utils&#34;</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GPL-2.0-or-later&#34;</span>
</span></span><span style="display:flex;"><span>makedepends<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;po4a&#34;</span>
</span></span><span style="display:flex;"><span>subpackages<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-doc&#34;</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://ftp.debian.org/debian/pool/main/s/</span>$pkgname<span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>pkgname<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span>$pkgver<span style="color:#e6db74">.tar.xz&#34;</span>
</span></span><span style="display:flex;"><span>builddir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">.git&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>build<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	./configure --prefix<span style="color:#f92672">=</span>/usr
</span></span><span style="display:flex;"><span>	make
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>check<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	make -k check
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	make DESTDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/&#34;</span> install
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># only works with update-alternatives, specific to debian</span>
</span></span><span style="display:flex;"><span>	rm <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin/select-editor&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sha512sums<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">15ba996f811ab3a9c1f5726f35766d74aafdf925c5c2392b33c6643d6c439796a742f9d0f4625c79de640e6b5e4a6a032b768eb1bc4ac31b448f9767b0ceed44  sensible-utils_0.0.14.tar.xz
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p><strong>Note</strong>: <code>$srcdir</code> refers to the <code>src/</code> directory within <code>sensible-utils</code>. <code>$pkgdir</code>
refers to the <code>pkg/</code> directory within <code>sensible-utils</code>.</p>
<p>If you&rsquo;re used to Arch Linux <code>PKGBUILDs</code> you&rsquo;ll notice a striking similarity to
<code>APKBUILDs</code>. I highlighted a few notable differences in a previous post, <a href="https://thiagowfx.github.io/2022/01/my-first-apkbuild/#build-comparison"><code>My First APKBUILD</code></a>.</p>
<h2 id="adjustments">Adjustments</h2>
<ul>
<li>
<p>Generate the checksums with <code>abuild checksum</code>. It will automatically update the <code>APKBUILD</code> inplace.</p>
</li>
<li>
<p>Download and extract package files with <code>abuild unpack</code>.</p>
</li>
<li>
<p><code>ls src/</code> and check the directory structure. Update <code>$builddir</code> in your
<code>APKBUILD</code> to match it. Usually it will be <code>$srcdir/$pkgname-$pkgver</code>, but
sometimes tiny adjustments are necessary. In this case, it was
<code>$srcdir/$pkgname.git</code>.</p>
</li>
<li>
<p>Then run <code>abuild -r</code>. If everything goes well, your package (and subpackages,
if any) will be successfully built<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in an isolated environment and placed
in <code>~/packages</code> (<code>sensible-utils-0.0.14-r0.apk</code> and
<code>sensible-utils-doc-0.0.14-r0.apk</code>), however that doesn&rsquo;t mean it is a decent
package yet.</p>
</li>
<li>
<p>Run <code>apkbuild-lint APKBUILD</code> and <code>abuild sanitycheck</code> to lint your package
and catch common errors. Fix the errors, if any.</p>
</li>
</ul>
<h2 id="request-feedback-if-needed">Request feedback if needed</h2>
<p>If the package is only relevant to you, stop here. <code>git commit</code>, <code>git push</code>, and then you&rsquo;re done. Install the package with <code>doas apk add &lt;pkg&gt;</code>.</p>
<p>Otherwise, if the package might be potentially useful to other Alpine users, you could consider uploading it to the <a href="https://gitlab.alpinelinux.org/alpine/aports">aports</a> repository.</p>
<p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&rsquo;t need to be positive, it&rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.</p>
<p>If the answer is negative, or if you&rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:</p>
<ol>
<li>
<p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:IRC"><code>#alpine-devel</code> on OFTC IRC</a> Drew DeVault wrote a good <a href="https://drewdevault.com/2021/11/24/A-philosophy-for-instant-messaging.html">post</a> about IRC etiquette.</p>
</li>
<li>
<p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:Mailing_lists"><code>alpine-devel</code> mailing list</a>.</p>
</li>
</ol>
<p>If you&rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.</p>
<h2 id="publish-your-package">Publish your package</h2>
<p>If all is well, it&rsquo;s time to publish your <code>APKBUILD</code>. Follow the up-to-date
steps at
<a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review</a>. There are basically two options:</p>
<ol>
<li>
<p>Send a gitlab merge request (MR). This follows the standard git forge workflow
(GitHub / BitBucket / GitLab) wherein you fork the main repository, create
a branch in your own clone, push it and then initiate a pull request<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
</li>
<li>
<p>Alternatively, send an email with your patch to the <code>aports</code> mailing list
with <a href="https://git-send-email.io/"><code>git send-email</code></a>:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git config sendemail.to <span style="color:#e6db74">&#34;alpine-aports@lists.alpinelinux.org&#34;</span>
</span></span><span style="display:flex;"><span>$ git send-email -1  <span style="color:#75715e"># Implicitly uses --to=alpine-linux@lists.alpinelinux.org as set above</span>
</span></span></code></pre></div><p><strong>Tip</strong>: The second approach has a steep learning curve, however once you
figure it out it&rsquo;s actually faster, simpler and more streamlined. Whenever
a new email is sent to the aports mailing list, a MR is automatically created
on GitLab.</p>
<p><strong>Note</strong>: If you adopt the email workflow and need to send a follow-up to your
initial patch, do not use <code>--in-reply-to</code>. Instead, create a new email thread.
This is needed because as of this post new GitLab MRs are only created when new
email threads are created. Replies to existing email threads do not update the
MR patch.</p>
<p>And that&rsquo;s all! Other useful tips:</p>
<ul>
<li>Use <a href="https://repology.org/">repology</a> to look for preexisting packages in other Linux (or even BSD) distributions, it&rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Arch Linux <code>PKGBUILDs</code> are very similar to <code>APKBUILDs</code>. Gentoo <code>EBUILDs</code> and FreeBSD <code>Makefiles</code> are also reasonable approximations.</li>
<li>Use <code>abump</code> to bump pkgver in <code>APKBUILD</code> files if the package gets an update to a newer upstream release.</li>
<li>Use <code>apkgrel</code> to bump or reset the <code>pkgrel</code> value of your <code>APKBUILD</code>.</li>
<li>Use <a href="https://thiagowfx.github.io/2022/01/arch-linux-new-pkgbuild-workflow/#bonus-track-upstream"><code>urlwatch</code></a> to track upstream updates.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you use <a href="https://duckduckgo.com/">https://duckduckgo.com/</a>, query for <code>!alpine sensible-utils</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Package debugging is out of scope of this post.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>In GitLab it&rsquo;s called Merge Request (MR). The list of all aports MRs is <a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests">here</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Git: Oops I forgot to add this thingy</title><link>https://thiagowfx.github.io/2022/01/git-oops-i-forgot-to-add-this-thingy/</link><pubDate>Fri, 21 Jan 2022 15:58:17 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/git-oops-i-forgot-to-add-this-thingy/</guid><description>&lt;p>Here&amp;rsquo;s a situation that happens often during development:&lt;/p>
&lt;p>Suppose you committed something to &lt;code>git&lt;/code>. A few commits later, you realized you
forgot to add something to that commit, or possibly missed a link, or even
spotted a typo. How do you go about fixing it?&lt;/p></description><content:encoded><![CDATA[<p>Here&rsquo;s a situation that happens often during development:</p>
<p>Suppose you committed something to <code>git</code>. A few commits later, you realized you
forgot to add something to that commit, or possibly missed a link, or even
spotted a typo. How do you go about fixing it?</p>
<h2 id="team">Team</h2>
<p>If you&rsquo;re working on a repository with a team, you should just <code>git commit</code> and <code>git push</code>. Write an <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">eloquent commit message</a> to refer to the previous commit in which you forgot to include your changes.</p>
<h2 id="self">Self</h2>
<p>Now, if you&rsquo;re working on a standalone repository, just for yourself<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, this
creates an opportunity to rewrite your history in a cleaner way. The workflow
is as follows:</p>
<ol>
<li>Make the changes or fixes you had originally forgot to.</li>
<li><code>git add</code> them.</li>
<li>Identify the commit id in which you originally wanted to make those changes. <code>git log</code> or <a href="https://jonas.github.io/tig/"><code>tig</code></a> are simple CLI-oriented ways to do so. Hereafter assume this id is <code>abcdef</code>.</li>
<li>Commit your changes while referencing the original commit and then rewrite history:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git commit --fixup<span style="color:#f92672">=</span>abcdef
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Then pick one of:</span>
</span></span><span style="display:flex;"><span>$ git rebase -i --root
</span></span><span style="display:flex;"><span>$ git rebase -i abcdef~1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># And then save the file as is.</span>
</span></span></code></pre></div><ol start="5">
<li>Double-check everything went as expected with <code>git log</code> and/or <code>git show</code> and/or <code>tig</code>.</li>
<li>If you&rsquo;re happy with the current state of your repository, commit the sin: <code>git push --force</code>.</li>
</ol>
<figure class="align-center "><a href="https://xkcd.com/1296/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/git_commit.png#center"
         alt="Merge branch &#39;asdfasjkfdlas/alkdjf&#39; into sdkjfls-final"/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<h2 id="references">References</h2>
<ul>
<li><code>tig</code>, in case you don&rsquo;t know:</li>
</ul>
<blockquote>
<p><a href="https://jonas.github.io/tig/"><code>tig</code></a> is an ncurses-based text-mode interface for git. It functions mainly as
a Git repository browser, but can also assist in staging changes for commit
at chunk level and act as a pager for output from various Git commands.</p>
</blockquote>
<ul>
<li><code>git rebase --root</code>: c.f. <a href="https://stackoverflow.com/a/23000315/1745064">Stack
Overflow</a>. This is just a lazy
way to make the rebase include <code>abcdef</code>. You could do something like <code>git rebase -i HEAD~10</code> where 10 is an arbitrary guess, but this will only work if
<code>abcdef</code> is within the most 10 recent commits. Alternatively <code>git rebase -i abcdef~1</code> also works.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example: your <a href="https://gitub.com/thiagowfx/.dotfiles">dotfiles</a>, or your personal blog.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Arch Linux: New PKGBUILD Workflow</title><link>https://thiagowfx.github.io/2022/01/arch-linux-new-pkgbuild-workflow/</link><pubDate>Tue, 18 Jan 2022 21:59:07 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/arch-linux-new-pkgbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>PKGBUILDs&lt;/code> for the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a> (Arch User Repository) in &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>This document describes my workflow to manage <code>PKGBUILDs</code> for the <a href="https://aur.archlinux.org/">AUR</a> (Arch User Repository) in <a href="https://www.archlinux.org/">Arch Linux</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>First of all, this post is not a substitute to the excellent <a href="https://wiki.archlinux.org/">ArchWiki</a> and it will likely get outdated at some point. In particular, refer to the following articles for up-to-date documentation that will outlive this blog:</p>
<ul>
<li><a href="https://wiki.archlinux.org/title/Arch_User_Repository">https://wiki.archlinux.org/title/Arch_User_Repository</a></li>
<li><a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines</a></li>
<li><a href="https://wiki.archlinux.org/title/Creating_packages">https://wiki.archlinux.org/title/Creating_packages</a></li>
<li><a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD</a></li>
</ul>
<p>This article is not a tutorial, as such it assumes you already know what a <code>PKGBUILD</code> is and how to use <code>makepkg</code>. In particular, you should have the <code>base-devel</code> and <code>devtools</code> packages installed in your system.</p>
<h2 id="structure">Structure</h2>
<p>I manage my packages with <code>git</code> plus Eli Schwartz&rsquo;s excellent
<a href="https://github.com/eli-schwartz/aurpublish">aurpublish</a>. The tree structure is simple, with one <code>PKGBUILD</code> per directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git clone https://github.com/thiagowfx/PKGBUILDs <span style="color:#f92672">&amp;&amp;</span> tree PKGBUILDs
</span></span><span style="display:flex;"><span>PKGBUILDs
</span></span><span style="display:flex;"><span>├── bkt
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── fpp-git
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── git-crecord
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── i3a
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── LICENSE
</span></span><span style="display:flex;"><span>├── Makefile
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── ttf-camingocode
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>└── urlwatch.yml
</span></span></code></pre></div><p><code>aurpublish</code> is used <em>solely</em> to automate certain interactions with the AUR, more about it later.</p>
<h2 id="bootstrapping">Bootstrapping</h2>
<p>I am going to illustrate with a package I added recently, <a href="https://github.com/dimo414/bkt"><code>bkt</code></a>:</p>
<ul>
<li>
<p>Before you even begin, check if the package already exists, do a quick search in the <a href="https://aur.archlinux.org/packages/?O=0&amp;K=bkt">AUR</a> and also in the <a href="https://archlinux.org/packages/?sort=&amp;q=bkt&amp;maintainer=&amp;flagged=">official repos</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
</li>
<li>
<p>Start by copying over the standard <code>PKGBUILD</code> template:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cd PKGBUILDs
</span></span><span style="display:flex;"><span>$ mkdir bkt <span style="color:#f92672">&amp;&amp;</span> cd bkt
</span></span><span style="display:flex;"><span>$ cp /usr/share/pacman/PKGBUILD.proto PKGBUILD
</span></span><span style="display:flex;"><span>$ $EDITOR PKGBUILD
</span></span></code></pre></div><ul>
<li>
<p>Fill in <code>PKGBUILD</code> metadata like <code>pkgname=</code>, <code>url=</code>, etc. Refer to the ArchWiki for up-to-date best practices.</p>
</li>
<li>
<p>The most important step is to refer to <a href="https://wiki.archlinux.org/title/Category:Arch_package_guidelines">https://wiki.archlinux.org/title/Category:Arch_package_guidelines</a> to figure out the package type.</p>
</li>
</ul>
<p><code>bkt</code> is a Rust package. This is my first time packaging for Rust, not a problem though, as I can just refer to <a href="https://wiki.archlinux.org/title/Rust_package_guidelines">https://wiki.archlinux.org/title/Rust_package_guidelines</a>.</p>
<p>The rust package guidelines page contains the blueprint for <code>prepare()</code>, <code>check()</code>, <code>build()</code> and <code>package()</code>. Packaging is mostly a matter of gluing everything together. Read the project <code>README.md</code> and the wiki, and then combine the needed steps in the <code>PKGBUILD</code>.</p>
<p>By doing so, I produced the following <code>PKGBUILD</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>bkt
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.5.0
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A subprocess caching utility&#34;</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;x86_64&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.bkt.rs/&#34;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;MIT&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>makedepends<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;cargo&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">.tar.gz::https://github.com/dimo414/</span>$pkgname<span style="color:#e6db74">/archive/refs/tags/</span>$pkgver<span style="color:#e6db74">.tar.gz&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>sha256sums<span style="color:#f92672">=()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prepare<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	cargo fetch --locked --target <span style="color:#e6db74">&#34;</span>$CARCH<span style="color:#e6db74">-unknown-linux-gnu&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>build<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export RUSTUP_TOOLCHAIN<span style="color:#f92672">=</span>stable
</span></span><span style="display:flex;"><span>	export CARGO_TARGET_DIR<span style="color:#f92672">=</span>target
</span></span><span style="display:flex;"><span>	cargo build --frozen --release --all-features
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>check<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export RUSTUP_TOOLCHAIN<span style="color:#f92672">=</span>stable
</span></span><span style="display:flex;"><span>	cargo test --frozen --all-features
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	install -Dm0755 -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin/&#34;</span> <span style="color:#e6db74">&#34;target/release/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	install -Dm644 LICENSE -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/licenses/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Note</strong>: <code>$srcdir</code> refers to the <code>src/</code> directory within <code>bkt</code>. <code>$pkgdir</code> refers to the <code>pkg/</code> directory within <code>bkt</code>.</p>
<h2 id="adjustments">Adjustments</h2>
<ul>
<li>
<p>Generate the checksums with <code>updpkgsums</code>. It will automatically update the <code>PKGBUILD</code> inplace.</p>
</li>
<li>
<p>Download and extract package files with <code>makepkg -o</code>.</p>
</li>
<li>
<p><code>ls src/</code> and check the directory structure. Update <code>cd</code> in your <code>PKGBUILD</code> to match it. Usually it will be <code>cd $srcdir/$pkgname-$pkgver</code>, but sometimes tiny adjustments are necessary.</p>
</li>
<li>
<p>Then run <code>makepkg -s</code>. If everything goes well, your package will be successfully built<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> (<code>bkt-0.5.0-1-x86_64.pkg.tar.zst</code>), however that doesn&rsquo;t mean it is a decent package yet.</p>
</li>
<li>
<p>Run <code>namcap PKGBUILD</code> and <code>namcap *.pkg.tar.zst</code> to lint your package and catch common errors. Fix the errors, if any.</p>
</li>
<li>
<p>To ensure all dependencies have been correctly declared and none of them are missing, run <code>makepkg</code> within a clean <a href="https://wiki.archlinux.org/title/Chroo"><em>chroot</em></a>. I like to use Graysky&rsquo;s excellent <a href="https://github.com/graysky2/clean-chroot-manager"><code>ccm</code></a> (Clean Chroot Manager) to do so. Run <code>ccm s</code> (=&ldquo;run makepkg in the clean chroot&rdquo;). If it produces any errors, it likely means you missed some dependencies. Adjust <code>depends=</code>, <code>checkdepends=</code> and <code>makedepends=</code> accordingly.</p>
</li>
</ul>
<h2 id="request-feedback-if-needed">Request feedback if needed</h2>
<p>If the package is only relevant to you, stop here. <code>git commit</code>, <code>git push</code>, and then you&rsquo;re done. Install the package with <code>makepkg -i</code>.</p>
<p>Otherwise, if the package might be potentially useful to other Arch users, you could consider uploading it to the AUR.</p>
<p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&rsquo;t need to be positive, it&rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.</p>
<p>If the answer is negative, or if you&rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:</p>
<ol>
<li>
<p><a href="https://bbs.archlinux.org/viewforum.php?id=38.">AUR Issues, Discussion &amp; PKGBUILD Requests</a> BBS / Forums:  Open a new thread, post your <code>PKGBUILD</code> (use <code>[code][/code]</code> tags if you paste it directly!) or a link to it<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Request folks to critique your work, mention that you&rsquo;re looking for feedback. This kind of thread is generally well received in the official forums if you demonstrate you did diligent research before asking for help.</p>
</li>
<li>
<p><a href="https://lists.archlinux.org/pipermail/aur-general/">AUR General Mailing List</a>: Send an email to the mailing list asking for help. In general, follow proper mailing list etiquette, good resources for that are <a href="https://useplaintext.email/">https://useplaintext.email/</a> and <a href="https://man.sr.ht/lists.sr.ht/etiquette.md">https://man.sr.ht/lists.sr.ht/etiquette.md</a>. TL;DR: Use plain-text instead of HTML in your email.</p>
</li>
</ol>
<p>If you&rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.</p>
<h2 id="publish-your-package">Publish your package</h2>
<p>If all is well, it&rsquo;s time to publish your <code>PKGBUILD</code> to the <a href="https://aur.archlinux.org/">AUR</a>. Follow the up-to-date steps at <a href="https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages">https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages</a>.</p>
<p>TL;DR: If you don&rsquo;t use <em>aurpublish</em>, do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ makepkg --printsrcinfo &gt; .SRCINFO
</span></span></code></pre></div><p>Then you&rsquo;ll need both the <code>PKGBUILD</code> and the <code>.SRCINFO</code> file, it&rsquo;s basically a matter of committing your changes and pushing them to the right repository.</p>
<p>If you do use <em>aurpublish</em> this process is much easier, it&rsquo;s mostly a matter of doing <code>git commit</code>, <code>git push</code> and <code>aurpublish bkt</code>. <em>Aurpublish</em> automatically generates the <code>.SRCINFO</code> and a commit message by the means of git hooks.</p>
<p>And that&rsquo;s all! Other useful tips:</p>
<ul>
<li>Use <a href="https://repology.org/">repology</a> to look for preexisting packages in other Linux (or even BSD) distributions, it&rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Alpine Linux <code>APKBUILDs</code> are very similar to <code>PKGBUILDs</code>. Gentoo <code>EBUILDs</code> and FreeBSD <code>Makefiles</code> are also reasonable approximations.</li>
<li>Use <code>makepkg -src</code> to clean up after building a package.</li>
</ul>
<h2 id="bonus-track-upstream">Bonus: Track upstream</h2>
<p>Use a software like <a href="https://thp.io/2008/urlwatch/"><code>urlwatch</code></a> or <a href="https://github.com/lilydjwg/nvchecker"><code>nvchecker</code></a> to track
future upstream changes so that you can update your packages in a timely
fashion<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. There&rsquo;s also a web service called <a href="https://release-monitoring.org/">Release
Monitoring</a>, part of Fedora Infra. I use <code>urlwatch</code> the
following way:</p>
<pre tabindex="0"><code>$ cat PKGBUILDs/urlwatch.yml
# urls for urlwatch(1)
---
name: &#34;bkt&#34;
command: &#34;git ls-remote --tags https://github.com/dimo414/bkt&#34;
---
name: &#34;fpp&#34;
command: &#34;git ls-remote --tags https://github.com/facebook/PathPicker&#34;
---
name: &#34;git-crecord&#34;
command: &#34;git ls-remote --tags https://github.com/andrewshadura/git-crecord&#34;
---
name: &#34;i3a&#34;
command: &#34;git ls-remote --tags https://git.goral.net.pl/mgoral/i3a&#34;
# ---
# name: &#34;ttf-camingocode&#34;
# N/A

# Run this command periodically via cron or systemd timer.
# Set up notifications e.g. via sendmail.
$ urlwatch --urls urlwatch.yml
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you use <a href="https://duckduckgo.com/">https://duckduckgo.com/</a>, query for <code>!aur bkt</code> and <code>!archpkg bkt</code>. Handy!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Package debugging is out of scope of this post.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, use <a href="https://gist.github.com">https://gist.github.com</a> or <a href="http://paste.opensuse.org/">http://paste.opensuse.org/</a> or
<a href="http://ix.io/">http://ix.io/</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>In 99% of the cases this is just a matter of bumping the <code>pkgver=</code> and
updating the checksums. If <code>pkgver=</code> is the same but there&rsquo;s a fix to the
package itself, then bump <code>pkgrel=</code> instead.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>RSS: Follow commit updates from Github</title><link>https://thiagowfx.github.io/2022/01/rss-follow-commit-updates-from-github/</link><pubDate>Fri, 14 Jan 2022 17:15:27 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/rss-follow-commit-updates-from-github/</guid><description>&lt;p>It is possible to track/follow commits of &lt;code>git&lt;/code> repositories
on &lt;a href="https://github.com/">GitHub&lt;/a> via RSS: &lt;code>https://github.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/commits.atom&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>It is possible to track/follow commits of <code>git</code> repositories
on <a href="https://github.com/">GitHub</a> via RSS: <code>https://github.com/&lt;user&gt;/&lt;repo&gt;/commits.atom</code>.</p>
<p>For example, my dotfiles: <a href="https://github.com/thiagowfx/dotfiles/commits.atom">https://github.com/thiagowfx/dotfiles/commits.atom</a></p>
<p>I am using this to keep track of <a href="https://miniflux.app/">Miniflux</a>
<a href="https://github.com/miniflux/v2/commits.atom">commits</a> from
within Miniflux itself (a RSS webapp).</p>]]></content:encoded></item><item><title>★ Direnv: Automate your Environment Variables</title><link>https://thiagowfx.github.io/2022/01/direnv-automate-your-environment-variables/</link><pubDate>Tue, 04 Jan 2022 00:34:07 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/direnv-automate-your-environment-variables/</guid><description>&lt;p>&lt;a href="https://direnv.net/">Direnv&lt;/a> is a tool to automate your shell to automatically load and unload environment variables on-the-fly, on a per-project (per-directory) basis.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://direnv.net/">Direnv</a> is a tool to automate your shell to automatically load and unload environment variables on-the-fly, on a per-project (per-directory) basis.</p>
<h2 id="preliminaries-is-it-worth-it">Preliminaries: Is it worth it?</h2>
<p>Questions I like to ask myself before deciding whether to invest my time into learning and potentially <strong>adopting</strong> a foreign tool are the following:</p>
<blockquote>
<p>Is it <strong>popular</strong> <em>and</em> <strong>stable</strong> enough?
Is it abandonware?</p>
</blockquote>
<h3 id="popularity">Popularity</h3>
<p>Popularity is relative, it doesn&rsquo;t need to be worthy of the Hacker News frontpage nor Hotness on Reddit, but it needs to be widely available in popular Linux distributions and/or package managers, one install command away from my development environment.</p>
<p><a href="https://repology.org/">Repology</a> is a good proxy for popularity. Looking at <a href="https://repology.org/project/direnv/badges">direnv</a> therein, it&rsquo;s available for Alpine, Arch, Debian, Fedora, FreeBSD, HomeBrew, Nix, OpenBSD, Ubuntu&hellip;that&rsquo;s more than enough, we can safely conclude <code>direnv</code> is widely popular.</p>
<p>The main takeaway we want to confirm is whether the project isn&rsquo;t too niche and/or an one-man show. Seeing signs of a small-ish community and/or occasional contributions from external users/developers helps build confidence and give credibility to the project.</p>
<h3 id="stability-and-abandonware">Stability and Abandonware</h3>
<p>Stability is easier to define than popularity and can often be determined just by taking a quick glance at the github (or whichever other forge it&rsquo;s hosted in) page of the project.</p>
<p>At the time of this writing, the latest release of <a href="https://github.com/direnv/direnv">direnv</a> was about a week ago (2.30.2, Dec 28th 2021). It&rsquo;s definitely not abandonware and it&rsquo;s well maintained. A few signs that help corroborate that:</p>
<ul>
<li>Several PRs were merged recently</li>
<li>Its issue tracker is quite active, with a good mix of feature requests and bugs</li>
<li>I don&rsquo;t like to judge the project based on the number of issues it has, especially if it&rsquo;s popular. Chromium has <a href="https://bugs.chromium.org/p/chromium/issues/list">60k+</a> issues at the time of this writing, yet I wouldn&rsquo;t call it <em>bleeding edge</em>. Common sense applies. Since <code>direnv</code> has been around for a while and it&rsquo;s relatively popular, 150+ open issue seems acceptable to me.</li>
</ul>
<p>Now that <code>direnv</code> passed the Litmus test for adoption<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, let&rsquo;s get our hands dirty.</p>
<h2 id="installation">Installation</h2>
<p>There&rsquo;s nothing special here, as <code>direnv</code> is widely packaged. Pick your poison:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ sudo pacman -Syu direnv  <span style="color:#75715e"># Arch Linux</span>
</span></span><span style="display:flex;"><span>$ doas apk add direnv  <span style="color:#75715e"># Alpine Linux</span>
</span></span><span style="display:flex;"><span>$ sudo apt install direnv  <span style="color:#75715e"># Debian-based distros</span>
</span></span></code></pre></div><p>Is it lightweight?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk info -L direnv
</span></span><span style="display:flex;"><span>direnv-2.30.1-r0 contains:
</span></span><span style="display:flex;"><span>usr/bin/direnv
</span></span></code></pre></div><p>Hell yes! More lightweight than that? Impossible. It&rsquo;s a single binary thanks to Golang. No tons of files or dependencies. I mean:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ du -sh /usr/bin/direnv
</span></span><span style="display:flex;"><span>7.5M    /usr/bin/direnv
</span></span></code></pre></div><p>&hellip;it&rsquo;s a 7MB binary, let&rsquo;s not get ahead of ourselves. But that&rsquo;s fine, really, it&rsquo;s just a dev tool, we don&rsquo;t really deploy it to prod.</p>
<h2 id="use-cases">Use Cases</h2>
<p>Everything is controlled with a <code>.envrc</code> file within a repository root. A typical file could look like this:</p>
<pre tabindex="0"><code>export HOUSE=&#34;ATREIDES&#34;
layout python3
</code></pre><p>The <a href="https://direnv.net/">upstream website</a> does a great job at summarizing use cases. I am not here to duplicate documentation, so please go ahead and read it. That said, here are some example use cases I found useful:</p>
<h3 id="use-case-python">Use Case: Python</h3>
<p>Python developers often need to create different virtual environments for different projects. For example, I was participating in <a href="https://adventofcode.com/">Advent of Code</a> last year and wrote my solutions in Python 3: <a href="https://github.com/thiagowfx/adventofcode">https://github.com/thiagowfx/adventofcode</a>.</p>
<p>Each day<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> I would <code>cd ~/projects/adventofcode</code>, and then do <code>source ~/.venv/bin/activate</code>. And guess what, that&rsquo;s for the first terminal where I&rsquo;d run <code>make</code>, I&rsquo;d also spawn a second one with <code>vim</code>, thereby needing to activate the virtual environment twice.</p>
<p>And this is assuming the virtual environment already exists. If it didn&rsquo;t - for example, after a vanilla <code>git clone</code>, I&rsquo;d have to do <code>python -m venv .venv</code> first.</p>
<p>Quickly all of this became repetitive and annoying. I kinda &ldquo;cheated&rdquo; and stopped using the virtualenv for a few days, relying on my Linux distribution package manager instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% apk add py3-<span style="color:#f92672">{</span>autopep8,pyflakes,numpy,pylint<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This way, my</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy
</span></span></code></pre></div><p>would correctly work and not yell that <code>numpy</code> was nowhere to be found.</p>
<p>It&rsquo;s not very clean, but it worked. However eventually I wanted to become cleaner and leaner and automate my virtual environment setup. I uninstalled the aforementioned packages after a few days:</p>
<pre tabindex="0"><code>% apk del py3-{autopep8,pyflakes,numpy,pylint}
</code></pre><p>&hellip;therefore forcing me to come up with a better setup. I always had direnv in my TODO list, and this was the perfect moment to try it out.</p>
<p>How does <code>direnv</code> address this?</p>
<ol>
<li>Add the <code>direnv</code> hook to your shell. I actively use two shells<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, <code>bash</code> and <code>zsh</code>, so I did it twice and then added it to my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a>:</li>
</ol>
<p>Bash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat ~/.bashrc.d/direnv.bash
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://direnv.net/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> hash direnv &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>direnv hook bash<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>Zsh:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-zsh" data-lang="zsh"><span style="display:flex;"><span>$ cat ~/.zshrc.d/direnv.zsh
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/zsh</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://direnv.net/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span> $+commands<span style="color:#f92672">[</span>direnv<span style="color:#f92672">]</span> <span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>direnv hook zsh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><ol start="2">
<li>Set up direnv in the AOC repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/projects/adventofcode/.envrc
</span></span><span style="display:flex;"><span>layout python3
</span></span><span style="display:flex;"><span>$ direnv allow  <span style="color:#75715e"># Only needs to be done once</span>
</span></span></code></pre></div><p>That&rsquo;s it: It&rsquo;s a single line of configuration. Now what does it do? All of the above. No magic: whenever you cd into the project directory or any of its subdirectories with one of the configured shells, if the venv doesn&rsquo;t exist:</p>
<ul>
<li>it will be automatically created;</li>
<li>then it will be sourced</li>
</ul>
<p>Now you may ask yourself: Why go through all this trouble? Why not simply create a shell script to do exactly that for you automatically? That&rsquo;s perfectly fine, it&rsquo;s a matter of taste. But then you&rsquo;ll have to maintain that script. The python ecosystem keeps changing - a few years ago I was using <code>virtualenvwrapper</code> to manage virtual environments, these days it doesn&rsquo;t exist anymore, people use either <code>python -m env</code> or <code>pyenv</code> or <code>poetry</code> or&hellip;it never ends. <a href="https://drewdevault.com/2021/11/16/Python-stop-screwing-distros-over.html">Drew DeVault</a> wrote a good piece about that.</p>
<figure class="align-center "><a href="https://xkcd.com/1987/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/python_environment.png#center"
         alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Maintenance is not the only burden, scalability is also one: If you use python in several repositories, you&rsquo;ll now have to include your script in all of them.</p>
<p>Considering that <code>direnv</code> is flexible enough in other scenarios, I consider its adoption in this situation a good trade-off to make.</p>
<h3 id="use-case-hugo">Use Case: Hugo</h3>
<p>This blog is written in Hugo. I have a <code>Makefile</code> with a bunch of environment variables to manage its setup:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ make dev
</span></span></code></pre></div><p>Whenever I am working in my VPS, for reasons outside of the scope of this post I need to use a different port other than the default one for Hugo (<code>1313</code>). Since I am using variables, I could just do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ make PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">1234</span> dev
</span></span></code></pre></div><p>However, to make this change permanent (&ldquo;fire-and-forget&rdquo;), I could also do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ echo <span style="color:#e6db74">&#39;export PORT=1234&#39;</span> | tee -a .envrc
</span></span><span style="display:flex;"><span>$ direnv allow  <span style="color:#75715e"># Only needs to be done once</span>
</span></span><span style="display:flex;"><span>$ make dev
</span></span></code></pre></div><p>This way, whenever I run <code>make</code> I wouldn&rsquo;t even need to think twice about which port to use.</p>
<p>Of course, a small improvement that should be done in this scenario is to add <code>direnv</code> related files to your <code>.gitignore</code>:</p>
<pre tabindex="0"><code>$ git ignore direnv &gt;&gt; .gitignore

# Created by https://www.toptal.com/developers/gitignore/api/direnv
# Edit at https://www.toptal.com/developers/gitignore?templates=direnv

### direnv ###
.direnv
.envrc

# End of https://www.toptal.com/developers/gitignore/api/direnv
</code></pre><h3 id="other-use-cases">Other use cases?</h3>
<p>I don&rsquo;t have other real use cases to share because only recently I became familiarized with <code>direnv</code>. That said, the <a href="https://direnv.net/man/direnv-stdlib.1.html">direnv docs</a> are very comprehensive of its full potential usage.</p>
<p>Some use cases that I like:</p>
<dl>
<dt><code>dotenv</code></dt>
<dd>Automatically sources <code>.env</code> (note: not to confuse with <code>.envrc</code>) files, which are widely common in projects managed with <code>docker-compose</code>.</dd>
<dt><code>source_env</code> + <code>env_vars_required</code></dt>
<dd>Alongside <code>.gitignore</code>, this is a great way to source secrets (e.g. API keys or tokens) and not accidentally check them into your repository.</dd>
<dt><code>fetchurl</code></dt>
<dd><code>bash | curl</code> is a cancer<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> that should arguably be stopped due to its inherent security risks. That said, <code>direnv</code> provides a safer way to work with it because you can specify a hash to ensure you&rsquo;re downloading the same script - if an attacker or malicious actor modified it, direnv would throw an error.</dd>
<dt><code>path_add</code></dt>
<dd>If your project outputs to e.g. <code>build/&lt;...&gt;/bin</code> or similar (typical in <code>cmake</code> projects and AFAIK in Rust ones too), you could add that directory to your <code>PATH</code> so that you could easily execute your binaries, without having to write the full subdirectory path each time.</dd>
<dt><code>layout</code></dt>
<dd>Besides python, <code>direnv</code> supports several other programming languages out-of-the-box. Popular examples include <code>go</code>, <code>nix</code>, <code>node</code>, <code>perl</code> and <code>ruby</code>.</dd>
</dl>
<h2 id="downsides">Downsides?</h2>
<p>One could call <code>direnv</code> bloated because of all of the aforementioned capabilities. If it doesn&rsquo;t spark joy for your taste, consider using <a href="https://github.com/hyperupcall/autoenv">autoenv</a> which is basically a leaner version of <code>direnv</code>, meant mostly for doing one thing and doing it well: setting and unsetting variables.</p>
<p>Other than that, <code>direnv</code> is pretty much a great piece of software.</p>
<p>One thing I didn&rsquo;t cover is how secure it is: You need to run <code>direnv allow</code> explicitly in order to tell <code>direnv</code> that you trust a given <code>.envrc</code> file. If you don&rsquo;t do it, <code>direnv</code> will refuse to source it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ touch .envrc
</span></span><span style="display:flex;"><span>direnv: error ~/projects/foo/.envrc is blocked. Run <span style="color:#e6db74">`</span>direnv allow<span style="color:#e6db74">`</span> to approve its content
</span></span></code></pre></div><p>If you run <code>direnv allow</code> but later on the file is modified (for example, after <code>git pull</code>, whereby you retrieve a modification from a teammate), <code>direnv</code> will once again refuse to operate. You&rsquo;ll need to whitelist it again by re-running <code>direnv allow</code>. Direnv will snapshot/hash the file contents of <code>.envrc</code> remember it across sessions.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cuddly-octo-palm-tree.com/posts/2021-12-12-tyska-direnv/">Tools You Should Know About: direnv</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Obviously the aforementioned list was non-exhaustive. There are a few other questions that you may want to ask, out of scope of this article, such as: (i) does the project have an OSS or FLOSS license? (ii) does the project depend on Java?&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Advent of code challenges are released one by one, thereby forcing you to wait until the next day in order to get the next challenge.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>more on this another day&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>c.f. <a href="https://curlpipesh.tumblr.com/">https://curlpipesh.tumblr.com/</a>, <a href="https://gnu.moe/wallofshame.md">https://gnu.moe/wallofshame.md</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Meu primeiro pull request</title><link>https://thiagowfx.github.io/2014/03/meu-primeiro-pull-request/</link><pubDate>Mon, 17 Mar 2014 02:42:19 +0000</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2014/03/meu-primeiro-pull-request/</guid><description>Ah, já que eu inventei esse negócio de status por aqui, esse eu tenho que incluir: meu primeiro pull request para um projeto open source acabou de ser aceito! 😀
Aqui está o commit.
Em si, esse é o mesmo tipo de alegria que eu tive quando contribui com o Meu primeiro PKGBUILD para o AUR. É realmente bastante bom poder contribuir com alguma coisa para a comunidade, por menor que ela seja, desde um simples post ajudando um newbie em um fórum, passando por um simples commit ou por uma simples edição numa wiki, até mesmo a criação de um projeto novo e aparentemente inofensivo, porém relevante para muita gente (damn, pra completar a minha lista só falta o último item).</description><content:encoded><![CDATA[<p>Ah, já que eu inventei esse negócio de <em>status</em> por aqui, esse eu tenho que incluir: meu primeiro <em>pull request</em> para um projeto <em>open source</em> acabou de ser aceito! 😀</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/pull/2574">Aqui</a> está o commit.</p>
<p>Em si, esse é o mesmo tipo de alegria que eu tive quando contribui com o <a href="https://thiagowfx.github.io/2014/02/meu-primeiro-pkgbuild/">Meu primeiro PKGBUILD</a> para o <a href="http://aur.archlinux.org/"><em>AUR</em></a>. É realmente bastante bom poder contribuir com alguma coisa para a comunidade, por menor que ela seja, desde um simples post ajudando um <em>newbie</em> em um fórum, passando por um simples <em>commit</em> ou por uma simples edição numa <em>wiki</em>, até mesmo a criação de um projeto <a href="https://groups.google.com/d/msg/comp.os.minix/dlNtH7RRrGA/SwRavCzVE7gJ">novo e aparentemente inofensivo</a>, porém relevante para muita gente (<em>damn</em>, pra completar a minha lista só falta o último item).</p>
<p>Espero que, depois desse, ainda venham muito mais por aí (<strong>virão!</strong>).</p>
]]></content:encoded></item></channel></rss>