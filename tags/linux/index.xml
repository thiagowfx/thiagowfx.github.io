<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>linux on Not Just Serendipity</title><link>https://blog.perrotta.dev/tags/linux/</link><description>Recent content in linux on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Sun, 01 May 2022 13:02:51 -0400</lastBuildDate><atom:link href="https://blog.perrotta.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Tools you should know about: moreutils</title><link>https://blog.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://joeyh.name/code/moreutils/"><code>moreutils</code></a> has previously been covered <a href="https://news.ycombinator.com/item?id=31043655">elsewhere</a>, multiple times. It&rsquo;s a collection of small unix tools that follow the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> very strongly.</p>
<p>Here are some of my favorites with example usages. Obviously this post isn&rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.</p>
<h2 id="sponge">sponge</h2>
<blockquote>
<p>sponge(1) - soak up standard input and write to a file</p>
</blockquote>
<p>Here&rsquo;s a typical workflow <code>sponge(1)</code> is great at:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Given a file</span>
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Imagine that for whatever reason we want to replace &#39;a&#39; with &#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naively, we could try this:</span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> &gt; myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># However the file becomes empty!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sponge comes to the rescue!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> | sponge myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span></code></pre></div><p>It is great to use <code>sponge</code> in lieu of <code>&gt;</code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.</p>
<h2 id="vidir">vidir</h2>
<blockquote>
<p>vidir(1) - edit directories and filenames</p>
</blockquote>
<p><code>vidir(1)</code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open <code>vidir</code> at the top-level directory of this blog repository, it opens up <code>vim</code> (although it doesn&rsquo;t need to be <code>vim</code>, your <code>$EDITOR</code> is honoured) with the following content:</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>If I make, say, the following modifications (lines 7 and 8):</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>And then save and quit <code>vim</code> (<code>:wq</code>), then the effect would have been the same as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ mv Makefile GNUMakefile
</span></span><span style="display:flex;"><span>$ mv README.md README.rst
</span></span></code></pre></div><p>If I changed my mind and decided not to save the modifications, I could just do <code>:cq</code>.</p>
<p>It&rsquo;s possible to leverage vim features such as <code>.</code> (repeat command) and <code>:%s/</code> (find and replace) to perform those mass file renames quickly and effectively. <code>vidir</code> is a breeze to use!</p>
<h2 id="ifne">ifne</h2>
<blockquote>
<p>ifne(1) - Run command if the standard input is not empty</p>
</blockquote>
<p><code>ifne(1)</code> is effective when used with <code>find</code> or <code>fd</code> to keep shell pipes &ldquo;happy&rdquo;. Here&rsquo;s one simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | xargs clang-format
</span></span></code></pre></div><p>This should work as expected, but it&rsquo;s cleaner to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | ifne xargs clang-format
</span></span></code></pre></div><p>The added <code>ifne</code> ensures the <code>xargs</code> command is only executed if and only if <code>find</code> yields at least one result in its output.</p>
<p>This wasn&rsquo;t a very practical example though: a more realistic way to use <code>ifne</code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend <code>ifne</code> to it:</p>
<pre tabindex="0"><code>$ this | is | a | complicated | pipe
# assume &#34;complicated&#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
</code></pre><h2 id="combine">combine</h2>
<blockquote>
<p>combine(1) - combine sets of lines from two files using boolean operations</p>
</blockquote>
<p><code>combine(1)</code> is pretty much <code>comm(1)</code>, but much more user-friendly. Given two files <code>file1</code> and <code>file2</code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&rsquo;s one example to find the <em>common lines</em> in <em>both</em> files, compare <code>combine</code> and <code>comm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ combine file1 and file2
</span></span><span style="display:flex;"><span>$ comm -12 file1 file2     <span style="color:#75715e"># flags are harder to remember</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Linux: US International keyboard layout</title><link>https://blog.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p></description><content:encoded><![CDATA[<p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.</p>
<h2 id="intro">Intro</h2>
<p>There are basically two layouts:</p>
<ol>
<li>US (<em>&lsquo;vanilla&rsquo;</em>): type accents like <code>'^`~</code> and they will be emitted immediately</li>
<li>US International (INTL): accents are the so called <a href="https://en.wikipedia.org/wiki/Dead_key">&lsquo;dead keys&rsquo;</a>:</li>
</ol>
<blockquote>
<p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.</p>
</blockquote>
<p>We can switch between keyboard layouts with <code>setxkbmap</code>. It&rsquo;s also possible to
use <code>localectl</code> in systemd-based distros, but its syntax is harder to remember
so I won&rsquo;t even include it here.</p>
<h2 id="set-us-vanilla-keyboard-layout">Set US &lsquo;vanilla&rsquo; keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap us
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard should use to type in English.</p>
<h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap -layout us -variant intl
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> should use to type, for example, in Portuguese or in German.</p>
<h3 id="portuguese">Portuguese</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- á é í ó ú     :   &#39; + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- â ê î ô û     :   ^ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ã õ           :   ~ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- à             :   ` + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ç (cedilla)   :   Alt Gr + , (Option + c on macOS)
</span></span></code></pre></div><h3 id="german">German</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- ß (ss)  :   Alt Gr + s (Option + s on macOS)
</span></span><span style="display:flex;"><span>- ä ö ü   :   &#34; + &lt;vowel&gt;
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alt Gr is typically the Right Alt key.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Wayland: from i3 to sway</title><link>https://blog.perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I&rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is <a href="https://i3wm.org/"><code>i3</code></a>, so the natural choice in Wayland is <a href="https://swaywm.org/"><code>sway</code></a>.</p>
<h2 id="intro">Intro</h2>
<p><code>sway</code> works well with the <code>i3</code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tree ~/.config/<span style="color:#f92672">{</span>i3,sway<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>/home/typhoon/.config/i3
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── i3.conf
</span></span><span style="display:flex;"><span>└── config
</span></span><span style="display:flex;"><span>/home/typhoon/.config/sway
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── sway.conf
</span></span><span style="display:flex;"><span>└── config -&gt; ../../../i3/.config/i3/config
</span></span></code></pre></div><ul>
<li>The master config is
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config"><code>~/.config/i3/config</code></a>.
It is pretty standard, generated by
<a href="https://build.i3wm.org/docs/i3-config-wizard.html"><code>i3-config-wizard</code></a> with
a few tweaks on top for my own workflow. It works for both <code>i3</code> and <code>sway</code>.
The config contains this snippet:</li>
</ul>
<pre tabindex="0"><code># Load user configs if existing. Order is important.
include conf.d/*.conf
</code></pre><p>The snippet allows drop-in customizations to live in <code>conf.d</code>. The <code>include</code> directive is a relatively <a href="https://github.com/i3/i3/pull/4420">new</a> addition to the i3config syntax and it&rsquo;s the main reason this setup is elegant and minimalist.</p>
<ul>
<li>i3-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf"><code>~/.config/i3/conf.d/i3.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with <code>sway</code>, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
#   dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25

    colors {
        background $black
        statusline $white

        focused_workspace $bgcolor $bgcolor $white $black
        active_workspace $gray $gray $black $gray
        inactive_workspace $black $black $gray $gray
        urgent_workspace $red $red $white $green
    }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
</code></pre><p>It&rsquo;s possible some of these configs will become compatible with <code>sway</code> over time, but at the time of this writing they are not.</p>
<ul>
<li>sway-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf"><code>~/.config/sway/conf.d/sway.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with i3, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
#   sway(5)
#   https://github.com/swaywm/sway/wiki
#   https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &#34;*&#34; scale 1.5

# Wallpaper
output &#34;*&#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
</code></pre><p>Most of those are wayland-specific options.</p>
<h2 id="quirks">Quirks</h2>
<p><code>gaps</code> is available in <code>i3</code> as well but only if you use
<a href="https://github.com/Airblader/i3"><code>i3-gaps</code></a>, which generally I refuse to in
order to stay closer to vanilla/upstream <code>i3</code>.</p>
<p>The <code>play-pause</code> multimedia key is
a <a href="https://github.com/swaywm/sway/issues/4783">bug</a> I found on <code>sway</code>. It&rsquo;s quite
annoying, the workaround as you can see above is to use <code>bindcode</code> instead of
<code>bindsym</code>. For more details see the bug.</p>
<p>In general <code>sway</code> works very well out-of-the-box so long as you install
<a href="https://wayland.freedesktop.org/xserver.html">XWayland</a> (<code>xorg-xwayland</code> on
Arch Linux). XWayland <strong>transparently</strong> proxies X11 apps to a X11 server that
runs inside wayland.</p>
<p>It&rsquo;s possible to detect those apps by running
<a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html"><code>xprop</code></a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
<a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes"><code>xeyes</code></a>
is another way to detect them.</p>
<p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
<code>xwayland disable</code> to the <code>sway</code> config. I wouldn&rsquo;t recommend that though, most
Linux GUI apps aren&rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&rsquo;s life.</p>
<p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&rsquo;s
noticeable.</p>
<p>There&rsquo;s no need to replace all of your small <code>i3</code> Xorg utilities with wayland
ones. For example, <a href="https://github.com/davatorium/rofi"><code>rofi</code></a> (application
launcher) works just fine (no need for <code>wofi</code>). The stock <code>i3</code> bar (<code>sway</code> bar?)
works just fine, there&rsquo;s no need for <code>polybar</code> or <code>waybar</code>.</p>
<p>Some utilities need to be replaced though. For example, <code>dunst</code> (notification
daemon) does not seem to work with <code>sway</code> out-of-the-box, <code>mako</code> seems to be a
recommended replacement. <code>i3lock</code> (lock screen) also does not work, <code>sway</code>
comes with its own screen lock directives. Screenshotters (e.g. <code>scrot</code>) will
also need to be replaced.</p>
<p>The system tray does not seem to work fine out-of-the-box. I haven&rsquo;t
investigated much to figure out what&rsquo;s wrong with it.</p>
<p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying <a href="https://git.sr.ht/~kennylevinsen/greetd"><code>greetd</code></a>,
<a href="https://github.com/tvrzna/emptty/"><code>emptty</code></a> and
<a href="https://github.com/fairyglade/ly"><code>ly</code></a>, in that order. <code>ly</code> is in my opinion
the best one in terms of balancing simplicity and usefulness.</p>
<p><code>sway</code> / <code>XWayland</code> doesn&rsquo;t source <code>~/.Xresources</code>. This is an issue if you
rely on customizations therein. It does source <code>~/.Xdefaults</code> though!
Leveraging this, I did the following changes:</p>
<ul>
<li>(i) <code>~/.Xresources</code> sources <code>~/.Xdefaults</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xresources
</span></span><span style="display:flex;"><span>! These settings apply to X11 only.
</span></span><span style="display:flex;"><span>! Use ~/.Xdefaults <span style="color:#66d9ef">for</span> settings that apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;.Xdefaults&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! Source:
</span></span><span style="display:flex;"><span>!   xrdb -merge ~/.Xresources
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Dump all properties:
</span></span><span style="display:flex;"><span>!   xrdb -q
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Check <span style="color:#66d9ef">if</span> DPI is set:
</span></span><span style="display:flex;"><span>!   xrdb -q | grep -i dpi
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! HiDPI
</span></span><span style="display:flex;"><span>! Common values:
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">96</span>  <span style="color:#f92672">(</span>x1.0, baseline<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">144</span> <span style="color:#f92672">(</span>x1.5<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">192</span> <span style="color:#f92672">(</span>x2.0, HiDPI<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>*.dpi: <span style="color:#ae81ff">144</span>
</span></span></code></pre></div><ul>
<li>(ii) <code>~/.Xdefaults</code> holds my customizations that originally lived in <code>~/.Xresources</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xdefaults
</span></span><span style="display:flex;"><span>! These settings apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span>! Use ~/.Xresources <span style="color:#66d9ef">for</span> X11-only settings.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Xft.antialias: true
</span></span><span style="display:flex;"><span>Xft.hinting: true
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>In principle I could just have symlinked them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ln -s ~/.Xresources ~/.Xdefaults
</span></span></code></pre></div><p>The reason why I didn&rsquo;t do it is to avoid double scaling (DPI). You see, my
<code>sway</code> config already sets DPI / scaling to 1.5x. If we do that in
<code>~/.Xdefaults</code> as well then Xorg applications would have been scaled twice.</p>
<h2 id="closing-remarks">Closing remarks</h2>
<p>In general Wayland / <code>sway</code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&rsquo;ll run into other quirks. I have mixed feelings
and wouldn&rsquo;t necessarily recommend it. I wouldn&rsquo;t give an anti recommendation
either. It&rsquo;s complicated&hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.</p>]]></content:encoded></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://blog.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>I am currently evaluating <a href="https://nixos.org/download.html">Nix</a> as a
replacement for <a href="https://brew.sh">Homebrew</a> CLI apps in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
<a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others</a>
<a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have</a>
<a href="https://ghedam.at/15490/so-tell-me-about-nix">previously</a> written about this.</p>
<p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &hellip;). The good news is that those components
are for the most part modular, there&rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.</p>
<p>For now, I am only adopting <code>nix-env</code> and <code>nix-shell</code>, with no <code>*.nix</code> config
files. This post covers <code>nix-env</code>.</p>
<p>For simplicity, think of <code>nix-env</code> as a package manager, akin to <code>apk</code>,
<code>pacman</code>, <code>brew</code>, <code>apt</code>, <code>pkg</code>, etc.</p>
<h2 id="install-a-package">Install a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i moreutils
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>I see some guides using <code>nix-env -iA</code> but <code>-i</code> seems to suffice. We could
optionally specify the <code>nixpkgs.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i nixpkgs.moreutils
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;nixpkgs.moreutils&#39;</span> matches no derivations
</span></span></code></pre></div><p>Oh no! Maybe that&rsquo;s what the <code>-A</code> is for?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -iA nixpkgs.moreutils
</span></span><span style="display:flex;"><span>replacing old <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span></code></pre></div><p>Indeed! Apparently that <code>-A</code> thing stands for attribute. The only thing I know
is that there are both <code>nixpkgs.*</code> and <code>nixos.*</code>. But I don&rsquo;t care about NixOS
at this point. I&rsquo;ll just ignore <code>-A</code> from now on, for the time being.</p>
<h2 id="list-installed-packages">List installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span></code></pre></div><p>Easy! This actually gets displayed in my <code>less</code> pager.</p>
<h2 id="upgrade-installed-packages">Upgrade installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -u
</span></span></code></pre></div><p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&rsquo;s some update to one of my
installed CLI applications. I&rsquo;ve heard there&rsquo;s something called nix channel to
control that. Leaving it for another day though.</p>
<p><strong>Update(2022-02-18)</strong>: I learned that <code>nix-env -u</code> is akin to <code>apt upgrade</code> or
<code>apk upgrade</code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
<code>apt update</code> or <code>apk update</code>, use <code>nix-channel --update</code>.</p>
<p><strong>Note</strong>: On macOS this needs to be <code>sudo -i nix-channel --update</code>. See
<a href="https://github.com/NixOS/nix/issues/3595">issue</a>.</p>
<h2 id="uninstall-a-package">Uninstall a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env --uninstall moreutils
</span></span><span style="display:flex;"><span>uninstalling <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>Easy!</p>
<h2 id="search-for-packages">Search for packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP <span style="color:#e6db74">&#39;.*moreutils.*&#39;</span>
</span></span></code></pre></div><p>The <code>.*</code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &lsquo;derivation&rsquo; in Nix):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutils
</span></span><span style="display:flex;"><span>nixpkgs.moreutils  moreutils-0.67
</span></span></code></pre></div><p>If I write the wrong package name, the following happens:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutil
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;moreutil&#39;</span> matches no derivations, maybe you meant:
</span></span><span style="display:flex;"><span>       moreutils
</span></span></code></pre></div><p>It was helpful in this case, but I wouldn&rsquo;t always count on that. It is a bit
annoying that there&rsquo;s no <code>nix search moreutils</code> command, but it seems that
<code>nix-env</code> is very heavily tailored to use short flags, just like <code>pacman</code> in
Arch Linux. I got used to <code>pacman</code>, hopefully I can get used to the <code>nix-env</code>
short flags at some point.</p>
<p>Actually I tried it out and there is a <code>nix search</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix search moreutils
</span></span><span style="display:flex;"><span>error: experimental Nix feature <span style="color:#e6db74">&#39;nix-command&#39;</span> is disabled; use <span style="color:#e6db74">&#39;--extra-experimental-features nix-command&#39;</span> to override
</span></span></code></pre></div><p>This isn&rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the <code>nix-env</code> form for now.</p>
<p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>atool-0.39.0
</span></span><span style="display:flex;"><span>bash-interactive-5.1-p12
</span></span><span style="display:flex;"><span>coreutils-9.0
</span></span><span style="display:flex;"><span>exa-0.10.1
</span></span><span style="display:flex;"><span>fpp-0.9.2
</span></span><span style="display:flex;"><span>fzf-0.29.0
</span></span><span style="display:flex;"><span>git-2.34.1
</span></span><span style="display:flex;"><span>htop-3.1.2
</span></span><span style="display:flex;"><span>hugo-0.92.0
</span></span><span style="display:flex;"><span>jq-1.6
</span></span><span style="display:flex;"><span>less-600
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span><span style="display:flex;"><span>ncdu-1.16
</span></span><span style="display:flex;"><span>perl5.34.0-ack-3.5.0
</span></span><span style="display:flex;"><span>ranger-1.9.3
</span></span><span style="display:flex;"><span>stow-2.3.1
</span></span><span style="display:flex;"><span>tmux-3.2a
</span></span><span style="display:flex;"><span>tree-1.8.0
</span></span><span style="display:flex;"><span>vim-8.2.4186
</span></span><span style="display:flex;"><span>watch-procps-3.3.16
</span></span><span style="display:flex;"><span>wget-1.21.2
</span></span><span style="display:flex;"><span>zoxide-0.8.0
</span></span></code></pre></div><p>Those were very intuitive to find, with the exception of <code>ack</code> and <code>bash-interactive</code>:</p>
<ul>
<li><code>bash</code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
<code>~/.bashrc</code> wrecked havoc with the non-interactive version.</li>
<li><code>ack</code> is very oddly named. Really. Also: <code>nix-env -i ack</code> doesn&rsquo;t work, but
<code>nix-env -iA nixpkgs.ack</code> does. I suspect it will be hard to ignore <code>-A</code> in
the future.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking there&rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, <a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu</a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ SSH plus tmux automatically</title><link>https://blog.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description><content:encoded><![CDATA[<p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.</p>
<p>To persist those connections, a terminal multiplexer is often used, <code>tmux</code> and <code>screen</code> being the two most popular ones.</p>
<p>In this post I will cover a few different client-side and server-side ways to have <code>ssh</code> automatically spawn <code>tmux</code> upon connection.</p>
<h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)</h2>
<p>Start <code>tmux</code>, forcing unicode, attaching to and/or creating a session named <em>main</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- tmux -u new -A -s main
</span></span></code></pre></div><p><code>-u</code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&rsquo;s safer to always include <code>-u</code> just in case.</p>
<p>Tip: If it&rsquo;s annoying to remember to type the full command above, consider adding an <code>alias</code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the <a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell</a> extension.</p>
<h2 id="option-2-use-sshconfig-client-side">Option #2: Use <code>~/.ssh/config</code> (client-side)</h2>
<p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.ssh/config
</span></span><span style="display:flex;"><span>Host *
</span></span><span style="display:flex;"><span>  RequestTTY yes
</span></span><span style="display:flex;"><span>  RemoteCommand tmux -u new -A -s main
</span></span></code></pre></div><p>You don&rsquo;t need to match all hosts (<code>Host *</code>), if you&rsquo;d rather match one or more specific hosts, refer to the ssh config syntax <code>ssh_config(5)</code> to add them. A simple example would be <code>Host mymachine.example.org</code>.</p>
<p><strong>Caveat</strong>: I&rsquo;ve found this method interferes with <code>git</code> + <code>ssh</code> authentication. More specifically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git remote -v
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ git push
</span></span><span style="display:flex;"><span>Cannot execute command-line and remote command.
</span></span><span style="display:flex;"><span>fatal: Could not read from remote repository.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please make sure you have the correct access rights
</span></span><span style="display:flex;"><span>and the repository exists.
</span></span></code></pre></div><p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&rsquo;t use it with <code>Host *</code>.</p>
<h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use <code>~/.bash_profile</code> or similar (server-side, recommended)</h2>
<p>This method leverages your login shell startup config file (<code>~/.bash_profile</code>, <code>~/.zprofile</code>, etc) to automatically spawn <code>tmux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.</span>
</span></span><span style="display:flex;"><span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The session is called `main`.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Escape hatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ssh &lt;host&gt; -t -- NOTMUX=1 &lt;shell&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$NOTMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$TMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$SSH_TTY<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> $- <span style="color:#f92672">=</span>~ i <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  tmux -u new -A -s main
</span></span><span style="display:flex;"><span>  exit
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The <code>if</code> basically checks:</p>
<ul>
<li>whether we&rsquo;re not already inside a tmux session (we shouldn&rsquo;t be), so that we don&rsquo;t nest <code>tmux</code></li>
<li>whether we&rsquo;re accessing the shell via <code>ssh</code> (we should be)</li>
<li>whether we&rsquo;re accessing an interactive shell (we should be), so that it doesn&rsquo;t interefere with oneshot <code>ssh</code> commands</li>
</ul>
<p>There&rsquo;s also a escape hatch. If you want to get an interactive shell but bypass <code>tmux</code> for some reason<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, just set <code>NOTMUX=1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- NOTMUX<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> bash
</span></span></code></pre></div><h2 id="final-remarks">Final remarks</h2>
<p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn <code>tmux</code> server-side, or selectively spawn <code>tmux</code> client-side.</p>
<p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your <code>ssh</code> host settings. That said, in scenarios where I fully control a host and it&rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, maybe if <code>tmux</code> broke due to a recent upgrade, or if the <code>~/.tmux.conf</code> is invalid.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>nix-shell in a nutshell</title><link>https://blog.perrotta.dev/2022/02/nix-shell-in-a-nutshell/</link><pubDate>Thu, 10 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/nix-shell-in-a-nutshell/</guid><description>&lt;p>As soon as we finish installing &lt;a href="https://nixos.org/download.html">&lt;code>Nix&lt;/code>&lt;/a> on
Darwin, we&amp;rsquo;re greeted with a call to action:&lt;/p>
&lt;pre tabindex="0">&lt;code>Alright! We&amp;#39;re done!
Try it! Open a new terminal, and type:
$ nix-shell -p nix-info --run &amp;#34;nix-info -m&amp;#34;
Thank you for using this installer. If you have any feedback or need
help, don&amp;#39;t hesitate:
You can open an issue at https://github.com/nixos/nix/issues
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>As soon as we finish installing <a href="https://nixos.org/download.html"><code>Nix</code></a> on
Darwin, we&rsquo;re greeted with a call to action:</p>
<pre tabindex="0"><code>Alright! We&#39;re done!
Try it! Open a new terminal, and type:

  $ nix-shell -p nix-info --run &#34;nix-info -m&#34;

Thank you for using this installer. If you have any feedback or need
help, don&#39;t hesitate:

You can open an issue at https://github.com/nixos/nix/issues
</code></pre><h2 id="hello-world-bloated">Hello world (bloated)</h2>
<p>All right then, let&rsquo;s do it!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p nix-info --run <span style="color:#e6db74">&#34;nix-info -m&#34;</span>
</span></span><span style="display:flex;"><span> - system: <span style="color:#e6db74">`</span><span style="color:#e6db74">&#34;aarch64-darwin&#34;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - host os: <span style="color:#e6db74">`</span>Darwin 21.3.0, macOS 12.2<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - multi-user?: <span style="color:#e6db74">`</span>yes<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - sandbox: <span style="color:#e6db74">`</span>no<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - version: <span style="color:#e6db74">`</span>nix-env <span style="color:#f92672">(</span>Nix<span style="color:#f92672">)</span> 2.6.0<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - channels<span style="color:#f92672">(</span>root<span style="color:#f92672">)</span>: <span style="color:#e6db74">`</span><span style="color:#e6db74">&#34;nixpkgs&#34;</span><span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span> - nixpkgs: <span style="color:#e6db74">`</span>/nix/var/nix/profiles/per-user/root/channels/nixpkgs<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>Cool, it works. Let&rsquo;s break it down a bit.</p>
<h2 id="hello-world-classic">Hello world (classic)</h2>
<p>Nix shell creates an ephemeral shell environment with the customizations you
want. The most basic customization is to make a given set of packages
available. There&rsquo;s a <code>hello</code> package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p hello
</span></span><span style="display:flex;"><span>$ hello
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>In case you&rsquo;re curious, this is a GNU binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ hello --version
</span></span><span style="display:flex;"><span>hello <span style="color:#f92672">(</span>GNU Hello<span style="color:#f92672">)</span> 2.10
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2014</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span></code></pre></div><p>I have no idea why they are in version 2.10 and what their changelog is. It&rsquo;s
such a simple binary&hellip;</p>
<p>If you exit the shell, <code>hello</code> seemingly vanishes:</p>
<pre tabindex="0"><code>$ exit
exit
$ hello
zsh: command not found: hello
</code></pre><p>An easy way to think of <code>nix-shell</code> is like an ephemeral sandbox where all your
desired packages are made available when you enter it. It&rsquo;s possible to provide
more than one package, naturally. It&rsquo;s also possible to provide a <code>shell.nix</code>
file with the package declarations, so that when you can <code>nix-shell</code> without
any arguments.</p>
<pre tabindex="0"><code>$ cat shell.nix
{ pkgs ? import &lt;nixpkgs&gt; {} }:
  pkgs.mkShell {
    # nativeBuildInputs is usually what you want -- tools you need to run
    nativeBuildInputs = [ pkgs.buildPackages.hello ];
}
$ nix-shell
$ hello
Hello, world!
</code></pre><h2 id="hello-world-oneshot">Hello world (oneshot)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-shell -p hello --run hello
</span></span><span style="display:flex;"><span>Hello, world!
</span></span></code></pre></div><p>This oneshot style doesn&rsquo;t enter the shell, it just runs the given <code>--run</code>
command and then exits.</p>
<p>This post just scratched the surface of what <code>nix-shell</code> can do. See the
references below for more in-depth guides about it.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cuddly-octo-palm-tree.com/posts/2021-12-19-tyska-nix-shell/">Tools You Should Know About: nix-shell</a></li>
<li><a href="https://ghedam.at/15978/an-introduction-to-nix-shell">An introduction to nix-shell</a></li>
<li><a href="https://nixos.org/manual/nix/stable/command-ref/nix-shell.html">NixOS manual: <code>nix-shell</code></a></li>
</ul>]]></content:encoded></item><item><title>Doas: bridging the sudo gap</title><link>https://blog.perrotta.dev/2022/02/doas-bridging-the-sudo-gap/</link><pubDate>Mon, 07 Feb 2022 14:49:03 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/doas-bridging-the-sudo-gap/</guid><description>&lt;p>&lt;a href="https://man.openbsd.org/doas">&lt;code>doas&lt;/code>&lt;/a> is a lightweight and safer replacement for &lt;code>sudo&lt;/code>. In most occasions you invoke it exactly like &lt;code>sudo&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo apt install &amp;lt;foo&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ doas apt install &amp;lt;foo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>doas&lt;/code> has gained popularity recently. Besides being the default in OpenBSD, Alpine Linux 3.15 (released last year) has also &lt;a href="https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.15.0#Move_from_sudo_to_doas">switched to it&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>doas&lt;/code> is the default temporary privilege escalation tool. You are advised to migrate from &lt;code>sudo&lt;/code> to &lt;code>doas&lt;/code> as 3.15 will be the last release to support &lt;code>sudo&lt;/code> throughout its full lifecycle, in 3.16 &lt;code>sudo&lt;/code> will be moved from main to community.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s not very difficult to get used to it, however you may still find yourself writing &lt;code>sudo&lt;/code> occasionally. This post highlights a few ways to bridge that gap.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://man.openbsd.org/doas"><code>doas</code></a> is a lightweight and safer replacement for <code>sudo</code>. In most occasions you invoke it exactly like <code>sudo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ sudo apt install &lt;foo&gt;
</span></span><span style="display:flex;"><span>$ doas apt install &lt;foo&gt;
</span></span></code></pre></div><p><code>doas</code> has gained popularity recently. Besides being the default in OpenBSD, Alpine Linux 3.15 (released last year) has also <a href="https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.15.0#Move_from_sudo_to_doas">switched to it</a>:</p>
<blockquote>
<p><code>doas</code> is the default temporary privilege escalation tool. You are advised to migrate from <code>sudo</code> to <code>doas</code> as 3.15 will be the last release to support <code>sudo</code> throughout its full lifecycle, in 3.16 <code>sudo</code> will be moved from main to community.</p>
</blockquote>
<p>It&rsquo;s not very difficult to get used to it, however you may still find yourself writing <code>sudo</code> occasionally. This post highlights a few ways to bridge that gap.</p>
<h2 id="use-a-shell-alias">Use a shell alias</h2>
<p>In your <code>~/.bashrc</code> or <code>~/.zshrc</code> or in your favorite shell, do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>alias sudo<span style="color:#f92672">=</span>doas
</span></span></code></pre></div><p>Caveat: Besides being an user-dependent workaround<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, <code>doas</code> isn&rsquo;t really a full drop-in replacement to <code>sudo</code>. This workaround will work in most day-to-day situations but it will obviously not support most <code>sudo</code> specific flags.</p>
<h2 id="use-a-shimwrapper-recommended">Use a shim/wrapper (recommended)</h2>
<p>Alpine Linux provides a <a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/doas-sudo-shim"><code>doas-sudo-shim</code></a> package:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ doas apk add doas-sudo-shim
</span></span></code></pre></div><blockquote>
<p>This is a shim for the <code>sudo</code> command that utilizes <code>doas</code>. It supports only a subset of the <code>sudo</code> options (both short and long variants) that have an equivalent in <code>doas</code>, plus option <code>-i</code> (<code>--login</code>).</p>
</blockquote>
<p>This is a slightly better solution, as this thin wrapper is aware of some <code>sudo</code> flags, translating them to the equivalent <code>doas</code> ones; furthermore, it works out-of-the-box and it&rsquo;s system-wide. As an added bonus, it&rsquo;s implemented entirely in shell script, being as much portable as possible.</p>
<h2 id="final-remarks">Final remarks</h2>
<p>Last but not least, you could choose to install <code>sudo</code> and configure it, keeping both <code>doas</code> and <code>sudo</code>, but what&rsquo;s the point? If your system favours <code>doas</code>, stick to <code>doas</code>. There&rsquo;s no need to unnecessarily increase complexity by keeping around two programs that serve exactly the same purpose.</p>
<p>If you don&rsquo;t like or want <code>doas</code> for some reason, you could look into the other way around: find a <code>doas</code> shim that bridges to <code>sudo</code>, or define an alias: <code>$ alias doas=sudo</code>.</p>
<p>The best long-term solution though would be to just use <code>doas</code> without any alias or shim, but our muscle memory may have trouble adapting to that, especially when <code>sudo</code> is still the <em>de facto standard</em> in most Linux distributions out there these days.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To make it system-wide, change the relevant file in <code>/etc</code>: for example, <code>/etc/bashrc</code> for <code>bash</code>. I would advise against it though.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Transfer bash history to zsh</title><link>https://blog.perrotta.dev/2022/02/transfer-bash-history-to-zsh/</link><pubDate>Fri, 04 Feb 2022 21:58:50 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/transfer-bash-history-to-zsh/</guid><description>&lt;p>After years of using &lt;code>bash&lt;/code> as my default interactive shell at $DAYJOB,
I decided to switch to &lt;code>zsh&lt;/code>. I didn&amp;rsquo;t want to start from scratch and lose all
my history though:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ wc -l ~/.bash_history | cut -f1 -d&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">64002&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus my goal was to first migrate all my history from &lt;code>bash&lt;/code> to &lt;code>zsh&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>After years of using <code>bash</code> as my default interactive shell at $DAYJOB,
I decided to switch to <code>zsh</code>. I didn&rsquo;t want to start from scratch and lose all
my history though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wc -l ~/.bash_history | cut -f1 -d<span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64002</span>
</span></span></code></pre></div><p>Thus my goal was to first migrate all my history from <code>bash</code> to <code>zsh</code>.</p>
<p>The <code>bash-to-zsh-hist.py</code> python script in this
<a href="https://gist.github.com/muendelezaji/c14722ab66b505a49861b8a74e52b274">gist</a>
did most of the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This is how I used it:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># $ cat ~/.bash_history | python bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    timestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>readlines():
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;#&#39;</span>) <span style="color:#f92672">and</span> timestamp <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            t <span style="color:#f92672">=</span> line[<span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> t<span style="color:#f92672">.</span>isdigit():
</span></span><span style="display:flex;"><span>                timestamp <span style="color:#f92672">=</span> t
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            sys<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">:0;</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> (timestamp <span style="color:#f92672">or</span> time<span style="color:#f92672">.</span>time(), line))
</span></span><span style="display:flex;"><span>            timestamp <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>To use it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ wget https://gist.githubusercontent.com/muendelezaji/c14722ab66b505a49861b8a74e52b274/raw/49f0fb7f661bdf794742257f58950d209dd6cb62/bash-to-zsh-hist.py
</span></span><span style="display:flex;"><span>$ chmod +x ./bash-to-zsh-hist.py
</span></span><span style="display:flex;"><span>$ cat .bash_history | ./bash-to-zsh-hist.py &gt;&gt; ~/.zsh_history
</span></span></code></pre></div><p>However, that didn&rsquo;t fully work. Upon running <code>zsh</code>, there was an error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ zsh
</span></span><span style="display:flex;"><span>zsh: corrupt history file /usr/local/google/home/tperrotta/.zsh_history
</span></span></code></pre></div><p>A quick google search led me to <a href="https://shapeshed.com/zsh-corrupt-history-file/">a blog post</a>. I adapted the command suggest therein<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ strings -eS .zsh_history | sponge .zsh_history
</span></span></code></pre></div><p>And that fixed the issue!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><code>sponge</code> comes from the <a href="https://joeyh.name/code/moreutils/">moreutils</a> package.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Linux swap shenanigans</title><link>https://blog.perrotta.dev/2022/02/linux-swap-shenanigans/</link><pubDate>Tue, 01 Feb 2022 17:03:13 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/02/linux-swap-shenanigans/</guid><description>&lt;p>In this post we will cover a few linux swap recipes.&lt;/p></description><content:encoded><![CDATA[<p>In this post we will cover a few linux swap recipes.</p>
<h2 id="empty-swap-space">Empty swap space</h2>
<p>Completely empty (<em>flush</em>) swap space:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% swapoff --all <span style="color:#f92672">&amp;&amp;</span> swapon --all
</span></span></code></pre></div><h2 id="decrease-swappiness">Decrease swappiness</h2>
<p>Emptying is too extreme. Why did you get so much swap in the first place?
A small tweak is to decrease the sensibility of the system to swap:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat /etc/sysctl.d/90-custom.conf
</span></span><span style="display:flex;"><span>vm.swappiness<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>vm.vfs_cache_pressure<span style="color:#f92672">=</span><span style="color:#ae81ff">50</span>
</span></span></code></pre></div><p>The default swappiness of the Linux kernel these days is 60%, which IMHO is
quite aggressive for desktop usage. By decreasing it to 20%, our system will
only start to swap once we use more than 80% of total RAM. In other words, only
when there is 20% or less of free / available RAM.</p>
<p><a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt"><code>vfs_cache_pressure</code></a>:</p>
<blockquote>
<p>This percentage value controls the tendency of the kernel to reclaim the
memory which is used for caching of directory and inode objects.</p>
</blockquote>
<blockquote>
<p>At the default value of vfs_cache_pressure=100 the kernel will attempt to
reclaim dentries and inodes at a &ldquo;fair&rdquo; rate with respect to pagecache and
swapcache reclaim.  Decreasing vfs_cache_pressure causes the kernel to prefer
to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will
never reclaim dentries and inodes due to memory pressure and this can easily
lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100
causes the kernel to prefer to reclaim dentries and inodes.</p>
</blockquote>
<p>However, <code>/etc/sysctl.d</code> settings will only be applied after a reboot. To apply
them immediately, use the <code>sysctl(8)</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% sudo sysctl -p /etc/sysctl.d/90-custom.conf
</span></span><span style="display:flex;"><span>vm.swappiness <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>vm.vfs_cache_pressure <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>
</span></span></code></pre></div><h2 id="use-a-swapfile">Use a swapfile</h2>
<p>If you find yourself with a fully partitioned disk without any dedicated swap
partition, there&rsquo;s a trick to adding swap anyway: Use a swap file! <a href="https://en.wikipedia.org/wiki/Everything_is_a_file">Everything is
a file</a> anyway!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># https://wiki.archlinux.org/title/Swap#Swap_file</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the swap file: 8GiB in this case, to match our total RAM</span>
</span></span><span style="display:flex;"><span>% dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/zero of<span style="color:#f92672">=</span>/swapfile bs<span style="color:#f92672">=</span>1M count<span style="color:#f92672">=</span><span style="color:#ae81ff">8000</span> status<span style="color:#f92672">=</span>progress
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set restricting permissions</span>
</span></span><span style="display:flex;"><span>% chmod <span style="color:#ae81ff">600</span> /swapfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Format the ~~partition~~ file</span>
</span></span><span style="display:flex;"><span>% mkswap /swapfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Activate the swap file</span>
</span></span><span style="display:flex;"><span>% swapon /swapfile
</span></span></code></pre></div><p>You can check it&rsquo;s working correctly by inspecting <code>/proc/swaps</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat /proc/swaps
</span></span><span style="display:flex;"><span>Filename				Type		Size		Used		Priority
</span></span><span style="display:flex;"><span>/swapfile                               file		8388604		0		-2
</span></span></code></pre></div><p>Then finally add it to your <code>/etc/fstab</code> so that it is automatically mounted in subsequent boots:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># swap file</span>
</span></span><span style="display:flex;"><span>/swapfile none swap defaults <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><h2 id="add-zram-swap">Add ZRAM swap</h2>
<p>Explaining <code>zram</code> is out of scope if this post, but check out the
<a href="https://wiki.archlinux.org/title/Improving_performance#zram_or_zswap">ArchWiki</a>
or <a href="https://en.wikipedia.org/wiki/Zram">Wikipedia</a>.</p>
<p>The recipe I use in Arch Linux is the <a href="https://aur.archlinux.org/packages/zramswap/"><code>zramswap</code></a> package:</p>
<ol>
<li>Install the package.</li>
<li>Set desired zram swap percentage, I picked 20%:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat /etc/zramswap.conf
</span></span><span style="display:flex;"><span>ZRAM_SIZE_PERCENT<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>
</span></span></code></pre></div><ol start="3">
<li>Enable/Start the service:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% systemctl enable --now zramswap
</span></span><span style="display:flex;"><span>% systemctl status zramswap
</span></span><span style="display:flex;"><span>● zramswap.service - Zram-based swap <span style="color:#f92672">(</span>compressed RAM block devices<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>     Loaded: loaded <span style="color:#f92672">(</span>/usr/lib/systemd/system/zramswap.service; enabled; vendor preset: disabled<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>     Active: active <span style="color:#f92672">(</span>exited<span style="color:#f92672">)</span> since Tue 2022-02-01 16:13:37 EST; 7h ago
</span></span><span style="display:flex;"><span>   Main PID: <span style="color:#ae81ff">582</span> <span style="color:#f92672">(</span>code<span style="color:#f92672">=</span>exited, status<span style="color:#f92672">=</span>0/SUCCESS<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        CPU: 27ms
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Feb <span style="color:#ae81ff">01</span> 16:13:37 localhost.localdomain systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Starting Zram-based swap <span style="color:#f92672">(</span>compressed RAM block devices<span style="color:#f92672">)</span>...
</span></span><span style="display:flex;"><span>Feb <span style="color:#ae81ff">01</span> 16:13:37 localhost.localdomain zramctrl<span style="color:#f92672">[</span>627<span style="color:#f92672">]</span>: Setting up swapspace version 1, size <span style="color:#f92672">=</span> 1.5 GiB <span style="color:#f92672">(</span><span style="color:#ae81ff">1654009856</span> bytes<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Feb <span style="color:#ae81ff">01</span> 16:13:37 localhost.localdomain zramctrl<span style="color:#f92672">[</span>627<span style="color:#f92672">]</span>: LABEL<span style="color:#f92672">=</span>zram0, UUID<span style="color:#f92672">=</span>a39e0131-f102-4503-a1e7-a3e0ca330126
</span></span><span style="display:flex;"><span>Feb <span style="color:#ae81ff">01</span> 16:13:37 localhost.localdomain systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Finished Zram-based swap <span style="color:#f92672">(</span>compressed RAM block devices<span style="color:#f92672">)</span>.
</span></span></code></pre></div><p>You can inspect <code>/proc/swaps</code> again to check it&rsquo;s working properly<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat /proc/swaps
</span></span><span style="display:flex;"><span>Filename				Type		Size		Used		Priority
</span></span><span style="display:flex;"><span>/swapfile                               file		8388604		0		-2
</span></span><span style="display:flex;"><span>/dev/zram0                              partition	1615244		0		<span style="color:#ae81ff">100</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>zswap should have more priority than the swap file.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ systemd: share environment variables with xorg</title><link>https://blog.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://blog.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p></description><content:encoded><![CDATA[<p>In this post we will learn how to share environment variables (e.g.
<code>$GDK_SCALE</code>) between a system user session and X11/Xorg.</p>
<p>The typical <a href="https://wiki.archlinux.org/title/Xinit"><code>~/.xinitrc</code></a> and/or <a href="https://wiki.archlinux.org/title/Xprofile"><code>~/.xprofile</code></a> setup in
2020s involves some environment variable exports such as the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>export _JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>export DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>export GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>export GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>export QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>This particular set of customizations stems from my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a> but
there isn&rsquo;t anything special about it. I&rsquo;ll include an explanation anyway for
completeness:</p>
<ul>
<li>
<p>The java setting is meant for launching certain java-based applications from
within a tiling window manager.</p>
</li>
<li>
<p>All the other settings are meant for 4K HiDPI displays. The baseline DPI is
96, which is too small for 4K monitors, the fonts and icons all look tiny. In
order to make them scale it&rsquo;s necessary to use a higher DPI. Typical setups
use either 144 (x1.5) or 192 (x2.0), the bigger the DPI the bigger fonts and
icons will appear in the screen.</p>
</li>
</ul>
<p>Those exports work well for graphical applications launched from your favorite
window manager after it has already started, however if you decide to launch an
application from <code>systemd</code>, those settings will not be picked up by it.</p>
<p>For example, if you decide to manage <a href="http://jonls.dk/redshift/"><code>redshift</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> (more
specifically, <code>redshift-gtk</code> which has a system tray app) from a systemd user
session<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, its fonts will look small.</p>
<p>There are several ways to address this issue.</p>
<p>One of them is to edit the service file directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user edit redshift-gtk
</span></span></code></pre></div><p>And then add:</p>
<pre tabindex="0"><code>[Unit]
Environment=GDK_SCALE=2 GDK_DPI_SCALE=0.5
</code></pre><p>Which results in:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/systemd/user/redshift-gtk.service.d/override.conf
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Environment<span style="color:#f92672">=</span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span></code></pre></div><p>Which you can make effective by:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user daemon-reload
</span></span><span style="display:flex;"><span>$ systemctl --user restart redshift-gtk
</span></span></code></pre></div><p>I am not a fan of this approach though, because this step would need to be repeated
to all service files you want to manage this way. There&rsquo;s a better, <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> way to
do so.</p>
<p><code>systemd</code> supports <a href="https://www.freedesktop.org/software/systemd/man/environment.d.html">environment
files</a>
(<code>environment.d(5)</code>). User-defined ones live in
<code>~/.config/environment.d/*.conf</code> by default.</p>
<p>This means we could produce the following file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># systemd environment.d(5) EnvironmentFile</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://www.freedesktop.org/software/systemd/man/environment.d.html</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Do not use export here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternatively</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user import-environment [var1] [var2] [...]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Troubleshooting</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user show-environment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>_JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>Which is applied to all systemd user service files automatically, no need to
set <code>Environment=</code> manually everywhere.</p>
<p>However, now we need to maintain two different files: the systemd <code>.conf</code> one
and the xorg <code>~/.xinitrc</code> one.</p>
<p>One elegant way to reduce maintenance burden is, in my opinion, the follownig:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.xinitrc
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Parse user session environment variables.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is shared with the systemd user instance.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export all variables: https://stackoverflow.com/a/30969768/1745064</span>
</span></span><span style="display:flex;"><span>set -a
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> -r ~/.config/environment.d/user.conf <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span>set +a
</span></span></code></pre></div><p>It does what you expect: the underlying shell sources the <code>*.conf</code> file as if
you were <code>export</code>ing each variable therein.</p>
<p>One caveat of this setup is that you cannot define the variables
dynamically; for example, with subshells, with external programs, or with
simple mathematical operations derived from other variables<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Ultimately though you end up with only one file to manage, which is the systemd one.
<a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a>™.</p>
<figure class="align-center "><a href="https://xkcd.com/963/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/x11.png#center"
         alt="Thomas Jefferson thought that every law and every constitution should be torn down and rewritten from scratch every nineteen years--which means X is overdue."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Redshift adjusts the color temperature of your screen according to your
surroundings. This may help your eyes hurt less if you are working in front
of the screen at night. Redshift is similar to <a href="https://justgetflux.com/">f.lux</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>systemctl --user start redshift</code>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, <code>QT_FONT_DPI=$(($GDK_SCALE * 96))</code> or similar.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>