<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on not just serendipity</title><link>https://perrotta.dev/tags/linux/</link><description>Recent content in Linux on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 [Thiago Perrotta](mailto:tbperrotta@gmail.com) · [RSS](/index.xml) · a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Mon, 23 Dec 2024 22:52:40 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Running multiple servers in a single bash script</title><link>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</link><pubDate>Mon, 23 Dec 2024 22:52:40 -0300</pubDate><guid>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</guid><description>&lt;p>Inspired by &lt;a href="https://github.com/simonw/til/blob/main/bash/multiple-servers.md">Simon
Willison&lt;/a>&amp;rsquo;s
TIL.&lt;/p>
&lt;p>When I was working on the &lt;a href="https://stadia.com/">Stadia&lt;/a> Partner Portal as a
full-stack tech lead, I wrote and maintained a &lt;code>run.sh&lt;/code> script that would start
up our two (front-end and back-end) Boq&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> server instances.&lt;/p>
&lt;p>It resembled the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kill $pid_fe $pid_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trap cleanup SIGINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal/ui &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_fe&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_be&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wait
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This version is heavily simplified, but that was its gist. It worked perfectly.
Back in ~2018, it took quite a bit of trial-and-error to get it right. Now it
seems so easy to just ask GenAI to generate it for you! Yikes. Our profession
might get obsoleted in just a few more years to come&amp;hellip;&lt;/p></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p></description></item><item><title>★ Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p></description></item><item><title>Steam Deck "downloading update" boot loop</title><link>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</link><pubDate>Sat, 05 Oct 2024 23:58:48 +0200</pubDate><guid>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</guid><description>&lt;p>Today I tried to use my Steam Deck to no avail.&lt;/p>
&lt;p>Upon turning it on, a “Downloading update (…)” splash screen would appear, then the device would quickly turn itself off, in a matter of seconds.&lt;/p>
&lt;p>Repeating this dance a couple of times yielded the same results.&lt;/p>
&lt;p>Then I found out that if you hold the three-dot button (the quick settings menu button) briefly after turning it on, you are prompted with a boot loader screen that resembles GRUB. In this screen it’s possible to roll back to an earlier OS version.&lt;/p></description></item><item><title>apk autoupdate on alpine linux</title><link>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</link><pubDate>Sun, 18 Aug 2024 17:32:48 +0200</pubDate><guid>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Upon running &lt;code>doas apk upgrade&lt;/code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.&lt;/p>
&lt;p>Deb-based systems have
&lt;a href="https://manpages.debian.org/bookworm/debian-goodies/checkrestart.8.en.html">&lt;code>checkrestart(8)&lt;/code>&lt;/a>.&lt;/p>
&lt;p>On Alpine, the best available approach as of today is &lt;a href="https://github.com/jirutka/apk-autoupdate/">https://github.com/jirutka/apk-autoupdate/&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>doas apk add apk-autoupdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$EDITOR /etc/apk/autoupdate.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then make the two following changes&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Because the default is &amp;#39;*&amp;#39;, which will prevent all services from restarting.
services_blacklist=&amp;#34;&amp;#34;

# List of services that should be restarted upon package upgrades.
services_whitelist=&amp;#34;miniflux tailscale&amp;#34;
&lt;/code>&lt;/pre>&lt;p>From this point on, whenever there are system upgrades for the aforementioned
services (&lt;code>doas apk upgrade&lt;/code>), they will be automatically restarted. There&amp;rsquo;s no
need for &lt;code>doas /etc/init.d/miniflux restart&lt;/code>.&lt;/p></description></item><item><title>Alpine Linux: How to install all manpages (idiomatically)</title><link>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</link><pubDate>Sat, 20 Jul 2024 16:19:53 +0200</pubDate><guid>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</guid><description>&lt;p>This post is a reply to
&lt;a href="https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html">https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html&lt;/a>.&lt;/p>
&lt;p>The author describes their experience while attempting to install all man pages
for all the packages in use in their system.&lt;/p>
&lt;p>The breakdown progression has some valuable insights on how a typical Unix
sysadmin addresses a problem. I tend to adopt a similar approach when entering
unknown territory.&lt;/p>
&lt;p>However, in Alpine Linux, there is a better way.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>There is a &lt;code>docs&lt;/code> metapackage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apk info docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 description:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Meta package &lt;span style="color:#66d9ef">for&lt;/span> pulling in all documentation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 webpage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://alpinelinux.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 installed size:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4096&lt;/span> B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All you have to do is:&lt;/p></description></item><item><title>Explain a crontab expression</title><link>https://perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><guid>https://perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p>
&lt;ul>
&lt;li>Option 1: Read the docs! The &lt;a href="https://wiki.archlinux.org/title/Cron">ArchWiki&lt;/a>
is frequently a great reference. Alternatively, use your favorite search
engine.&lt;/li>
&lt;li>Option 2: Ask ChatGPT! A simple &lt;code>cron: 0 0 * * *&lt;/code> prompt is enough. No need
to embezzle it with &lt;code>explain what this does&lt;/code> or &lt;code>what does this do?&lt;/code>.&lt;/li>
&lt;li>Option 3: Paste it into &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Localhost domain</title><link>https://perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><guid>https://perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>When I’m doing local development, I sometimes need a domain name that routes
back to localhost. I’ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I’ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.&lt;/p></description></item><item><title>Copy files from laptop to Steam Deck</title><link>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><guid>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p>
&lt;p>Start a local HTTP server on your laptop:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
&lt;/code>&lt;/pre>&lt;p>Find the IP address of your laptop within your LAN:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ifconfig # macOS
$ ip addr # linux
&lt;/code>&lt;/pre>&lt;p>Now go to your Steam Deck, access &lt;code>http://&amp;lt;ip&amp;gt;:8000&lt;/code> via the installed web
browser, and download your files.&lt;/p>
&lt;p>Alternatively, run &lt;code>wget&lt;/code> / &lt;code>curl&lt;/code> in a terminal.&lt;/p></description></item><item><title>Rename files in bulk</title><link>https://perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><guid>https://perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p>
&lt;p>A simple example to rename all &lt;code>readme.md&lt;/code> files to &lt;code>README.md&lt;/code> for consistency:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#e6db74">&amp;#39;s/readme\.md/README.md/&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A more recent example (2024-07-25):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#e6db74">&amp;#39;s/promtail-global-testing/promtail-global/g&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there are nested directories that match the expression, you&amp;rsquo;ll need to run
&lt;code>rename&lt;/code> multiple times.&lt;/p></description></item><item><title>Sleep forever</title><link>https://perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><guid>https://perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep inf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep infinity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Previously I would call a command such as a &lt;code>while true&lt;/code> loop or the &lt;code>yes&lt;/code>
utility, but &lt;code>sleep&lt;/code> is also handy.&lt;/p></description></item><item><title>Bcrypt-hash a password</title><link>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/936/">&lt;img src="https://imgs.xkcd.com/comics/password_strength.png"
 alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>Here&amp;rsquo;s one way to do so via the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ htpasswd -nbBC &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;correct horse battery staple&amp;#39;&lt;/span> | tr -d &lt;span style="color:#e6db74">&amp;#39;:\n&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/$2y/$2a/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which yields:&lt;/p>
&lt;pre tabindex="0">&lt;code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
&lt;/code>&lt;/pre>&lt;p>You could verify it matches e.g. via &lt;a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/&lt;/a>.&lt;/p></description></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><guid>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p>
&lt;p>The &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs&lt;/a>
suggest using &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost/ || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>For Chartmuseum specifically we&amp;rsquo;re interested in its &lt;code>/health&lt;/code> endpoint, as per
&lt;a href="https://github.com/helm/chartmuseum/issues/28">this reference&lt;/a>:&lt;/p></description></item><item><title>Be aware that your public SSH keys can reveal your identity</title><link>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</link><pubDate>Fri, 03 May 2024 16:46:28 +0200</pubDate><guid>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</guid><description>&lt;p>If you have a GitHub account configured with SSH, your public keys are available
at &lt;code>https://github.com/$USERNAME.keys&lt;/code>.&lt;/p>
&lt;p>For example, mine: &lt;a href="https://github.com/thiagowfx.keys">https://github.com/thiagowfx.keys&lt;/a>&lt;/p>
&lt;p>And then let&amp;rsquo;s say you also use your full name on GitHub.&lt;/p>
&lt;pre tabindex="0">&lt;code>% ssh whoami.filippo.io
The authenticity of host &amp;#39;whoami.filippo.io (2a09:8280:1::a:5d6)&amp;#39; can&amp;#39;t be established.
ED25519 key fingerprint is SHA256:qGAqPqtlvFBCt4LfMME3IgJqZWlcrlBMxNmGjhLVYzY.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &amp;#39;whoami.filippo.io&amp;#39; (ED25519) to the list of known hosts.

 +---------------------------------------------------------------------+
 | |
 | _o/ Hello Thiago Perrotta!
 | |
 | |
 | Did you know that ssh sends all your public keys to any server |
 | it tries to authenticate to? |
 | |
 | We matched them to the keys of your GitHub account, |
 | @thiagowfx, which are available via the GraphQL API
 | and at https://github.com/thiagowfx.keys
 | |
 | -- Filippo (https://filippo.io) |
 | |
 | |
 | P.S. The source of this server is at |
 | https://github.com/FiloSottile/whoami.filippo.io |
 | |
 +---------------------------------------------------------------------+

Shared connection to whoami.filippo.io closed.
&lt;/code>&lt;/pre>&lt;p>Then be careful when connecting to random public ssh servers when you have an
intent to be anonymous.&lt;/p></description></item><item><title>Shell text substitution</title><link>https://perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><guid>https://perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p>
&lt;h2 id="terraform">terraform&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform plan -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform apply -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^init^plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^plan^apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="systemd">systemd&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl restart nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl status nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p></description></item><item><title>★ Tools you should know about: moreutils</title><link>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><guid>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p>
&lt;h2 id="sponge">sponge&lt;/h2>
&lt;blockquote>
&lt;p>sponge(1) - soak up standard input and write to a file&lt;/p>
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s a typical workflow &lt;code>sponge(1)&lt;/code> is great at:&lt;/p></description></item><item><title>Linux: US International keyboard layout</title><link>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><guid>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>There are basically two layouts:&lt;/p>
&lt;ol>
&lt;li>US (&lt;em>&amp;lsquo;vanilla&amp;rsquo;&lt;/em>): type accents like &lt;code>'^`~&lt;/code> and they will be emitted immediately&lt;/li>
&lt;li>US International (INTL): accents are the so called &lt;a href="https://en.wikipedia.org/wiki/Dead_key">&amp;lsquo;dead keys&amp;rsquo;&lt;/a>:&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.&lt;/p></description></item><item><title>★ Wayland: from i3 to sway</title><link>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><guid>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;code>sway&lt;/code> works well with the &lt;code>i3&lt;/code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ tree ~/.config/&lt;span style="color:#f92672">{&lt;/span>i3,sway&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/i3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── i3.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/sway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── sway.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config -&amp;gt; ../../../i3/.config/i3/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The master config is
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config">&lt;code>~/.config/i3/config&lt;/code>&lt;/a>.
It is pretty standard, generated by
&lt;a href="https://build.i3wm.org/docs/i3-config-wizard.html">&lt;code>i3-config-wizard&lt;/code>&lt;/a> with
a few tweaks on top for my own workflow. It works for both &lt;code>i3&lt;/code> and &lt;code>sway&lt;/code>.
The config contains this snippet:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Load user configs if existing. Order is important.
include conf.d/*.conf
&lt;/code>&lt;/pre>&lt;p>The snippet allows drop-in customizations to live in &lt;code>conf.d&lt;/code>. The &lt;code>include&lt;/code> directive is a relatively &lt;a href="https://github.com/i3/i3/pull/4420">new&lt;/a> addition to the i3config syntax and it&amp;rsquo;s the main reason this setup is elegant and minimalist.&lt;/p></description></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p></description></item><item><title>★ SSH plus tmux automatically</title><link>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><guid>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p>
&lt;h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)&lt;/h2>
&lt;p>Start &lt;code>tmux&lt;/code>, forcing unicode, attaching to and/or creating a session named &lt;em>main&lt;/em>:&lt;/p></description></item></channel></rss>