<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on not just serendipity 🍀</title><link>https://perrotta.dev/tags/linux/</link><description>Recent content in Linux on not just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Mon, 23 Dec 2024 22:52:40 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Running multiple servers in a single bash script</title><link>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</link><pubDate>Mon, 23 Dec 2024 22:52:40 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</guid><description>&lt;p>Inspired by &lt;a href="https://github.com/simonw/til/blob/main/bash/multiple-servers.md">Simon
Willison&lt;/a>&amp;rsquo;s
TIL.&lt;/p>
&lt;p>When I was working on the &lt;a href="https://stadia.com/">Stadia&lt;/a> Partner Portal as a
full-stack tech lead, I wrote and maintained a &lt;code>run.sh&lt;/code> script that would start
up our two (front-end and back-end) Boq&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> server instances.&lt;/p>
&lt;p>It resembled the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kill $pid_fe $pid_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trap cleanup SIGINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal/ui &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_fe&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_be&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wait
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This version is heavily simplified, but that was its gist. It worked perfectly.
Back in ~2018, it took quite a bit of trial-and-error to get it right. Now it
seems so easy to just ask GenAI to generate it for you! Yikes. Our profession
might get obsoleted in just a few more years to come&amp;hellip;&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>A proprietary / internal framework for web applications.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p>
&lt;ol start="2">
&lt;li>force stdout to write to a TTY (or to pretend that it will write to a TTY):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% unbuffer ls --color&lt;span style="color:#f92672">=&lt;/span>auto | less -R
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;code>less&lt;/code> will properly recognize and display color output from
&lt;code>ls&lt;/code>.&lt;/p></description></item><item><title>Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p>
&lt;ul>
&lt;li>Browser: Google Chrome on macOS, Chromium on Linux, Safari on iOS.&lt;/li>
&lt;li>Search: A combination of Google and DuckDuckGo (mostly for their &lt;a href="https://duckduckgo.com/bangs">!bangs&lt;/a>).&lt;/li>
&lt;li>Writing: A combination of VSCode, &lt;code>vim&lt;/code> and &lt;a href="https://github.com/MarkEdit-app/MarkEdit">MarkEdit&lt;/a> (macOS markdown app). I never got around to long-form writing in Obsidian or Logseq, however it&amp;rsquo;s something I strive to.&lt;/li>
&lt;li>Cloud File Storage: There&amp;rsquo;s no need to share this. Basic OpSec. Why would people share it?&lt;/li>
&lt;li>Chat: WhatsApp remains king in terms of popularity, despite Telegram being superior from an architectural and usability perspective for power users. Facebook Messenger is officially dead at this point. And I&amp;rsquo;m too much of a millennial for all other apps (Discord, Matrix, etc). Disappearing messages exist in all of these, except Instagram.&lt;/li>
&lt;li>Scheduling: There&amp;rsquo;s no real choice here. You use the platform your employer uses. Otherwise, Google Calendar is the most sensible choice other than self-hosting.&lt;/li>
&lt;li>Video Calls: Ditto. I am way too used to Google Meet to justify switching to an alternative at this point.&lt;/li>
&lt;li>Music: Spotify, hands down. YouTube Music is a good fallback. There&amp;rsquo;s no need to pay for YouTube Premium for music, do your research.&lt;/li>
&lt;li>Podcasts: Overcast on iOS.&lt;/li>
&lt;li>Password Management: Once again, why would you share this?&lt;/li>
&lt;li>Code Editor: VScode and &lt;code>vim&lt;/code>. Maybe I&amp;rsquo;ll switch to &lt;code>neovim&lt;/code> at some point. I refrain from using IDEs in general but, when I need to, JetBrains is the answer. I tried &lt;a href="https://zed.dev/">&lt;code>zed&lt;/code>&lt;/a> this year but wasn&amp;rsquo;t convinced, and their core team is quite small. The flurry of &amp;ldquo;AI&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> editors should be ignored, as none of them are likely to stick long-term. Instead, it&amp;rsquo;s better to invest in &amp;ldquo;AI&amp;rdquo; tooling that is editor agnostic; for example, Simon Willison&amp;rsquo;s &lt;a href="https://github.com/simonw/llm">&lt;code>llm&lt;/code>&lt;/a>, or GitHub Copilot.&lt;/li>
&lt;li>Terminal: iTerm2 on macOS. I haven&amp;rsquo;t used desktop linux in a while (:sad:), but I&amp;rsquo;d probably still stick to Tilix and/or Alacritty there. I no longer use hterm (ChromeOS).&lt;/li>
&lt;li>VPN: Unless you&amp;rsquo;re rolling your own, it doesn&amp;rsquo;t matter too much. Avoid the big players if you can afford to.&lt;/li>
&lt;li>Bookmarks: None. &lt;a href="https://www.goodreads.com/book/show/25614984-spark-joy">Absolutely none&lt;/a>. When I need to store &lt;em>transient&lt;/em> link lists, I use my Second Brain app to do so.&lt;/li>
&lt;li>Read It Later: Ditto as above. Otherwise: starring articles on Miniflux, or keeping Safari tabs open until I get to them, or parking a handful of items in an &amp;ldquo;inbox&amp;rdquo; browser bookmarks folder.&lt;/li>
&lt;li>Mail Client: The official clients of my email providers. No agnostic app at this time. It&amp;rsquo;s especially inconvenient to do so on iOS.&lt;/li>
&lt;li>Mail Server: N/A.&lt;/li>
&lt;li>Launcher: &lt;code>Cmd-Space&lt;/code> on macOS a.k.a. Spotlight. I keep Raycast around but I rarely use it. On Linux &lt;code>i3-dmenu-desktop&lt;/code> is still my favorite.&lt;/li>
&lt;li>Screenshots: &lt;code>Cmd-Shift-4&lt;/code> on macOS, or &lt;code>scrot&lt;/code> on Linux.&lt;/li>
&lt;li>Menu Bar: &lt;a href="https://github.com/dwarvesf/hidden">Hidden Bar&lt;/a>. It&amp;rsquo;s free, and available as a cask on homebrew.&lt;/li>
&lt;li>Containers: Rancher Desktop.&lt;/li>
&lt;li>Automation: None. I tried Hammerspoon this year but found no use for it.&lt;/li>
&lt;li>Second Brain: A mixture of Obsidian and Logseq. Which I&amp;rsquo;d really like to end, it would be easier to have a single app to rule them all, as they both support multiple vaults / graphs anyway (e.g. to partition personal vs work notes).&lt;/li>
&lt;li>Operating System: &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a> is my current favorite for servers, and I&amp;rsquo;m biased anyway because I maintain a couple of aports (packages) there. For desktop, it&amp;rsquo;s awfully hard to use anything other than macOS ever since M1 processors got released. I miss Linux desktop from time to time but realistically it&amp;rsquo;s no longer an intrinsic goal of mine; that said, I&amp;rsquo;d likely go back to my beloved Arch Linux should that ever reoccur.&lt;/li>
&lt;li>Shell: &lt;code>zsh&lt;/code> + &lt;a href="https://grml.org/zsh/">&lt;code>grml-zsh-config&lt;/code>&lt;/a>, no change here. Sometimes I think of migrating to &lt;code>fish&lt;/code>, but the POSIX incompability always discourages me to do so.&lt;/li>
&lt;li>Terminal Multiplexer: &lt;code>tmux&lt;/code>, but only for remote sessions (&lt;code>ssh&lt;/code>). Locally I tend to just open new terminal tabs on VSCode and/or iTerm2. Alas, &lt;code>tmux&lt;/code> + &lt;code>VSCode&lt;/code> do not play well together anyway (citation needed, for another day).&lt;/li>
&lt;/ul>
&lt;p>This post was inspired by &lt;a href="https://micro.webology.dev/2024/12/19/default-apps.html">https://micro.webology.dev/2024/12/19/default-apps.html&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For the correct way to refer to them, pick one of: LLMs, Gen AI, or &amp;ldquo;AI&amp;rdquo;. &lt;em>Never&lt;/em> drop the quotes when using the plain term! Otherwise you fall into the same trap for using the term &amp;ldquo;crypto&amp;rdquo; to distinguish between cryptography and cryptocurrency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Steam Deck "downloading update" boot loop</title><link>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</link><pubDate>Sat, 05 Oct 2024 23:58:48 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</guid><description>&lt;p>Today I tried to use my Steam Deck to no avail.&lt;/p>
&lt;p>Upon turning it on, a &amp;ldquo;Downloading update (…)&amp;rdquo; splash screen would appear, then the device would quickly turn itself off, in a matter of seconds.&lt;/p>
&lt;p>Repeating this dance a couple of times yielded the same results.&lt;/p>
&lt;p>Then I found out that if you hold the three-dot button (the quick settings menu button) briefly after turning it on, you are prompted with a boot loader screen that resembles GRUB. In this screen it&amp;rsquo;s possible to roll back to an earlier OS version.&lt;/p>
&lt;p>The Steam Deck disk partitioning has two partitions (A and B), just choose the second one (i.e. not the latest one).&lt;/p>
&lt;p>This time upon restarting the device the boot loop was gone.&lt;/p>
&lt;p>&lt;strong>Credits&lt;/strong>: &lt;a href="https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/">https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/&lt;/a>&lt;/p></description></item><item><title>apk autoupdate on alpine linux</title><link>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</link><pubDate>Sun, 18 Aug 2024 17:32:48 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Upon running &lt;code>doas apk upgrade&lt;/code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.&lt;/p>
&lt;p>Deb-based systems have
&lt;a href="https://manpages.debian.org/bookworm/debian-goodies/checkrestart.8.en.html">&lt;code>checkrestart(8)&lt;/code>&lt;/a>.&lt;/p>
&lt;p>On Alpine, the best available approach as of today is &lt;a href="https://github.com/jirutka/apk-autoupdate/">https://github.com/jirutka/apk-autoupdate/&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>doas apk add apk-autoupdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$EDITOR /etc/apk/autoupdate.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then make the two following changes&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Because the default is &amp;#39;*&amp;#39;, which will prevent all services from restarting.
services_blacklist=&amp;#34;&amp;#34;

# List of services that should be restarted upon package upgrades.
services_whitelist=&amp;#34;miniflux tailscale&amp;#34;
&lt;/code>&lt;/pre>&lt;p>From this point on, whenever there are system upgrades for the aforementioned
services (&lt;code>doas apk upgrade&lt;/code>), they will be automatically restarted. There&amp;rsquo;s no
need for &lt;code>doas /etc/init.d/miniflux restart&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>h/t to @fossdd for replying to my
&lt;a href="https://github.com/jirutka/apk-autoupdate/issues/8">https://github.com/jirutka/apk-autoupdate/issues/8&lt;/a> thread.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine Linux: How to install all manpages (idiomatically)</title><link>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</link><pubDate>Sat, 20 Jul 2024 16:19:53 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</guid><description>&lt;p>This post is a reply to
&lt;a href="https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html">https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html&lt;/a>.&lt;/p>
&lt;p>The author describes their experience while attempting to install all man pages
for all the packages in use in their system.&lt;/p>
&lt;p>The breakdown progression has some valuable insights on how a typical Unix
sysadmin addresses a problem. I tend to adopt a similar approach when entering
unknown territory.&lt;/p>
&lt;p>However, in Alpine Linux, there is a better way.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>There is a &lt;code>docs&lt;/code> metapackage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apk info docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 description:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Meta package &lt;span style="color:#66d9ef">for&lt;/span> pulling in all documentation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 webpage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://alpinelinux.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 installed size:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4096&lt;/span> B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All you have to do is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk add docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>1/125&lt;span style="color:#f92672">)&lt;/span> Installing mandoc-doc &lt;span style="color:#f92672">(&lt;/span>1.14.6-r13&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>2/125&lt;span style="color:#f92672">)&lt;/span> Installing docs &lt;span style="color:#f92672">(&lt;/span>0.2-r6&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>3/125&lt;span style="color:#f92672">)&lt;/span> Installing libseccomp-doc &lt;span style="color:#f92672">(&lt;/span>2.5.5-r1&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>4/125&lt;span style="color:#f92672">)&lt;/span> Installing busybox-doc &lt;span style="color:#f92672">(&lt;/span>1.36.1-r31&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Likewise, it is trivial to get rid of all man pages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk del docs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I would like to give a few other suggestions to the author, if we were to assume
there is no &lt;code>docs&lt;/code> metapackage:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Step 2&lt;/strong>: You could also &lt;code>cat /etc/apk/world&lt;/code>
(&lt;a href="https://serverfault.com/questions/1032488/alpine-linux-apk-list-out-directly-installed-packages-by-apk-add">reference&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Step 4&lt;/strong>: &lt;code>combine&lt;/code> from &lt;a href="https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is more
user-friendly than &lt;code>comm&lt;/code>. I need to look up how to use &lt;code>comm&lt;/code> every single
time, whereas &lt;code>combine&lt;/code> is much easier to remember.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;p>This was also a typical &lt;a href="https://perrotta.dev/2024/06/xy-problem/">xyproblem&lt;/a> example:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What is the attempt? &amp;ldquo;I want to install, via &lt;code>apk add&lt;/code>, all &lt;code>foo-doc&lt;/code> packages
for every &lt;code>foo&lt;/code> package on my system&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the end goal? &amp;ldquo;I want to install all man pages for the installed
packages on my system&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Explain a crontab expression</title><link>https://perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p>
&lt;ul>
&lt;li>Option 1: Read the docs! The &lt;a href="https://wiki.archlinux.org/title/Cron">ArchWiki&lt;/a>
is frequently a great reference. Alternatively, use your favorite search
engine.&lt;/li>
&lt;li>Option 2: Ask ChatGPT! A simple &lt;code>cron: 0 0 * * *&lt;/code> prompt is enough. No need
to embezzle it with &lt;code>explain what this does&lt;/code> or &lt;code>what does this do?&lt;/code>.&lt;/li>
&lt;li>Option 3: Paste it into &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Localhost domain</title><link>https://perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>When I&amp;rsquo;m doing local development, I sometimes need a domain name that routes
back to localhost. I&amp;rsquo;ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I&amp;rsquo;ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>localdev.me&lt;/code> DNS is served through amazon. The domain name and any subdomains
point to &lt;code>127.0.0.1&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The next time you need a custom domain or subdomain for local development,
instead of hancking your hosts file you might consider localdev.me.&lt;/p>
&lt;/blockquote>
&lt;p>Source: &lt;a href="https://codeengineered.com/blog/2022/localdev-me/">https://codeengineered.com/blog/2022/localdev-me/&lt;/a>&lt;/p></description></item><item><title>Copy files from laptop to Steam Deck</title><link>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p>
&lt;p>Start a local HTTP server on your laptop:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
&lt;/code>&lt;/pre>&lt;p>Find the IP address of your laptop within your LAN:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ifconfig # macOS
$ ip addr # linux
&lt;/code>&lt;/pre>&lt;p>Now go to your Steam Deck, access &lt;code>http://&amp;lt;ip&amp;gt;:8000&lt;/code> via the installed web
browser, and download your files.&lt;/p>
&lt;p>Alternatively, run &lt;code>wget&lt;/code> / &lt;code>curl&lt;/code> in a terminal.&lt;/p></description></item><item><title>Rename files in bulk</title><link>https://perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p>
&lt;p>A simple example to rename all &lt;code>readme.md&lt;/code> files to &lt;code>README.md&lt;/code> for consistency:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#e6db74">&amp;#39;s/readme\.md/README.md/&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A more recent example (2024-07-25):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#e6db74">&amp;#39;s/promtail-global-testing/promtail-global/g&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there are nested directories that match the expression, you&amp;rsquo;ll need to run
&lt;code>rename&lt;/code> multiple times.&lt;/p></description></item><item><title>Sleep forever</title><link>https://perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep inf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep infinity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Previously I would call a command such as a &lt;code>while true&lt;/code> loop or the &lt;code>yes&lt;/code>
utility, but &lt;code>sleep&lt;/code> is also handy.&lt;/p></description></item><item><title>Bcrypt-hash a password</title><link>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/936/">&lt;img src="https://imgs.xkcd.com/comics/password_strength.png"
 alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>Here&amp;rsquo;s one way to do so via the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ htpasswd -nbBC &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;correct horse battery staple&amp;#39;&lt;/span> | tr -d &lt;span style="color:#e6db74">&amp;#39;:\n&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/$2y/$2a/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which yields:&lt;/p>
&lt;pre tabindex="0">&lt;code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
&lt;/code>&lt;/pre>&lt;p>You could verify it matches e.g. via &lt;a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Context&lt;/strong>: &lt;a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD&lt;/a> expects a
bcrypt-hashed password in its config file.&lt;/p></description></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p>
&lt;p>The &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs&lt;/a>
suggest using &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost/ || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>For Chartmuseum specifically we&amp;rsquo;re interested in its &lt;code>/health&lt;/code> endpoint, as per
&lt;a href="https://github.com/helm/chartmuseum/issues/28">this reference&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>But we&amp;rsquo;re using port 8080:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost:8080/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>If you use this healthcheck for the official chartmuseum image
(&lt;code>ghcr.io/helm/chartmuseum&lt;/code>) it will fail, because the Alpine Linux environment
it uses does not contain &lt;code>curl&lt;/code>.&lt;/p>
&lt;p>A straightforward fix is to use &lt;code>wget&lt;/code> instead:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;wget -q --spider http://localhost:8080/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>&lt;code>--spider&lt;/code> is needed because we do not want to download anything, &lt;code>-q&lt;/code> is
optional and short for &amp;ldquo;quiet&amp;rdquo;.&lt;/p>
&lt;p>The &lt;code>/health&lt;/code> endpoint merely returns a simple JSON:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">&amp;#34;healthy&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>References: &lt;a href="https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl">https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl&lt;/a>&lt;/p></description></item><item><title>Be aware that your public SSH keys can reveal your identity</title><link>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</link><pubDate>Fri, 03 May 2024 16:46:28 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</guid><description>&lt;p>If you have a GitHub account configured with SSH, your public keys are available
at &lt;code>https://github.com/$USERNAME.keys&lt;/code>.&lt;/p>
&lt;p>For example, mine: &lt;a href="https://github.com/thiagowfx.keys">https://github.com/thiagowfx.keys&lt;/a>&lt;/p>
&lt;p>And then let&amp;rsquo;s say you also use your full name on GitHub.&lt;/p>
&lt;pre tabindex="0">&lt;code>% ssh whoami.filippo.io
The authenticity of host &amp;#39;whoami.filippo.io (2a09:8280:1::a:5d6)&amp;#39; can&amp;#39;t be established.
ED25519 key fingerprint is SHA256:qGAqPqtlvFBCt4LfMME3IgJqZWlcrlBMxNmGjhLVYzY.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &amp;#39;whoami.filippo.io&amp;#39; (ED25519) to the list of known hosts.

 +---------------------------------------------------------------------+
 | |
 | _o/ Hello Thiago Perrotta!
 | |
 | |
 | Did you know that ssh sends all your public keys to any server |
 | it tries to authenticate to? |
 | |
 | We matched them to the keys of your GitHub account, |
 | @thiagowfx, which are available via the GraphQL API
 | and at https://github.com/thiagowfx.keys
 | |
 | -- Filippo (https://filippo.io) |
 | |
 | |
 | P.S. The source of this server is at |
 | https://github.com/FiloSottile/whoami.filippo.io |
 | |
 +---------------------------------------------------------------------+

Shared connection to whoami.filippo.io closed.
&lt;/code>&lt;/pre>&lt;p>Then be careful when connecting to random public ssh servers when you have an
intent to be anonymous.&lt;/p>
&lt;p>It&amp;rsquo;s possible to &amp;ldquo;hide&amp;rdquo; yourself by either setting the &lt;code>IdentitiesOnly=yes&lt;/code>
option, or by removing all your local ssh keys altogether, even if only
temporarily.&lt;/p></description></item><item><title>Shell text substitution</title><link>https://perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p>
&lt;h2 id="terraform">terraform&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform plan -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform apply -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^init^plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^plan^apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="systemd">systemd&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl restart nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl status nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl restart nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^restart^status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="one-observation">one observation&lt;/h2>
&lt;p>&lt;code>zsh&lt;/code> will run the substitution right away, whereas &lt;code>bash&lt;/code> will allow you
to review and edit the replaced command before running it.&lt;/p></description></item><item><title>Tools you should know about: moreutils</title><link>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p>
&lt;h2 id="sponge">sponge&lt;/h2>
&lt;blockquote>
&lt;p>sponge(1) - soak up standard input and write to a file&lt;/p>
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s a typical workflow &lt;code>sponge(1)&lt;/code> is great at:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Given a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Imagine that for whatever reason we want to replace &amp;#39;a&amp;#39; with &amp;#39;b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Naively, we could try this:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> &amp;gt; myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># However the file becomes empty!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sponge comes to the rescue!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> | sponge myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is great to use &lt;code>sponge&lt;/code> in lieu of &lt;code>&amp;gt;&lt;/code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.&lt;/p>
&lt;h2 id="vidir">vidir&lt;/h2>
&lt;blockquote>
&lt;p>vidir(1) - edit directories and filenames&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>vidir(1)&lt;/code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open &lt;code>vidir&lt;/code> at the top-level directory of this blog repository, it opens up &lt;code>vim&lt;/code> (although it doesn&amp;rsquo;t need to be &lt;code>vim&lt;/code>, your &lt;code>$EDITOR&lt;/code> is honoured) with the following content:&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>If I make, say, the following modifications (lines 7 and 8):&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>And then save and quit &lt;code>vim&lt;/code> (&lt;code>:wq&lt;/code>), then the effect would have been the same as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ mv Makefile GNUMakefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mv README.md README.rst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I changed my mind and decided not to save the modifications, I could just do &lt;code>:cq&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to leverage vim features such as &lt;code>.&lt;/code> (repeat command) and &lt;code>:%s/&lt;/code> (find and replace) to perform those mass file renames quickly and effectively. &lt;code>vidir&lt;/code> is a breeze to use!&lt;/p>
&lt;h2 id="ifne">ifne&lt;/h2>
&lt;blockquote>
&lt;p>ifne(1) - Run command if the standard input is not empty&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>ifne(1)&lt;/code> is effective when used with &lt;code>find&lt;/code> or &lt;code>fd&lt;/code> to keep shell pipes &amp;ldquo;happy&amp;rdquo;. Here&amp;rsquo;s one simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#e6db74">&amp;#39;*.cpp&amp;#39;&lt;/span> | xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should work as expected, but it&amp;rsquo;s cleaner to do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#e6db74">&amp;#39;*.cpp&amp;#39;&lt;/span> | ifne xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The added &lt;code>ifne&lt;/code> ensures the &lt;code>xargs&lt;/code> command is only executed if and only if &lt;code>find&lt;/code> yields at least one result in its output.&lt;/p>
&lt;p>This wasn&amp;rsquo;t a very practical example though: a more realistic way to use &lt;code>ifne&lt;/code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend &lt;code>ifne&lt;/code> to it:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ this | is | a | complicated | pipe
# assume &amp;#34;complicated&amp;#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
&lt;/code>&lt;/pre>&lt;h2 id="combine">combine&lt;/h2>
&lt;blockquote>
&lt;p>combine(1) - combine sets of lines from two files using boolean operations&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>combine(1)&lt;/code> is pretty much &lt;code>comm(1)&lt;/code>, but much more user-friendly. Given two files &lt;code>file1&lt;/code> and &lt;code>file2&lt;/code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&amp;rsquo;s one example to find the &lt;em>common lines&lt;/em> in &lt;em>both&lt;/em> files, compare &lt;code>combine&lt;/code> and &lt;code>comm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ combine file1 and file2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ comm -12 file1 file2 &lt;span style="color:#75715e"># flags are harder to remember&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Linux: US International keyboard layout</title><link>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>There are basically two layouts:&lt;/p>
&lt;ol>
&lt;li>US (&lt;em>&amp;lsquo;vanilla&amp;rsquo;&lt;/em>): type accents like &lt;code>'^`~&lt;/code> and they will be emitted immediately&lt;/li>
&lt;li>US International (INTL): accents are the so called &lt;a href="https://en.wikipedia.org/wiki/Dead_key">&amp;lsquo;dead keys&amp;rsquo;&lt;/a>:&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.&lt;/p>
&lt;/blockquote>
&lt;p>We can switch between keyboard layouts with &lt;code>setxkbmap&lt;/code>. It&amp;rsquo;s also possible to
use &lt;code>localectl&lt;/code> in systemd-based distros, but its syntax is harder to remember
so I won&amp;rsquo;t even include it here.&lt;/p>
&lt;h2 id="set-us-vanilla-keyboard-layout">Set US &amp;lsquo;vanilla&amp;rsquo; keyboard layout&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ setxkbmap us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what a standard QWERTY keyboard should use to type in English.&lt;/p>
&lt;h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ setxkbmap -layout us -variant intl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what a standard QWERTY keyboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> should use to type, for example, in Portuguese or in German.&lt;/p>
&lt;h3 id="portuguese">Portuguese&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>- á é í ó ú : &amp;#39; + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- â ê î ô û : ^ + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ã õ : ~ + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- à : ` + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ç (cedilla) : Alt Gr + , (Option + c on macOS)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="german">German&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>- ß (ss) : Alt Gr + s (Option + s on macOS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ä ö ü : &amp;#34; + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Alt Gr is typically the Right Alt key.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Wayland: from i3 to sway</title><link>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;code>sway&lt;/code> works well with the &lt;code>i3&lt;/code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ tree ~/.config/&lt;span style="color:#f92672">{&lt;/span>i3,sway&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/i3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── i3.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/sway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── sway.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config -&amp;gt; ../../../i3/.config/i3/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The master config is
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config">&lt;code>~/.config/i3/config&lt;/code>&lt;/a>.
It is pretty standard, generated by
&lt;a href="https://build.i3wm.org/docs/i3-config-wizard.html">&lt;code>i3-config-wizard&lt;/code>&lt;/a> with
a few tweaks on top for my own workflow. It works for both &lt;code>i3&lt;/code> and &lt;code>sway&lt;/code>.
The config contains this snippet:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Load user configs if existing. Order is important.
include conf.d/*.conf
&lt;/code>&lt;/pre>&lt;p>The snippet allows drop-in customizations to live in &lt;code>conf.d&lt;/code>. The &lt;code>include&lt;/code> directive is a relatively &lt;a href="https://github.com/i3/i3/pull/4420">new&lt;/a> addition to the i3config syntax and it&amp;rsquo;s the main reason this setup is elegant and minimalist.&lt;/p>
&lt;ul>
&lt;li>i3-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf">&lt;code>~/.config/i3/conf.d/i3.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with &lt;code>sway&lt;/code>, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
# dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25

 colors {
 background $black
 statusline $white

 focused_workspace $bgcolor $bgcolor $white $black
 active_workspace $gray $gray $black $gray
 inactive_workspace $black $black $gray $gray
 urgent_workspace $red $red $white $green
 }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s possible some of these configs will become compatible with &lt;code>sway&lt;/code> over time, but at the time of this writing they are not.&lt;/p>
&lt;ul>
&lt;li>sway-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf">&lt;code>~/.config/sway/conf.d/sway.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with i3, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
# sway(5)
# https://github.com/swaywm/sway/wiki
# https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &amp;#34;*&amp;#34; scale 1.5

# Wallpaper
output &amp;#34;*&amp;#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>Most of those are wayland-specific options.&lt;/p>
&lt;h2 id="quirks">Quirks&lt;/h2>
&lt;p>&lt;code>gaps&lt;/code> is available in &lt;code>i3&lt;/code> as well but only if you use
&lt;a href="https://github.com/Airblader/i3">&lt;code>i3-gaps&lt;/code>&lt;/a>, which generally I refuse to in
order to stay closer to vanilla/upstream &lt;code>i3&lt;/code>.&lt;/p>
&lt;p>The &lt;code>play-pause&lt;/code> multimedia key is
a &lt;a href="https://github.com/swaywm/sway/issues/4783">bug&lt;/a> I found on &lt;code>sway&lt;/code>. It&amp;rsquo;s quite
annoying, the workaround as you can see above is to use &lt;code>bindcode&lt;/code> instead of
&lt;code>bindsym&lt;/code>. For more details see the bug.&lt;/p>
&lt;p>In general &lt;code>sway&lt;/code> works very well out-of-the-box so long as you install
&lt;a href="https://wayland.freedesktop.org/xserver.html">XWayland&lt;/a> (&lt;code>xorg-xwayland&lt;/code> on
Arch Linux). XWayland &lt;strong>transparently&lt;/strong> proxies X11 apps to a X11 server that
runs inside wayland.&lt;/p>
&lt;p>It&amp;rsquo;s possible to detect those apps by running
&lt;a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html">&lt;code>xprop&lt;/code>&lt;/a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
&lt;a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes">&lt;code>xeyes&lt;/code>&lt;/a>
is another way to detect them.&lt;/p>
&lt;p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
&lt;code>xwayland disable&lt;/code> to the &lt;code>sway&lt;/code> config. I wouldn&amp;rsquo;t recommend that though, most
Linux GUI apps aren&amp;rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&amp;rsquo;s life.&lt;/p>
&lt;p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&amp;gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&amp;rsquo;s
noticeable.&lt;/p>
&lt;p>There&amp;rsquo;s no need to replace all of your small &lt;code>i3&lt;/code> Xorg utilities with wayland
ones. For example, &lt;a href="https://github.com/davatorium/rofi">&lt;code>rofi&lt;/code>&lt;/a> (application
launcher) works just fine (no need for &lt;code>wofi&lt;/code>). The stock &lt;code>i3&lt;/code> bar (&lt;code>sway&lt;/code> bar?)
works just fine, there&amp;rsquo;s no need for &lt;code>polybar&lt;/code> or &lt;code>waybar&lt;/code>.&lt;/p>
&lt;p>Some utilities need to be replaced though. For example, &lt;code>dunst&lt;/code> (notification
daemon) does not seem to work with &lt;code>sway&lt;/code> out-of-the-box, &lt;code>mako&lt;/code> seems to be a
recommended replacement. &lt;code>i3lock&lt;/code> (lock screen) also does not work, &lt;code>sway&lt;/code>
comes with its own screen lock directives. Screenshotters (e.g. &lt;code>scrot&lt;/code>) will
also need to be replaced.&lt;/p>
&lt;p>The system tray does not seem to work fine out-of-the-box. I haven&amp;rsquo;t
investigated much to figure out what&amp;rsquo;s wrong with it.&lt;/p>
&lt;p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying &lt;a href="https://git.sr.ht/~kennylevinsen/greetd">&lt;code>greetd&lt;/code>&lt;/a>,
&lt;a href="https://github.com/tvrzna/emptty/">&lt;code>emptty&lt;/code>&lt;/a> and
&lt;a href="https://github.com/fairyglade/ly">&lt;code>ly&lt;/code>&lt;/a>, in that order. &lt;code>ly&lt;/code> is in my opinion
the best one in terms of balancing simplicity and usefulness.&lt;/p>
&lt;p>&lt;code>sway&lt;/code> / &lt;code>XWayland&lt;/code> doesn&amp;rsquo;t source &lt;code>~/.Xresources&lt;/code>. This is an issue if you
rely on customizations therein. It does source &lt;code>~/.Xdefaults&lt;/code> though!
Leveraging this, I did the following changes:&lt;/p>
&lt;ul>
&lt;li>(i) &lt;code>~/.Xresources&lt;/code> sources &lt;code>~/.Xdefaults&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to X11 only.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xdefaults &lt;span style="color:#66d9ef">for&lt;/span> settings that apply to both X11 and Wayland &lt;span style="color:#f92672">(&lt;/span>xorg-xwayland&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include &amp;#34;.Xdefaults&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Source:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -merge ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Dump all properties:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Check &lt;span style="color:#66d9ef">if&lt;/span> DPI is set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q | grep -i dpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! HiDPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Common values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">96&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x1.0, baseline&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">144&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x1.5&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">192&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x2.0, HiDPI&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.dpi: &lt;span style="color:#ae81ff">144&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>(ii) &lt;code>~/.Xdefaults&lt;/code> holds my customizations that originally lived in &lt;code>~/.Xresources&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xdefaults
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to both X11 and Wayland &lt;span style="color:#f92672">(&lt;/span>xorg-xwayland&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xresources &lt;span style="color:#66d9ef">for&lt;/span> X11-only settings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.antialias: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.hinting: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In principle I could just have symlinked them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ln -s ~/.Xresources ~/.Xdefaults
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reason why I didn&amp;rsquo;t do it is to avoid double scaling (DPI). You see, my
&lt;code>sway&lt;/code> config already sets DPI / scaling to 1.5x. If we do that in
&lt;code>~/.Xdefaults&lt;/code> as well then Xorg applications would have been scaled twice.&lt;/p>
&lt;h2 id="closing-remarks">Closing remarks&lt;/h2>
&lt;p>In general Wayland / &lt;code>sway&lt;/code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&amp;rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&amp;rsquo;ll run into other quirks. I have mixed feelings
and wouldn&amp;rsquo;t necessarily recommend it. I wouldn&amp;rsquo;t give an anti recommendation
either. It&amp;rsquo;s complicated&amp;hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.&lt;/p></description></item><item><title>nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p>
&lt;p>For simplicity, think of &lt;code>nix-env&lt;/code> as a package manager, akin to &lt;code>apk&lt;/code>,
&lt;code>pacman&lt;/code>, &lt;code>brew&lt;/code>, &lt;code>apt&lt;/code>, &lt;code>pkg&lt;/code>, etc.&lt;/p>
&lt;h2 id="install-a-package">Install a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#e6db74">&amp;#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I see some guides using &lt;code>nix-env -iA&lt;/code> but &lt;code>-i&lt;/code> seems to suffice. We could
optionally specify the &lt;code>nixpkgs.&lt;/code> prefix:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#e6db74">&amp;#39;nixpkgs.moreutils&amp;#39;&lt;/span> matches no derivations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh no! Maybe that&amp;rsquo;s what the &lt;code>-A&lt;/code> is for?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -iA nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replacing old &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Indeed! Apparently that &lt;code>-A&lt;/code> thing stands for attribute. The only thing I know
is that there are both &lt;code>nixpkgs.*&lt;/code> and &lt;code>nixos.*&lt;/code>. But I don&amp;rsquo;t care about NixOS
at this point. I&amp;rsquo;ll just ignore &lt;code>-A&lt;/code> from now on, for the time being.&lt;/p>
&lt;h2 id="list-installed-packages">List installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! This actually gets displayed in my &lt;code>less&lt;/code> pager.&lt;/p>
&lt;h2 id="upgrade-installed-packages">Upgrade installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&amp;rsquo;s some update to one of my
installed CLI applications. I&amp;rsquo;ve heard there&amp;rsquo;s something called nix channel to
control that. Leaving it for another day though.&lt;/p>
&lt;p>&lt;strong>Update(2022-02-18)&lt;/strong>: I learned that &lt;code>nix-env -u&lt;/code> is akin to &lt;code>apt upgrade&lt;/code> or
&lt;code>apk upgrade&lt;/code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
&lt;code>apt update&lt;/code> or &lt;code>apk update&lt;/code>, use &lt;code>nix-channel --update&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: On macOS this needs to be &lt;code>sudo -i nix-channel --update&lt;/code>. See
&lt;a href="https://github.com/NixOS/nix/issues/3595">issue&lt;/a>.&lt;/p>
&lt;h2 id="uninstall-a-package">Uninstall a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env --uninstall moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uninstalling &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#e6db74">&amp;#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;h2 id="search-for-packages">Search for packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP &lt;span style="color:#e6db74">&amp;#39;.*moreutils.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.*&lt;/code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &amp;lsquo;derivation&amp;rsquo; in Nix):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nixpkgs.moreutils moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I write the wrong package name, the following happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#e6db74">&amp;#39;moreutil&amp;#39;&lt;/span> matches no derivations, maybe you meant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moreutils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It was helpful in this case, but I wouldn&amp;rsquo;t always count on that. It is a bit
annoying that there&amp;rsquo;s no &lt;code>nix search moreutils&lt;/code> command, but it seems that
&lt;code>nix-env&lt;/code> is very heavily tailored to use short flags, just like &lt;code>pacman&lt;/code> in
Arch Linux. I got used to &lt;code>pacman&lt;/code>, hopefully I can get used to the &lt;code>nix-env&lt;/code>
short flags at some point.&lt;/p>
&lt;p>Actually I tried it out and there is a &lt;code>nix search&lt;/code> command!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix search moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: experimental Nix feature &lt;span style="color:#e6db74">&amp;#39;nix-command&amp;#39;&lt;/span> is disabled; use &lt;span style="color:#e6db74">&amp;#39;--extra-experimental-features nix-command&amp;#39;&lt;/span> to override
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This isn&amp;rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the &lt;code>nix-env&lt;/code> form for now.&lt;/p>
&lt;p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>atool-0.39.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-interactive-5.1-p12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coreutils-9.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exa-0.10.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fpp-0.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fzf-0.29.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git-2.34.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>htop-3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo-0.92.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jq-1.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>less-600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ncdu-1.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl5.34.0-ack-3.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranger-1.9.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stow-2.3.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmux-3.2a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree-1.8.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim-8.2.4186
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watch-procps-3.3.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget-1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zoxide-0.8.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were very intuitive to find, with the exception of &lt;code>ack&lt;/code> and &lt;code>bash-interactive&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bash&lt;/code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
&lt;code>~/.bashrc&lt;/code> wrecked havoc with the non-interactive version.&lt;/li>
&lt;li>&lt;code>ack&lt;/code> is very oddly named. Really. Also: &lt;code>nix-env -i ack&lt;/code> doesn&amp;rsquo;t work, but
&lt;code>nix-env -iA nixpkgs.ack&lt;/code> does. I suspect it will be hard to ignore &lt;code>-A&lt;/code> in
the future.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Strictly speaking there&amp;rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, &lt;a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu&lt;/a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>SSH plus tmux automatically</title><link>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p>
&lt;h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)&lt;/h2>
&lt;p>Start &lt;code>tmux&lt;/code>, forcing unicode, attaching to and/or creating a session named &lt;em>main&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-u&lt;/code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&amp;rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&amp;rsquo;s safer to always include &lt;code>-u&lt;/code> just in case.&lt;/p>
&lt;p>Tip: If it&amp;rsquo;s annoying to remember to type the full command above, consider adding an &lt;code>alias&lt;/code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the &lt;a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell&lt;/a> extension.&lt;/p>
&lt;h2 id="option-2-use-sshconfig-client-side">Option #2: Use &lt;code>~/.ssh/config&lt;/code> (client-side)&lt;/h2>
&lt;p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.ssh/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestTTY yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RemoteCommand tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need to match all hosts (&lt;code>Host *&lt;/code>), if you&amp;rsquo;d rather match one or more specific hosts, refer to the ssh config syntax &lt;code>ssh_config(5)&lt;/code> to add them. A simple example would be &lt;code>Host mymachine.example.org&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Caveat&lt;/strong>: I&amp;rsquo;ve found this method interferes with &lt;code>git&lt;/code> + &lt;code>ssh&lt;/code> authentication. More specifically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git remote -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cannot execute command-line and remote command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: Could not read from remote repository.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please make sure you have the correct access rights
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>and the repository exists.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&amp;rsquo;t use it with &lt;code>Host *&lt;/code>.&lt;/p>
&lt;h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use &lt;code>~/.bash_profile&lt;/code> or similar (server-side, recommended)&lt;/h2>
&lt;p>This method leverages your login shell startup config file (&lt;code>~/.bash_profile&lt;/code>, &lt;code>~/.zprofile&lt;/code>, etc) to automatically spawn &lt;code>tmux&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The session is called `main`.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Escape hatch:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ssh &amp;lt;host&amp;gt; -t -- NOTMUX=1 &amp;lt;shell&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$NOTMUX&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TMUX&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$SSH_TTY&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $- &lt;span style="color:#f92672">=&lt;/span>~ i &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>if&lt;/code> basically checks:&lt;/p>
&lt;ul>
&lt;li>whether we&amp;rsquo;re not already inside a tmux session (we shouldn&amp;rsquo;t be), so that we don&amp;rsquo;t nest &lt;code>tmux&lt;/code>&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing the shell via &lt;code>ssh&lt;/code> (we should be)&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing an interactive shell (we should be), so that it doesn&amp;rsquo;t interfere with oneshot &lt;code>ssh&lt;/code> commands&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s also a escape hatch. If you want to get an interactive shell but bypass &lt;code>tmux&lt;/code> for some reason&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, just set &lt;code>NOTMUX=1&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- NOTMUX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn &lt;code>tmux&lt;/code> server-side, or selectively spawn &lt;code>tmux&lt;/code> client-side.&lt;/p>
&lt;p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your &lt;code>ssh&lt;/code> host settings. That said, in scenarios where I fully control a host and it&amp;rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For example, maybe if &lt;code>tmux&lt;/code> broke due to a recent upgrade, or if the &lt;code>~/.tmux.conf&lt;/code> is invalid.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>