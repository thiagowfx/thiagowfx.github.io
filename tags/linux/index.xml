<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/linux/</link><description>Recent content in Linux on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Fri, 16 May 2025 17:40:26 +0200</lastBuildDate><atom:link href="https://perrotta.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Espanso: hello world</title><link>https://perrotta.dev/2025/05/espanso-hello-world/</link><pubDate>Fri, 16 May 2025 17:40:26 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/05/espanso-hello-world/</guid><description>&lt;p>&lt;a href="https://perrotta.dev/2025/03/maccy-pin-items/">Previously&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Sometimes it&amp;rsquo;s useful to have certain code snippets be easily accessible from
the clipboard manager.&lt;/p>
&lt;p>[&amp;hellip;]&lt;/p>
&lt;p>This workflow is decent for temporary entries. For semi-permanent ones, I
should look into &lt;a href="https://espanso.org/">Espanso&lt;/a> at some point. For now,
&lt;a href="https://perrotta.dev/2025/01/raycast-snippets/">Raycast Snippets&lt;/a> fills in this
role.&lt;/p>
&lt;/blockquote>
&lt;p>Today is the day!&lt;/p>
&lt;p>&lt;a href="https://espanso.org/">Espanso&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Supercharge your typing| experience.&lt;/p>
&lt;p>Tired of typing the same sentences over and over? Discover the incredible
power of a full-blown text expander.&lt;/p>
&lt;/blockquote>
&lt;p>So?&lt;/p>
&lt;blockquote>
&lt;p>How it works&lt;/p>
&lt;p>Espanso detects when you type a keyword&lt;/p>
&lt;p>Today is :date&lt;/p>
&lt;p>(becomes) Today is 05/16/2025&lt;/p>
&lt;p>and replaces it while you&amp;rsquo;re typing.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s just like &lt;a href="https://www.raycast.com/core-features/snippets">Text Expander&lt;/a>
from Raycast snippets.&lt;/p>
&lt;p>It&amp;rsquo;s available on all major OSes (Windows, Linux, macOS). I am testing it on
macOS. Installation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% brew install espanso
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After installing it and opening it, give it all sorts of System Accessibility
permissions so that it can perform its magic.&lt;/p>
&lt;p>This is just a &amp;ldquo;hello world&amp;rdquo; post, therefore I am not going to list every single
capability it has. Let&amp;rsquo;s just keep it simple and get our feet wet.&lt;/p>
&lt;p>I have to type &lt;code>helm ls -A --max 9999 | grep -i {release}&lt;/code> &lt;a href="https://perrotta.dev/2024/08/helm-list-all-installed-charts-in-the-cluster/">all the time&lt;/a>, and I&amp;rsquo;m fed
up with it.&lt;/p>
&lt;p>I want to create a &lt;code>:helm:ls&lt;/code> expansion that will trigger that command
expansion.&lt;/p>
&lt;p>Run &lt;code>espanso edit&lt;/code>. It opens a stock &lt;code>base.yml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># espanso match file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># For a complete introduction, visit the official docs at: https://espanso.org/docs/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># You can use this file to define the base matches (aka snippets)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># that will be available in every application when using espanso.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Matches are substitution rules: when you type the &amp;#34;trigger&amp;#34; string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># it gets replaced by the &amp;#34;replace&amp;#34; string.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">matches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Simple text replacement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">trigger&lt;/span>: &lt;span style="color:#98c379">&amp;#34;:espanso&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">replace&lt;/span>: &lt;span style="color:#98c379">&amp;#34;Hi there!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># NOTE: espanso uses YAML to define matches, so pay attention to the indentation!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># But matches can also be dynamic:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Print the current date&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">trigger&lt;/span>: &lt;span style="color:#98c379">&amp;#34;:date&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">replace&lt;/span>: &lt;span style="color:#98c379">&amp;#34;{{mydate}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: mydate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: date
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">format&lt;/span>: &lt;span style="color:#98c379">&amp;#34;%m/%d/%Y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Print the output of a shell command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">trigger&lt;/span>: &lt;span style="color:#98c379">&amp;#34;:shell&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">replace&lt;/span>: &lt;span style="color:#98c379">&amp;#34;{{output}}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">vars&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">type&lt;/span>: shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">params&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cmd&lt;/span>: &lt;span style="color:#98c379">&amp;#34;echo &amp;#39;Hello from your shell&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># And much more! For more information, visit the docs: https://espanso.org/docs/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The file is self-contained and well-documented enough that I do not need to look
up any docs nor use AI to add the desired entry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">matches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">trigger&lt;/span>: &lt;span style="color:#98c379">&amp;#34;:helm:ls&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">replace&lt;/span>: &lt;span style="color:#98c379">&amp;#34;helm ls --max 9999 -A | grep -i&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the file is saved, it&amp;rsquo;s magic ✨, and it takes effect immediately.&lt;/p>
&lt;p>Example usage&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>:helm:ls redis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm ls --max &lt;span style="color:#d19a66">9999&lt;/span> -A | grep -i redis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For reference, this is the full path to the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% espanso edit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Editing file: /Users/thiago.perrotta/Library/Application Support/espanso/match/base.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am particularly excited it&amp;rsquo;s YAML and it&amp;rsquo;s accessible in a stable location: it
should be quite easy to integrate it with my dotfiles later on.&lt;/p>
&lt;p>Its out-of-the-box usability (for developers who prefer text files) and
perceived speed are better than Raycast snippets.&lt;/p>
&lt;p>There are so many possibilities to explore: command &lt;del>espansions&lt;/del> expansions, LLM prompts,
email greetings, canned responses, and so on.&lt;/p>
&lt;p>For Raycast snippets I was using &lt;code>@@&lt;/code> as a prefix. Espanso seems to recommend
&lt;code>:&lt;/code>. Let&amp;rsquo;s see which one I will stick to.&lt;/p>
&lt;p>Also, I&amp;rsquo;d like to thank Farzad for the recommendation via email. It wasn&amp;rsquo;t the
first time I had heard about Espanso, but it has reinforced my desire to try it
out.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In order to type a plain &lt;code>:helm:ls&lt;/code> without expansion (e.g. for this blog
post), type the folowing: &lt;code>:helm:l{left arrow}{right arrow}s&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Nostalgia: The Linux Setup - Thiago Perrotta, Student</title><link>https://perrotta.dev/2025/05/nostalgia-the-linux-setup-thiago-perrotta-student/</link><pubDate>Thu, 15 May 2025 22:43:17 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/05/nostalgia-the-linux-setup-thiago-perrotta-student/</guid><description>&lt;p>Back in the (g)old(en) days&amp;hellip;in October 2014 I gave an interview to the blog
&amp;ldquo;Linux Rig&amp;rdquo; by &lt;a href="https://steven.ovadia.org/">Steven Ovadia&lt;/a>.&lt;/p>
&lt;p>The original interview was published at
&lt;code>https://linuxrig.com/2015/01/20/the-linux-setup-thiago-perrotta-student/&lt;/code>, but
the link no longer works. It&amp;rsquo;s purposely not hyperlinked because now it&amp;rsquo;s a
&lt;a href="https://en.wikipedia.org/wiki/Domain_parking">parked domain&lt;/a>.&lt;/p>
&lt;p>You can find the original at the &lt;a href="https://web.archive.org/web/20180527155224/https://linuxrig.com/2015/01/20/the-linux-setup-thiago-perrotta-student/">Web
Archive&lt;/a>.
I wanted to reproduce it here&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for archiving purposes. All credits go to Steven
:)&lt;/p>
&lt;hr>
&lt;h2 id="the-linux-setup--thiago-perrotta-student">The Linux Setup – Thiago Perrotta, Student&lt;/h2>
&lt;p>Steven Ovadia – January 20th, 2015 – 0 Comments&lt;/p>
&lt;p>&lt;em>Thiago touches on a number of interesting points. For instance, he talks about
testing out new distributions and desktops to see what&amp;rsquo;s going on in Linux.
That&amp;rsquo;s something I kind of have to remind myself to do. Everything works well on
my main workhorse (knock wood…) so I have no natural desire to try out other
distributions and desktops. But I try and remember to give different things a
spin, just so I know if there&amp;rsquo;s something better out there, or if there&amp;rsquo;s
something I should steal for my own system. Finally, Thiago pays respect to his
package manager, which is super classy. Package managers are the unsung heroes
of most setups and without them, we&amp;rsquo;d probably have a rougher time trying new
things out.&lt;/em>&lt;/p>
&lt;p>&lt;em>You can find more of The Linux Setup here.&lt;/em>&lt;/p>
&lt;p>&lt;em>You can follow Linux Rig on Google+ here and follow me on Twitter here.&lt;/em>&lt;/p>
&lt;p>&lt;strong>1. Who are you, and what do you do?&lt;/strong>&lt;/p>
&lt;p>I am a Computer and Information Engineering student living in Rio de Janeiro,
Brazil. I usually use the &amp;rsquo;thiagowfx&amp;rsquo; nickname and I&amp;rsquo;d say I am a
free/open source software and community enthusiast. In particular, today I am an
active member of the Arch Linux community. I also have a blog where I write
about projects I&amp;rsquo;m currently working on and new technology and software I&amp;rsquo;m
trying out.&lt;/p>
&lt;p>&lt;strong>2. Why do you use Linux?&lt;/strong>&lt;/p>
&lt;p>Questions we are passionate about are the hardest to answer. But hey, today I&amp;rsquo;d say I use Linux for at least for three reasons (not in any particular order):&lt;/p>
&lt;ul>
&lt;li>community: it is very hard to find a diverse and rich community such as the
GNU/Linux one;&lt;/li>
&lt;li>open source software: this is very important and includes implications on
philosophy and programming (e.g., pull requests);&lt;/li>
&lt;li>package managers!&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>3. What distribution do you run on your main desktop/laptop?&lt;/strong>&lt;/p>
&lt;p>For a long time, on a monthly basis, I was always switching distributions.
However, during the last year I discovered the one I most enjoy today: Arch
Linux. It is a very customizable, follows KISS (&amp;lsquo;Keep it Short &amp;amp; Simple&amp;rsquo;) and is
a user-centered distro, with a very nice and intelligent community. I still test
the latest improvements of other Linux distributions every now and then, even
though this is less frequent today.&lt;/p>
&lt;p>&lt;strong>4. What desktop environment do you use and why do you use it?&lt;/strong>&lt;/p>
&lt;p>I am always switching desktop environments, mainly because I like to keep up to
date with the latest improvements on the Linux desktop (as with distros).
However, I&amp;rsquo;d say the two I use and like most are Cinnamon and i3. Usually I use
Cinnamon at home and i3 elsewhere (when I don&amp;rsquo;t have a mouse with me).&lt;/p>
&lt;p>&lt;strong>5. What one piece of software do you depend upon with this distribution? Why is it so important?&lt;/strong>&lt;/p>
&lt;p>Package manager: it is the piece of software I most value. I don&amp;rsquo;t know how to
live without one anymore. In particular, pacman is my preferred one. Now, if you
were referring to end-user software, I have no doubt that Emacs is the software
I most use today, although I am giving Vim a try. However, I&amp;rsquo;m not dependent of
any software in particular; each task has its own needs.&lt;/p>
&lt;p>&lt;strong>6. What kind of hardware do you run this setup on?&lt;/strong>&lt;/p>
&lt;p>Currently I have a Lenovo Ideapad S400U Ultrabook, which has an Intel Core i5
processor, 4GB RAM and an Intel Graphics HD 4000 graphics card. It
supports Linux pretty well and out-of-the-box with Intel open source drivers. It
has a small SSD (32GB) where I keep the root partition of whichever Linux
distribution I&amp;rsquo;m using at the moment, and a 500GB HDD where I keep my /home and
an alternate Linux distro.&lt;/p>
&lt;p>&lt;strong>7. Will you share a screenshot of your desktop?&lt;/strong>&lt;/p>
&lt;p>As I&amp;rsquo;ve said, I&amp;rsquo;m always switching desktop environments. However, I keep an
album on Flickr with my latest screenshots. This is the last one I
took, on Arch Linux, with KDE 4.14.&lt;/p>
&lt;p>&lt;em>Interview conducted October 5, 2014&lt;/em>&lt;/p>
&lt;hr>
&lt;p>&lt;em>&lt;strong>The Linux Setup&lt;/strong> is a feature where I interview people about their Linux
setups. The concept is borrowed, if not outright stolen, from this site. If
you&amp;rsquo;d like to participate, drop me a line.&lt;/em>&lt;/p>
&lt;p>&lt;em>You can follow Linux Rig on Google+ here, follow me on Twitter here, and subscribe to the feed here.&lt;/em>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The reproduction was done verbatim, with the exception of hyperlinks.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>VSCode: Github Pull Requests plug-in: collapse all comments by default</title><link>https://perrotta.dev/2025/05/vscode-github-pull-requests-plug-in-collapse-all-comments-by-default/</link><pubDate>Wed, 14 May 2025 14:40:34 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/05/vscode-github-pull-requests-plug-in-collapse-all-comments-by-default/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: I am constantly annoyed at opening files in VSCode with
PR comments being automatically expanded by default and occupying precious real
estate. Get rid of these comments!&lt;/p>
&lt;p>&lt;a href="https://github.com/Microsoft/vscode-pull-request-github/issues/665">Github
issue&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>From your user settings with &lt;code>&amp;quot;githubPullRequests.commentExpandState&amp;quot;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>I added the following to my &lt;code>settings.json&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;githubPullRequests.commentExpandState&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;collapseAll&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Do you like to live in danger?</title><link>https://perrotta.dev/2025/05/do-you-like-to-live-in-danger/</link><pubDate>Mon, 05 May 2025 18:11:23 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/05/do-you-like-to-live-in-danger/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% claude --dangerously-skip-permissions &lt;span style="color:#98c379">&amp;#34;fix the zizmor issue: pre-commit run --all-files zizmor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ WARNING: Claude Code running in Bypass Permissions mode │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ In Bypass Permissions mode, Claude Code will not ask &lt;span style="color:#c678dd">for&lt;/span> your approval before running potentially dangerous commands. │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ This mode should only be used in a sandboxed container/VM that has restricted internet access and can easily be restored &lt;span style="color:#c678dd">if&lt;/span> damaged. │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ By proceeding, you accept all responsibility &lt;span style="color:#c678dd">for&lt;/span> actions taken &lt;span style="color:#c678dd">while&lt;/span> running in Bypass Permissions mode. │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ https://docs.anthropic.com/s/claude-code-security │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ❯ 1. No, &lt;span style="color:#e5c07b">exit&lt;/span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 2. Yes, I accept │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Enter to confirm · Esc to &lt;span style="color:#e5c07b">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span>...&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>⏺ Great! The zizmor pre-commit check now passes. Let&amp;#39;s summarize the changes we made:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1. Removed user-provided inputs &lt;span style="color:#c678dd">for&lt;/span> version numbers that could potentially be used &lt;span style="color:#c678dd">for&lt;/span> code injection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2. Replaced them with an auto-generated timestamp-based version when the workflow is manually triggered
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3. Maintained the existing behavior &lt;span style="color:#c678dd">for&lt;/span> automatic triggers &lt;span style="color:#56b6c2">(&lt;/span>using &lt;span style="color:#98c379">&amp;#34;latest&amp;#34;&lt;/span> tag&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> This approach is more secure since:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1. No user inputs are used in any &lt;span style="color:#e5c07b">command&lt;/span> execution context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2. The version tag is generated from a trusted &lt;span style="color:#e5c07b">source&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>the system timestamp&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3. The workflow still provides versioned images when manually triggered, just with an automatically generated version instead of a user-provided one
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let the agentic overlords take over 😬🤖.&lt;/p>
&lt;p>How does it know it can do so?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% grep -i bypass ~/.claude.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;bypassPermissionsModeAccepted&amp;#34;&lt;/span>: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview#control-claude-code-with-commands">Anthropic Docs&lt;/a>.&lt;/p></description></item><item><title>The ack + xargs + sed pattern</title><link>https://perrotta.dev/2025/04/the-ack--xargs--sed-pattern/</link><pubDate>Wed, 30 Apr 2025 16:20:24 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/the-ack--xargs--sed-pattern/</guid><description>&lt;p>I employ this pattern almost every day:&lt;/p>
&lt;ul>
&lt;li>use &lt;a href="https://beyondgrep.com/">&lt;code>ack&lt;/code>&lt;/a> to search for a given string in a codebase (git repo)&lt;/li>
&lt;li>use &lt;a href="https://man.archlinux.org/man/xargs.1">&lt;code>xargs&lt;/code>&lt;/a> to iterate through each finding&lt;/li>
&lt;li>use &lt;a href="https://www.gnu.org/software/sed/manual/sed.html">&lt;code>sed&lt;/code>&lt;/a> to make a text transformation&lt;/li>
&lt;/ul>
&lt;p>Example of the day:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ack &lt;span style="color:#98c379">&amp;#34;limit: 2&amp;#34;&lt;/span> -l | xargs -n &lt;span style="color:#d19a66">1&lt;/span> gsed -i -e &lt;span style="color:#98c379">&amp;#39;s/limit: 2/limit: 5/g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Given multiple &lt;a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD app manifests&lt;/a> in the form:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">syncPolicy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">retry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">limit&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">backoff&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">duration&lt;/span>: 5s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">factor&lt;/span>: &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">maxDuration&lt;/span>: 1m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Replace &lt;code>limit: 2&lt;/code> with &lt;code>limit: 5&lt;/code> in all files. That&amp;rsquo;s what the command above
does:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ack -l&lt;/code> lists all files that match the given pattern&lt;/li>
&lt;li>pipe to &lt;code>xargs -n 1&lt;/code> iterates on each of them&lt;/li>
&lt;li>&lt;code>gsed -i&lt;/code> (GNU &lt;code>sed&lt;/code>) makes a text transformation in-place&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s not bulletproof, but it works most of the time.&lt;/p>
&lt;p>Sometimes I use &lt;a href="https://github.com/sharkdp/fd">&lt;code>fd&lt;/code>&lt;/a> to narrow the search down
to a file pattern. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% fd -e yaml | xargs ack &lt;span style="color:#98c379">&amp;#34;limit: 2&amp;#34;&lt;/span> -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, though, &lt;code>ack --yaml&lt;/code> would be even simpler.&lt;/p>
&lt;p>When &lt;code>sed&lt;/code> isn&amp;rsquo;t up for the job, &lt;code>awk&lt;/code> tends to be a decent alternative.&lt;/p>
&lt;p>Regular expression replacements aren&amp;rsquo;t always precise.
False positives can easily take place.
Adding &lt;code>\b&lt;/code> (word boundaries) sometimes helps.&lt;/p>
&lt;p>Other times it&amp;rsquo;s better to use a syntax-aware tool instead of &lt;code>sed&lt;/code>.&lt;/p>
&lt;p>For YAML, there&amp;rsquo;s &lt;a href="https://github.com/mikefarah/yq">&lt;code>yq&lt;/code>&lt;/a>.&lt;/p>
&lt;p>For JSON, there&amp;rsquo;s &lt;a href="https://jqlang.org/">&lt;code>jq&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>jq&lt;/code> is like &lt;code>sed&lt;/code> for JSON data - you can use it to slice and filter and map
and transform structured data with the same ease that &lt;code>sed&lt;/code>, &lt;code>awk&lt;/code>, &lt;code>grep&lt;/code> and
friends let you play with text.&lt;/p>
&lt;/blockquote></description></item><item><title>Delete newlines in a pipe</title><link>https://perrotta.dev/2025/04/delete-newlines-in-a-pipe/</link><pubDate>Fri, 25 Apr 2025 11:59:20 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/delete-newlines-in-a-pipe/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given &lt;code>{cmd}&lt;/code> that emits lots of blank lines, delete all
blank lines in a pipe.&lt;/p>
&lt;p>The following is a very elegant (and easy to remember!) way to do so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>cmd&lt;span style="color:#56b6c2">}&lt;/span> | awk &lt;span style="color:#98c379">&amp;#39;NF&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the LLM:&lt;/p>
&lt;blockquote>
&lt;p>When you use awk &amp;lsquo;NF&amp;rsquo;, it evaluates to true for lines where NF is greater than
zero—that is, lines that are not empty or do not consist solely of whitespace.
This makes it a concise way to filter out blank lines.&lt;/p>
&lt;/blockquote>
&lt;p>Other ways with classic tools and regular expressions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>cmd&lt;span style="color:#56b6c2">}&lt;/span> | grep -v &lt;span style="color:#98c379">&amp;#39;^[[:space:]]*$&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>cmd&lt;span style="color:#56b6c2">}&lt;/span> | sed -e &lt;span style="color:#98c379">&amp;#39;/^[[:space:]]*$/d&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>They are just a bit harder to remember.&lt;/p></description></item><item><title>Alpine Linux: the maintainer workflow</title><link>https://perrotta.dev/2025/04/alpine-linux-the-maintainer-workflow/</link><pubDate>Sun, 20 Apr 2025 15:12:09 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/alpine-linux-the-maintainer-workflow/</guid><description>&lt;p>I maintain &lt;a href="https://pkgs.alpinelinux.org/packages?name=&amp;amp;branch=edge&amp;amp;repo=&amp;amp;arch=x86_64&amp;amp;origin=&amp;amp;flagged=&amp;amp;maintainer=Thiago+Perrotta">a couple of
packages&lt;/a>
on Alpine Linux.&lt;/p>
&lt;p>Every now and then, a new software version is released, and it&amp;rsquo;s my duty&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> as an
active package maintainer to update my packages.&lt;/p>
&lt;p>The typical workflow looks like the following.&lt;/p>
&lt;p>First I get an email notification from &amp;ldquo;Alpine Package DB&amp;rdquo;:&lt;/p>
&lt;blockquote>
&lt;p>Dear Thiago Perrotta&lt;/p>
&lt;p>This is an automatic message send from pkgs.alpinelinux.org
One or more of your aports have been flagged out of date based on
Anitya monitoring system &lt;a href="https://release-monitoring.org/">https://release-monitoring.org/&lt;/a>&lt;/p>
&lt;p>argocd current: 2.14.2-r1 new: 2.14.9&lt;/p>
&lt;p>To update the package you can use our helper script:&lt;/p>
&lt;p>abump aport-version&lt;/p>
&lt;p>If the provided information is incorrect, please let us know on IRC
or &lt;a href="mailto:alpine-infra@alpinelinux.org">alpine-infra@alpinelinux.org&lt;/a>. Thanks!&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s important not to &lt;a href="https://opensource.com/business/15/12/avoid-burnout-live-happy">burn oneself
out&lt;/a>.&lt;/p>
&lt;p>I treat these notifications as an FYI. They &lt;em>are not&lt;/em> prompts to make me
immediately go and update the packages&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. For packages with frequent updates,
like &lt;code>argocd&lt;/code>, I&amp;rsquo;ll let a few patch versions accumulate before I take action.
Other times it is handy to batch package upgrades together so to do them all at
once. I use my personal judgment here. At the very least, this email will
trigger a TODO in my task list, so that it will not be forgotten. &lt;em>At some
point&lt;/em> it will be taken care of.&lt;/p>
&lt;p>Once I am ready to update the package, I &lt;code>ssh&lt;/code> to my Alpine Linux server. There
is absolutely no requirement to update alpine linux packages from alpine linux,
but it&amp;rsquo;s the most convenient to do, and I already have an alpine linux system
anyway.&lt;/p>
&lt;p>Then &lt;code>cd aports/&lt;/code>. This is a local git clone of the &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports
tree&lt;/a>
(&lt;a href="https://wiki.alpinelinux.org/wiki/Aports_tree">wiki&lt;/a>).&lt;/p>
&lt;p>&lt;code>git pull&lt;/code>. I tend to clean up after myself, so the last branch is likely
already &lt;code>master&lt;/code>. But, if not, then &lt;code>git reset --hard &amp;amp;&amp;amp; git checkout master &amp;amp;&amp;amp; git pull&lt;/code>. Amen.&lt;/p>
&lt;p>Now the real fun starts. And it&amp;rsquo;s surprisingly quick and simple, it feels like
cheating:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% abump argocd-2.14.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will update the version and checksums in the corresponding &lt;code>APKBUILD&lt;/code> and
trigger a package build.&lt;/p>
&lt;p>It&amp;rsquo;s sensible to check the package release notes or changelog to find potential
incompatibilities and/or updates to the build process. It&amp;rsquo;s also sensible to
look at the package diffs to inspect for potential malware, which is becoming
increasingly more common these days in open source packages. &amp;ldquo;Secure your supply
chain&amp;rdquo;, as they say it.&lt;/p>
&lt;p>If the build completes successfully, create a new branch (&lt;code>git nb argocd&lt;/code>),
commit, push it (&lt;code>git pushm&lt;/code>), then create a merge request (MR) on
&lt;a href="https://gitlab.alpinelinux.org/">GitLab&lt;/a>. I normally use the Web UI to do so,
but it&amp;rsquo;s also possible to do it with the CLI. A link to create the MR is printed
to stdout upon pushing the branch, which makes the process even easier.&lt;/p>
&lt;p>It could happen that the MR fails CI for some architectures (even if it works
locally on my machine™). These errors need to be dealt with.&lt;/p>
&lt;p>The commit message must follow a certain style. I have a pre-commit script set
up that does it for me. It is typically in this form:&lt;/p>
&lt;pre tabindex="0">&lt;code>testing/argocd: upgrade to 2.14.9
&lt;/code>&lt;/pre>&lt;p>There&amp;rsquo;s a rule: only one package per merge request.&lt;/p>
&lt;p>If there are more packages to upgrade, I run &lt;code>git bd&lt;/code> (&amp;ldquo;branch delete&amp;rdquo;) and then
restart this process. It&amp;rsquo;s quite manageable, as I don&amp;rsquo;t maintain a lot of
packages. Perhaps it could be further automated if there were more packages
and/or if the package upgrades were more frequent.&lt;/p>
&lt;p>The final MR looks like the following:
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/83026">!83026&lt;/a>.&lt;/p>
&lt;p>Now I sit tight and wait for approval.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>On a &lt;a href="https://xkcd.com/2347/">&lt;em>best-effort&lt;/em>&lt;/a> basis.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Unless it&amp;rsquo;s a security risk or incident (e.g. whenever there&amp;rsquo;s a CVE
associated with it).&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pipe to Claude</title><link>https://perrotta.dev/2025/04/pipe-to-claude/</link><pubDate>Wed, 09 Apr 2025 17:56:05 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/pipe-to-claude/</guid><description>&lt;p>One of the most effective ways to resolve random software development problems
in 2025:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#e5c07b">command&lt;/span> that emits warnings or errors&lt;span style="color:#56b6c2">}&lt;/span> | claude
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>claude&lt;/code> is Anthropic&amp;rsquo;s &lt;a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview">Claude
Code&lt;/a>
CLI LLM agent tool:&lt;/p>
&lt;blockquote>
&lt;p>Learn about Claude Code, an agentic coding tool made by Anthropic. Currently
in beta as a research preview.&lt;/p>
&lt;/blockquote>
&lt;p>There is a series of little / simple tasks I&amp;rsquo;ve been procrastinating (e.g.
linter issues) that can be quickly resolved with the assistance of a LLM tool.&lt;/p>
&lt;p>There&amp;rsquo;s no silver bullet here: all changes need to be properly reviewed and
tested. Nonetheless, even if the tool is wrong 50% of the time, it&amp;rsquo;s still
faster for me to use the LLM tool as an initial suggestion than having to
do the research myself from scratch.&lt;/p></description></item><item><title>Github Actions: ubuntu-latest tools</title><link>https://perrotta.dev/2025/04/github-actions-ubuntu-latest-tools/</link><pubDate>Wed, 09 Apr 2025 01:00:47 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/github-actions-ubuntu-latest-tools/</guid><description>&lt;p>Which tools are installed in the Github Actions environment for &lt;code>ubuntu-latest&lt;/code>?&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md">This
repository&lt;/a>
has the answer.&lt;/p></description></item><item><title>First Alpine Linux package in Community</title><link>https://perrotta.dev/2025/04/first-alpine-linux-package-in-community/</link><pubDate>Tue, 01 Apr 2025 14:27:41 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/first-alpine-linux-package-in-community/</guid><description>&lt;p>How wholesome: someone sent a MR (Merge Request)
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/82047">!82047&lt;/a> in
&lt;code>alpine/aports&lt;/code> with the &lt;a href="https://github.com/google/yamlfmt">&lt;code>yamlfmt&lt;/code>&lt;/a> package
I maintain, moving it from &lt;code>testing/&lt;/code> to &lt;code>community/&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This means the package will be included in the next release of Alpine (3.22) as
part of its official repositories (unlike &amp;ldquo;testing&amp;rdquo;, which is only included in
&amp;ldquo;edge&amp;rdquo;).&lt;/p>
&lt;p>&lt;strong>In other words&lt;/strong>: This is the first time a package I maintain will make it to the
official repositories of a Linux distro I like!&lt;/p>
&lt;p>&lt;strong>Next milestone&lt;/strong>: Follow suit with a project I maintain.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I did not initiate this: it has just happened organically / spontaneously.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>yaml: wrong new line character: expected \n</title><link>https://perrotta.dev/2025/03/yaml-wrong-new-line-character-expected-%5Cn/</link><pubDate>Fri, 14 Mar 2025 15:09:47 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/yaml-wrong-new-line-character-expected-%5Cn/</guid><description>&lt;p>Example upstream issue: &lt;a href="https://github.com/sbaudoin/sonar-yaml/issues/24">https://github.com/sbaudoin/sonar-yaml/issues/24&lt;/a>&lt;/p>
&lt;p>How to reproduce:&lt;/p>
&lt;ul>
&lt;li>start with a helm chart in a git repository: &lt;code>helm create foo&lt;/code>&lt;/li>
&lt;li>delete &lt;code>values.yaml&lt;/code>&lt;/li>
&lt;li>commit it, create a github PR&lt;/li>
&lt;li>realize that later on you need to create an empty &lt;code>values.yaml&lt;/code> file: &lt;code>touch values.yaml&lt;/code>&lt;/li>
&lt;li>commit it, push it&lt;/li>
&lt;li>realize that you need to add a comment to the YAML file&lt;/li>
&lt;li>use the github web UI to add a comment. Click edit, and add this comment:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Purposely empty for `ct lint`.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>commit it&lt;/li>
&lt;li>wait for CI checks to run&lt;/li>
&lt;li>&lt;a href="https://github.com/adrienverge/yamllint">&lt;code>yamllint&lt;/code>&lt;/a> will fail:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>yaml: wrong new line character: expected \n
&lt;/code>&lt;/pre>&lt;p>This error can also be observed in &lt;code>vim&lt;/code> (with certain plug-ins).&lt;/p>
&lt;p>&lt;strong>What&amp;rsquo;s the issue?&lt;/strong> It&amp;rsquo;s a line ending problem: CR LF et al being different in
Windows vs Linux / macOS.&lt;/p>
&lt;p>&lt;strong>How to fix it?&lt;/strong> Run &lt;code>dos2unix values.yaml&lt;/code>, commit, profit.&lt;/p>
&lt;p>You can get &lt;code>dos2unix&lt;/code> e.g. via &lt;a href="https://brew.sh/">homebrew&lt;/a>.&lt;/p>
&lt;p>&lt;strong>What&amp;rsquo;s the lesson?&lt;/strong> Avoid the github web UI to edit files, even when in a
rush. ■&lt;/p></description></item><item><title>gh pr view</title><link>https://perrotta.dev/2025/02/gh-pr-view/</link><pubDate>Tue, 25 Feb 2025 11:46:06 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/gh-pr-view/</guid><description>&lt;p>When working on a local git branch that has a github PR associated to it, at
some point you&amp;rsquo;ll want to open its pull request page.&lt;/p>
&lt;p>If you have the &lt;a href="https://cli.github.com/">github CLI&lt;/a> installed (&lt;code>gh&lt;/code>), you can do so with &lt;code>gh pr view --web&lt;/code>.&lt;/p>
&lt;p>If you don&amp;rsquo;t pass &lt;code>--web&lt;/code>, then it will simply output markdown.&lt;/p></description></item><item><title>zsh: setopt magic_equal_subst</title><link>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</link><pubDate>Tue, 18 Feb 2025 13:52:57 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Write the following command line in &lt;code>zsh&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#56b6c2">=&lt;/span>../../../config/global-dns-changer-
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now press &lt;code>&amp;lt;TAB&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Expected&lt;/strong>: Filename expansion.&lt;/p>
&lt;p>&lt;strong>Observed&lt;/strong>:&lt;/p>
&lt;pre tabindex="0">&lt;code>No matches for: `filename&amp;#39; or `file&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Ugh. How about some magic 🪄?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>setopt magic_equal_subst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#56b6c2">=&lt;/span>../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>foo&lt;span style="color:#56b6c2">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>bar&lt;span style="color:#56b6c2">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay!&lt;/p>
&lt;p>There&amp;rsquo;s a workaround if you don&amp;rsquo;t want to set the aforementioned option. Just
remove the &lt;code>=&lt;/code> character:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file ../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>foo&lt;span style="color:#56b6c2">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>bar&lt;span style="color:#56b6c2">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I find it&amp;rsquo;s more convenient to have this option work in both situations though.&lt;/p>
&lt;p>(via &lt;a href="https://www.reddit.com/r/zsh/comments/10o018l/glob_expansion_and_tab_completion_after_the_sign/">Reddit&lt;/a>)&lt;/p></description></item><item><title>Kubernetes: create a pod in pending state</title><link>https://perrotta.dev/2025/02/kubernetes-create-a-pod-in-pending-state/</link><pubDate>Fri, 07 Feb 2025 13:58:36 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/kubernetes-create-a-pod-in-pending-state/</guid><description>&lt;p>We are making a non-trivial change to our cluster monitoring architecture, and I
needed to verify the new rollout is properly working in our infratesting
environment.&lt;/p>
&lt;p>A simple way to do so is to create a pod that never leaves the &amp;ldquo;Pending&amp;rdquo; state,
because we have an alert (a prometheus rule) that fires whenever a pod is in
that stack for too long (15 minutes is our threshold in most cases).&lt;/p>
&lt;p>Use the following manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">apiVersion&lt;/span>: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">kind&lt;/span>: Pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">name&lt;/span>: pending-pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">affinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">podAffinity&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">labelSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">matchExpressions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">key&lt;/span>: &lt;span style="color:#98c379">&amp;#34;non/existent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">operator&lt;/span>: In
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">values&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#98c379">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">topologyKey&lt;/span>: &lt;span style="color:#98c379">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e06c75">name&lt;/span>: busybox
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">image&lt;/span>: busybox
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">command&lt;/span>: [&lt;span style="color:#98c379">&amp;#39;sh&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;-c&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;echo Hello, Kubernetes! &amp;amp;&amp;amp; sleep 3600&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;it creates a &lt;code>pending-pod&lt;/code> in the &lt;code>default&lt;/code> namespace that should never be
scheduled, due to its strict pod affinity rules.&lt;/p>
&lt;p>Save it as &lt;code>pending-pod.yaml&lt;/code>, deploy it with &lt;code>kubectl apply -f pending-pod.yaml&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get pod pending-pod -w
NAME READY STATUS RESTARTS AGE
pending-pod 0/1 Pending 0 21s
 pending-pod 0/1 Pending 0 65s
pending-pod 0/1 Pending 0 74s
pending-pod 0/1 Pending 0 2m6s
pending-pod 0/1 Pending 0 3m8s
pending-pod 0/1 Pending 0 4m8s
pending-pod 0/1 Pending 0 4m18s
&lt;/code>&lt;/pre>&lt;p>At some point the alert fires, as expected.
And now we can roll out these changes to prod!&lt;/p></description></item><item><title>SmartTube</title><link>https://perrotta.dev/2025/01/smarttube/</link><pubDate>Thu, 30 Jan 2025 18:18:25 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/smarttube/</guid><description>&lt;p>&lt;a href="https://github.com/yuliskov/SmartTube">https://github.com/yuliskov/SmartTube&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>SmartTube is an advanced player for Android TVs and TV boxes, free &amp;amp; open
source. You can play content from different public sources.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>✅ Features: no ads ‧ SponsorBlock ‧ adjustable playback speed ‧ 8k support ‧
60fps ‧ HDR ‧ read live chat ‧ customizable buttons ‧ no Google Services ‧
helpful international community&lt;/p>
&lt;/blockquote>
&lt;p>Works as advertised. Super easy to install on Android TVs. The main appeal is
surely adblocking.&lt;/p>
&lt;p>Note the following:&lt;/p>
&lt;blockquote>
&lt;p>Do not download SmartTube from any app store, APK websites or blogs; these
were uploaded by other people and may contain malware or ads. SmartTube is not
officially published on any app store. Sadly, the Google PlayStore does not
allow ad-free Youtube apps using unofficial APIs.&lt;/p>
&lt;/blockquote></description></item><item><title>Alpine Linux: install / pin old packages</title><link>https://perrotta.dev/2025/01/alpine-linux-install-/-pin-old-packages/</link><pubDate>Wed, 08 Jan 2025 15:54:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/alpine-linux-install-/-pin-old-packages/</guid><description>&lt;p>Let&amp;rsquo;s say you want to install an older version of &lt;code>jq&lt;/code> in Alpine Linux.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>Alpine v3.18 has &lt;code>jq&lt;/code> 1.6&lt;/li>
&lt;li>Alpine v3.19 has &lt;code>jq&lt;/code> 1.7&lt;/li>
&lt;/ul>
&lt;p>You&amp;rsquo;re probably using Alpine v3.21 or edge today, which has an even newer
version of &lt;code>jq&lt;/code>. Hence &lt;code>doas apk add jq&lt;/code> will not do.&lt;/p>
&lt;p>Let&amp;rsquo;s assume you do not want to edit your &lt;code>/etc/apk/repositories&lt;/code>, as this is an
one-off, for a single package. What can you do then?&lt;/p>
&lt;p>Use the &lt;code>--repository&lt;/code> flag from &lt;code>apk&lt;/code>!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk add --no-cache --repository&lt;span style="color:#56b6c2">=&lt;/span>http://dl-cdn.alpinelinux.org/alpine/v3.18/main &lt;span style="color:#e06c75">jq&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>~1.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s also important to pin the package version (&lt;code>~1.6&lt;/code>), otherwise the latest
one available gets installed.&lt;/p>
&lt;p>Replace &amp;ldquo;main&amp;rdquo; with &amp;ldquo;community&amp;rdquo; or &amp;ldquo;testing&amp;rdquo; as needed.&lt;/p></description></item><item><title>Running multiple servers in a single bash script</title><link>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</link><pubDate>Mon, 23 Dec 2024 22:52:40 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</guid><description>&lt;p>Inspired by &lt;a href="https://github.com/simonw/til/blob/main/bash/multiple-servers.md">Simon
Willison&lt;/a>&amp;rsquo;s
TIL.&lt;/p>
&lt;p>When I was working on the &lt;a href="https://stadia.com/">Stadia&lt;/a> Partner Portal as a
full-stack tech lead, I wrote and maintained a &lt;code>run.sh&lt;/code> script that would start
up our two (front-end and back-end) Boq&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> server instances.&lt;/p>
&lt;p>It resembled the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">kill&lt;/span> &lt;span style="color:#e06c75">$pid_fe&lt;/span> &lt;span style="color:#e06c75">$pid_be&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">exit&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">trap&lt;/span> cleanup SIGINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#56b6c2">[&lt;/span>...&lt;span style="color:#56b6c2">]&lt;/span>/publishing/partnerportal/ui &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pid_fe&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#56b6c2">[&lt;/span>...&lt;span style="color:#56b6c2">]&lt;/span>/publishing/partnerportal &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pid_be&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">wait&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This version is heavily simplified, but that was its gist. It worked perfectly.
Back in ~2018, it took quite a bit of trial-and-error to get it right. Now it
seems so easy to just ask GenAI to generate it for you! Yikes. Our profession
might get obsoleted in just a few more years to come&amp;hellip;&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>A proprietary / internal framework for web applications.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p>
&lt;ol start="2">
&lt;li>force stdout to write to a TTY (or to pretend that it will write to a TTY):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% unbuffer ls --color&lt;span style="color:#56b6c2">=&lt;/span>auto | less -R
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;code>less&lt;/code> will properly recognize and display color output from
&lt;code>ls&lt;/code>.&lt;/p></description></item><item><title>Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p>
&lt;ul>
&lt;li>Browser: Google Chrome on macOS, Chromium on Linux, Safari on iOS.&lt;/li>
&lt;li>Search: A combination of Google and DuckDuckGo (mostly for their &lt;a href="https://duckduckgo.com/bangs">!bangs&lt;/a>).&lt;/li>
&lt;li>Writing: A combination of VSCode, &lt;code>vim&lt;/code> and &lt;a href="https://github.com/MarkEdit-app/MarkEdit">MarkEdit&lt;/a> (macOS markdown editor app). I never got around to long-form writing in Obsidian or Logseq, however it&amp;rsquo;s something I strive to.&lt;/li>
&lt;li>Cloud File Storage: There&amp;rsquo;s no need to share this. Basic OpSec. Why would people share it?&lt;/li>
&lt;li>Chat: WhatsApp remains king in terms of popularity, despite Telegram being superior from an architectural and usability perspective for power users. Facebook Messenger is officially dead at this point. And I&amp;rsquo;m too much of a millennial for all other apps (Discord, Matrix, etc). Disappearing messages exist in all of these, except Instagram.&lt;/li>
&lt;li>Scheduling: There&amp;rsquo;s no real choice here. You use the platform your employer uses. Otherwise, Google Calendar is the most sensible choice other than self-hosting.&lt;/li>
&lt;li>Video Calls: Ditto. I am way too used to Google Meet to justify switching to an alternative at this point.&lt;/li>
&lt;li>Music: Spotify, hands down. YouTube Music is a good fallback. There&amp;rsquo;s no need to pay for YouTube Premium for music, do your research.&lt;/li>
&lt;li>Podcasts: Overcast on iOS.&lt;/li>
&lt;li>Password Management: Once again, why would you share this?&lt;/li>
&lt;li>Code Editor: VScode and &lt;code>vim&lt;/code>. Maybe I&amp;rsquo;ll switch to &lt;code>neovim&lt;/code> at some point. I refrain from using IDEs in general but, when I need to, JetBrains is the answer. I tried &lt;a href="https://zed.dev/">&lt;code>zed&lt;/code>&lt;/a> this year but wasn&amp;rsquo;t convinced, and their core team is quite small. The flurry of &amp;ldquo;AI&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> editors should be ignored, as none of them are likely to stick long-term. Instead, it&amp;rsquo;s better to invest in &amp;ldquo;AI&amp;rdquo; tooling that is editor agnostic; for example, Simon Willison&amp;rsquo;s &lt;a href="https://github.com/simonw/llm">&lt;code>llm&lt;/code>&lt;/a>, or GitHub Copilot.&lt;/li>
&lt;li>Terminal: iTerm2 on macOS. I haven&amp;rsquo;t used desktop linux in a while (:sad:), but I&amp;rsquo;d probably still stick to Tilix and/or Alacritty there. I no longer use hterm (ChromeOS).&lt;/li>
&lt;li>VPN: Unless you&amp;rsquo;re rolling your own, it doesn&amp;rsquo;t matter too much. Avoid the big players if you can afford to.&lt;/li>
&lt;li>Bookmarks: None. &lt;a href="https://www.goodreads.com/book/show/25614984-spark-joy">Absolutely none&lt;/a>. When I need to store &lt;em>transient&lt;/em> link lists, I use my Second Brain app to do so.&lt;/li>
&lt;li>Read It Later: Ditto as above. Otherwise: starring articles on Miniflux, or keeping Safari tabs open until I get to them, or parking a handful of items in an &amp;ldquo;inbox&amp;rdquo; browser bookmarks folder.&lt;/li>
&lt;li>Mail Client: The official clients of my email providers. No agnostic app at this time. It&amp;rsquo;s especially inconvenient to do so on iOS.&lt;/li>
&lt;li>Mail Server: N/A.&lt;/li>
&lt;li>Launcher: &lt;code>Cmd-Space&lt;/code> on macOS a.k.a. Spotlight. I keep Raycast around but I rarely use it. On Linux &lt;code>i3-dmenu-desktop&lt;/code> is still my favorite.&lt;/li>
&lt;li>Screenshots: &lt;code>Cmd-Shift-4&lt;/code> on macOS, or &lt;code>scrot&lt;/code> on Linux.&lt;/li>
&lt;li>Menu Bar: &lt;a href="https://github.com/dwarvesf/hidden">Hidden Bar&lt;/a>. It&amp;rsquo;s free, and available as a cask on homebrew.&lt;/li>
&lt;li>Containers: Rancher Desktop.&lt;/li>
&lt;li>Automation: None. I tried Hammerspoon this year but found no use for it.&lt;/li>
&lt;li>Second Brain: A mixture of Obsidian and Logseq. Which I&amp;rsquo;d really like to end, it would be easier to have a single app to rule them all, as they both support multiple vaults / graphs anyway (e.g. to partition personal vs work notes).&lt;/li>
&lt;li>Operating System: &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a> is my current favorite for servers, and I&amp;rsquo;m biased anyway because I maintain a couple of aports (packages) there. For desktop, it&amp;rsquo;s awfully hard to use anything other than macOS ever since M1 processors got released. I miss Linux desktop from time to time but realistically it&amp;rsquo;s no longer an intrinsic goal of mine; that said, I&amp;rsquo;d likely go back to my beloved Arch Linux should that ever reoccur.&lt;/li>
&lt;li>Shell: &lt;code>zsh&lt;/code> + &lt;a href="https://grml.org/zsh/">&lt;code>grml-zsh-config&lt;/code>&lt;/a>, no change here. Sometimes I think of migrating to &lt;code>fish&lt;/code>, but the POSIX incompability always discourages me to do so.&lt;/li>
&lt;li>Terminal Multiplexer: &lt;code>tmux&lt;/code>, but only for remote sessions (&lt;code>ssh&lt;/code>). Locally I tend to just open new terminal tabs on VSCode and/or iTerm2. Alas, &lt;code>tmux&lt;/code> + &lt;code>VSCode&lt;/code> do not play well together anyway (citation needed, for another day).&lt;/li>
&lt;/ul>
&lt;p>This post was inspired by &lt;a href="https://micro.webology.dev/2024/12/19/default-apps.html">https://micro.webology.dev/2024/12/19/default-apps.html&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For the correct way to refer to them, pick one of: LLMs, Gen AI, or &amp;ldquo;AI&amp;rdquo;. &lt;em>Never&lt;/em> drop the quotes when using the plain term! Otherwise you fall into the same trap for using the term &amp;ldquo;crypto&amp;rdquo; to distinguish between cryptography and cryptocurrency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Steam Deck "downloading update" boot loop</title><link>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</link><pubDate>Sat, 05 Oct 2024 23:58:48 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</guid><description>&lt;p>Today I tried to use my Steam Deck to no avail.&lt;/p>
&lt;p>Upon turning it on, a &amp;ldquo;Downloading update (…)&amp;rdquo; splash screen would appear, then the device would quickly turn itself off, in a matter of seconds.&lt;/p>
&lt;p>Repeating this dance a couple of times yielded the same results.&lt;/p>
&lt;p>Then I found out that if you hold the three-dot button (the quick settings menu button) briefly after turning it on, you are prompted with a boot loader screen that resembles GRUB. In this screen it&amp;rsquo;s possible to roll back to an earlier OS version.&lt;/p>
&lt;p>The Steam Deck disk partitioning has two partitions (A and B), just choose the second one (i.e. not the latest one).&lt;/p>
&lt;p>This time upon restarting the device the boot loop was gone.&lt;/p>
&lt;p>&lt;strong>Credits&lt;/strong>: &lt;a href="https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/">https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/&lt;/a>&lt;/p></description></item><item><title>apk autoupdate on alpine linux</title><link>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</link><pubDate>Sun, 18 Aug 2024 17:32:48 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Upon running &lt;code>doas apk upgrade&lt;/code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.&lt;/p>
&lt;p>Deb-based systems have
&lt;a href="https://manpages.debian.org/bookworm/debian-goodies/checkrestart.8.en.html">&lt;code>checkrestart(8)&lt;/code>&lt;/a>.&lt;/p>
&lt;p>On Alpine, the best available approach as of today is &lt;a href="https://github.com/jirutka/apk-autoupdate/">https://github.com/jirutka/apk-autoupdate/&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>doas apk add apk-autoupdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">$EDITOR&lt;/span> /etc/apk/autoupdate.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then make the two following changes&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;pre tabindex="0">&lt;code># Because the default is &amp;#39;*&amp;#39;, which will prevent all services from restarting.
services_blacklist=&amp;#34;&amp;#34;

# List of services that should be restarted upon package upgrades.
services_whitelist=&amp;#34;miniflux tailscale&amp;#34;
&lt;/code>&lt;/pre>&lt;p>From this point on, whenever there are system upgrades for the aforementioned
services (&lt;code>doas apk upgrade&lt;/code>), they will be automatically restarted. There&amp;rsquo;s no
need for &lt;code>doas /etc/init.d/miniflux restart&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>h/t to @fossdd for replying to my
&lt;a href="https://github.com/jirutka/apk-autoupdate/issues/8">https://github.com/jirutka/apk-autoupdate/issues/8&lt;/a> thread.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine Linux: How to install all manpages (idiomatically)</title><link>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</link><pubDate>Sat, 20 Jul 2024 16:19:53 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/alpine-linux-how-to-install-all-manpages-idiomatically/</guid><description>&lt;p>This post is a reply to
&lt;a href="https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html">https://tilde.town/~kzimmermann/articles/installing_alpine_manpages.html&lt;/a>.&lt;/p>
&lt;p>The author describes their experience while attempting to install all man pages
for all the packages in use in their system.&lt;/p>
&lt;p>The breakdown progression has some valuable insights on how a typical Unix
sysadmin addresses a problem. I tend to adopt a similar approach when entering
unknown territory.&lt;/p>
&lt;p>However, in Alpine Linux, there is a better way.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>There is a &lt;code>docs&lt;/code> metapackage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apk info docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 description:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Meta package &lt;span style="color:#c678dd">for&lt;/span> pulling in all documentation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 webpage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://alpinelinux.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs-0.2-r6 installed size:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">4096&lt;/span> B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All you have to do is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk add docs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>1/125&lt;span style="color:#56b6c2">)&lt;/span> Installing mandoc-doc &lt;span style="color:#56b6c2">(&lt;/span>1.14.6-r13&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>2/125&lt;span style="color:#56b6c2">)&lt;/span> Installing docs &lt;span style="color:#56b6c2">(&lt;/span>0.2-r6&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>3/125&lt;span style="color:#56b6c2">)&lt;/span> Installing libseccomp-doc &lt;span style="color:#56b6c2">(&lt;/span>2.5.5-r1&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>4/125&lt;span style="color:#56b6c2">)&lt;/span> Installing busybox-doc &lt;span style="color:#56b6c2">(&lt;/span>1.36.1-r31&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span>...&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Likewise, it is trivial to get rid of all man pages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas apk del docs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I would like to give a few other suggestions to the author, if we were to assume
there is no &lt;code>docs&lt;/code> metapackage:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Step 2&lt;/strong>: You could also &lt;code>cat /etc/apk/world&lt;/code>
(&lt;a href="https://serverfault.com/questions/1032488/alpine-linux-apk-list-out-directly-installed-packages-by-apk-add">reference&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Step 4&lt;/strong>: &lt;code>combine&lt;/code> from &lt;a href="https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is more
user-friendly than &lt;code>comm&lt;/code>. I need to look up how to use &lt;code>comm&lt;/code> every single
time, whereas &lt;code>combine&lt;/code> is much easier to remember.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;p>This was also a typical &lt;a href="https://perrotta.dev/2024/06/xy-problem/">xyproblem&lt;/a> example:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What is the attempt? &amp;ldquo;I want to install, via &lt;code>apk add&lt;/code>, all &lt;code>foo-doc&lt;/code> packages
for every &lt;code>foo&lt;/code> package on my system&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the end goal? &amp;ldquo;I want to install all man pages for the installed
packages on my system&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Explain a crontab expression</title><link>https://perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p>
&lt;ul>
&lt;li>Option 1: Read the docs! The &lt;a href="https://wiki.archlinux.org/title/Cron">ArchWiki&lt;/a>
is frequently a great reference. Alternatively, use your favorite search
engine.&lt;/li>
&lt;li>Option 2: Ask ChatGPT! A simple &lt;code>cron: 0 0 * * *&lt;/code> prompt is enough. No need
to embezzle it with &lt;code>explain what this does&lt;/code> or &lt;code>what does this do?&lt;/code>.&lt;/li>
&lt;li>Option 3: Paste it into &lt;a href="https://crontab.guru/">https://crontab.guru/&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Localhost domain</title><link>https://perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>When I&amp;rsquo;m doing local development, I sometimes need a domain name that routes
back to localhost. I&amp;rsquo;ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I&amp;rsquo;ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>localdev.me&lt;/code> DNS is served through amazon. The domain name and any subdomains
point to &lt;code>127.0.0.1&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The next time you need a custom domain or subdomain for local development,
instead of hancking your hosts file you might consider localdev.me.&lt;/p>
&lt;/blockquote>
&lt;p>Source: &lt;a href="https://codeengineered.com/blog/2022/localdev-me/">https://codeengineered.com/blog/2022/localdev-me/&lt;/a>&lt;/p></description></item><item><title>Copy files from laptop to Steam Deck</title><link>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p>
&lt;p>Start a local HTTP server on your laptop:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
&lt;/code>&lt;/pre>&lt;p>Find the IP address of your laptop within your LAN:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ifconfig # macOS
$ ip addr # linux
&lt;/code>&lt;/pre>&lt;p>Now go to your Steam Deck, access &lt;code>http://&amp;lt;ip&amp;gt;:8000&lt;/code> via the installed web
browser, and download your files.&lt;/p>
&lt;p>Alternatively, run &lt;code>wget&lt;/code> / &lt;code>curl&lt;/code> in a terminal.&lt;/p></description></item><item><title>Rename files in bulk</title><link>https://perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p>
&lt;p>A simple example to rename all &lt;code>readme.md&lt;/code> files to &lt;code>README.md&lt;/code> for consistency:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#98c379">&amp;#39;s/readme\.md/README.md/&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A more recent example (2024-07-25):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>rename &lt;span style="color:#98c379">&amp;#39;s/promtail-global-testing/promtail-global/g&amp;#39;&lt;/span> **/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there are nested directories that match the expression, you&amp;rsquo;ll need to run
&lt;code>rename&lt;/code> multiple times.&lt;/p></description></item><item><title>Sleep forever</title><link>https://perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep inf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sleep infinity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Previously I would call a command such as a &lt;code>while true&lt;/code> loop or the &lt;code>yes&lt;/code>
utility, but &lt;code>sleep&lt;/code> is also handy.&lt;/p></description></item><item><title>Bcrypt-hash a password</title><link>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/936/">&lt;img src="https://imgs.xkcd.com/comics/password_strength.png"
 alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>Here&amp;rsquo;s one way to do so via the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ htpasswd -nbBC &lt;span style="color:#d19a66">10&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#98c379">&amp;#39;correct horse battery staple&amp;#39;&lt;/span> | tr -d &lt;span style="color:#98c379">&amp;#39;:\n&amp;#39;&lt;/span> | sed &lt;span style="color:#98c379">&amp;#39;s/$2y/$2a/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which yields:&lt;/p>
&lt;pre tabindex="0">&lt;code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
&lt;/code>&lt;/pre>&lt;p>You could verify it matches e.g. via &lt;a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Context&lt;/strong>: &lt;a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD&lt;/a> expects a
bcrypt-hashed password in its config file.&lt;/p></description></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p>
&lt;p>The &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs&lt;/a>
suggest using &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost/ || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>For Chartmuseum specifically we&amp;rsquo;re interested in its &lt;code>/health&lt;/code> endpoint, as per
&lt;a href="https://github.com/helm/chartmuseum/issues/28">this reference&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>But we&amp;rsquo;re using port 8080:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;curl -f http://localhost:8080/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>If you use this healthcheck for the official chartmuseum image
(&lt;code>ghcr.io/helm/chartmuseum&lt;/code>) it will fail, because the Alpine Linux environment
it uses does not contain &lt;code>curl&lt;/code>.&lt;/p>
&lt;p>A straightforward fix is to use &lt;code>wget&lt;/code> instead:&lt;/p>
&lt;pre tabindex="0">&lt;code>[&amp;#34;CMD-SHELL&amp;#34;, &amp;#34;wget -q --spider http://localhost:8080/health || exit 1&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>&lt;code>--spider&lt;/code> is needed because we do not want to download anything, &lt;code>-q&lt;/code> is
optional and short for &amp;ldquo;quiet&amp;rdquo;.&lt;/p>
&lt;p>The &lt;code>/health&lt;/code> endpoint merely returns a simple JSON:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e06c75">&amp;#34;healthy&amp;#34;&lt;/span>:&lt;span style="color:#e5c07b">true&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>References: &lt;a href="https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl">https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl&lt;/a>&lt;/p></description></item><item><title>Be aware that your public SSH keys can reveal your identity</title><link>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</link><pubDate>Fri, 03 May 2024 16:46:28 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</guid><description>&lt;p>If you have a GitHub account configured with SSH, your public keys are available
at &lt;code>https://github.com/$USERNAME.keys&lt;/code>.&lt;/p>
&lt;p>For example, mine: &lt;a href="https://github.com/thiagowfx.keys">https://github.com/thiagowfx.keys&lt;/a>&lt;/p>
&lt;p>And then let&amp;rsquo;s say you also use your full name on GitHub.&lt;/p>
&lt;pre tabindex="0">&lt;code>% ssh whoami.filippo.io
The authenticity of host &amp;#39;whoami.filippo.io (2a09:8280:1::a:5d6)&amp;#39; can&amp;#39;t be established.
ED25519 key fingerprint is SHA256:qGAqPqtlvFBCt4LfMME3IgJqZWlcrlBMxNmGjhLVYzY.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &amp;#39;whoami.filippo.io&amp;#39; (ED25519) to the list of known hosts.

 +---------------------------------------------------------------------+
 | |
 | _o/ Hello Thiago Perrotta!
 | |
 | |
 | Did you know that ssh sends all your public keys to any server |
 | it tries to authenticate to? |
 | |
 | We matched them to the keys of your GitHub account, |
 | @thiagowfx, which are available via the GraphQL API
 | and at https://github.com/thiagowfx.keys
 | |
 | -- Filippo (https://filippo.io) |
 | |
 | |
 | P.S. The source of this server is at |
 | https://github.com/FiloSottile/whoami.filippo.io |
 | |
 +---------------------------------------------------------------------+

Shared connection to whoami.filippo.io closed.
&lt;/code>&lt;/pre>&lt;p>Then be careful when connecting to random public ssh servers when you have an
intent to be anonymous.&lt;/p>
&lt;p>It&amp;rsquo;s possible to &amp;ldquo;hide&amp;rdquo; yourself by either setting the &lt;code>IdentitiesOnly=yes&lt;/code>
option, or by removing all your local ssh keys altogether, even if only
temporarily.&lt;/p></description></item><item><title>Shell text substitution</title><link>https://perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p>
&lt;h2 id="terraform">terraform&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform plan -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>terraform apply -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>terraform init -var-file /path/to/foo.tfvars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^init^plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^plan^apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="systemd">systemd&lt;/h2>
&lt;p>Instead of running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl restart nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl status nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo systemctl restart nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^restart^status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="one-observation">one observation&lt;/h2>
&lt;p>&lt;code>zsh&lt;/code> will run the substitution right away, whereas &lt;code>bash&lt;/code> will allow you
to review and edit the replaced command before running it.&lt;/p></description></item><item><title>Tools you should know about: moreutils</title><link>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p>
&lt;h2 id="sponge">sponge&lt;/h2>
&lt;blockquote>
&lt;p>sponge(1) - soak up standard input and write to a file&lt;/p>
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s a typical workflow &lt;code>sponge(1)&lt;/code> is great at:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Given a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Imagine that for whatever reason we want to replace &amp;#39;a&amp;#39; with &amp;#39;b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Naively, we could try this:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#98c379">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#98c379">&amp;#39;b&amp;#39;&lt;/span> &amp;gt; myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># However the file becomes empty!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># It got clobbered when we tried to simultenaously read from and write to it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># sponge comes to the rescue!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#98c379">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#98c379">&amp;#39;b&amp;#39;&lt;/span> | sponge myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is great to use &lt;code>sponge&lt;/code> in lieu of &lt;code>&amp;gt;&lt;/code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.&lt;/p>
&lt;h2 id="vidir">vidir&lt;/h2>
&lt;blockquote>
&lt;p>vidir(1) - edit directories and filenames&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>vidir(1)&lt;/code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open &lt;code>vidir&lt;/code> at the top-level directory of this blog repository, it opens up &lt;code>vim&lt;/code> (although it doesn&amp;rsquo;t need to be &lt;code>vim&lt;/code>, your &lt;code>$EDITOR&lt;/code> is honoured) with the following content:&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>If I make, say, the following modifications (lines 7 and 8):&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>And then save and quit &lt;code>vim&lt;/code> (&lt;code>:wq&lt;/code>), then the effect would have been the same as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ mv Makefile GNUMakefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mv README.md README.rst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I changed my mind and decided not to save the modifications, I could just do &lt;code>:cq&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to leverage vim features such as &lt;code>.&lt;/code> (repeat command) and &lt;code>:%s/&lt;/code> (find and replace) to perform those mass file renames quickly and effectively. &lt;code>vidir&lt;/code> is a breeze to use!&lt;/p>
&lt;h2 id="ifne">ifne&lt;/h2>
&lt;blockquote>
&lt;p>ifne(1) - Run command if the standard input is not empty&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>ifne(1)&lt;/code> is effective when used with &lt;code>find&lt;/code> or &lt;code>fd&lt;/code> to keep shell pipes &amp;ldquo;happy&amp;rdquo;. Here&amp;rsquo;s one simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#98c379">&amp;#39;*.cpp&amp;#39;&lt;/span> | xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should work as expected, but it&amp;rsquo;s cleaner to do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#98c379">&amp;#39;*.cpp&amp;#39;&lt;/span> | ifne xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The added &lt;code>ifne&lt;/code> ensures the &lt;code>xargs&lt;/code> command is only executed if and only if &lt;code>find&lt;/code> yields at least one result in its output.&lt;/p>
&lt;p>This wasn&amp;rsquo;t a very practical example though: a more realistic way to use &lt;code>ifne&lt;/code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend &lt;code>ifne&lt;/code> to it:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ this | is | a | complicated | pipe
# assume &amp;#34;complicated&amp;#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
&lt;/code>&lt;/pre>&lt;h2 id="combine">combine&lt;/h2>
&lt;blockquote>
&lt;p>combine(1) - combine sets of lines from two files using boolean operations&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>combine(1)&lt;/code> is pretty much &lt;code>comm(1)&lt;/code>, but much more user-friendly. Given two files &lt;code>file1&lt;/code> and &lt;code>file2&lt;/code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&amp;rsquo;s one example to find the &lt;em>common lines&lt;/em> in &lt;em>both&lt;/em> files, compare &lt;code>combine&lt;/code> and &lt;code>comm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ combine file1 and file2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ comm -12 file1 file2 &lt;span style="color:#7f848e"># flags are harder to remember&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Linux: US International keyboard layout</title><link>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>There are basically two layouts:&lt;/p>
&lt;ol>
&lt;li>US (&lt;em>&amp;lsquo;vanilla&amp;rsquo;&lt;/em>): type accents like &lt;code>'^`~&lt;/code> and they will be emitted immediately&lt;/li>
&lt;li>US International (INTL): accents are the so called &lt;a href="https://en.wikipedia.org/wiki/Dead_key">&amp;lsquo;dead keys&amp;rsquo;&lt;/a>:&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.&lt;/p>
&lt;/blockquote>
&lt;p>We can switch between keyboard layouts with &lt;code>setxkbmap&lt;/code>. It&amp;rsquo;s also possible to
use &lt;code>localectl&lt;/code> in systemd-based distros, but its syntax is harder to remember
so I won&amp;rsquo;t even include it here.&lt;/p>
&lt;h2 id="set-us-vanilla-keyboard-layout">Set US &amp;lsquo;vanilla&amp;rsquo; keyboard layout&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ setxkbmap us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what a standard QWERTY keyboard should use to type in English.&lt;/p>
&lt;h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ setxkbmap -layout us -variant intl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what a standard QWERTY keyboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> should use to type, for example, in Portuguese or in German.&lt;/p>
&lt;h3 id="portuguese">Portuguese&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>- á é í ó ú : &amp;#39; + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- â ê î ô û : ^ + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ã õ : ~ + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- à : ` + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ç (cedilla) : Alt Gr + , (Option + c on macOS)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="german">German&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>- ß (ss) : Alt Gr + s (Option + s on macOS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- ä ö ü : &amp;#34; + &amp;lt;vowel&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Alt Gr is typically the Right Alt key.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Wayland: from i3 to sway</title><link>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;code>sway&lt;/code> works well with the &lt;code>i3&lt;/code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ tree ~/.config/&lt;span style="color:#56b6c2">{&lt;/span>i3,sway&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/i3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── i3.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/sway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── sway.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config -&amp;gt; ../../../i3/.config/i3/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The master config is
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config">&lt;code>~/.config/i3/config&lt;/code>&lt;/a>.
It is pretty standard, generated by
&lt;a href="https://build.i3wm.org/docs/i3-config-wizard.html">&lt;code>i3-config-wizard&lt;/code>&lt;/a> with
a few tweaks on top for my own workflow. It works for both &lt;code>i3&lt;/code> and &lt;code>sway&lt;/code>.
The config contains this snippet:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Load user configs if existing. Order is important.
include conf.d/*.conf
&lt;/code>&lt;/pre>&lt;p>The snippet allows drop-in customizations to live in &lt;code>conf.d&lt;/code>. The &lt;code>include&lt;/code> directive is a relatively &lt;a href="https://github.com/i3/i3/pull/4420">new&lt;/a> addition to the i3config syntax and it&amp;rsquo;s the main reason this setup is elegant and minimalist.&lt;/p>
&lt;ul>
&lt;li>i3-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf">&lt;code>~/.config/i3/conf.d/i3.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with &lt;code>sway&lt;/code>, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
# dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25

 colors {
 background $black
 statusline $white

 focused_workspace $bgcolor $bgcolor $white $black
 active_workspace $gray $gray $black $gray
 inactive_workspace $black $black $gray $gray
 urgent_workspace $red $red $white $green
 }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s possible some of these configs will become compatible with &lt;code>sway&lt;/code> over time, but at the time of this writing they are not.&lt;/p>
&lt;ul>
&lt;li>sway-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf">&lt;code>~/.config/sway/conf.d/sway.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with i3, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
# sway(5)
# https://github.com/swaywm/sway/wiki
# https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &amp;#34;*&amp;#34; scale 1.5

# Wallpaper
output &amp;#34;*&amp;#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>Most of those are wayland-specific options.&lt;/p>
&lt;h2 id="quirks">Quirks&lt;/h2>
&lt;p>&lt;code>gaps&lt;/code> is available in &lt;code>i3&lt;/code> as well but only if you use
&lt;a href="https://github.com/Airblader/i3">&lt;code>i3-gaps&lt;/code>&lt;/a>, which generally I refuse to in
order to stay closer to vanilla/upstream &lt;code>i3&lt;/code>.&lt;/p>
&lt;p>The &lt;code>play-pause&lt;/code> multimedia key is
a &lt;a href="https://github.com/swaywm/sway/issues/4783">bug&lt;/a> I found on &lt;code>sway&lt;/code>. It&amp;rsquo;s quite
annoying, the workaround as you can see above is to use &lt;code>bindcode&lt;/code> instead of
&lt;code>bindsym&lt;/code>. For more details see the bug.&lt;/p>
&lt;p>In general &lt;code>sway&lt;/code> works very well out-of-the-box so long as you install
&lt;a href="https://wayland.freedesktop.org/xserver.html">XWayland&lt;/a> (&lt;code>xorg-xwayland&lt;/code> on
Arch Linux). XWayland &lt;strong>transparently&lt;/strong> proxies X11 apps to a X11 server that
runs inside wayland.&lt;/p>
&lt;p>It&amp;rsquo;s possible to detect those apps by running
&lt;a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html">&lt;code>xprop&lt;/code>&lt;/a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
&lt;a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes">&lt;code>xeyes&lt;/code>&lt;/a>
is another way to detect them.&lt;/p>
&lt;p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
&lt;code>xwayland disable&lt;/code> to the &lt;code>sway&lt;/code> config. I wouldn&amp;rsquo;t recommend that though, most
Linux GUI apps aren&amp;rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&amp;rsquo;s life.&lt;/p>
&lt;p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&amp;gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&amp;rsquo;s
noticeable.&lt;/p>
&lt;p>There&amp;rsquo;s no need to replace all of your small &lt;code>i3&lt;/code> Xorg utilities with wayland
ones. For example, &lt;a href="https://github.com/davatorium/rofi">&lt;code>rofi&lt;/code>&lt;/a> (application
launcher) works just fine (no need for &lt;code>wofi&lt;/code>). The stock &lt;code>i3&lt;/code> bar (&lt;code>sway&lt;/code> bar?)
works just fine, there&amp;rsquo;s no need for &lt;code>polybar&lt;/code> or &lt;code>waybar&lt;/code>.&lt;/p>
&lt;p>Some utilities need to be replaced though. For example, &lt;code>dunst&lt;/code> (notification
daemon) does not seem to work with &lt;code>sway&lt;/code> out-of-the-box, &lt;code>mako&lt;/code> seems to be a
recommended replacement. &lt;code>i3lock&lt;/code> (lock screen) also does not work, &lt;code>sway&lt;/code>
comes with its own screen lock directives. Screenshotters (e.g. &lt;code>scrot&lt;/code>) will
also need to be replaced.&lt;/p>
&lt;p>The system tray does not seem to work fine out-of-the-box. I haven&amp;rsquo;t
investigated much to figure out what&amp;rsquo;s wrong with it.&lt;/p>
&lt;p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying &lt;a href="https://git.sr.ht/~kennylevinsen/greetd">&lt;code>greetd&lt;/code>&lt;/a>,
&lt;a href="https://github.com/tvrzna/emptty/">&lt;code>emptty&lt;/code>&lt;/a> and
&lt;a href="https://github.com/fairyglade/ly">&lt;code>ly&lt;/code>&lt;/a>, in that order. &lt;code>ly&lt;/code> is in my opinion
the best one in terms of balancing simplicity and usefulness.&lt;/p>
&lt;p>&lt;code>sway&lt;/code> / &lt;code>XWayland&lt;/code> doesn&amp;rsquo;t source &lt;code>~/.Xresources&lt;/code>. This is an issue if you
rely on customizations therein. It does source &lt;code>~/.Xdefaults&lt;/code> though!
Leveraging this, I did the following changes:&lt;/p>
&lt;ul>
&lt;li>(i) &lt;code>~/.Xresources&lt;/code> sources &lt;code>~/.Xdefaults&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to X11 only.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xdefaults &lt;span style="color:#c678dd">for&lt;/span> settings that apply to both X11 and Wayland &lt;span style="color:#56b6c2">(&lt;/span>xorg-xwayland&lt;span style="color:#56b6c2">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#include &amp;#34;.Xdefaults&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Source:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -merge ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Dump all properties:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Check &lt;span style="color:#c678dd">if&lt;/span> DPI is set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q | grep -i dpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! HiDPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Common values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#d19a66">96&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>x1.0, baseline&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#d19a66">144&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>x1.5&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#d19a66">192&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>x2.0, HiDPI&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.dpi: &lt;span style="color:#d19a66">144&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>(ii) &lt;code>~/.Xdefaults&lt;/code> holds my customizations that originally lived in &lt;code>~/.Xresources&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xdefaults
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to both X11 and Wayland &lt;span style="color:#56b6c2">(&lt;/span>xorg-xwayland&lt;span style="color:#56b6c2">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xresources &lt;span style="color:#c678dd">for&lt;/span> X11-only settings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.antialias: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.hinting: &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In principle I could just have symlinked them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ln -s ~/.Xresources ~/.Xdefaults
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reason why I didn&amp;rsquo;t do it is to avoid double scaling (DPI). You see, my
&lt;code>sway&lt;/code> config already sets DPI / scaling to 1.5x. If we do that in
&lt;code>~/.Xdefaults&lt;/code> as well then Xorg applications would have been scaled twice.&lt;/p>
&lt;h2 id="closing-remarks">Closing remarks&lt;/h2>
&lt;p>In general Wayland / &lt;code>sway&lt;/code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&amp;rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&amp;rsquo;ll run into other quirks. I have mixed feelings
and wouldn&amp;rsquo;t necessarily recommend it. I wouldn&amp;rsquo;t give an anti recommendation
either. It&amp;rsquo;s complicated&amp;hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.&lt;/p></description></item><item><title>nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p>
&lt;p>For simplicity, think of &lt;code>nix-env&lt;/code> as a package manager, akin to &lt;code>apk&lt;/code>,
&lt;code>pacman&lt;/code>, &lt;code>brew&lt;/code>, &lt;code>apt&lt;/code>, &lt;code>pkg&lt;/code>, etc.&lt;/p>
&lt;h2 id="install-a-package">Install a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#98c379">&amp;#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I see some guides using &lt;code>nix-env -iA&lt;/code> but &lt;code>-i&lt;/code> seems to suffice. We could
optionally specify the &lt;code>nixpkgs.&lt;/code> prefix:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#98c379">&amp;#39;nixpkgs.moreutils&amp;#39;&lt;/span> matches no derivations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh no! Maybe that&amp;rsquo;s what the &lt;code>-A&lt;/code> is for?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -iA nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replacing old &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Indeed! Apparently that &lt;code>-A&lt;/code> thing stands for attribute. The only thing I know
is that there are both &lt;code>nixpkgs.*&lt;/code> and &lt;code>nixos.*&lt;/code>. But I don&amp;rsquo;t care about NixOS
at this point. I&amp;rsquo;ll just ignore &lt;code>-A&lt;/code> from now on, for the time being.&lt;/p>
&lt;h2 id="list-installed-packages">List installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! This actually gets displayed in my &lt;code>less&lt;/code> pager.&lt;/p>
&lt;h2 id="upgrade-installed-packages">Upgrade installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&amp;rsquo;s some update to one of my
installed CLI applications. I&amp;rsquo;ve heard there&amp;rsquo;s something called nix channel to
control that. Leaving it for another day though.&lt;/p>
&lt;p>&lt;strong>Update(2022-02-18)&lt;/strong>: I learned that &lt;code>nix-env -u&lt;/code> is akin to &lt;code>apt upgrade&lt;/code> or
&lt;code>apk upgrade&lt;/code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
&lt;code>apt update&lt;/code> or &lt;code>apk update&lt;/code>, use &lt;code>nix-channel --update&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: On macOS this needs to be &lt;code>sudo -i nix-channel --update&lt;/code>. See
&lt;a href="https://github.com/NixOS/nix/issues/3595">issue&lt;/a>.&lt;/p>
&lt;h2 id="uninstall-a-package">Uninstall a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env --uninstall moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uninstalling &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#98c379">&amp;#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;h2 id="search-for-packages">Search for packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP &lt;span style="color:#98c379">&amp;#39;.*moreutils.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.*&lt;/code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &amp;lsquo;derivation&amp;rsquo; in Nix):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nixpkgs.moreutils moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I write the wrong package name, the following happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#98c379">&amp;#39;moreutil&amp;#39;&lt;/span> matches no derivations, maybe you meant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moreutils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It was helpful in this case, but I wouldn&amp;rsquo;t always count on that. It is a bit
annoying that there&amp;rsquo;s no &lt;code>nix search moreutils&lt;/code> command, but it seems that
&lt;code>nix-env&lt;/code> is very heavily tailored to use short flags, just like &lt;code>pacman&lt;/code> in
Arch Linux. I got used to &lt;code>pacman&lt;/code>, hopefully I can get used to the &lt;code>nix-env&lt;/code>
short flags at some point.&lt;/p>
&lt;p>Actually I tried it out and there is a &lt;code>nix search&lt;/code> command!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix search moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: experimental Nix feature &lt;span style="color:#98c379">&amp;#39;nix-command&amp;#39;&lt;/span> is disabled; use &lt;span style="color:#98c379">&amp;#39;--extra-experimental-features nix-command&amp;#39;&lt;/span> to override
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This isn&amp;rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the &lt;code>nix-env&lt;/code> form for now.&lt;/p>
&lt;p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>atool-0.39.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-interactive-5.1-p12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coreutils-9.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exa-0.10.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fpp-0.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fzf-0.29.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git-2.34.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>htop-3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo-0.92.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jq-1.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>less-600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ncdu-1.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl5.34.0-ack-3.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranger-1.9.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stow-2.3.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmux-3.2a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree-1.8.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim-8.2.4186
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watch-procps-3.3.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget-1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zoxide-0.8.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were very intuitive to find, with the exception of &lt;code>ack&lt;/code> and &lt;code>bash-interactive&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bash&lt;/code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
&lt;code>~/.bashrc&lt;/code> wrecked havoc with the non-interactive version.&lt;/li>
&lt;li>&lt;code>ack&lt;/code> is very oddly named. Really. Also: &lt;code>nix-env -i ack&lt;/code> doesn&amp;rsquo;t work, but
&lt;code>nix-env -iA nixpkgs.ack&lt;/code> does. I suspect it will be hard to ignore &lt;code>-A&lt;/code> in
the future.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Strictly speaking there&amp;rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, &lt;a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu&lt;/a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>SSH plus tmux automatically</title><link>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p>
&lt;h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)&lt;/h2>
&lt;p>Start &lt;code>tmux&lt;/code>, forcing unicode, attaching to and/or creating a session named &lt;em>main&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-u&lt;/code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&amp;rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&amp;rsquo;s safer to always include &lt;code>-u&lt;/code> just in case.&lt;/p>
&lt;p>Tip: If it&amp;rsquo;s annoying to remember to type the full command above, consider adding an &lt;code>alias&lt;/code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the &lt;a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell&lt;/a> extension.&lt;/p>
&lt;h2 id="option-2-use-sshconfig-client-side">Option #2: Use &lt;code>~/.ssh/config&lt;/code> (client-side)&lt;/h2>
&lt;p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.ssh/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestTTY yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RemoteCommand tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need to match all hosts (&lt;code>Host *&lt;/code>), if you&amp;rsquo;d rather match one or more specific hosts, refer to the ssh config syntax &lt;code>ssh_config(5)&lt;/code> to add them. A simple example would be &lt;code>Host mymachine.example.org&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Caveat&lt;/strong>: I&amp;rsquo;ve found this method interferes with &lt;code>git&lt;/code> + &lt;code>ssh&lt;/code> authentication. More specifically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git remote -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#56b6c2">(&lt;/span>fetch&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#56b6c2">(&lt;/span>push&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cannot execute command-line and remote command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: Could not &lt;span style="color:#e5c07b">read&lt;/span> from remote repository.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please make sure you have the correct access rights
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>and the repository exists.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&amp;rsquo;t use it with &lt;code>Host *&lt;/code>.&lt;/p>
&lt;h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use &lt;code>~/.bash_profile&lt;/code> or similar (server-side, recommended)&lt;/h2>
&lt;p>This method leverages your login shell startup config file (&lt;code>~/.bash_profile&lt;/code>, &lt;code>~/.zprofile&lt;/code>, etc) to automatically spawn &lt;code>tmux&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># This file is invoked as part of my ~/.bash_profile.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Automatically spawn tmux within ssh sessions for interactive terminals.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># https://stackoverflow.com/a/43819740/1745064&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># The session is called `main`.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Escape hatch:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># ssh &amp;lt;host&amp;gt; -t -- NOTMUX=1 &amp;lt;shell&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> -z &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$NOTMUX&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> -z &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$TMUX&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span> -n &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$SSH_TTY&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#56b6c2">[[&lt;/span> &lt;span style="color:#e06c75">$-&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span>~ i &lt;span style="color:#56b6c2">]]&lt;/span>; &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>if&lt;/code> basically checks:&lt;/p>
&lt;ul>
&lt;li>whether we&amp;rsquo;re not already inside a tmux session (we shouldn&amp;rsquo;t be), so that we don&amp;rsquo;t nest &lt;code>tmux&lt;/code>&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing the shell via &lt;code>ssh&lt;/code> (we should be)&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing an interactive shell (we should be), so that it doesn&amp;rsquo;t interfere with oneshot &lt;code>ssh&lt;/code> commands&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s also a escape hatch. If you want to get an interactive shell but bypass &lt;code>tmux&lt;/code> for some reason&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, just set &lt;code>NOTMUX=1&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- &lt;span style="color:#e06c75">NOTMUX&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn &lt;code>tmux&lt;/code> server-side, or selectively spawn &lt;code>tmux&lt;/code> client-side.&lt;/p>
&lt;p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your &lt;code>ssh&lt;/code> host settings. That said, in scenarios where I fully control a host and it&amp;rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For example, maybe if &lt;code>tmux&lt;/code> broke due to a recent upgrade, or if the &lt;code>~/.tmux.conf&lt;/code> is invalid.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>nix-shell in a nutshell</title><link>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</link><pubDate>Thu, 10 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</guid><description>&lt;p>As soon as we finish installing &lt;a href="https://nixos.org/download.html">&lt;code>Nix&lt;/code>&lt;/a> on
Darwin, we&amp;rsquo;re greeted with a call to action:&lt;/p>
&lt;pre tabindex="0">&lt;code>Alright! We&amp;#39;re done!
Try it! Open a new terminal, and type:

 $ nix-shell -p nix-info --run &amp;#34;nix-info -m&amp;#34;

Thank you for using this installer. If you have any feedback or need
help, don&amp;#39;t hesitate:

You can open an issue at https://github.com/nixos/nix/issues
&lt;/code>&lt;/pre>&lt;h2 id="hello-world-bloated">Hello world (bloated)&lt;/h2>
&lt;p>All right then, let&amp;rsquo;s do it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p nix-info --run &lt;span style="color:#98c379">&amp;#34;nix-info -m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - system: &lt;span style="color:#98c379">`&lt;/span>&lt;span style="color:#98c379">&amp;#34;aarch64-darwin&amp;#34;&lt;/span>&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - host os: &lt;span style="color:#98c379">`&lt;/span>Darwin 21.3.0, macOS 12.2&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - multi-user?: &lt;span style="color:#98c379">`&lt;/span>yes&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sandbox: &lt;span style="color:#98c379">`&lt;/span>no&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: &lt;span style="color:#98c379">`&lt;/span>nix-env &lt;span style="color:#56b6c2">(&lt;/span>Nix&lt;span style="color:#56b6c2">)&lt;/span> 2.6.0&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - channels&lt;span style="color:#56b6c2">(&lt;/span>root&lt;span style="color:#56b6c2">)&lt;/span>: &lt;span style="color:#98c379">`&lt;/span>&lt;span style="color:#98c379">&amp;#34;nixpkgs&amp;#34;&lt;/span>&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - nixpkgs: &lt;span style="color:#98c379">`&lt;/span>/nix/var/nix/profiles/per-user/root/channels/nixpkgs&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cool, it works. Let&amp;rsquo;s break it down a bit.&lt;/p>
&lt;h2 id="hello-world-classic">Hello world (classic)&lt;/h2>
&lt;p>Nix shell creates an ephemeral shell environment with the customizations you
want. The most basic customization is to make a given set of packages
available. There&amp;rsquo;s a &lt;code>hello&lt;/code> package:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case you&amp;rsquo;re curious, this is a GNU binary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hello --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello &lt;span style="color:#56b6c2">(&lt;/span>GNU Hello&lt;span style="color:#56b6c2">)&lt;/span> 2.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#56b6c2">(&lt;/span>C&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#d19a66">2014&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>License GPLv3+: GNU GPL version &lt;span style="color:#d19a66">3&lt;/span> or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software: you are free to change and redistribute it.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>There is NO WARRANTY, to the extent permitted by law.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have no idea why they are in version 2.10 and what their changelog is. It&amp;rsquo;s
such a simple binary&amp;hellip;&lt;/p>
&lt;p>If you exit the shell, &lt;code>hello&lt;/code> seemingly vanishes:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ exit
exit
$ hello
zsh: command not found: hello
&lt;/code>&lt;/pre>&lt;p>An easy way to think of &lt;code>nix-shell&lt;/code> is like an ephemeral sandbox where all your
desired packages are made available when you enter it. It&amp;rsquo;s possible to provide
more than one package, naturally. It&amp;rsquo;s also possible to provide a &lt;code>shell.nix&lt;/code>
file with the package declarations, so that when you can &lt;code>nix-shell&lt;/code> without
any arguments.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat shell.nix
{ pkgs ? import &amp;lt;nixpkgs&amp;gt; {} }:
 pkgs.mkShell {
 # nativeBuildInputs is usually what you want -- tools you need to run
 nativeBuildInputs = [ pkgs.buildPackages.hello ];
}
$ nix-shell
$ hello
Hello, world!
&lt;/code>&lt;/pre>&lt;h2 id="hello-world-oneshot">Hello world (oneshot)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p hello --run hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This oneshot style doesn&amp;rsquo;t enter the shell, it just runs the given &lt;code>--run&lt;/code>
command and then exits.&lt;/p>
&lt;p>This post just scratched the surface of what &lt;code>nix-shell&lt;/code> can do. See the
references below for more in-depth guides about it.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cuddly-octo-palm-tree.com/posts/2021-12-19-tyska-nix-shell/">Tools You Should Know About: nix-shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ghedam.at/15978/an-introduction-to-nix-shell">An introduction to nix-shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nixos.org/manual/nix/stable/command-ref/nix-shell.html">NixOS manual: &lt;code>nix-shell&lt;/code>&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Doas: bridging the sudo gap</title><link>https://perrotta.dev/2022/02/doas-bridging-the-sudo-gap/</link><pubDate>Mon, 07 Feb 2022 14:49:03 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/doas-bridging-the-sudo-gap/</guid><description>&lt;p>&lt;a href="https://man.openbsd.org/doas">&lt;code>doas&lt;/code>&lt;/a> is a lightweight and safer replacement for &lt;code>sudo&lt;/code>. In most occasions you invoke it exactly like &lt;code>sudo&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo apt install &amp;lt;foo&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ doas apt install &amp;lt;foo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>doas&lt;/code> has gained popularity recently. Besides being the default in OpenBSD, Alpine Linux 3.15 (released last year) has also &lt;a href="https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.15.0#Move_from_sudo_to_doas">switched to it&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>doas&lt;/code> is the default temporary privilege escalation tool. You are advised to migrate from &lt;code>sudo&lt;/code> to &lt;code>doas&lt;/code> as 3.15 will be the last release to support &lt;code>sudo&lt;/code> throughout its full lifecycle, in 3.16 &lt;code>sudo&lt;/code> will be moved from main to community.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s not very difficult to get used to it, however you may still find yourself writing &lt;code>sudo&lt;/code> occasionally. This post highlights a few ways to bridge that gap.&lt;/p>
&lt;h2 id="use-a-shell-alias">Use a shell alias&lt;/h2>
&lt;p>In your &lt;code>~/.bashrc&lt;/code> or &lt;code>~/.zshrc&lt;/code> or in your favorite shell, do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">alias&lt;/span> &lt;span style="color:#e06c75">sudo&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>doas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Caveat: Besides being an user-dependent workaround&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, &lt;code>doas&lt;/code> isn&amp;rsquo;t really a full drop-in replacement to &lt;code>sudo&lt;/code>. This workaround will work in most day-to-day situations but it will obviously not support most &lt;code>sudo&lt;/code> specific flags.&lt;/p>
&lt;h2 id="use-a-shimwrapper-recommended">Use a shim/wrapper (recommended)&lt;/h2>
&lt;p>Alpine Linux provides a &lt;a href="https://pkgs.alpinelinux.org/package/edge/main/x86_64/doas-sudo-shim">&lt;code>doas-sudo-shim&lt;/code>&lt;/a> package:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ doas apk add doas-sudo-shim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>This is a shim for the &lt;code>sudo&lt;/code> command that utilizes &lt;code>doas&lt;/code>. It supports only a subset of the &lt;code>sudo&lt;/code> options (both short and long variants) that have an equivalent in &lt;code>doas&lt;/code>, plus option &lt;code>-i&lt;/code> (&lt;code>--login&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;p>This is a slightly better solution, as this thin wrapper is aware of some &lt;code>sudo&lt;/code> flags, translating them to the equivalent &lt;code>doas&lt;/code> ones; furthermore, it works out-of-the-box and it&amp;rsquo;s system-wide. As an added bonus, it&amp;rsquo;s implemented entirely in shell script, being as much portable as possible.&lt;/p>
&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>Last but not least, you could choose to install &lt;code>sudo&lt;/code> and configure it, keeping both &lt;code>doas&lt;/code> and &lt;code>sudo&lt;/code>, but what&amp;rsquo;s the point? If your system favours &lt;code>doas&lt;/code>, stick to &lt;code>doas&lt;/code>. There&amp;rsquo;s no need to unnecessarily increase complexity by keeping around two programs that serve exactly the same purpose.&lt;/p>
&lt;p>If you don&amp;rsquo;t like or want &lt;code>doas&lt;/code> for some reason, you could look into the other way around: find a &lt;code>doas&lt;/code> shim that bridges to &lt;code>sudo&lt;/code>, or define an alias: &lt;code>$ alias doas=sudo&lt;/code>.&lt;/p>
&lt;p>The best long-term solution though would be to just use &lt;code>doas&lt;/code> without any alias or shim, but our muscle memory may have trouble adapting to that, especially when &lt;code>sudo&lt;/code> is still the &lt;em>de facto standard&lt;/em> in most Linux distributions out there these days.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>To make it system-wide, change the relevant file in &lt;code>/etc&lt;/code>: for example, &lt;code>/etc/bashrc&lt;/code> for &lt;code>bash&lt;/code>. I would advise against it though.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Transfer bash history to zsh</title><link>https://perrotta.dev/2022/02/transfer-bash-history-to-zsh/</link><pubDate>Fri, 04 Feb 2022 21:58:50 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/transfer-bash-history-to-zsh/</guid><description>&lt;p>After years of using &lt;code>bash&lt;/code> as my default interactive shell at $DAYJOB,
I decided to switch to &lt;code>zsh&lt;/code>. I didn&amp;rsquo;t want to start from scratch and lose all
my history though:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ wc -l ~/.bash_history | cut -f1 -d&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">64002&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus my goal was to first migrate all my history from &lt;code>bash&lt;/code> to &lt;code>zsh&lt;/code>.&lt;/p>
&lt;p>The &lt;code>bash-to-zsh-hist.py&lt;/code> python script in this
&lt;a href="https://gist.github.com/muendelezaji/c14722ab66b505a49861b8a74e52b274">gist&lt;/a>
did most of the job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># This is how I used it:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># $ cat ~/.bash_history | python bash-to-zsh-hist.py &amp;gt;&amp;gt; ~/.zsh_history&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timestamp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">stdin&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">readlines&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">startswith&lt;/span>(&lt;span style="color:#98c379">&amp;#39;#&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">timestamp&lt;/span> &lt;span style="color:#56b6c2">is&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">t&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">t&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isdigit&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timestamp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">stdout&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">write&lt;/span>(&lt;span style="color:#98c379">&amp;#39;: &lt;/span>&lt;span style="color:#98c379">%s&lt;/span>&lt;span style="color:#98c379">:0;&lt;/span>&lt;span style="color:#98c379">%s&lt;/span>&lt;span style="color:#98c379">\n&lt;/span>&lt;span style="color:#98c379">&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> (&lt;span style="color:#e06c75">timestamp&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">time&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">time&lt;/span>(), &lt;span style="color:#e06c75">line&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">timestamp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ wget https://gist.githubusercontent.com/muendelezaji/c14722ab66b505a49861b8a74e52b274/raw/49f0fb7f661bdf794742257f58950d209dd6cb62/bash-to-zsh-hist.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ chmod +x ./bash-to-zsh-hist.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat .bash_history | ./bash-to-zsh-hist.py &amp;gt;&amp;gt; ~/.zsh_history
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, that didn&amp;rsquo;t fully work. Upon running &lt;code>zsh&lt;/code>, there was an error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: corrupt &lt;span style="color:#e5c07b">history&lt;/span> file /usr/local/google/home/tperrotta/.zsh_history
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A quick google search led me to &lt;a href="https://shapeshed.com/zsh-corrupt-history-file/">a blog post&lt;/a>. I adapted the command suggest therein&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ strings -eS .zsh_history | sponge .zsh_history
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that fixed the issue!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;code>sponge&lt;/code> comes from the &lt;a href="https://joeyh.name/code/moreutils/">moreutils&lt;/a> package.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Linux swap shenanigans</title><link>https://perrotta.dev/2022/02/linux-swap-shenanigans/</link><pubDate>Tue, 01 Feb 2022 17:03:13 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/linux-swap-shenanigans/</guid><description>&lt;p>In this post we will cover a few linux swap recipes.&lt;/p>
&lt;h2 id="empty-swap-space">Empty swap space&lt;/h2>
&lt;p>Completely empty (&lt;em>flush&lt;/em>) swap space:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% swapoff --all &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> swapon --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="decrease-swappiness">Decrease swappiness&lt;/h2>
&lt;p>Emptying is too extreme. Why did you get so much swap in the first place?
A small tweak is to decrease the sensibility of the system to swap:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/sysctl.d/90-custom.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.swappiness&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.vfs_cache_pressure&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The default swappiness of the Linux kernel these days is 60%, which IMHO is
quite aggressive for desktop usage. By decreasing it to 20%, our system will
only start to swap once we use more than 80% of total RAM. In other words, only
when there is 20% or less of free / available RAM.&lt;/p>
&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt">&lt;code>vfs_cache_pressure&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>This percentage value controls the tendency of the kernel to reclaim the
memory which is used for caching of directory and inode objects.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>At the default value of vfs_cache_pressure=100 the kernel will attempt to
reclaim dentries and inodes at a &amp;ldquo;fair&amp;rdquo; rate with respect to pagecache and
swapcache reclaim. Decreasing vfs_cache_pressure causes the kernel to prefer
to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will
never reclaim dentries and inodes due to memory pressure and this can easily
lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100
causes the kernel to prefer to reclaim dentries and inodes.&lt;/p>
&lt;/blockquote>
&lt;p>However, &lt;code>/etc/sysctl.d&lt;/code> settings will only be applied after a reboot. To apply
them immediately, use the &lt;code>sysctl(8)&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% sudo sysctl -p /etc/sysctl.d/90-custom.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.swappiness &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vm.vfs_cache_pressure &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-a-swapfile">Use a swapfile&lt;/h2>
&lt;p>If you find yourself with a fully partitioned disk without any dedicated swap
partition, there&amp;rsquo;s a trick to adding swap anyway: Use a swap file! &lt;a href="https://en.wikipedia.org/wiki/Everything_is_a_file">Everything is
a file&lt;/a> anyway!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># https://wiki.archlinux.org/title/Swap#Swap_file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Create the swap file: 8GiB in this case, to match our total RAM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% dd &lt;span style="color:#c678dd">if&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>/dev/zero &lt;span style="color:#e06c75">of&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>/swapfile &lt;span style="color:#e06c75">bs&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>1M &lt;span style="color:#e06c75">count&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">8000&lt;/span> &lt;span style="color:#e06c75">status&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>progress
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Set restricting permissions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% chmod &lt;span style="color:#d19a66">600&lt;/span> /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Format the ~~partition~~ file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mkswap /swapfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Activate the swap file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% swapon /swapfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can check it&amp;rsquo;s working correctly by inspecting &lt;code>/proc/swaps&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat /proc/swaps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Filename				Type		Size		Used		Priority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/swapfile file		8388604		0		-2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then finally add it to your &lt;code>/etc/fstab&lt;/code> so that it is automatically mounted in subsequent boots:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># swap file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/swapfile none swap defaults &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="add-zram-swap">Add ZRAM swap&lt;/h2>
&lt;p>Explaining &lt;code>zram&lt;/code> is out of scope if this post, but check out the
&lt;a href="https://wiki.archlinux.org/title/Improving_performance#zram_or_zswap">ArchWiki&lt;/a>
or &lt;a href="https://en.wikipedia.org/wiki/Zram">Wikipedia&lt;/a>.&lt;/p>
&lt;p>The recipe I use in Arch Linux is the &lt;a href="https://aur.archlinux.org/packages/zramswap/">&lt;code>zramswap&lt;/code>&lt;/a> package:&lt;/p>
&lt;ol>
&lt;li>Install the package.&lt;/li>
&lt;li>Set desired zram swap percentage, I picked 20%:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat /etc/zramswap.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">ZRAM_SIZE_PERCENT&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Enable/Start the service:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% systemctl &lt;span style="color:#e5c07b">enable&lt;/span> --now zramswap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% systemctl status zramswap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>● zramswap.service - Zram-based swap &lt;span style="color:#56b6c2">(&lt;/span>compressed RAM block devices&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Loaded: loaded &lt;span style="color:#56b6c2">(&lt;/span>/usr/lib/systemd/system/zramswap.service; enabled; vendor preset: disabled&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Active: active &lt;span style="color:#56b6c2">(&lt;/span>exited&lt;span style="color:#56b6c2">)&lt;/span> since Tue 2022-02-01 16:13:37 EST; 7h ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main PID: &lt;span style="color:#d19a66">582&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e06c75">code&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>exited, &lt;span style="color:#e06c75">status&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0/SUCCESS&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU: 27ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feb &lt;span style="color:#d19a66">01&lt;/span> 16:13:37 localhost.localdomain systemd&lt;span style="color:#56b6c2">[&lt;/span>1&lt;span style="color:#56b6c2">]&lt;/span>: Starting Zram-based swap &lt;span style="color:#56b6c2">(&lt;/span>compressed RAM block devices&lt;span style="color:#56b6c2">)&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feb &lt;span style="color:#d19a66">01&lt;/span> 16:13:37 localhost.localdomain zramctrl&lt;span style="color:#56b6c2">[&lt;/span>627&lt;span style="color:#56b6c2">]&lt;/span>: Setting up swapspace version 1, &lt;span style="color:#e06c75">size&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> 1.5 GiB &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#d19a66">1654009856&lt;/span> bytes&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feb &lt;span style="color:#d19a66">01&lt;/span> 16:13:37 localhost.localdomain zramctrl&lt;span style="color:#56b6c2">[&lt;/span>627&lt;span style="color:#56b6c2">]&lt;/span>: &lt;span style="color:#e06c75">LABEL&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>zram0, &lt;span style="color:#e06c75">UUID&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>a39e0131-f102-4503-a1e7-a3e0ca330126
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Feb &lt;span style="color:#d19a66">01&lt;/span> 16:13:37 localhost.localdomain systemd&lt;span style="color:#56b6c2">[&lt;/span>1&lt;span style="color:#56b6c2">]&lt;/span>: Finished Zram-based swap &lt;span style="color:#56b6c2">(&lt;/span>compressed RAM block devices&lt;span style="color:#56b6c2">)&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can inspect &lt;code>/proc/swaps&lt;/code> again to check it&amp;rsquo;s working properly&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat /proc/swaps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Filename				Type		Size		Used		Priority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/swapfile file		8388604		0		-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/zram0 partition	1615244		0		&lt;span style="color:#d19a66">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>zswap should have more priority than the swap file.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>systemd: share environment variables with xorg</title><link>https://perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p>
&lt;p>The typical &lt;a href="https://wiki.archlinux.org/title/Xinit">&lt;code>~/.xinitrc&lt;/code>&lt;/a> and/or &lt;a href="https://wiki.archlinux.org/title/Xprofile">&lt;code>~/.xprofile&lt;/code>&lt;/a> setup in
2020s involves some environment variable exports such as the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># fix java application decorations, for tiling window managers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">_JAVA_AWT_WM_NONREPARENTING&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># make Chrome pick up proxy settings stored in gconf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">DESKTOP_SESSION&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># HiDPI settings for GTK3+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">GDK_DPI_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">GDK_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># HiDPI settings for QT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">QT_FONT_DPI&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This particular set of customizations stems from my &lt;a href="https://github.com/thiagowfx/.dotfiles">dotfiles&lt;/a> but
there isn&amp;rsquo;t anything special about it. I&amp;rsquo;ll include an explanation anyway for
completeness:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The java setting is meant for launching certain java-based applications from
within a tiling window manager.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All the other settings are meant for 4K HiDPI displays. The baseline DPI is
96, which is too small for 4K monitors, the fonts and icons all look tiny. In
order to make them scale it&amp;rsquo;s necessary to use a higher DPI. Typical setups
use either 144 (x1.5) or 192 (x2.0), the bigger the DPI the bigger fonts and
icons will appear in the screen.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Those exports work well for graphical applications launched from your favorite
window manager after it has already started, however if you decide to launch an
application from &lt;code>systemd&lt;/code>, those settings will not be picked up by it.&lt;/p>
&lt;p>For example, if you decide to manage &lt;a href="http://jonls.dk/redshift/">&lt;code>redshift&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (more
specifically, &lt;code>redshift-gtk&lt;/code> which has a system tray app) from a systemd user
session&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, its fonts will look small.&lt;/p>
&lt;p>There are several ways to address this issue.&lt;/p>
&lt;p>One of them is to edit the service file directly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl --user edit redshift-gtk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then add:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Environment=GDK_SCALE=2 GDK_DPI_SCALE=0.5
&lt;/code>&lt;/pre>&lt;p>Which results in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.config/systemd/user/redshift-gtk.service.d/override.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span>Unit&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Environment&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e06c75">GDK_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#e06c75">GDK_DPI_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which you can make effective by:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl --user daemon-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ systemctl --user restart redshift-gtk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am not a fan of this approach though, because this step would need to be repeated
to all service files you want to manage this way. There&amp;rsquo;s a better, &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY&lt;/a> way to
do so.&lt;/p>
&lt;p>&lt;code>systemd&lt;/code> supports &lt;a href="https://www.freedesktop.org/software/systemd/man/environment.d.html">environment
files&lt;/a>
(&lt;code>environment.d(5)&lt;/code>). User-defined ones live in
&lt;code>~/.config/environment.d/*.conf&lt;/code> by default.&lt;/p>
&lt;p>This means we could produce the following file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.config/environment.d/user.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># systemd environment.d(5) EnvironmentFile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># https://www.freedesktop.org/software/systemd/man/environment.d.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Do not use export here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Alternatively&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># systemctl --user import-environment [var1] [var2] [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Troubleshooting&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># systemctl --user show-environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># fix java application decorations, for tiling window managers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">_JAVA_AWT_WM_NONREPARENTING&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># make Chrome pick up proxy settings stored in gconf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">DESKTOP_SESSION&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># HiDPI settings for GTK3+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">GDK_DPI_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">GDK_SCALE&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># HiDPI settings for QT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">QT_FONT_DPI&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which is applied to all systemd user service files automatically, no need to
set &lt;code>Environment=&lt;/code> manually everywhere.&lt;/p>
&lt;p>However, now we need to maintain two different files: the systemd &lt;code>.conf&lt;/code> one
and the xorg &lt;code>~/.xinitrc&lt;/code> one.&lt;/p>
&lt;p>One elegant way to reduce maintenance burden is, in my opinion, the follownig:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.xinitrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Parse user session environment variables.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># This file is shared with the systemd user instance.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Export all variables: https://stackoverflow.com/a/30969768/1745064&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">set&lt;/span> -a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[&lt;/span> -r ~/.config/environment.d/user.conf &lt;span style="color:#56b6c2">]&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> . ~/.config/environment.d/user.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">set&lt;/span> +a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It does what you expect: the underlying shell sources the &lt;code>*.conf&lt;/code> file as if
you were &lt;code>export&lt;/code>ing each variable therein.&lt;/p>
&lt;p>One caveat of this setup is that you cannot define the variables
dynamically; for example, with subshells, with external programs, or with
simple mathematical operations derived from other variables&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Ultimately though you end up with only one file to manage, which is the systemd one.
&lt;a href="https://en.wikipedia.org/wiki/KISS_principle">KISS&lt;/a>™.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/963/">&lt;img src="https://imgs.xkcd.com/comics/x11.png"
 alt="Thomas Jefferson thought that every law and every constitution should be torn down and rewritten from scratch every nineteen years--which means X is overdue.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Redshift adjusts the color temperature of your screen according to your
surroundings. This may help your eyes hurt less if you are working in front
of the screen at night. Redshift is similar to &lt;a href="https://justgetflux.com/">f.lux&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;code>systemctl --user start redshift&lt;/code>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For example, &lt;code>QT_FONT_DPI=$(($GDK_SCALE * 96))&lt;/code> or similar.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Watch files and react to changes during development</title><link>https://perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>I am contributing to &lt;a href="https://github.com/miniflux/v2">miniflux&lt;/a>, a minimalist and opinionated RSS reader. Miniflux&amp;rsquo;s stack is as minimalist as the app itself: It&amp;rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive &lt;a href="https://github.com/miniflux/v2/blob/master/Makefile">&lt;code>Makefile&lt;/code>&lt;/a>.&lt;/p>
&lt;p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&amp;rsquo;s needed is to execute &lt;code>make run&lt;/code> whenever any&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> file in the repository is changed.&lt;/p>
&lt;p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.&lt;/p>
&lt;h2 id="option-1-entr-recommended">Option #1: entr (recommended)&lt;/h2>
&lt;p>&lt;a href="https://eradman.com/entrproject/">&lt;code>entr(1)&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Run arbitrary commands when files change&lt;/p>
&lt;/blockquote>
&lt;p>The following invocation does the job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fd | entr -r -- make run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, we could do better. From the upstream docs:&lt;/p>
&lt;blockquote>
&lt;p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git&lt;/p>
&lt;/blockquote>
&lt;p>I am happy with &lt;code>fd&lt;/code> for this use case though. To limit &lt;code>entr&lt;/code> to &lt;code>.go&lt;/code> files only, we could do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fd -e go | entr -r -- make run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It took me less than 5 minutes to install and figure out how to use &lt;code>entr&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://schauderbasis.de/posts/entr/">This blog post&lt;/a> covers it in more detail.&lt;/p>
&lt;h2 id="option-2-watchman">Option #2: watchman&lt;/h2>
&lt;p>&lt;a href="https://facebook.github.io/watchman/">&lt;code>watchman&lt;/code>&lt;/a> from Facebook Open Source:&lt;/p>
&lt;blockquote>
&lt;p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.&lt;/p>
&lt;/blockquote>
&lt;p>Watchman&amp;rsquo;s workflow doesn&amp;rsquo;t seem to be very suited for this job though. It&amp;rsquo;s much more centered on subscribing to &lt;code>inotify&lt;/code> events:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">cd&lt;/span> &amp;lt;repository root&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watchman watch .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># set up a trigger named &amp;#39;buildme&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># will run &amp;#39;minify-css&amp;#39; whenever a CSS file is changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watchman -- trigger . buildme &lt;span style="color:#98c379">&amp;#39;*.css&amp;#39;&lt;/span> -- minify-css
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.&lt;/p>
&lt;p>That said, for the simple use case of triggering (and reloading) &lt;code>make run&lt;/code>, it seems overkill. I also found its &lt;a href="https://facebook.github.io/watchman/docs/install.html">official docs&lt;/a> too verbose and lacking sample usages for simple &lt;code>Makefile&lt;/code>-based projects like miniflux.&lt;/p>
&lt;p>One caveat of &lt;a href="https://repology.org/project/watchman/versions">&lt;code>watchman&lt;/code>&lt;/a> is that it&amp;rsquo;s less widely available than &lt;a href="https://repology.org/project/entr/versions">&lt;code>entr&lt;/code>&lt;/a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.&lt;/p>
&lt;p>It took me several minutes to figure out what&amp;rsquo;s the gist of watchman, only to realize it is more bloated than warranted.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>For simple projects, &lt;code>entr&lt;/code> is the way to go, hands down. For complex webdev projects, I would look into &lt;code>watchman&lt;/code> more deeply.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>To be truly strict, only changes to &lt;code>.go&lt;/code> files matter.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Linux: Remount device with different options</title><link>https://perrotta.dev/2022/01/linux-remount-device-with-different-options/</link><pubDate>Sat, 29 Jan 2022 23:16:04 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/linux-remount-device-with-different-options/</guid><description>&lt;p>A few recipes for remounting linux devices / disks. It mostly boils down to running &lt;code>mount -o remount&lt;/code> as root.&lt;/p>
&lt;h2 id="remount-as-read-write">Remount as read-write&lt;/h2>
&lt;p>If &lt;code>/dev/sdb1&lt;/code> is mounted on &lt;code>/mnt/data&lt;/code> as read-only (&lt;code>ro&lt;/code>), it could be remounted as &lt;code>rw&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% mount -o remount,rw /mnt/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% mount -o remount,rw /dev/sdb1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="increase-ram-disk-size">Increase RAM disk size&lt;/h2>
&lt;p>&lt;code>/dev/shm&lt;/code> (shared memory) is typically allocated half of the available amount of RAM in the system. For example, in my 8GB Arch Linux system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ df -h | grep /dev/shm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 3.9G 127M 3.8G 4% /dev/shm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To increase the amount of space allocated to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% mount -o remount,size&lt;span style="color:#56b6c2">=&lt;/span>8G /dev/shm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ df -h | grep /dev/shm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 8.0G 72M 8.0G 1% /dev/shm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>ChromeOS hterm: customize fonts</title><link>https://perrotta.dev/2022/01/chromeos-hterm-customize-fonts/</link><pubDate>Wed, 26 Jan 2022 19:48:52 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/chromeos-hterm-customize-fonts/</guid><description>&lt;p>&lt;a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">ChromeOS hterm&lt;/a> (&amp;ldquo;Secure Shell extension&amp;rdquo;) is one of my favorite chrome extensions.
It is a bit dull with its out-of-the-box monospace font though.
In this post we&amp;rsquo;ll learn how to customize it.&lt;/p>
&lt;h2 id="google-fonts">Google Fonts&lt;/h2>
&lt;p>The easiest way to customize the Secure Shell extension to use a custom font is to select one from &lt;a href="https://fonts.google.com/">Google Fonts&lt;/a>.
Once you select a font from there, it will give you information like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Use on the web
To embed a font, copy the code into the &amp;lt;head&amp;gt; of your html
( ) &amp;lt;link&amp;gt; (x) @import

&amp;lt;style&amp;gt;
@import url(&amp;#39;https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap&amp;#39;);
&amp;lt;/style&amp;gt;

font-family: &amp;#39;IBM Plex Sans&amp;#39;, sans-serif;
&lt;/code>&lt;/pre>&lt;p>All we have to do is to copy the URL within the &lt;code>url('...')&lt;/code> fragment above,
go to the &lt;a href="chrome-extension://iodihamcpbpeioajjeobimgagajmlibd/html/nassh_preferences_editor.html">settings&lt;/a> of the Secure Shell extension,
and then paste it there:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none"># Example 1: IBM Plex Sans
Custom CSS (URI): https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap

# Example 2: Fira Code
Custom CSS (URI): https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&amp;amp;display=swap

# Example 3: Combine both
https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&amp;amp;family=IBM+Plex+Sans&amp;amp;display=swap
&lt;/code>&lt;/pre>&lt;p>And then set the extension to use it:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Text font family: &amp;#34;IBM Plex Sans&amp;#34;, &amp;#34;Fira Code&amp;#34;, monospace
&lt;/code>&lt;/pre>&lt;p>From Secure Shell &lt;a href="https://chromium.googlesource.com/apps/libapps/+/master/nassh/doc/FAQ.md">FAQ&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>By default, we disable ligatures. Some fonts actively enable them like macOS&amp;rsquo;s Menlo (e.g. &amp;ldquo;ae&amp;rdquo; is rendered as &amp;ldquo;æ&amp;rdquo;). This messes up copying and pasting and is, arguably, not terribly legible for a terminal.&lt;/p>
&lt;/blockquote>
&lt;p>If your font supports &lt;a href="https://en.wikipedia.org/wiki/Ligature_(writing)">ligatures&lt;/a>, consider enabling them:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Custom CSS (inline text):

* {
 -webkit-font-feature-settings: &amp;#34;liga&amp;#34; on, &amp;#34;calt&amp;#34; on;
 -webkit-font-smoothing: antialiased;
 text-rendering: optimizeLegibility;
}
&lt;/code>&lt;/pre>&lt;p>Not all fonts are available on Google Fonts though.
For example, &lt;a href="https://pcaro.es/p/hermit/">Hermit&lt;/a> is one of my current monospace favorites: it&amp;rsquo;s not there&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="github">Github&lt;/h2>
&lt;p>Many fonts are available on GitHub (or in other forges), checked into a git repository.&lt;/p>
&lt;p>If you happen to find a &lt;code>.woff2&lt;/code> web font file laying therein, you could also use it in hterm:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Custom CSS (inline text):

@font-face {
 font-family: &amp;#34;Anonymous Pro&amp;#34;;
 src: url(https://cdn.rawgit.com/wernight/powerline-web-fonts/8040cf32c146c7cd4f776c1484d23dc40685c1bc/fonts/AnonymousPro.woff2);
}
&lt;/code>&lt;/pre>&lt;p>And then set the extension to use it:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Text font family: &amp;#34;Anonymous Pro&amp;#34;, monospace
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Note&lt;/strong>: I couldn&amp;rsquo;t get this method to work with &lt;code>.ttf&lt;/code> or &lt;code>.otf&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://github.com/pcaro90/hermit/issues/2">https://github.com/pcaro90/hermit/issues/2&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pihole: Add custom DNS mappings</title><link>https://perrotta.dev/2022/01/pihole-add-custom-dns-mappings/</link><pubDate>Tue, 25 Jan 2022 21:50:53 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/pihole-add-custom-dns-mappings/</guid><description>&lt;p>This post covers how to add DNS entries / mappings to a local network managed
with &lt;a href="https://pi-hole.net/">pihole&lt;/a>.&lt;/p>
&lt;p>There are several ways to do so:&lt;/p>
&lt;h2 id="1-the-cli-way-etcpihole">1. The CLI way: &lt;code>/etc/pihole/&lt;/code>&lt;/h2>
&lt;p>Edit &lt;code>/etc/pihole/custom.list&lt;/code>, set one mapping per line, just as you would for
&lt;code>/etc/hosts&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/pihole/custom.list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1 localhost.corp.google.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.75 myhostname.home.arpa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works because &lt;code>/etc/dnsmasq.d/01-pihole.conf&lt;/code> contains
&lt;code>addn-hosts=/etc/pihole/custom.list&lt;/code> by default.&lt;/p>
&lt;p>From &lt;a href="https://wiki.gentoo.org/wiki/Dnsmasq#Additional_hosts_file">Gentoo Wiki&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>It is possible to refer to an (additional) hosts file to use as source for
DNS queries. To do so, add the -H /path/to/hostsfile
(&amp;ndash;addn-hosts=/path/to/hostsfile) command line option. It is also possible to
pass a directory; in that case, all files inside that directory will be
treated as additional hosts files.&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-the-cli-way-etcdnsmasqd">2. The CLI way: &lt;code>/etc/dnsmasq.d/&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/dnsmasq.d/03-pihole-custom-dns.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>/localhost.corp.google.com/127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">address&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>/myhostname.home.arpa/192.168.1.75
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From &lt;a href="https://wiki.archlinux.org/title/Dnsmasq#Override_addresses">ArchWiki&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>In some cases, such as when operating a captive portal, it can be useful
to resolve specific domains names to a hard-coded set of addresses.
This is done with the address config.&lt;/p>
&lt;/blockquote>
&lt;h2 id="3-the-web-way">3. The Web way&lt;/h2>
&lt;p>Navigate to &lt;a href="http://pi.hole/admin/dns_records.php">http://pi.hole/admin/dns_records.php&lt;/a> and set your DNS records
there. From pihole docs:&lt;/p>
&lt;blockquote>
&lt;p>The order of locally defined DNS records is:&lt;/p>
&lt;ol>
&lt;li>The device&amp;rsquo;s host name (&lt;code>/etc/hostname&lt;/code>) and &lt;code>pi.hole&lt;/code>&lt;/li>
&lt;li>Configured in a config file in &lt;code>/etc/dnsmasq.d/&lt;/code>&lt;/li>
&lt;li>Read from &lt;code>/etc/hosts&lt;/code>&lt;/li>
&lt;li>Read from the &amp;ldquo;Local (custom) DNS&amp;rdquo; list (stored in &lt;code>/etc/pihole/custom.list&lt;/code>) (the aforementioned ways)&lt;/li>
&lt;/ol>
&lt;p>Only the first record will trigger an address-to-name association.&lt;/p>
&lt;/blockquote>
&lt;h2 id="wrapping-up">Wrapping up&lt;/h2>
&lt;p>Then restart pihole to apply changes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pihole restartdns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Alpine Linux: New APKBUILD Workflow</title><link>https://perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</link><pubDate>Sun, 23 Jan 2022 19:15:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>APKBUILDs&lt;/code> for the
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository in &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>First of all, this post is not a substitute to the &lt;a href="https://wiki.alpinelinux.org/wiki/Main_Page">AlpineWiki&lt;/a>
and it will likely get outdated at some point. In particular, refer to the
following articles for up-to-date documentation that will outlive this blog:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers">https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Aports_tree">https://wiki.alpinelinux.org/wiki/Aports_tree&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This article is not a tutorial, as such it assumes you already know what an
&lt;code>APKBUILD&lt;/code> is and how to use &lt;code>abuild&lt;/code>. In particular, you should have the
&lt;code>alpine-sdk&lt;/code>, &lt;code>atools&lt;/code> and &lt;code>spdx-licenses-list&lt;/code> packages installed in your
system.&lt;/p>
&lt;h2 id="structure">Structure&lt;/h2>
&lt;p>I manage my packages with &lt;code>git&lt;/code>. Create a GitLab account on
&lt;a href="https://gitlab.alpinelinux.org/">https://gitlab.alpinelinux.org/&lt;/a>, fork the &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">&lt;code>aports&lt;/code>&lt;/a> tree, and &lt;code>git clone&lt;/code> your fork.&lt;/p>
&lt;p>The structure follows Alpine Linux repositories:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://gitlab.alpinelinux.org/alpine/aports.git &amp;amp;&amp;amp; tree -L 1 aports
aports
├── CODINGSTYLE.md
├── COMMITSTYLE.md
├── README.md
├── community
├── main
├── non-free
├── scripts
├── testing
└── unmaintained
&lt;/code>&lt;/pre>&lt;h2 id="bootstrapping">Bootstrapping&lt;/h2>
&lt;p>I am going to illustrate with a package I added recently, &lt;a href="https://packages.debian.org/source/sensible-utils">&lt;code>sensible-utils&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before you even begin, check if the package already exists, do a quick search in the &lt;a href="https://pkgs.alpinelinux.org/packages?name=sensible%2Dutils">Alpine Repositories&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start by scaffolding a new &lt;code>APKBUILD&lt;/code> from the base template:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#e5c07b">cd&lt;/span> aports/testing &lt;span style="color:#7f848e"># Always add new packages in testing/ first.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ newapkbuild sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#e5c07b">cd&lt;/span> sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#e06c75">$EDITOR&lt;/span> APKBUILD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: If you have a language-specific package (e.g. perl, python, rust),
use the language-specific template instead of the base one. Run &lt;code>newapkbuild -h&lt;/code> to list available templates. There are also some &lt;code>apkbuild-*&lt;/code> helpers such
as &lt;code>apkbuild-pypi&lt;/code> and &lt;code>apkbuild-cpan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Fill in &lt;code>APKBUILD&lt;/code> metadata like &lt;code>pkgname=&lt;/code>, &lt;code>url=&lt;/code>, etc. Refer to the AlpineWiki for up-to-date best practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By doing so, I produced the following &lt;code>APKBUILD&lt;/code>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgname&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgver&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.0.14
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgrel&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgdesc&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;Utilities for sensible alternative selection&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">url&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;https://packages.debian.org/source/sensible-utils&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;all&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">license&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;GPL-2.0-or-later&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">makedepends&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;po4a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">subpackages&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-doc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;http://ftp.debian.org/debian/pool/main/s/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">pkgname&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">_&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">.tar.xz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">builddir&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$srcdir&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	./configure --prefix&lt;span style="color:#56b6c2">=&lt;/span>/usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make -k check
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make &lt;span style="color:#e06c75">DESTDIR&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgdir&lt;/span>&lt;span style="color:#98c379">/&amp;#34;&lt;/span> install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#7f848e"># only works with update-alternatives, specific to debian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rm &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgdir&lt;/span>&lt;span style="color:#98c379">/usr/bin/select-editor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">sha512sums&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">15ba996f811ab3a9c1f5726f35766d74aafdf925c5c2392b33c6643d6c439796a742f9d0f4625c79de640e6b5e4a6a032b768eb1bc4ac31b448f9767b0ceed44 sensible-utils_0.0.14.tar.xz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>$srcdir&lt;/code> refers to the &lt;code>src/&lt;/code> directory within &lt;code>sensible-utils&lt;/code>. &lt;code>$pkgdir&lt;/code>
refers to the &lt;code>pkg/&lt;/code> directory within &lt;code>sensible-utils&lt;/code>.&lt;/p>
&lt;p>If you&amp;rsquo;re used to Arch Linux &lt;code>PKGBUILDs&lt;/code> you&amp;rsquo;ll notice a striking similarity to
&lt;code>APKBUILDs&lt;/code>. I highlighted a few notable differences in a previous post, &lt;a href="https://perrotta.dev/2022/01/my-first-apkbuild/#build-comparison">&lt;code>My First APKBUILD&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="adjustments">Adjustments&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Generate the checksums with &lt;code>abuild checksum&lt;/code>. It will automatically update the &lt;code>APKBUILD&lt;/code> inplace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract package files with &lt;code>abuild unpack&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ls src/&lt;/code> and check the directory structure. Update &lt;code>$builddir&lt;/code> in your
&lt;code>APKBUILD&lt;/code> to match it. Usually it will be &lt;code>$srcdir/$pkgname-$pkgver&lt;/code>, but
sometimes tiny adjustments are necessary. In this case, it was
&lt;code>$srcdir/$pkgname.git&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then run &lt;code>abuild -r&lt;/code>. If everything goes well, your package (and subpackages,
if any) will be successfully built&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in an isolated environment and placed
in &lt;code>~/packages&lt;/code> (&lt;code>sensible-utils-0.0.14-r0.apk&lt;/code> and
&lt;code>sensible-utils-doc-0.0.14-r0.apk&lt;/code>), however that doesn&amp;rsquo;t mean it is a decent
package yet.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>apkbuild-lint APKBUILD&lt;/code> and &lt;code>abuild validate&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> to lint your package
and catch common errors. Fix the errors, if any.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="request-feedback-if-needed">Request feedback if needed&lt;/h2>
&lt;p>If the package is only relevant to you, stop here. &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code>, and then you&amp;rsquo;re done. Install the package with &lt;code>doas apk add &amp;lt;pkg&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Otherwise, if the package might be potentially useful to other Alpine users, you could consider uploading it to the &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository.&lt;/p>
&lt;p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&amp;rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&amp;rsquo;t need to be positive, it&amp;rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.&lt;/p>
&lt;p>If the answer is negative, or if you&amp;rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:IRC">&lt;code>#alpine-devel&lt;/code> on OFTC IRC&lt;/a> Drew DeVault wrote a good &lt;a href="https://drewdevault.com/2021/11/24/A-philosophy-for-instant-messaging.html">post&lt;/a> about IRC etiquette.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:Mailing_lists">&lt;code>alpine-devel&lt;/code> mailing list&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.&lt;/p>
&lt;h2 id="publish-your-package">Publish your package&lt;/h2>
&lt;p>If all is well, it&amp;rsquo;s time to publish your &lt;code>APKBUILD&lt;/code>. Follow the up-to-date
steps at
&lt;a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review&lt;/a>. There are basically two options:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Send a gitlab merge request (MR). This follows the standard git forge workflow
(GitHub / BitBucket / GitLab) wherein you fork the main repository, create
a branch in your own clone, push it and then initiate a pull request&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alternatively, send an email with your patch to the &lt;code>aports&lt;/code> mailing list
with &lt;a href="https://git-send-email.io/">&lt;code>git send-email&lt;/code>&lt;/a>:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config sendemail.to &lt;span style="color:#98c379">&amp;#34;alpine-aports@lists.alpinelinux.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git send-email -1 &lt;span style="color:#7f848e"># Implicitly uses --to=alpine-linux@lists.alpinelinux.org as set above&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Tip&lt;/strong>: The second approach has a steep learning curve, however once you
figure it out it&amp;rsquo;s actually faster, simpler and more streamlined. Whenever
a new email is sent to the aports mailing list, a MR is automatically created
on GitLab.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: If you adopt the email workflow and need to send a follow-up to your
initial patch, do not use &lt;code>--in-reply-to&lt;/code>. Instead, create a new email thread.
This is needed because as of this post new GitLab MRs are only created when new
email threads are created. Replies to existing email threads do not update the
MR patch.&lt;/p>
&lt;p>And that&amp;rsquo;s all! Other useful tips:&lt;/p>
&lt;ul>
&lt;li>Use &lt;a href="https://repology.org/">repology&lt;/a> to look for preexisting packages in other Linux (or even BSD) distributions, it&amp;rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Arch Linux &lt;code>PKGBUILDs&lt;/code> are very similar to &lt;code>APKBUILDs&lt;/code>. Gentoo &lt;code>EBUILDs&lt;/code> and FreeBSD &lt;code>Makefiles&lt;/code> are also reasonable approximations.&lt;/li>
&lt;li>Use &lt;code>abump&lt;/code> to bump pkgver in &lt;code>APKBUILD&lt;/code> files if the package gets an update to a newer upstream release.&lt;/li>
&lt;li>Use &lt;code>apkgrel&lt;/code> to bump or reset the &lt;code>pkgrel&lt;/code> value of your &lt;code>APKBUILD&lt;/code>.&lt;/li>
&lt;li>Use &lt;a href="https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/#bonus-track-upstream">&lt;code>urlwatch&lt;/code>&lt;/a> to track upstream updates.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you use &lt;a href="https://duckduckgo.com/">https://duckduckgo.com/&lt;/a>, query for &lt;code>!alpine sensible-utils&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Package debugging is out of scope of this post.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;strong>Update(2025-05-10)&lt;/strong>: Previously: &lt;code>abuild sanitycheck&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>In GitLab it&amp;rsquo;s called Merge Request (MR). The list of all aports MRs is &lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests">here&lt;/a>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Introspect the local network for Pihole</title><link>https://perrotta.dev/2022/01/introspect-the-local-network-for-pihole/</link><pubDate>Sun, 23 Jan 2022 13:34:58 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/introspect-the-local-network-for-pihole/</guid><description>&lt;p>Recently I needed to figure out what the IP address of my &lt;a href="https://pi-hole.net/">pihole&lt;/a>
instance was in my &lt;a href="https://www.raspberrypi.org/">Raspberry Pi&lt;/a> in my local network.&lt;/p>
&lt;h2 id="finding-the-raspberry-pi">Finding the Raspberry Pi&lt;/h2>
&lt;h3 id="nmap">nmap&lt;/h3>
&lt;p>&lt;a href="https://nmap.org/">&lt;code>nmap&lt;/code>&lt;/a> to the rescue!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># nmap -sS 192.168.1.1-255 | tee network.txt | less&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The relevant snippets to the pihole look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">Nmap scan report for pi.hole (192.168.1.XX)
Host is up (0.0052s latency).
Not shown: 997 closed tcp ports (reset)
PORT STATE SERVICE
22/tcp open ssh
53/tcp open domain
80/tcp open http
MAC Address: AA:AA:AA:AA:AA:AA (Raspberry Pi Foundation)

Nmap scan report for pi.hole (192.168.1.YY)
Host is up (0.0059s latency).
Not shown: 997 closed tcp ports (reset)
PORT STATE SERVICE
22/tcp open ssh
53/tcp open domain
80/tcp open http
MAC Address: BB:BB:BB:BB:BB:BB (Raspberry Pi Foundation)
&lt;/code>&lt;/pre>&lt;p>There are two IP addresses, one for the ethernet interface (&lt;code>eth0&lt;/code>) and the
other for the wifi (&lt;code>wlan0&lt;/code>). Later on I would disable the wifi interface.&lt;/p>
&lt;p>The 3 open ports are for services you would expect in a pihole:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ssh&lt;/code> (port 22) for remote access / debugging / troubleshooting&lt;/li>
&lt;li>DNS server (port 53) for the &lt;code>dnsmasq&lt;/code> server that pihole uses underneath for adblocking&lt;/li>
&lt;li>HTTP server (port 80) for the &lt;a href="http://pi.hole/admin">http://pi.hole/admin&lt;/a> web management UI&lt;/li>
&lt;/ul>
&lt;h3 id="ip">ip&lt;/h3>
&lt;p>Another way is to use the &lt;code>ip&lt;/code> command. In particular, &lt;code>ip neigh&lt;/code> lists the
neighbours, one of which should be the pihole.&lt;/p>
&lt;h2 id="testing-the-pihole">Testing the pihole&lt;/h2>
&lt;p>One effective way to test the pihole is to see if &lt;code>analytics.google.com&lt;/code> is
blocked. There are several ways to do so:&lt;/p>
&lt;ol>
&lt;li>&lt;code>ping&lt;/code> should return a local address like &lt;code>127.0.0.1&lt;/code> or &lt;code>0.0.0.0&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ping analytics.google.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PING analytics.google.com &lt;span style="color:#56b6c2">(&lt;/span>127.0.0.1&lt;span style="color:#56b6c2">)&lt;/span> 56&lt;span style="color:#56b6c2">(&lt;/span>84&lt;span style="color:#56b6c2">)&lt;/span> bytes of data.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">64&lt;/span> bytes from localhost &lt;span style="color:#56b6c2">(&lt;/span>127.0.0.1&lt;span style="color:#56b6c2">)&lt;/span>: &lt;span style="color:#e06c75">icmp_seq&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#e06c75">ttl&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">64&lt;/span> &lt;span style="color:#e06c75">time&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.023 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">64&lt;/span> bytes from localhost &lt;span style="color:#56b6c2">(&lt;/span>127.0.0.1&lt;span style="color:#56b6c2">)&lt;/span>: &lt;span style="color:#e06c75">icmp_seq&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#e06c75">ttl&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">64&lt;/span> &lt;span style="color:#e06c75">time&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.031 ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- analytics.google.com ping statistics ---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> packets transmitted, &lt;span style="color:#d19a66">2&lt;/span> received, 0% packet loss, &lt;span style="color:#e5c07b">time&lt;/span> 1002ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rtt min/avg/max/mdev &lt;span style="color:#56b6c2">=&lt;/span> 0.023/0.027/0.031/0.004 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Ditto for a DNS lookup utility such as &lt;code>dig&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ dig +short analytics.google.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0.0.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Other ways: &lt;code>drill&lt;/code>, &lt;code>host&lt;/code>, &lt;code>nslookup&lt;/code>, &lt;code>systemd-resolve&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://d3ward.github.io/toolz/adblock.html">https://d3ward.github.io/toolz/adblock.html&lt;/a> seems to be a reasonable website to
test whether your adblock blocklists are properly working. Alternatively, just
visit any modern and large news corporation website, it will probably be full
of ads.&lt;/p>
&lt;h2 id="troubleshooting-the-pihole">Troubleshooting the pihole&lt;/h2>
&lt;p>If DNS resolution fails from the pihole itself, run &lt;code>pihole restartdns&lt;/code>. Then
&lt;code>ping google.com&lt;/code>. The ping should work, if it doesn&amp;rsquo;t then there&amp;rsquo;s a bigger
problem, out of scope of this post. If the ping works now but stops working
later on once you eventually reboot the Pi, consider triggering this command at
startup via &lt;code>cron&lt;/code> or a systemd timer.&lt;/p>
&lt;p>If DNS resolution works from the pihole but fails from a neighbouring device,
double-check if the device is properly configured: its DNS should be set to the
IP address of the pihole. Check these:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/resolv.conf&lt;/code>&lt;/li>
&lt;li>If the system uses &lt;code>systemd-resolved&lt;/code>, run &lt;code>resolvectl&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Another possibility is that the pihole might be configured to only answer
queries from &lt;code>eth0&lt;/code>. Use the &lt;a href="http://pi.hole/admin">http://pi.hole/admin&lt;/a> interface to ensure the
pihole is configured to answer DNS queries from the local network.&lt;/p>
&lt;h2 id="setting-a-static-ip-in-the-pihole">Setting a static IP in the pihole&lt;/h2>
&lt;p>There are several ways to do so, in order of recommendation:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Static DHCP lease from your router. If running a modem, this will likely not
work. Prefer running a DHCP server from the pihole.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dhcpcd&lt;/code>: This is typically done as part of the standard pihole setup.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/dhcpcd.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># fallback to static profile on eth0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#interface eth0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#fallback static_eth0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>interface eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> static &lt;span style="color:#e06c75">ip_address&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>192.168.1.XX/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> static &lt;span style="color:#e06c75">routers&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>192.168.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> static &lt;span style="color:#e06c75">domain_name_servers&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Restart &lt;code>dhcpcd&lt;/code> to apply: &lt;code>systemctl restart dhcpcd&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/network/interfaces&lt;/code> if running Raspberry Pi OS (debian):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudoedit /etc/network/interfaces.d/pihole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auto lo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iface lo inet loopback
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auto eth0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iface eth0 inet static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> address 192.168.1.XX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> netmask 255.255.255.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gateway 192.168.1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Reconfigure debian networking to apply: &lt;code>systemctl restart networking&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Static DHCP lease from the pihole itself if it&amp;rsquo;s running a DHCP server. This
solution is a bit redundant and should only be applied as last resort.&lt;/li>
&lt;/ul></description></item><item><title>Arch Linux: New PKGBUILD Workflow</title><link>https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</link><pubDate>Tue, 18 Jan 2022 21:59:07 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>PKGBUILDs&lt;/code> for the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a> (Arch User Repository) in &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a>.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>First of all, this post is not a substitute to the excellent &lt;a href="https://wiki.archlinux.org/">ArchWiki&lt;/a> and it will likely get outdated at some point. In particular, refer to the following articles for up-to-date documentation that will outlive this blog:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Arch_User_Repository">https://wiki.archlinux.org/title/Arch_User_Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Creating_packages">https://wiki.archlinux.org/title/Creating_packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This article is not a tutorial, as such it assumes you already know what a &lt;code>PKGBUILD&lt;/code> is and how to use &lt;code>makepkg&lt;/code>. In particular, you should have the &lt;code>base-devel&lt;/code> and &lt;code>devtools&lt;/code> packages installed in your system.&lt;/p>
&lt;h2 id="structure">Structure&lt;/h2>
&lt;p>I manage my packages with &lt;code>git&lt;/code> plus Eli Schwartz&amp;rsquo;s excellent
&lt;a href="https://github.com/eli-schwartz/aurpublish">aurpublish&lt;/a>. The tree structure is simple, with one &lt;code>PKGBUILD&lt;/code> per directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/thiagowfx/PKGBUILDs &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> tree PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── fpp-git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── git-crecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── i3a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ttf-camingocode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── urlwatch.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>aurpublish&lt;/code> is used &lt;em>solely&lt;/em> to automate certain interactions with the AUR, more about it later.&lt;/p>
&lt;h2 id="bootstrapping">Bootstrapping&lt;/h2>
&lt;p>I am going to illustrate with a package I added recently, &lt;a href="https://github.com/dimo414/bkt">&lt;code>bkt&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before you even begin, check if the package already exists, do a quick search in the &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=bkt">AUR&lt;/a> and also in the &lt;a href="https://archlinux.org/packages/?sort=&amp;amp;q=bkt&amp;amp;maintainer=&amp;amp;flagged=">official repos&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start by copying over the standard &lt;code>PKGBUILD&lt;/code> template:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#e5c07b">cd&lt;/span> PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir bkt &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">cd&lt;/span> bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cp /usr/share/pacman/PKGBUILD.proto PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#e06c75">$EDITOR&lt;/span> PKGBUILD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Fill in &lt;code>PKGBUILD&lt;/code> metadata like &lt;code>pkgname=&lt;/code>, &lt;code>url=&lt;/code>, etc. Refer to the ArchWiki for up-to-date best practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The most important step is to refer to &lt;a href="https://wiki.archlinux.org/title/Category:Arch_package_guidelines">https://wiki.archlinux.org/title/Category:Arch_package_guidelines&lt;/a> to figure out the package type.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>bkt&lt;/code> is a Rust package. This is my first time packaging for Rust, not a problem though, as I can just refer to &lt;a href="https://wiki.archlinux.org/title/Rust_package_guidelines">https://wiki.archlinux.org/title/Rust_package_guidelines&lt;/a>.&lt;/p>
&lt;p>The rust package guidelines page contains the blueprint for &lt;code>prepare()&lt;/code>, &lt;code>check()&lt;/code>, &lt;code>build()&lt;/code> and &lt;code>package()&lt;/code>. Packaging is mostly a matter of gluing everything together. Read the project &lt;code>README.md&lt;/code> and the wiki, and then combine the needed steps in the &lt;code>PKGBUILD&lt;/code>.&lt;/p>
&lt;p>By doing so, I produced the following &lt;code>PKGBUILD&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgname&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgver&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>0.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgrel&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">pkgdesc&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;A subprocess caching utility&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">arch&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>&lt;span style="color:#98c379">&amp;#39;x86_64&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">url&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;https://www.bkt.rs/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">license&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>&lt;span style="color:#98c379">&amp;#39;MIT&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">makedepends&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>&lt;span style="color:#98c379">&amp;#39;cargo&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">source&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">.tar.gz::https://github.com/dimo414/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">/archive/refs/tags/&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">.tar.gz&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">sha256sums&lt;/span>&lt;span style="color:#56b6c2">=()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepare&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">cd&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$srcdir&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo fetch --locked --target &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$CARCH&lt;/span>&lt;span style="color:#98c379">-unknown-linux-gnu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">cd&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$srcdir&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">RUSTUP_TOOLCHAIN&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">CARGO_TARGET_DIR&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo build --frozen --release --all-features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">cd&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$srcdir&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">export&lt;/span> &lt;span style="color:#e06c75">RUSTUP_TOOLCHAIN&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo &lt;span style="color:#e5c07b">test&lt;/span> --frozen --all-features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">cd&lt;/span> &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$srcdir&lt;/span>&lt;span style="color:#98c379">/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">-&lt;/span>&lt;span style="color:#e06c75">$pkgver&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm0755 -t &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgdir&lt;/span>&lt;span style="color:#98c379">/usr/bin/&amp;#34;&lt;/span> &lt;span style="color:#98c379">&amp;#34;target/release/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm644 LICENSE -t &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$pkgdir&lt;/span>&lt;span style="color:#98c379">/usr/share/licenses/&lt;/span>&lt;span style="color:#e06c75">$pkgname&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>$srcdir&lt;/code> refers to the &lt;code>src/&lt;/code> directory within &lt;code>bkt&lt;/code>. &lt;code>$pkgdir&lt;/code> refers to the &lt;code>pkg/&lt;/code> directory within &lt;code>bkt&lt;/code>.&lt;/p>
&lt;h2 id="adjustments">Adjustments&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Generate the checksums with &lt;code>updpkgsums&lt;/code>. It will automatically update the &lt;code>PKGBUILD&lt;/code> inplace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract package files with &lt;code>makepkg -o&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ls src/&lt;/code> and check the directory structure. Update &lt;code>cd&lt;/code> in your &lt;code>PKGBUILD&lt;/code> to match it. Usually it will be &lt;code>cd $srcdir/$pkgname-$pkgver&lt;/code>, but sometimes tiny adjustments are necessary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then run &lt;code>makepkg -s&lt;/code>. If everything goes well, your package will be successfully built&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (&lt;code>bkt-0.5.0-1-x86_64.pkg.tar.zst&lt;/code>), however that doesn&amp;rsquo;t mean it is a decent package yet.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>namcap PKGBUILD&lt;/code> and &lt;code>namcap *.pkg.tar.zst&lt;/code> to lint your package and catch common errors. Fix the errors, if any.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To ensure all dependencies have been correctly declared and none of them are missing, run &lt;code>makepkg&lt;/code> within a clean &lt;a href="https://wiki.archlinux.org/title/Chroo">&lt;em>chroot&lt;/em>&lt;/a>. I like to use Graysky&amp;rsquo;s excellent &lt;a href="https://github.com/graysky2/clean-chroot-manager">&lt;code>ccm&lt;/code>&lt;/a> (Clean Chroot Manager) to do so. Run &lt;code>ccm s&lt;/code> (=&amp;ldquo;run makepkg in the clean chroot&amp;rdquo;). If it produces any errors, it likely means you missed some dependencies. Adjust &lt;code>depends=&lt;/code>, &lt;code>checkdepends=&lt;/code> and &lt;code>makedepends=&lt;/code> accordingly.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="request-feedback-if-needed">Request feedback if needed&lt;/h2>
&lt;p>If the package is only relevant to you, stop here. &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code>, and then you&amp;rsquo;re done. Install the package with &lt;code>makepkg -i&lt;/code>.&lt;/p>
&lt;p>Otherwise, if the package might be potentially useful to other Arch users, you could consider uploading it to the AUR.&lt;/p>
&lt;p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&amp;rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&amp;rsquo;t need to be positive, it&amp;rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.&lt;/p>
&lt;p>If the answer is negative, or if you&amp;rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://bbs.archlinux.org/viewforum.php?id=38.">AUR Issues, Discussion &amp;amp; PKGBUILD Requests&lt;/a> BBS / Forums: Open a new thread, post your &lt;code>PKGBUILD&lt;/code> (use &lt;code>[code][/code]&lt;/code> tags if you paste it directly!) or a link to it&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. Request folks to critique your work, mention that you&amp;rsquo;re looking for feedback. This kind of thread is generally well received in the official forums if you demonstrate you did diligent research before asking for help.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://lists.archlinux.org/pipermail/aur-general/">AUR General Mailing List&lt;/a>: Send an email to the mailing list asking for help. In general, follow proper mailing list etiquette, good resources for that are &lt;a href="https://useplaintext.email/">https://useplaintext.email/&lt;/a> and &lt;a href="https://man.sr.ht/lists.sr.ht/etiquette.md">https://man.sr.ht/lists.sr.ht/etiquette.md&lt;/a>. TL;DR: Use plain-text instead of HTML in your email.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.&lt;/p>
&lt;h2 id="publish-your-package">Publish your package&lt;/h2>
&lt;p>If all is well, it&amp;rsquo;s time to publish your &lt;code>PKGBUILD&lt;/code> to the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a>. Follow the up-to-date steps at &lt;a href="https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages">https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages&lt;/a>.&lt;/p>
&lt;p>TL;DR: If you don&amp;rsquo;t use &lt;em>aurpublish&lt;/em>, do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ makepkg --printsrcinfo &amp;gt; .SRCINFO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you&amp;rsquo;ll need both the &lt;code>PKGBUILD&lt;/code> and the &lt;code>.SRCINFO&lt;/code> file, it&amp;rsquo;s basically a matter of committing your changes and pushing them to the right repository.&lt;/p>
&lt;p>If you do use &lt;em>aurpublish&lt;/em> this process is much easier, it&amp;rsquo;s mostly a matter of doing &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code> and &lt;code>aurpublish bkt&lt;/code>. &lt;em>Aurpublish&lt;/em> automatically generates the &lt;code>.SRCINFO&lt;/code> and a commit message by the means of git hooks.&lt;/p>
&lt;p>And that&amp;rsquo;s all! Other useful tips:&lt;/p>
&lt;ul>
&lt;li>Use &lt;a href="https://repology.org/">repology&lt;/a> to look for preexisting packages in other Linux (or even BSD) distributions, it&amp;rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Alpine Linux &lt;code>APKBUILDs&lt;/code> are very similar to &lt;code>PKGBUILDs&lt;/code>. Gentoo &lt;code>EBUILDs&lt;/code> and FreeBSD &lt;code>Makefiles&lt;/code> are also reasonable approximations.&lt;/li>
&lt;li>Use &lt;code>makepkg -src&lt;/code> to clean up after building a package.&lt;/li>
&lt;/ul>
&lt;h2 id="bonus-track-upstream">Bonus: Track upstream&lt;/h2>
&lt;p>Use a software like &lt;a href="https://thp.io/2008/urlwatch/">&lt;code>urlwatch&lt;/code>&lt;/a> or &lt;a href="https://github.com/lilydjwg/nvchecker">&lt;code>nvchecker&lt;/code>&lt;/a> to track
future upstream changes so that you can update your packages in a timely
fashion&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. There&amp;rsquo;s also a web service called &lt;a href="https://release-monitoring.org/">Release
Monitoring&lt;/a>, part of Fedora Infra. And there&amp;rsquo;s also
&lt;a href="https://changedetection.io/">https://changedetection.io/&lt;/a>, but it&amp;rsquo;s overkill for this task. I use &lt;code>urlwatch&lt;/code>
the following way:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat PKGBUILDs/urlwatch.yml
# urls for urlwatch(1)
---
name: &amp;#34;bkt&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/dimo414/bkt&amp;#34;
---
name: &amp;#34;fpp&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/facebook/PathPicker&amp;#34;
---
name: &amp;#34;git-crecord&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/andrewshadura/git-crecord&amp;#34;
---
name: &amp;#34;i3a&amp;#34;
command: &amp;#34;git ls-remote --tags https://git.goral.net.pl/mgoral/i3a&amp;#34;
# ---
# name: &amp;#34;ttf-camingocode&amp;#34;
# N/A

# Run this command periodically via cron or systemd timer.
# Set up notifications e.g. via sendmail.
$ urlwatch --urls urlwatch.yml
&lt;/code>&lt;/pre>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you use &lt;a href="https://duckduckgo.com/">https://duckduckgo.com/&lt;/a>, query for &lt;code>!aur bkt&lt;/code> and &lt;code>!archpkg bkt&lt;/code>. Handy!&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Package debugging is out of scope of this post.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For example, use &lt;a href="https://gist.github.com">https://gist.github.com&lt;/a> or &lt;a href="http://paste.opensuse.org/">http://paste.opensuse.org/&lt;/a> or
&lt;a href="http://ix.io/">http://ix.io/&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>In 99% of the cases this is just a matter of bumping the &lt;code>pkgver=&lt;/code> and
updating the checksums. If &lt;code>pkgver=&lt;/code> is the same but there&amp;rsquo;s a fix to the
package itself, then bump &lt;code>pkgrel=&lt;/code> instead.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine / Arch Linux: .apk-new and .pacnew files</title><link>https://perrotta.dev/2022/01/alpine-/-arch-linux-.apk-new-and-.pacnew-files/</link><pubDate>Tue, 18 Jan 2022 14:25:20 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/alpine-/-arch-linux-.apk-new-and-.pacnew-files/</guid><description>&lt;p>As packages are upgraded over time, updated configs files under &lt;code>/etc&lt;/code> may
arise. Different package managers treat this issue differently.&lt;/p>
&lt;h2 id="alpine-linux">Alpine Linux&lt;/h2>
&lt;p>&lt;code>apk&lt;/code> creates &lt;code>.apk-new&lt;/code> files, which can be located and merged by running
&lt;code>doas update-conf&lt;/code>. Here is a recent example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% doas update-conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- //etc/securetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+++ //etc/securetty.apk-new
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@@ -12,3 +12,6 @@
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tty11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hvc0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ttyS0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ttyS1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ttyAMA0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ttyAMA1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New //etc/securetty available:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Quit, Next, Show diff, Edit new, Zap new, Use new &lt;span style="color:#56b6c2">(&lt;/span>q/n/s/e/z/u&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#56b6c2">[&lt;/span>s&lt;span style="color:#56b6c2">]&lt;/span> u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="arch-linux">Arch Linux&lt;/h2>
&lt;p>&lt;code>pacman&lt;/code> creates &lt;code>.pacnew&lt;/code> files, which can be located and merged by running
&lt;code>sudo pacdiff&lt;/code>. Here is a recent example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% sudo &lt;span style="color:#e06c75">pacdiff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">==&lt;/span>&amp;gt; pacnew file found &lt;span style="color:#c678dd">for&lt;/span> /etc/sudoers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:: &lt;span style="color:#56b6c2">(&lt;/span>V&lt;span style="color:#56b6c2">)&lt;/span>iew, &lt;span style="color:#56b6c2">(&lt;/span>S&lt;span style="color:#56b6c2">)&lt;/span>kip, &lt;span style="color:#56b6c2">(&lt;/span>R&lt;span style="color:#56b6c2">)&lt;/span>emove pacnew, &lt;span style="color:#56b6c2">(&lt;/span>O&lt;span style="color:#56b6c2">)&lt;/span>verwrite with pacnew, &lt;span style="color:#56b6c2">(&lt;/span>Q&lt;span style="color:#56b6c2">)&lt;/span>uit: &lt;span style="color:#56b6c2">[&lt;/span>v/s/r/o/q&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Tip&lt;/strong>: The &lt;a href="https://aur.archlinux.org/packages/pacdiff-pacman-hook-git/">&lt;code>pacdiff-pacman-hook-git&lt;/code>&lt;/a> package helpfully adds
a pacman hook that automatically checks whether there are any due &lt;code>.pacnew&lt;/code>
files upon upgrading the system (&lt;code>pacman -Syu&lt;/code>), being a simple and effective
way to automate this maintenance task. It looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>: Running post-transaction hooks...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>1/5&lt;span style="color:#56b6c2">)&lt;/span> Reloading system manager configuration...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>2/5&lt;span style="color:#56b6c2">)&lt;/span> Creating temporary files...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>3/5&lt;span style="color:#56b6c2">)&lt;/span> Arming ConditionNeedsUpdate...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>4/5&lt;span style="color:#56b6c2">)&lt;/span> Registering Haskell modules...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>5/5&lt;span style="color:#56b6c2">)&lt;/span> Reviewing .pacnew files...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/etc/sudoers.pacnew ⟶ /etc/sudoers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>────────────────────────────────────────────────────────────────────────────────
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>76: │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">##&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## User privilege specification&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">##&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-root &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL:ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+root &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## Uncomment to allow members of group wheel to execute any command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-# %wheel &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL:ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+# %wheel &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## Same thing without a password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-# %wheel &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL:ALL&lt;span style="color:#56b6c2">)&lt;/span> NOPASSWD: ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+# %wheel &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL&lt;span style="color:#56b6c2">)&lt;/span> NOPASSWD: ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## Uncomment to allow members of group sudo to execute any command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-# %sudo &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL:ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+# %sudo &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## Uncomment to allow any user to run sudo if they know the password&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## of the user they are running the command as (root by default).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Defaults targetpw # Ask for the password of the target user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-# ALL &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL:ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL &lt;span style="color:#7f848e"># WARNING: only use this together with &amp;#39;Defaults targetpw&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+# ALL &lt;span style="color:#e06c75">ALL&lt;/span>&lt;span style="color:#56b6c2">=(&lt;/span>ALL&lt;span style="color:#56b6c2">)&lt;/span> ALL &lt;span style="color:#7f848e"># WARNING: only use this together with &amp;#39;Defaults targetpw&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">## Read drop-in files from /etc/sudoers.d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @includedir /etc/sudoers.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :: Searching databases &lt;span style="color:#c678dd">for&lt;/span> updates...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :: Searching AUR &lt;span style="color:#c678dd">for&lt;/span> updates...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> there is nothing to &lt;span style="color:#c678dd">do&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Debian: Enable unattended upgrades</title><link>https://perrotta.dev/2022/01/debian-enable-unattended-upgrades/</link><pubDate>Sun, 16 Jan 2022 02:07:00 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/debian-enable-unattended-upgrades/</guid><description>&lt;p>Here&amp;rsquo;s how we can enable automatic (unattended) package upgrades in Debian.&lt;/p>
&lt;h2 id="howto">Howto&lt;/h2>
&lt;p>Install the &lt;code>unattended-upgrades&lt;/code> package with &lt;code>apt(8)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apt install unattended-upgrades
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The service is then enabled and started automatically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl status unattended-upgrades
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>● unattended-upgrades.service - Unattended Upgrades Shutdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Loaded: loaded &lt;span style="color:#56b6c2">(&lt;/span>/lib/systemd/system/unattended-upgrades.service; enabled; vendor preset: enabled&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Active: active &lt;span style="color:#56b6c2">(&lt;/span>running&lt;span style="color:#56b6c2">)&lt;/span> since Sun 2022-01-16 02:05:42 EST; 35s ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Docs: man:unattended-upgrade&lt;span style="color:#56b6c2">(&lt;/span>8&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Main PID: &lt;span style="color:#d19a66">22442&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>unattended-upgr&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tasks: &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">(&lt;/span>limit: 1597&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU: 516ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CGroup: /system.slice/unattended-upgrades.serviceGk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─22442 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, only security updates are enabled. We can enable all updates by uncommenting the applicable lines:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudoedit /etc/apt/apt.conf.d/50unattended-upgrades
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Unattended-Upgrade::Origins-Pattern &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Codename based matching:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // This will follow the migration of a release through different
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // archives &lt;span style="color:#56b6c2">(&lt;/span>e.g. from testing to stable and later oldstable&lt;span style="color:#56b6c2">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Software will be the latest available &lt;span style="color:#c678dd">for&lt;/span> the named release,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // but the Debian release itself will not be automatically upgraded.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#98c379">&amp;#34;origin=Debian,codename=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">distro_codename&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">-updates&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#98c379">&amp;#34;origin=Debian,codename=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">distro_codename&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">-proposed-updates&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#98c379">&amp;#34;origin=Debian,codename=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">distro_codename&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">,label=Debian&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;origin=Debian,codename=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">distro_codename&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">,label=Debian-Security&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;origin=Debian,codename=&lt;/span>&lt;span style="color:#98c379">${&lt;/span>&lt;span style="color:#e06c75">distro_codename&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">-security,label=Debian-Security&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For debugging, one should run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo unattended-upgrade -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We could go beyond and add logging by the means of &lt;code>etckeeper&lt;/code>, just like how we did for Alpine Linux&amp;rsquo;s &lt;a href="https://perrotta.dev/2022/01/alpine-linux-apk-logs-with-etckeeper/">&lt;code>apk&lt;/code>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apt install etckeeper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Reading package lists... Done
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Building dependency tree... Done
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Reading state information... Done
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The following NEW packages will be installed:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> etckeeper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">0&lt;/span> upgraded, &lt;span style="color:#d19a66">1&lt;/span> newly installed, &lt;span style="color:#d19a66">0&lt;/span> to remove and &lt;span style="color:#d19a66">0&lt;/span> not upgraded.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Need to get 54.4 kB of archives.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After this operation, &lt;span style="color:#d19a66">180&lt;/span> kB of additional disk space will be used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get:1 http://raspbian.freemirror.org/raspbian bullseye/main armhf etckeeper all 1.18.16-1 &lt;span style="color:#56b6c2">[&lt;/span>54.4 kB&lt;span style="color:#56b6c2">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fetched 54.4 kB in 1s &lt;span style="color:#56b6c2">(&lt;/span>84.3 kB/s&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Preconfiguring packages ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Selecting previously unselected package etckeeper.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">(&lt;/span>Reading database ... &lt;span style="color:#d19a66">44403&lt;/span> files and directories currently installed.&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Preparing to unpack .../etckeeper_1.18.16-1_all.deb ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Unpacking etckeeper &lt;span style="color:#56b6c2">(&lt;/span>1.18.16-1&lt;span style="color:#56b6c2">)&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Setting up etckeeper &lt;span style="color:#56b6c2">(&lt;/span>1.18.16-1&lt;span style="color:#56b6c2">)&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Created symlink /etc/systemd/system/multi-user.target.wants/etckeeper.timer → /lib/systemd/system/etckeeper.timer.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etckeeper.service is a disabled or a static unit, not starting it.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>etckeeper&lt;/code> is enabled and works out-of-the-box as well:&lt;/p>
&lt;pre tabindex="0">&lt;code>systemctl status etckeeper.timer
● etckeeper.timer - Daily autocommit of changes in /etc directory
 Loaded: loaded (/lib/systemd/system/etckeeper.timer; enabled; vendor preset: enabled)
 Active: active (waiting) since Sun 2022-01-16 02:28:44 EST; 2min 36s ago
 Trigger: Mon 2022-01-17 02:28:44 EST; 23h left
 Triggers: ● etckeeper.service
 Docs: man:etckeeper(8)
&lt;/code>&lt;/pre>&lt;p>Here&amp;rsquo;s what a typical log looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#56b6c2">(&lt;/span>&lt;span style="color:#e5c07b">cd&lt;/span> /etc/etckeeper &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> sudo git log&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit 8f9f5e31d9abb833cf645825c1cbda15336818b7 &lt;span style="color:#56b6c2">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#56b6c2">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: root &amp;lt;root@raspberry&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Sun Jan &lt;span style="color:#d19a66">16&lt;/span> 06:25:28 &lt;span style="color:#d19a66">2022&lt;/span> -0500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> daily autocommit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>commit 5a6478711a1a1198535d5062ca309afb5c99c0eb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: root &amp;lt;root@raspberry&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Sun Jan &lt;span style="color:#d19a66">16&lt;/span> 02:29:01 &lt;span style="color:#d19a66">2022&lt;/span> -0500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Initial commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://wiki.debian.org/UnattendedUpgrades">https://wiki.debian.org/UnattendedUpgrades&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>