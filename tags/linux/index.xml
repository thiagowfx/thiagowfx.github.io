<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on Not Just Serendipity</title><link>https://www.perrotta.dev/tags/linux/</link><description>Recent content in Linux on Not Just Serendipity</description><generator>Hugo -- 0.128.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta • CC BY-NC-SA 4.0 • RSS •</copyright><lastBuildDate>Sun, 30 Jun 2024 15:05:37 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Copy files from laptop to Steam Deck</title><link>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s say the files you want to copy are in <code>~/Downloads</code>.</p>
<p>Start a local HTTP server on your laptop:</p>
<pre tabindex="0"><code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
</code></pre><p>Find the IP address of your laptop within your LAN:</p>
<pre tabindex="0"><code>$ ifconfig  # macOS
$ ip addr   # linux
</code></pre><p>Now go to your Steam Deck, access <code>http://&lt;ip&gt;:8000</code> via the installed web
browser, and download your files.</p>
<p>Alternatively, run <code>wget</code> / <code>curl</code> in a terminal.</p>]]></content:encoded></item><item><title>Rename files in bulk</title><link>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever the files are in the same directory, <code>vidir</code> from <a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils</a> is the best
interactive tool.</p>
<p>If files are scattered across multiple directories, consider using the
<a href="https://man.archlinux.org/man/rename.1.en"><code>rename</code></a> utility from <code>util-linux</code>.</p>
<p>A simple example to rename all <code>readme.md</code> files to <code>README.md</code> for consistency:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>rename <span style="color:#e6db74">&#39;s/readme\.md/README.md/&#39;</span> **/*
</span></span></code></pre></div>]]></content:encoded></item><item><title>Sleep forever</title><link>https://www.perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p></description><content:encoded><![CDATA[<p>The following commands will make the shell sleep indefinitely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep inf
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep infinity
</span></span></code></pre></div><p>Previously I would call a command such as a <code>while true</code> loop or the <code>yes</code>
utility, but <code>sleep</code> is also handy.</p>]]></content:encoded></item><item><title>Bcrypt-hash a password</title><link>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure class="align-center ">&lt;a href="https://xkcd.com/936/">
&lt;img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> &lt;/a>&lt;figcaption>
&lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
&lt;/figcaption>
&lt;/figure></description><content:encoded><![CDATA[<p>Given the password <code>correct horse battery staple</code>, we would like to bcrypt-hash
it.</p>
<figure class="align-center "><a href="https://xkcd.com/936/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
         alt="Through 20 years of effort, we&#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Here&rsquo;s one way to do so via the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ htpasswd -nbBC <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#39;correct horse battery staple&#39;</span> | tr -d <span style="color:#e6db74">&#39;:\n&#39;</span> | sed <span style="color:#e6db74">&#39;s/$2y/$2a/&#39;</span>
</span></span></code></pre></div><p>&hellip;which yields:</p>
<pre tabindex="0"><code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
</code></pre><p>You could verify it matches e.g. via <a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/</a>.</p>
<p><strong>Context</strong>: <a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> expects a
bcrypt-hashed password in its config file.</p>]]></content:encoded></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p></description><content:encoded><![CDATA[<p>Assume that you have a <a href="https://chartmuseum.com/">Chartmuseum</a> container running
in <a href="https://aws.amazon.com/fargate/">AWS Fargate</a>.</p>
<p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&ldquo;serverless&rdquo;), being part of ECS (Elastic Container Service).</p>
<p>Problem statement: Add a container <em>healthcheck</em> to the chartmuseum task
definition associated with the container.</p>
<p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs</a>
suggest using <code>curl</code>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/ || exit 1&#34;]
</code></pre><p>For Chartmuseum specifically we&rsquo;re interested in its <code>/health</code> endpoint, as per
<a href="https://github.com/helm/chartmuseum/issues/28">this reference</a>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/health || exit 1&#34;]
</code></pre><p>But we&rsquo;re using port 8080:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost:8080/health || exit 1&#34;]
</code></pre><p>If you use this healthcheck for the official chartmuseum image
(<code>ghcr.io/helm/chartmuseum</code>) it will fail, because the Alpine Linux environment
it uses does not contain <code>curl</code>.</p>
<p>A straightforward fix is to use <code>wget</code> instead:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;wget -q --spider http://localhost:8080/health || exit 1&#34;]
</code></pre><p><code>--spider</code> is needed because we do not want to download anything, <code>-q</code> is
optional and short for &ldquo;quiet&rdquo;.</p>
<p>The <code>/health</code> endpoint merely returns a simple JSON:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;healthy&#34;</span>:<span style="color:#66d9ef">true</span>}
</span></span></code></pre></div><p>References: <a href="https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl">https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl</a></p>]]></content:encoded></item><item><title>Be aware that your public SSH keys can reveal your identity</title><link>https://www.perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</link><pubDate>Fri, 03 May 2024 16:46:28 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/be-aware-that-your-public-ssh-keys-can-reveal-your-identity/</guid><description>&lt;p>If you have a GitHub account configured with SSH, your public keys are available
at &lt;code>https://github.com/$USERNAME.keys&lt;/code>.&lt;/p>
&lt;p>For example, mine: &lt;a href="https://github.com/thiagowfx.keys">https://github.com/thiagowfx.keys&lt;/a>&lt;/p>
&lt;p>And then let&amp;rsquo;s say you also use your full name on GitHub.&lt;/p></description><content:encoded><![CDATA[<p>If you have a GitHub account configured with SSH, your public keys are available
at <code>https://github.com/$USERNAME.keys</code>.</p>
<p>For example, mine: <a href="https://github.com/thiagowfx.keys">https://github.com/thiagowfx.keys</a></p>
<p>And then let&rsquo;s say you also use your full name on GitHub.</p>
<pre tabindex="0"><code>% ssh whoami.filippo.io
The authenticity of host &#39;whoami.filippo.io (2a09:8280:1::a:5d6)&#39; can&#39;t be established.
ED25519 key fingerprint is SHA256:qGAqPqtlvFBCt4LfMME3IgJqZWlcrlBMxNmGjhLVYzY.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &#39;whoami.filippo.io&#39; (ED25519) to the list of known hosts.

    +---------------------------------------------------------------------+
    |                                                                     |
    |             _o/ Hello Thiago Perrotta!
    |                                                                     |
    |                                                                     |
    |  Did you know that ssh sends all your public keys to any server     |
    |  it tries to authenticate to?                                       |
    |                                                                     |
    |  We matched them to the keys of your GitHub account,                |
    |  @thiagowfx, which are available via the GraphQL API
    |  and at https://github.com/thiagowfx.keys
    |                                                                     |
    |  -- Filippo (https://filippo.io)                                    |
    |                                                                     |
    |                                                                     |
    |  P.S. The source of this server is at                               |
    |  https://github.com/FiloSottile/whoami.filippo.io                   |
    |                                                                     |
    +---------------------------------------------------------------------+

Shared connection to whoami.filippo.io closed.
</code></pre><p>Then be careful when connecting to random public ssh servers when you have an
intent to be anonymous.</p>
<p>It&rsquo;s possible to &ldquo;hide&rdquo; yourself by either setting the <code>IdentitiesOnly=yes</code>
option, or by removing all your local ssh keys altogether, even if only
temporarily.</p>]]></content:encoded></item><item><title>Shell text substitution</title><link>https://www.perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p></description><content:encoded><![CDATA[<p>I learned a neat shell trick this week. In both <code>bash</code> and <code>zsh</code> you can use the
circumflex / caret (<code>^</code>) symbol to find &amp; replace a word from the previous
command.</p>
<p>Usage: <code>^prev^next</code>. It&rsquo;s best illustrated with examples:</p>
<h2 id="terraform">terraform</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform plan -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform apply -var-file /path/to/foo.tfvars
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>^init^plan
</span></span><span style="display:flex;"><span>^plan^apply
</span></span></code></pre></div><h2 id="systemd">systemd</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>sudo systemctl status nginx
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>^restart^status
</span></span></code></pre></div><h2 id="one-observation">one observation</h2>
<p><code>zsh</code> will run the substitution right away, whereas <code>bash</code> will allow you
to review and edit the replaced command before running it.</p>]]></content:encoded></item><item><title>★ Tools you should know about: moreutils</title><link>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><guid>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://joeyh.name/code/moreutils/"><code>moreutils</code></a> has previously been covered <a href="https://news.ycombinator.com/item?id=31043655">elsewhere</a>, multiple times. It&rsquo;s a collection of small unix tools that follow the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> very strongly.</p>
<p>Here are some of my favorites with example usages. Obviously this post isn&rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.</p>
<h2 id="sponge">sponge</h2>
<blockquote>
<p>sponge(1) - soak up standard input and write to a file</p>
</blockquote>
<p>Here&rsquo;s a typical workflow <code>sponge(1)</code> is great at:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Given a file</span>
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Imagine that for whatever reason we want to replace &#39;a&#39; with &#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naively, we could try this:</span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> &gt; myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># However the file becomes empty!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sponge comes to the rescue!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> | sponge myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span></code></pre></div><p>It is great to use <code>sponge</code> in lieu of <code>&gt;</code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.</p>
<h2 id="vidir">vidir</h2>
<blockquote>
<p>vidir(1) - edit directories and filenames</p>
</blockquote>
<p><code>vidir(1)</code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open <code>vidir</code> at the top-level directory of this blog repository, it opens up <code>vim</code> (although it doesn&rsquo;t need to be <code>vim</code>, your <code>$EDITOR</code> is honoured) with the following content:</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>If I make, say, the following modifications (lines 7 and 8):</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>And then save and quit <code>vim</code> (<code>:wq</code>), then the effect would have been the same as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ mv Makefile GNUMakefile
</span></span><span style="display:flex;"><span>$ mv README.md README.rst
</span></span></code></pre></div><p>If I changed my mind and decided not to save the modifications, I could just do <code>:cq</code>.</p>
<p>It&rsquo;s possible to leverage vim features such as <code>.</code> (repeat command) and <code>:%s/</code> (find and replace) to perform those mass file renames quickly and effectively. <code>vidir</code> is a breeze to use!</p>
<h2 id="ifne">ifne</h2>
<blockquote>
<p>ifne(1) - Run command if the standard input is not empty</p>
</blockquote>
<p><code>ifne(1)</code> is effective when used with <code>find</code> or <code>fd</code> to keep shell pipes &ldquo;happy&rdquo;. Here&rsquo;s one simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | xargs clang-format
</span></span></code></pre></div><p>This should work as expected, but it&rsquo;s cleaner to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | ifne xargs clang-format
</span></span></code></pre></div><p>The added <code>ifne</code> ensures the <code>xargs</code> command is only executed if and only if <code>find</code> yields at least one result in its output.</p>
<p>This wasn&rsquo;t a very practical example though: a more realistic way to use <code>ifne</code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend <code>ifne</code> to it:</p>
<pre tabindex="0"><code>$ this | is | a | complicated | pipe
# assume &#34;complicated&#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
</code></pre><h2 id="combine">combine</h2>
<blockquote>
<p>combine(1) - combine sets of lines from two files using boolean operations</p>
</blockquote>
<p><code>combine(1)</code> is pretty much <code>comm(1)</code>, but much more user-friendly. Given two files <code>file1</code> and <code>file2</code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&rsquo;s one example to find the <em>common lines</em> in <em>both</em> files, compare <code>combine</code> and <code>comm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ combine file1 and file2
</span></span><span style="display:flex;"><span>$ comm -12 file1 file2     <span style="color:#75715e"># flags are harder to remember</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Linux: US International keyboard layout</title><link>https://www.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p></description><content:encoded><![CDATA[<p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.</p>
<h2 id="intro">Intro</h2>
<p>There are basically two layouts:</p>
<ol>
<li>US (<em>&lsquo;vanilla&rsquo;</em>): type accents like <code>'^`~</code> and they will be emitted immediately</li>
<li>US International (INTL): accents are the so called <a href="https://en.wikipedia.org/wiki/Dead_key">&lsquo;dead keys&rsquo;</a>:</li>
</ol>
<blockquote>
<p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.</p>
</blockquote>
<p>We can switch between keyboard layouts with <code>setxkbmap</code>. It&rsquo;s also possible to
use <code>localectl</code> in systemd-based distros, but its syntax is harder to remember
so I won&rsquo;t even include it here.</p>
<h2 id="set-us-vanilla-keyboard-layout">Set US &lsquo;vanilla&rsquo; keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap us
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard should use to type in English.</p>
<h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap -layout us -variant intl
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> should use to type, for example, in Portuguese or in German.</p>
<h3 id="portuguese">Portuguese</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- á é í ó ú     :   &#39; + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- â ê î ô û     :   ^ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ã õ           :   ~ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- à             :   ` + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ç (cedilla)   :   Alt Gr + , (Option + c on macOS)
</span></span></code></pre></div><h3 id="german">German</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- ß (ss)  :   Alt Gr + s (Option + s on macOS)
</span></span><span style="display:flex;"><span>- ä ö ü   :   &#34; + &lt;vowel&gt;
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alt Gr is typically the Right Alt key.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Wayland: from i3 to sway</title><link>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I&rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is <a href="https://i3wm.org/"><code>i3</code></a>, so the natural choice in Wayland is <a href="https://swaywm.org/"><code>sway</code></a>.</p>
<h2 id="intro">Intro</h2>
<p><code>sway</code> works well with the <code>i3</code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tree ~/.config/<span style="color:#f92672">{</span>i3,sway<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>/home/typhoon/.config/i3
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── i3.conf
</span></span><span style="display:flex;"><span>└── config
</span></span><span style="display:flex;"><span>/home/typhoon/.config/sway
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── sway.conf
</span></span><span style="display:flex;"><span>└── config -&gt; ../../../i3/.config/i3/config
</span></span></code></pre></div><ul>
<li>The master config is
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config"><code>~/.config/i3/config</code></a>.
It is pretty standard, generated by
<a href="https://build.i3wm.org/docs/i3-config-wizard.html"><code>i3-config-wizard</code></a> with
a few tweaks on top for my own workflow. It works for both <code>i3</code> and <code>sway</code>.
The config contains this snippet:</li>
</ul>
<pre tabindex="0"><code># Load user configs if existing. Order is important.
include conf.d/*.conf
</code></pre><p>The snippet allows drop-in customizations to live in <code>conf.d</code>. The <code>include</code> directive is a relatively <a href="https://github.com/i3/i3/pull/4420">new</a> addition to the i3config syntax and it&rsquo;s the main reason this setup is elegant and minimalist.</p>
<ul>
<li>i3-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf"><code>~/.config/i3/conf.d/i3.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with <code>sway</code>, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
#   dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25

    colors {
        background $black
        statusline $white

        focused_workspace $bgcolor $bgcolor $white $black
        active_workspace $gray $gray $black $gray
        inactive_workspace $black $black $gray $gray
        urgent_workspace $red $red $white $green
    }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
</code></pre><p>It&rsquo;s possible some of these configs will become compatible with <code>sway</code> over time, but at the time of this writing they are not.</p>
<ul>
<li>sway-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf"><code>~/.config/sway/conf.d/sway.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with i3, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
#   sway(5)
#   https://github.com/swaywm/sway/wiki
#   https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &#34;*&#34; scale 1.5

# Wallpaper
output &#34;*&#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
</code></pre><p>Most of those are wayland-specific options.</p>
<h2 id="quirks">Quirks</h2>
<p><code>gaps</code> is available in <code>i3</code> as well but only if you use
<a href="https://github.com/Airblader/i3"><code>i3-gaps</code></a>, which generally I refuse to in
order to stay closer to vanilla/upstream <code>i3</code>.</p>
<p>The <code>play-pause</code> multimedia key is
a <a href="https://github.com/swaywm/sway/issues/4783">bug</a> I found on <code>sway</code>. It&rsquo;s quite
annoying, the workaround as you can see above is to use <code>bindcode</code> instead of
<code>bindsym</code>. For more details see the bug.</p>
<p>In general <code>sway</code> works very well out-of-the-box so long as you install
<a href="https://wayland.freedesktop.org/xserver.html">XWayland</a> (<code>xorg-xwayland</code> on
Arch Linux). XWayland <strong>transparently</strong> proxies X11 apps to a X11 server that
runs inside wayland.</p>
<p>It&rsquo;s possible to detect those apps by running
<a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html"><code>xprop</code></a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
<a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes"><code>xeyes</code></a>
is another way to detect them.</p>
<p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
<code>xwayland disable</code> to the <code>sway</code> config. I wouldn&rsquo;t recommend that though, most
Linux GUI apps aren&rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&rsquo;s life.</p>
<p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&rsquo;s
noticeable.</p>
<p>There&rsquo;s no need to replace all of your small <code>i3</code> Xorg utilities with wayland
ones. For example, <a href="https://github.com/davatorium/rofi"><code>rofi</code></a> (application
launcher) works just fine (no need for <code>wofi</code>). The stock <code>i3</code> bar (<code>sway</code> bar?)
works just fine, there&rsquo;s no need for <code>polybar</code> or <code>waybar</code>.</p>
<p>Some utilities need to be replaced though. For example, <code>dunst</code> (notification
daemon) does not seem to work with <code>sway</code> out-of-the-box, <code>mako</code> seems to be a
recommended replacement. <code>i3lock</code> (lock screen) also does not work, <code>sway</code>
comes with its own screen lock directives. Screenshotters (e.g. <code>scrot</code>) will
also need to be replaced.</p>
<p>The system tray does not seem to work fine out-of-the-box. I haven&rsquo;t
investigated much to figure out what&rsquo;s wrong with it.</p>
<p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying <a href="https://git.sr.ht/~kennylevinsen/greetd"><code>greetd</code></a>,
<a href="https://github.com/tvrzna/emptty/"><code>emptty</code></a> and
<a href="https://github.com/fairyglade/ly"><code>ly</code></a>, in that order. <code>ly</code> is in my opinion
the best one in terms of balancing simplicity and usefulness.</p>
<p><code>sway</code> / <code>XWayland</code> doesn&rsquo;t source <code>~/.Xresources</code>. This is an issue if you
rely on customizations therein. It does source <code>~/.Xdefaults</code> though!
Leveraging this, I did the following changes:</p>
<ul>
<li>(i) <code>~/.Xresources</code> sources <code>~/.Xdefaults</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xresources
</span></span><span style="display:flex;"><span>! These settings apply to X11 only.
</span></span><span style="display:flex;"><span>! Use ~/.Xdefaults <span style="color:#66d9ef">for</span> settings that apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;.Xdefaults&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! Source:
</span></span><span style="display:flex;"><span>!   xrdb -merge ~/.Xresources
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Dump all properties:
</span></span><span style="display:flex;"><span>!   xrdb -q
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Check <span style="color:#66d9ef">if</span> DPI is set:
</span></span><span style="display:flex;"><span>!   xrdb -q | grep -i dpi
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! HiDPI
</span></span><span style="display:flex;"><span>! Common values:
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">96</span>  <span style="color:#f92672">(</span>x1.0, baseline<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">144</span> <span style="color:#f92672">(</span>x1.5<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">192</span> <span style="color:#f92672">(</span>x2.0, HiDPI<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>*.dpi: <span style="color:#ae81ff">144</span>
</span></span></code></pre></div><ul>
<li>(ii) <code>~/.Xdefaults</code> holds my customizations that originally lived in <code>~/.Xresources</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xdefaults
</span></span><span style="display:flex;"><span>! These settings apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span>! Use ~/.Xresources <span style="color:#66d9ef">for</span> X11-only settings.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Xft.antialias: true
</span></span><span style="display:flex;"><span>Xft.hinting: true
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>In principle I could just have symlinked them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ln -s ~/.Xresources ~/.Xdefaults
</span></span></code></pre></div><p>The reason why I didn&rsquo;t do it is to avoid double scaling (DPI). You see, my
<code>sway</code> config already sets DPI / scaling to 1.5x. If we do that in
<code>~/.Xdefaults</code> as well then Xorg applications would have been scaled twice.</p>
<h2 id="closing-remarks">Closing remarks</h2>
<p>In general Wayland / <code>sway</code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&rsquo;ll run into other quirks. I have mixed feelings
and wouldn&rsquo;t necessarily recommend it. I wouldn&rsquo;t give an anti recommendation
either. It&rsquo;s complicated&hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.</p>]]></content:encoded></item></channel></rss>