<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>programming on Not Just Serendipity</title><link>https://thiagowfx.github.io/tags/programming/</link><description>Recent content in programming on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Mon, 15 Jan 2024 14:42:51 -0300</lastBuildDate><atom:link href="https://thiagowfx.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Synchronized in Python</title><link>https://thiagowfx.github.io/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<blockquote>
<p><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the <code>synchronized</code>
keyword. Is there anything that can achieve the same results in
Python?</a></p>
</blockquote>
<p>Without having prior knowledge of any python libraries to do so, the primitive interface
I would expect resembles the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>This isn&rsquo;t robust: if an exception happens in <code>perform_mutation</code> the lock would
never be released. A small improvement we can make is to wrap it with
<code>try/finally</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>However it turns out there&rsquo;s a more pythonic way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How can we test this? First, let&rsquo;s use a single thread.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  foo<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;hello from the main thread&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use multiple threads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>write, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>Without the lock this is one of the results I get locally:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 6
hello from thread 8
hello from thread 7
hello from thread 5
hello from thread 9
</code></pre><p>With the lock I always get the following, as you would predict:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 5
hello from thread 6
hello from thread 7
hello from thread 8
hello from thread 9
</code></pre><p>We could go one level deeper in the abstraction by using a <code>@synchronized</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@synchronized</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How do we implement it?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">synchronized</span>(member):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(member)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> lock <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>setdefault(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, Lock())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> lock:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> member(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span></code></pre></div><p>One last concept to learn: <code>RLock</code> a.k.a. reentrant lock.</p>
<p>Consider the following program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock, Thread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeA</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeAandB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeA(bytes) <span style="color:#75715e"># a usual lock would block here</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeB(bytes)
</span></span></code></pre></div><p>Invoked as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeA, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> A&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> B&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeAandB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> AB&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>It will not work as expected. As soon as the first <code>changeAandB</code> gets called, its inner
<code>self.changeA</code> call will block. This is because the lock can only be acquired once.</p>
<p>In this specific example, the straightforward way to fix the issue is to use an <code>RLock</code>:
<code>self.lock = RLock()</code>. The reentrant lock can be locked multiple times.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://theorangeduck.com/page/synchronized-python">https://theorangeduck.com/page/synchronized-python</a></li>
<li><a href="https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances">https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances</a></li>
<li><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized</a></li>
<li><a href="https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock">https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock</a></li>
</ul>]]></content:encoded></item><item><title>Python: all hail to cache memoization</title><link>https://thiagowfx.github.io/2024/01/python-all-hail-to-cache-memoization/</link><pubDate>Fri, 12 Jan 2024 14:37:13 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/python-all-hail-to-cache-memoization/</guid><description>&lt;p>In a typical dynamic programming (DP) problem, you&amp;rsquo;ll usually instantiate a
variable to hold previously computed data (cache).&lt;/p></description><content:encoded><![CDATA[<p>In a typical dynamic programming (DP) problem, you&rsquo;ll usually instantiate a
variable to hold previously computed data (cache).</p>
<p>For example, let&rsquo;s consider a naive implementation of the factorial function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>Now let&rsquo;s add a cache to improve it, upon a use case wherein it would be called
multiple times in a row:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cache: dict[int, int] <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">in</span> cache:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> cache[n]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  cache[n] <span style="color:#f92672">=</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> cache[n]
</span></span></code></pre></div><p>This is straightforward, the only caveat to watch out for is the scope of the
cache. In general you wouldn&rsquo;t want to store it globally.</p>
<p>One elegant way to address this is with <code>lru_cache</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> lru_cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@lru_cache</span>(maxsize<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>The snippet above creates and maintains a cache under the hood. The main caveat
of that snippet is that it&rsquo;s not easy to remember:</p>
<ul>
<li>is it <code>max_size</code> or <code>maxsize</code>?</li>
<li>is it <code>maxsize=0</code> or <code>maxsize=None</code>?</li>
</ul>
<p>This week I found out that there&rsquo;s an even more ergonomic decorator, which it is
super easy to remember!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> cache
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@cache</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">factorial</span>(n: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> n <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> n <span style="color:#f92672">*</span> factorial(n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p><code>@cache</code> is equivalent to <code>lru_cache(maxsize=None)</code>.</p>
<p>With this trick, you won&rsquo;t ever need to manually memoize any function in python
anymore!</p>
<p>This works for any number of arguments so long as they can be used as
dictionary keys, i.e. the arguments must be
<a href="https://docs.python.org/3/glossary.html#term-hashable">hashable</a>. Practically
speaking, this means lists are not cacheable, but tuples are.</p>
<p>Happy dynamic programming!</p>
<p><strong>Reference</strong>: <a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a></p>]]></content:encoded></item><item><title>Python: debugging tip with print and f-strings</title><link>https://thiagowfx.github.io/2024/01/python-debugging-tip-with-print-and-f-strings/</link><pubDate>Mon, 08 Jan 2024 18:36:47 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/python-debugging-tip-with-print-and-f-strings/</guid><description>&lt;p>It&amp;rsquo;s 2024, &lt;a href="https://yotld.com/">the year of the linux desktop&lt;/a>, and the best™
way to debug computer programs is still the good ol&amp;rsquo; &lt;code>print&lt;/code> statement.&lt;/p></description><content:encoded><![CDATA[<p>It&rsquo;s 2024, <a href="https://yotld.com/">the year of the linux desktop</a>, and the best™
way to debug computer programs is still the good ol&rsquo; <code>print</code> statement.</p>
<p>Since Python 3.6 it is possible to use
<a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498">f-strings</a>.</p>
<p>One of my favorite ways to use them for debugging is with the <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">equal
sign</a>
(<code>=</code>):</p>
<blockquote>
<p>To display both the expression text and its value after evaluation, (useful
in debugging), an equal sign <code>'='</code> may be added after the expression.</p>
</blockquote>
<p>Here is one example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_full_word_match</span>(token, words):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;  is_full_word_match: </span><span style="color:#e6db74">{</span>token<span style="color:#e6db74">=}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>words<span style="color:#e6db74">=}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> token <span style="color:#f92672">in</span> words
</span></span></code></pre></div><p>If you call it like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>is_full_word_match(<span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#e6db74">&#34;hello world&#34;</span>)
</span></span></code></pre></div><p>Then it will print the following:</p>
<pre tabindex="0"><code>  is_full_word_match: token=&#39;hello&#39; words=&#39;hello world&#39;
</code></pre><p>This is a more ergonomic (and quicker) way to write than the classic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;  is_full_word_match: token=&#39;</span> <span style="color:#f92672">+</span> token <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; words=&#39;</span> <span style="color:#f92672">+</span> words)
</span></span></code></pre></div><p>Or even:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;  is_full_word_match: token=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> words=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(token, words))
</span></span></code></pre></div>]]></content:encoded></item><item><title>AIs galore</title><link>https://thiagowfx.github.io/2022/12/ais-galore/</link><pubDate>Tue, 27 Dec 2022 16:16:36 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/12/ais-galore/</guid><description>&lt;p>2022 was an amazing year for AIs.&lt;/p></description><content:encoded><![CDATA[<p>2022 was an amazing year for AIs.</p>
<h2 id="chatgptchatgpt"><a href="https://chat.openai.com/chat/">ChatGPT</a></h2>
<ul>
<li>
<p><a href="https://chat.openai.com/chat/"><code>ChatGPT</code></a> can effectively replace Stack
Overflow to a large extent, if you learn how to ask questions to it. Example queries that work amazingly, returning exactly what you would expect, with detailed explanation and/or context:</p>
<ul>
<li>PKGBUILD how to specify git version</li>
<li>python how to sort list reverse</li>
<li>systemd create unit file that forks</li>
<li>xorg start i3wm with startx</li>
<li>git update all submodules to latest tip</li>
<li>typescript make simple post request</li>
<li>chromium difference between args and declare_args</li>
<li>sekiro versus elden ring</li>
<li>generate random number between 10 and 20
<ul>
<li>I cannot run the code. Please generate a random number for me</li>
<li>between 10 and 20 though</li>
</ul>
</li>
<li>add pasta before or after boiling water?</li>
<li>what is the difference between auszahlen and Bargeld abheben?</li>
<li>write a trip packing checklist for me</li>
</ul>
<p>Someone even wrote a Chrome extension to query <code>ChatGPT</code> alongside a Google search: <a href="https://github.com/wong2/chat-gpt-google-extension">https://github.com/wong2/chat-gpt-google-extension</a> (chatgpt4google.com). I couldn&rsquo;t get it to work for some reason though.</p>
</li>
</ul>
<h2 id="stable-diffusionstable-diffusion"><a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a></h2>
<p>Given a query (text), it generates an image for you. It pairs up quite nicely with Slides (when looking for inspiration) and can effectively replace Google Images to some extent.</p>]]></content:encoded></item><item><title>Computers are fast</title><link>https://thiagowfx.github.io/2022/03/computers-are-fast/</link><pubDate>Sun, 20 Mar 2022 15:55:24 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/computers-are-fast/</guid><description>&lt;p>&lt;a href="https://computers-are-fast.github.io">Computers are fast&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://computers-are-fast.github.io">Computers are fast</a>.</p>
<blockquote>
<p>Let&rsquo;s find out how well you know computers! All of these programs have a variable NUMBER in them. Your mission: guess how big NUMBER needs to get before the program takes 1 second to run.</p>
<p>You don&rsquo;t need to guess exactly: they&rsquo;re all between 1 and a billion. Just try to guess the right order of magnitude!</p>
</blockquote>
<p>This is basically an interactive version of <a href="https://gist.github.com/jboner/2841832">Latency Numbers Every Programmer Should Know</a>, originally coined by Jeff Dean.</p>]]></content:encoded></item><item><title>Python: interactive completion</title><link>https://thiagowfx.github.io/2022/02/python-interactive-completion/</link><pubDate>Sat, 12 Feb 2022 23:11:44 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/python-interactive-completion/</guid><description>&lt;p>Sometimes I fire up a &lt;code>python&lt;/code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.&lt;/p>
&lt;p>For example, how should I invoke &lt;code>subprocess.call&lt;/code>?&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I fire up a <code>python</code> interpreter in my terminal for quick
prototyping, but often forget what the standard library method signatures are.</p>
<p>For example, how should I invoke <code>subprocess.call</code>?</p>
<p>The most straightforward action at this point is to simply <a href="https://www.google.com/search?q=python+subprocess.call">google
it</a>, no shame. The first result helpfully redirects me to the official python <a href="https://docs.python.org/3/library/subprocess.html">documentation</a>, as one would expect.</p>
<p>From the documentation, I&rsquo;d run something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-al&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span></code></pre></div><p>What if I wanted to figure out the correct way to do so from the command line though?</p>
<h2 id="bpython">bpython</h2>
<p>Enter <a href="https://bpython-interpreter.org/"><code>bpython</code></a>:</p>
<blockquote>
<p><code>bpython</code> is a fancy interface to the Python interpreter for Linux, BSD, OS X and Windows (with some work). bpython is released under the MIT License. It has the following (special) features:</p>
</blockquote>
<p>It should be available in your favorite linux distribution. Once it&rsquo;s installed, a typical session would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> bpython
</span></span><span style="display:flex;"><span>bpython version <span style="color:#ae81ff">0.22.1</span> on top of Python <span style="color:#ae81ff">3.10.2</span> <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>python
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>call: (<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> call                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>                                       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])                                                         <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>To see all <code>Popen</code> arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> subprocess<span style="color:#f92672">.</span>Popen(
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> subprocess<span style="color:#f92672">.</span>Popen: (args, bufsize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, executable<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdin<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, stdout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stderr<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, preexec_fn<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, close_fds<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, shell<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, cwd<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, env<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,       <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> universal_newlines<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, startupinfo<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, creationflags<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, restore_signals<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,    <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> start_new_session<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, pass_fds<span style="color:#f92672">=</span>(), <span style="color:#f92672">*</span>, user<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, group<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, extra_groups<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> encoding<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, errors<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, umask<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>, pipesize<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>)                        <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Popen                                                                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Execute a child program <span style="color:#f92672">in</span> a new process<span style="color:#f92672">.</span>                                            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> For a complete description of the arguments see the Python documentation<span style="color:#f92672">.</span>            <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>                                                                                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> Arguments:                                                                           <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span>   args: A string, <span style="color:#f92672">or</span> a sequence of program arguments<span style="color:#f92672">.</span>                                <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># output truncated for brevity; bpython displays it all</span>
</span></span></code></pre></div><p>As you can see, it wouldn&rsquo;t be difficult to have a rough idea of which
arguments are available and what they do.</p>
<p>I could keep going:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>run([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-la&#34;</span>], cwd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/tmp&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> args               check_returncode   returncode         stderr                      <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> stdout                                                                               <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>args<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">┌──────────────────────────────────────────────────────────────────────────────────────┐</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> append         clear          copy           count          extend                   <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> index          insert         pop            remove         reverse                  <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">│</span> sort                                                                                 <span style="color:#960050;background-color:#1e0010">│</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">└──────────────────────────────────────────────────────────────────────────────────────┘</span>
</span></span></code></pre></div><p>Out-of-the-box it also displays autosuggestions based on the history of my previous commands<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It also supports python 3. For the full list of features, refer to <a href="https://bpython-interpreter.org/">https://bpython-interpreter.org/</a>.</p>
<h2 id="ipython">ipython</h2>
<p>Alternatively <a href="https://ipython.org/"><code>ipython</code></a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> is comparable to <code>bpython</code>, however I find it a bit less user-friendly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>iPython <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>             builtins           contextlib         io                 select             threading
</span></span><span style="display:flex;"><span>             call()             DEVNULL            list2cmdline()     selectors          time
</span></span><span style="display:flex;"><span>             CalledProcessError errno              os                 signal             TimeoutExpired
</span></span><span style="display:flex;"><span>             check_call()       fcntl              PIPE               STDOUT             types
</span></span><span style="display:flex;"><span>             check_output()     getoutput()        Popen              SubprocessError    warnings
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call(
</span></span><span style="display:flex;"><span>  abs()                     <span style="color:#66d9ef">False</span>                     <span style="color:#a6e22e">ModuleNotFoundError</span>       <span style="color:#a6e22e">SystemError</span>
</span></span><span style="display:flex;"><span>  all()                     <span style="color:#a6e22e">FileExistsError</span>           <span style="color:#a6e22e">NameError</span>                 <span style="color:#a6e22e">SystemExit</span>
</span></span><span style="display:flex;"><span>  any()                     <span style="color:#a6e22e">FileNotFoundError</span>         next()                    <span style="color:#a6e22e">TabError</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ArithmeticError</span>           filter()                  <span style="color:#66d9ef">None</span>                      timeout<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  ascii()                   float                     <span style="color:#a6e22e">NotADirectoryError</span>        <span style="color:#a6e22e">TimeoutError</span>
</span></span></code></pre></div><p>The tab completion after <code>call(</code> doesn&rsquo;t display the documentation for it. However, appending a <code>?</code> works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span> ipython
</span></span><span style="display:flex;"><span>Python <span style="color:#ae81ff">3.10.2</span> (main, Jan <span style="color:#ae81ff">15</span> <span style="color:#ae81ff">2022</span>, <span style="color:#ae81ff">19</span>:<span style="color:#ae81ff">56</span>:<span style="color:#ae81ff">27</span>) [GCC <span style="color:#ae81ff">11.1.0</span>]
</span></span><span style="display:flex;"><span>Type <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;license&#39;</span> <span style="color:#66d9ef">for</span> more information
</span></span><span style="display:flex;"><span>IPython <span style="color:#ae81ff">8.0.1</span> <span style="color:#f92672">--</span> An enhanced Interactive Python<span style="color:#f92672">.</span> Type <span style="color:#e6db74">&#39;?&#39;</span> <span style="color:#66d9ef">for</span> help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: subprocess<span style="color:#f92672">.</span>call<span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span>Signature: subprocess<span style="color:#f92672">.</span>call(<span style="color:#f92672">*</span>popenargs, timeout<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>Docstring:
</span></span><span style="display:flex;"><span>Run command <span style="color:#66d9ef">with</span> arguments<span style="color:#f92672">.</span>  Wait <span style="color:#66d9ef">for</span> command to complete <span style="color:#f92672">or</span>
</span></span><span style="display:flex;"><span>timeout, then <span style="color:#66d9ef">return</span> the returncode attribute<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The arguments are the same <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">for</span> the Popen constructor<span style="color:#f92672">.</span>  Example:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>retcode <span style="color:#f92672">=</span> call([<span style="color:#e6db74">&#34;ls&#34;</span>, <span style="color:#e6db74">&#34;-l&#34;</span>])
</span></span><span style="display:flex;"><span>File:      <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>python3<span style="color:#ae81ff">.10</span><span style="color:#f92672">/</span>subprocess<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>Type:      function
</span></span></code></pre></div><p>Furthermore, <code>subprocess.Popen?</code> opens a pager with the documentation for the method.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Both <code>bpython</code> and <code>ipython</code> are excellent tools to enhance the user experience
within the python interpreter, being great for quick prototyping,
experimentation or exploration. <code>bpython</code> seems a bit more user-friendly and
intuitive upon first usage, <code>ipython</code> takes a bit getting used to.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://fishshell.com/"><code>fish</code></a> shell and <a href="https://github.com/zsh-users/zsh-autosuggestions"><code>zsh-autosuggestions</code></a> users should know what I&rsquo;m talking about.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>ipython</code> has been around for longer and these days there&rsquo;s the whole Jupyter Notebook ecosystem around it.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Watch files and react to changes during development</title><link>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p></description><content:encoded><![CDATA[<p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.</p>
<h2 id="context">Context</h2>
<p>I am contributing to <a href="https://github.com/miniflux/v2">miniflux</a>, a minimalist and opinionated RSS reader. Miniflux&rsquo;s stack is as minimalist as the app itself: It&rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive <a href="https://github.com/miniflux/v2/blob/master/Makefile"><code>Makefile</code></a>.</p>
<p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&rsquo;s needed is to execute <code>make run</code> whenever any<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> file in the repository is changed.</p>
<p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.</p>
<h2 id="option-1-entr-recommended">Option #1: entr (recommended)</h2>
<p><a href="https://eradman.com/entrproject/"><code>entr(1)</code></a>:</p>
<blockquote>
<p>Run arbitrary commands when files change</p>
</blockquote>
<p>The following invocation does the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd | entr -r -- make run
</span></span></code></pre></div><p>However, we could do better. From the upstream docs:</p>
<blockquote>
<p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git</p>
</blockquote>
<p>I am happy with <code>fd</code> for this use case though. To limit <code>entr</code> to <code>.go</code> files only, we could do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd -e go | entr -r -- make run
</span></span></code></pre></div><p>It took me less than 5 minutes to install and figure out how to use <code>entr</code>.</p>
<p><a href="https://schauderbasis.de/posts/entr/">This blog post</a> covers it in more detail.</p>
<h2 id="option-2-watchman">Option #2: watchman</h2>
<p><a href="https://facebook.github.io/watchman/"><code>watchman</code></a> from Facebook Open Source:</p>
<blockquote>
<p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.</p>
</blockquote>
<p>Watchman&rsquo;s workflow doesn&rsquo;t seem to be very suited for this job though. It&rsquo;s much more centered on subscribing to <code>inotify</code> events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;repository root&gt;
</span></span><span style="display:flex;"><span>watchman watch .
</span></span></code></pre></div><p>&hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># set up a trigger named &#39;buildme&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># will run &#39;minify-css&#39; whenever a CSS file is changed</span>
</span></span><span style="display:flex;"><span>watchman -- trigger . buildme <span style="color:#e6db74">&#39;*.css&#39;</span> -- minify-css
</span></span></code></pre></div><p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.</p>
<p>That said, for the simple use case of triggering (and reloading) <code>make run</code>, it seems overkill. I also found its <a href="https://facebook.github.io/watchman/docs/install.html">official docs</a> too verbose and lacking sample usages for simple <code>Makefile</code>-based projects like miniflux.</p>
<p>One caveat of <a href="https://repology.org/project/watchman/versions"><code>watchman</code></a> is that it&rsquo;s less widely available than <a href="https://repology.org/project/entr/versions"><code>entr</code></a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.</p>
<p>It took me several minutes to figure out what&rsquo;s the gist of watchman, only to realize it is more bloated than warranted.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For simple projects, <code>entr</code> is the way to go, hands down. For complex webdev projects, I would look into <code>watchman</code> more deeply.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To be truly strict, only changes to <code>.go</code> files matter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Advent of Code</title><link>https://thiagowfx.github.io/2022/01/advent-of-code/</link><pubDate>Fri, 28 Jan 2022 17:44:00 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/advent-of-code/</guid><description>&lt;p>Last year I found out about &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>Last year I found out about <a href="https://adventofcode.com/">Advent of Code</a>.</p>
<h2 id="you-said-what">You said what?</h2>
<p><strong>Advent of Code</strong> by <a href="http://was.tl/">Eric Wastl</a> happens every year since 2015, every December from the 1st to
the 25th. Each day there&rsquo;s a new programming challenge<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> split into two
parts. The first part tends to be easier than the second one. The second part
usually builds upon the first one, being a follow-up task that requires more
steps and/or with a higher degree of complexity. You can&rsquo;t always reuse the
bits from the first part to solve the second one though.</p>
<p>For those familiar with programming contests like <a href="https://icpc.global/">ACM ICPC</a> or <a href="https://olimpiada.ic.unicamp.br/">OBI</a>, or online judges like <a href="https://www.spoj.com/">SPOJ</a> or <a href="https://onlinejudge.org/">UVa</a>, advent of code feels like home. The main difference is that there is no time pressure and no need to write spaghetti and unreadable code; in fact, writing readable and elegant solutions is encouraged (<em>citation needed</em>&hellip;).</p>
<p>For those familiar with FAANG/Tech whiteboard interviews, advent of code feels a lot like a typical interview. I would even go further and say it&rsquo;s a great way to practice for interviews.</p>
<p>It is a great moment to either (i) learn a new exciting programming language or (ii) improve your mastery on programming languages that you already know. I know several people (see below) that used AoC<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to learn Rust or Kotlin or whatever else was exciting for them at the time. It&rsquo;s surprising that the official Kotlin Docs even contain a section called <a href="https://kotlinlang.org/docs/advent-of-code.html">Advent of Code puzzles in idiomatic Kotlin</a>.</p>
<p>Some folks go even further and use it to practice their <a href="https://codegolf.stackexchange.com/questions/216024/advent-of-code-2020-day-2-part-1">code golfing</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> or even <a href="https://ryxcommar.com/2021/12/04/advent-of-code-2021-in-google-sheets-first-4-days/">Google Sheets</a> skills. I have a deep amount of respect for them as it&rsquo;s quite a challenge. If you think it stops there, I&rsquo;ve also seen solutions in <a href="https://github.com/phillbush/aoc">awk</a> and <a href="https://twitter.com/_rsc/status/1476683352493207561">sed</a>.</p>
<p>Another positive aspect of AoC is that it has an integrated dashboard that tracks your progress as you go. It&rsquo;s a simple element of gamification that immensely improves motivation and fun. You really feel a big desire to collect all those 50 stars&hellip;</p>
<h2 id="what-about-me">What about me?</h2>
<p>My goal for 2021 was relatively less ambitious than that,  I just wanted to improve my Python skills, more specifically Python 3. I learned Python 2 during my first year in university and used it sparingly at work and for personal endeavours, but always had a knowledge gap in Python 3.</p>
<p>I set up a public git repository with <a href="https://github.com/thiagowfx/adventofcode">my solutions</a> and aspired to write simple and elegant python, my only <a href="https://frantic.im/no-constraints-no-fun/">constraint</a> was to limit myself to what is available in the standard library of a vanilla python3 installation in Alpine linux, with the exception of <a href="https://numpy.org/"><code>numpy</code></a> which is widespread enough to deserve an entry in my <a href="https://github.com/thiagowfx/adventofcode/blob/master/requirements.txt"><code>requirements.txt</code></a>, and of course devtools like debuggers, linters and auto formatters as needed.</p>
<p>As an additional, non-programming challenge I also limited myself to only use the command line. This basically meant no IDEs<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. My programming environment was ultimately <code>ssh</code> to an Alpine Linux VPS + <code>tmux</code> + <code>vim</code>. To make my life easier, one of the first tasks I accomplished was to write a generic <a href="https://github.com/thiagowfx/adventofcode/blob/master/Makefile"><code>Makefile</code></a> to help me test and run my scripts. A typical invocation would look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ make DEBUG<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> DAY<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>&hellip;whereas I could choose between the sample input versus the real one with <code>DEBUG</code>, and the puzzle day with <code>DAY</code>.</p>
<p>Was the experience worth it? <strong>Definitely yes</strong>! Even though I only completed ~8 puzzles out of the 25 ones due to having my attention split with another project I was working on at the time, the thematic submarine puzzles were hella fun and I learned a lot of python 3 on the way.</p>
<p>A few highlights of what I learned <em>and used</em> from my python <code>2to3</code> transition were f-strings / string interpolation (<code>print(f'The sum is {sum}')</code>), &ldquo;everything is an iterator now&rdquo; even <code>map</code> and <code>range</code>, the standard library is awesome and sometimes you stumble upon useful abstractions like <code>Counter</code> and <code>defaultdict</code>, <code>sort</code> is different now (<code>key</code> instead of comparison function), this <code>pdb</code> debugger thingy, among other topics I can&rsquo;t remember at the moment. I realized the only concept that was previously familiar was the different syntax of the <code>print</code> function (you have to use parentheses now).</p>
<p>In terms of workflow, I also learned that virtual environments are now
supported natively<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> (<code>python -m venv</code>), <a href="https://thiagowfx.github.io/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a> is an amazing tool to
automate/manage environments in git repositories and also happens to have
first-class python integration, <code>pylint</code> and <code>autopep8</code> are good integrations
with <code>vim</code> to help spot basic errors and/or suggest best practices, and <code>numpy</code> takes forever to build from source.</p>
<h2 id="what-about-the-community">What about the community?</h2>
<p>AoC enjoys a lot of popularity and zeitgeist, especially during times of the COVID-19 pandemic, but even before then. There&rsquo;s a large <a href="https://www.reddit.com/r/adventofcode/">/r/adventofcode</a> subreddit community, lots of people share their solution snippets and impressions on Twitter (<a href="https://twitter.com/search?q=%23adventofcode&amp;src=typed_query">#AdventOfCode</a>), there&rsquo;s a ton of public git repositories on <a href="https://github.com/search?q=adventofcode">GitHub</a> where people share their coding solutions, in pretty much any programming language you can think of, and finally there are many screencasts on <a href="https://www.youtube.com/results?search_query=advent+of+code">YouTube</a>. The Internet in the 2020s sparks creativity in every unimaginable corner.</p>
<p>There&rsquo;s so much information that it&rsquo;s impossible to stay on top of everything. Here is a small list of repositories that I followed this year, most of those are acquaintances/friends and/or stumbled upon Twitter:</p>
<p>C++:</p>
<ul>
<li><a href="https://github.com/riuri/adventofcode">https://github.com/riuri/adventofcode</a></li>
</ul>
<p>Python:</p>
<ul>
<li><a href="https://github.com/sjvrijn/AdventofCode">https://github.com/sjvrijn/AdventofCode</a></li>
<li><a href="https://github.com/oomenn/AOC">https://github.com/oomenn/AOC</a></li>
</ul>
<p>Rust:</p>
<ul>
<li><a href="https://github.com/dimo414/advent-2021">https://github.com/dimo414/advent-2021</a></li>
<li><a href="https://github.com/mfs/aoc">https://github.com/mfs/aoc</a></li>
</ul>
<p>I find it&rsquo;s really constructive and useful (and also <em>fun</em>) to peek at other people&rsquo;s solutions after I coded my own. I have extensive (albeit kinda rusty these days) experience with C++ so I wanted to follow at least one repository coded with it; since I wrote my solutions in python it was also a natural choice to follow a few python repositories; and, finally, I wanted to peek at some languages I am not familiar with to get a gist of them. This year I watched Rust and a few bits of Clojure and Kotlin on Twitter.</p>
<p>Finally, for some extra inspiration, there are also some <em>10x programmers</em><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> out there that seem to be fans of AoC as well: <a href="https://github.com/norvig/pytudes">Peter Norvig</a> and <a href="https://twitter.com/_rsc/status/1466089522718986241">Russ Cox (<em>rsc</em>)</a>. There are probably several others I am not aware of.</p>
<h2 id="final-remarks">Final remarks</h2>
<p>I am hoping to participate in AoC this year (2022) as well, and possibly revisit the 2021 puzzles and resolve the rest of the ones I missed as time permits.</p>
<p>Hopefully this post encourages and motivates you to try Advent of Code as well! Happy coding.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or puzzle, if you will.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Acronym not to be confused with a certain <del>annoying</del>^W politician.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For those unfamiliar with the concept, code golfing is all about writing a correct solution with the <strong>fewest</strong> amount of characters.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>For example: PyCharm, and also VSCode, which is getting so big these days I don&rsquo;t even know if it&rsquo;s possible to just call it a simple text editor anymore.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Back in the days, <code>virtualenvwrapper</code> was all the rage.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>The <em>10x programmer</em> thing is a well-known joke however in this instance the mentioned characters are indeed superb programmers that I immensely respect.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>