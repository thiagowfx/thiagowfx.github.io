<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet type="text/xsl" href="https://perrotta.dev//rss.xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aoc on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/aoc/</link><description>Recent content in Aoc on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Wed, 25 Dec 2024 16:13:30 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/aoc/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2024: Day 17</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</link><pubDate>Wed, 25 Dec 2024 16:13:30 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/17">Day #17&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a simulation problem, a quite delightful one to implement.&lt;/p>
&lt;p>Using python data classes would have been natural, but I went full imperative in
this one.&lt;/p>
&lt;p>Part 2 would require clever backwards computation, and I wasn&amp;rsquo;t interested in
doing so. I liked the approach from &lt;a href="https://todd.ginsberg.com/post/advent-of-code/2024/day17/">Todd
Ginsberg&lt;/a>.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e06c75">b&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()[&lt;span style="color:#d19a66">2&lt;/span>]) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>:&lt;span style="color:#d19a66">3&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">program&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">op&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">op&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">4&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()[&lt;span style="color:#d19a66">1&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#34;,&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stdout&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">program&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">program&lt;/span>[&lt;span style="color:#e06c75">ip&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">operand&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">program&lt;/span>[&lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># adv, division&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">denominator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">**&lt;/span> &lt;span style="color:#e06c75">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#e06c75">denominator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># bxl, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">^=&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># bst, modulo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># jnz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">operand&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># bxc, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">^=&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stdout&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># bdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">denominator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">**&lt;/span> &lt;span style="color:#e06c75">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#e06c75">denominator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># cdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">opcode&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">denominator&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">**&lt;/span> &lt;span style="color:#e06c75">combo&lt;/span>(&lt;span style="color:#e06c75">operand&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">numerator&lt;/span> &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#e06c75">denominator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ip&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">str&lt;/span>, &lt;span style="color:#e06c75">stdout&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 9</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</link><pubDate>Wed, 25 Dec 2024 16:09:53 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/9">Day #9&lt;/a> puzzle.&lt;/p>
&lt;p>A disk fragmentation problem.&lt;/p>
&lt;p>It&amp;rsquo;s mostly an ad-hoc problem, there isn&amp;rsquo;t much commentary to make.&lt;/p>
&lt;p>Part two was quite annoying so I simply skipped it.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">expand&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>: &lt;span style="color:#e5c07b">list&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fill&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">disk&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">fill&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> [&lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> [&lt;span style="color:#e06c75">d&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#98c379">&amp;#39;.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">fill&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">not&lt;/span> &lt;span style="color:#e06c75">fill&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">defrag&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>: &lt;span style="color:#e5c07b">str&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">expand&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">left&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">p&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">left&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">right&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">left&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">left&lt;/span>], &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">right&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">right&lt;/span>], &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">left&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>[&lt;span style="color:#e06c75">right&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">left&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">right&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">left&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">checksum&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">d&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">total&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">disk&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">checksum&lt;/span>(&lt;span style="color:#e06c75">defrag&lt;/span>(&lt;span style="color:#e06c75">disk&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 8</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-8/</link><pubDate>Fri, 20 Dec 2024 22:47:51 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-8/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/8">Day #8&lt;/a> puzzle.&lt;/p>
&lt;p>This is a problem in a 2D grid. I like to start by making a frequency map
(dictionary) from the frequencies to the coordinates where they occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># {&amp;#39;0&amp;#39;: ((1,8), ...)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">freq_map&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#e5c07b">tuple&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">field&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">field&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isalnum&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">freq_map&lt;/span>[&lt;span style="color:#e06c75">field&lt;/span>] &lt;span style="color:#56b6c2">+=&lt;/span> ((&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>),)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then it&amp;rsquo;s just a matter of going through every coordinate pair for a given
frequency. &lt;code>combinations()&lt;/code> from &lt;code>itertools&lt;/code> is great for that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">combinations&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">all_coords&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">freq_map&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">values&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">all_coords&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">update&lt;/span>(&lt;span style="color:#e06c75">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>), &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The meat of the code lives in &lt;code>compute_antinodes&lt;/code>. We need to compute two
coordinates and check whether they are within bounds:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">within_bounds&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">height&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">width&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">x1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">y1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">x0&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span>, &lt;span style="color:#e06c75">direction&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> ((&lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span>, &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>), (&lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span>, &lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">within_bounds&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> ((&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>),)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">antinodes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>assert&lt;/code>ion gives us peace of mind.&lt;/p>
&lt;p>The answer is the number of &lt;code>antinodes&lt;/code>.&lt;/p>
&lt;p>For part two, we need to extend the &lt;code>compute_antinodes&lt;/code> logic to keep going
until it gets out-of-bounds:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>, &lt;span style="color:#e06c75">unbounded&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">False&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">x1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">y1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">unbounded&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ((&lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span>), (&lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">x0&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span>, &lt;span style="color:#e06c75">direction&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> ((&lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span>, &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>), (&lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span>, &lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">within_bounds&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> ((&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>),)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">antinodes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">combinations&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">within_bounds&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">height&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">width&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>, &lt;span style="color:#e06c75">unbounded&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">False&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">coord2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">x1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dy&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">y2&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">y1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">unbounded&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ((&lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span>), (&lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">x0&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span>, &lt;span style="color:#e06c75">direction&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> ((&lt;span style="color:#e06c75">x1&lt;/span>, &lt;span style="color:#e06c75">y1&lt;/span>, &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>), (&lt;span style="color:#e06c75">x2&lt;/span>, &lt;span style="color:#e06c75">y2&lt;/span>, &lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dx&lt;/span>, &lt;span style="color:#e06c75">y0&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">direction&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">dy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">within_bounds&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">height&lt;/span>, &lt;span style="color:#e06c75">width&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> ((&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>),)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">steps&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">antinodes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># {&amp;#39;0&amp;#39;: ((1,8), ...)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">freq_map&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#e5c07b">tuple&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">y&lt;/span>, &lt;span style="color:#e06c75">field&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">field&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">isalnum&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">freq_map&lt;/span>[&lt;span style="color:#e06c75">field&lt;/span>] &lt;span style="color:#56b6c2">+=&lt;/span> ((&lt;span style="color:#e06c75">x&lt;/span>, &lt;span style="color:#e06c75">y&lt;/span>),)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">all_coords&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">freq_map&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">values&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">all_coords&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">update&lt;/span>(&lt;span style="color:#e06c75">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>), &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">antinodes&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">all_coords&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">freq_map&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">values&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">all_coords&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">antinodes&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">update&lt;/span>(&lt;span style="color:#e06c75">compute_antinodes&lt;/span>(&lt;span style="color:#e06c75">coord1&lt;/span>, &lt;span style="color:#e06c75">coord2&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>), &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]), &lt;span style="color:#e06c75">unbounded&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">True&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">antinodes&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead of using tuples or coordinates all over the place, we could simply have
modified the map inplace, and then iterated over it in the end to count the
antinodes. I like the tuple abstraction better, and it&amp;rsquo;s quite efficient anyway.&lt;/p></description></item><item><title>Advent of Code 2024: Day 7</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-7/</link><pubDate>Thu, 12 Dec 2024 23:12:31 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-7/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/7">Day #7&lt;/a> puzzle.&lt;/p>
&lt;p>Part one: dynamic programming!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">calibrate_one&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>, &lt;span style="color:#e06c75">index&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I learned this style from &lt;a href="https://neetcode.io/">NeetCode&lt;/a>. An inner function to
drive the memoization alongside &lt;code>lru_cache&lt;/code>. Beautiful!&lt;/p>
&lt;p>In my initial solution I passed the whole operands tuple as the second argument.
Later on I changed it to pass the current index in the tuple, which is simpler.&lt;/p>
&lt;p>Part two is a natural extension of part one, with an extra operator:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">calibrate_two&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>, &lt;span style="color:#e06c75">index&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>])), &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">calibrate_one&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>, &lt;span style="color:#e06c75">index&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">calibrate_two&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>, &lt;span style="color:#e06c75">index&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">acc&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>])), &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">dp_calibrate&lt;/span>(&lt;span style="color:#e06c75">operands&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_one&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">total_two&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#39;:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">test_value&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">operands&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">operands&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">calibrate_one&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_one&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">calibrate_two&lt;/span>(&lt;span style="color:#e06c75">test_value&lt;/span>, &lt;span style="color:#e06c75">operands&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_two&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">test_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">total_one&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">total_two&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code: discussion group</title><link>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</link><pubDate>Thu, 12 Dec 2024 19:30:53 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</guid><description>&lt;p>Assuming you are following this year&amp;rsquo;s advent of code, you are welcome to join
our Telegram discussion group &lt;a href="https://t.me/+mtPcW45EuFBjNGMx">here&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. It is
a supergroup, one of its channels is &lt;code>#adventofcode&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s a moderated group, and this invitation link will expire within 2
weeks of the time of this post.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code 2024: Day 11</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-11/</link><pubDate>Thu, 12 Dec 2024 19:15:35 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-11/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/11">Day #11&lt;/a> puzzle.&lt;/p>
&lt;p>Part one can be done with a simulation.&lt;/p>
&lt;p>It is very delightful to do it in python: lists are quite flexible, and
converting from integers to strings and vice-versa is seamless. Counting the
number of digits of &lt;code>x&lt;/code> is just a matter of &lt;code>len(str(x))&lt;/code>. In C++ it&amp;rsquo;s a bit
kludgier with &lt;code>std::string(x).size()&lt;/code> and &lt;code>std::stoi(s)&lt;/code>, but then you need to
remember which header to import&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I thought of using &lt;code>reduce&lt;/code> to do &lt;code>blink(blink(stone))...&lt;/code> and so on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">reduce&lt;/span>(&lt;span style="color:#c678dd">lambda&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span>: &lt;span style="color:#e06c75">blink&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>), &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">25&lt;/span>), &lt;span style="color:#e06c75">stones&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;nonetheless it&amp;rsquo;s more readable to simply use a plain &lt;code>for-range&lt;/code> loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">_&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">25&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The secret sauce is in &lt;code>blink&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">stones&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>[:&lt;span style="color:#e06c75">index&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>:]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">2024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">stones_next&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For part two we need to be cleverer. In principle the same approach would work,
however it takes too long to process due to its exponential nature. In my laptop
I can get up to the 42nd &lt;code>blink&lt;/code> iteration without losing my patience to wait
even longer.&lt;/p>
&lt;p>The main observation to account for is that we only care about the length of the
stone sequence, hence the original task transforms into a simple 2D dynamic
programming problem.&lt;/p>
&lt;p>I call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">dp_blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>, &lt;span style="color:#d19a66">75&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which is defined this way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">times&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>([&lt;span style="color:#e06c75">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">blink&lt;/span>([&lt;span style="color:#e06c75">stone&lt;/span>])])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>([&lt;span style="color:#e06c75">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">stones&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The DP consists of the stone, and how many times are left for you to blink at it.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">stones&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">s&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>[:&lt;span style="color:#e06c75">index&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#e06c75">index&lt;/span>:]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones_next&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">2024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">stones_next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp_blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@lru_cache&lt;/span>(&lt;span style="color:#e06c75">maxsize&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#e5c07b">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">times&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>([&lt;span style="color:#e06c75">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">blink&lt;/span>([&lt;span style="color:#e06c75">stone&lt;/span>])])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>([&lt;span style="color:#e06c75">dp&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>, &lt;span style="color:#e06c75">times&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">stones&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">_&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">25&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># This is very slow, with an exponential complexity runtime.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># What did you expect?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># for i in range(50): # 50 = 75 - 25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># print(i)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># stones = blink(stones)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># # part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># print(len(stones))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stones&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">stone&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">stone&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">dp_blink&lt;/span>(&lt;span style="color:#e06c75">stones&lt;/span>, &lt;span style="color:#d19a66">75&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s &lt;code>#include &amp;lt;string&amp;gt;&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code 2024: Day 6</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-6/</link><pubDate>Thu, 12 Dec 2024 15:26:35 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-6/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/6">Day #6&lt;/a> puzzle.&lt;/p>
&lt;p>Part one is a classic 2D matrix (graph) traversal problem.&lt;/p>
&lt;p>To store state I created a &lt;code>visited&lt;/code> set with the &lt;code>(x, y)&lt;/code> coordinates.
Alternatively I could have changed the input inplace, but I didn&amp;rsquo;t want to deal
with the immutability of python strings, i.e. given:&lt;/p>
&lt;pre tabindex="0">&lt;code>l = [&amp;#34;.....&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;you can&amp;rsquo;t simply do &lt;code>l[0][0] = 'X'&lt;/code>, because python strings are immutable. We
could define a new string and assign it to &lt;code>l[0]&lt;/code>, or we could change the input
to:&lt;/p>
&lt;pre tabindex="0">&lt;code>l = [&amp;#39;.&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;.&amp;#39;]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;so that replacing characters becomes trivial.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">find&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">index&lt;/span>(&lt;span style="color:#e06c75">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">raise&lt;/span> &lt;span style="color:#e06c75">ValueError&lt;/span>(&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#98c379">&amp;#39;Could not find &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#e06c75">c&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379"> in lines&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">move&lt;/span>(&lt;span style="color:#e06c75">pos&lt;/span>, &lt;span style="color:#e5c07b">dir&lt;/span>, &lt;span style="color:#e06c75">lines&lt;/span>, &lt;span style="color:#e06c75">visited&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">dirs_clockwise&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> ((&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>), (&lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>), (&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>), (&lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#d19a66">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_pos&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">pos&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">dir&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#e06c75">pos&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">dir&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]][&lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]] &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#98c379">&amp;#39;.^&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pos&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">next_pos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">visited&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">add&lt;/span>(&lt;span style="color:#e06c75">pos&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>[&lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>]][&lt;span style="color:#e06c75">next_pos&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;#&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">dir&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">dirs_clockwise&lt;/span>[(&lt;span style="color:#e06c75">dirs_clockwise&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">index&lt;/span>(&lt;span style="color:#e5c07b">dir&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pos&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">find&lt;/span>(&lt;span style="color:#e06c75">lines&lt;/span>, &lt;span style="color:#98c379">&amp;#39;^&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">dir&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">0&lt;/span>) &lt;span style="color:#7f848e"># up&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">visited&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">set&lt;/span>((&lt;span style="color:#e06c75">pos&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">move&lt;/span>(&lt;span style="color:#e06c75">pos&lt;/span>, &lt;span style="color:#e5c07b">dir&lt;/span>, &lt;span style="color:#e06c75">lines&lt;/span>, &lt;span style="color:#e06c75">visited&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">visited&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I did not solve part two yet. I know how to do it, but my initial approach is
too brute force to my taste. Perhaps I&amp;rsquo;ll come up with something clever later
on.&lt;/p></description></item><item><title>Advent of Code 2024: Day 5</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-5/</link><pubDate>Sun, 08 Dec 2024 23:24:27 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-5/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/5">Day #5&lt;/a> puzzle.&lt;/p>
&lt;p>It is a topological sort problem, plain and simple.&lt;/p>
&lt;p>In part one all we care about is whether certain input sequences are valid,
within the sort constraints. It&amp;rsquo;s very straightforward to verify that by
exhaustively checking all constraints (&amp;ldquo;edges&amp;rdquo;):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">is_correct&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#c678dd">lambda&lt;/span>: &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxsize&lt;/span>, {&lt;span style="color:#e06c75">node&lt;/span>: &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">node&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>)})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">first&lt;/span>, &lt;span style="color:#e06c75">second&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">second&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>position&lt;/code> is a dictionary representing in which index (position) each element
occurs. I make use of a &lt;code>defaultdict&lt;/code> with a very large value set by default
(instead of a vanilla &lt;code>dict&lt;/code>) to avoid the need to explicitly check for element
presence.&lt;/p>
&lt;p>In part two we need to perform the actual topological sort. Or&amp;hellip;do we? Doing
toposort would be the most efficient way to resolve it, however, in this case,
plain brute force is good enough:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">toposort&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#c678dd">lambda&lt;/span>: &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxsize&lt;/span>, {&lt;span style="color:#e06c75">node&lt;/span>: &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">node&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>)})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">change&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">first&lt;/span>, &lt;span style="color:#e06c75">second&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">second&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">key&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">lambda&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>: &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">x&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once again, we iterate through all the input constraints until we find a
violation. Whenever we find one, we fix the position of the element in the wrong
order by updating it to occur before the other element. We repeat this procedure
until there are no more violations.&lt;/p>
&lt;p>The full source:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">is_correct&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#c678dd">lambda&lt;/span>: &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxsize&lt;/span>, {&lt;span style="color:#e06c75">node&lt;/span>: &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">node&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>)})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">first&lt;/span>, &lt;span style="color:#e06c75">second&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">second&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">toposort&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#c678dd">lambda&lt;/span>: &lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">maxsize&lt;/span>, {&lt;span style="color:#e06c75">node&lt;/span>: &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">node&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>)})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">change&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">first&lt;/span>, &lt;span style="color:#e06c75">second&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">second&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">first&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">second&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">change&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">key&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">lambda&lt;/span> &lt;span style="color:#e06c75">x&lt;/span>: &lt;span style="color:#e06c75">position&lt;/span>[&lt;span style="color:#e06c75">x&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">edges&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">updates&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;|&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">line&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#34;|&amp;#34;&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">updates&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#34;,&amp;#34;&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_one&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">total_two&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">update&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">updates&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_correct&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_one&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">update&lt;/span>[&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>) &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">sorted_update&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">toposort&lt;/span>(&lt;span style="color:#e06c75">update&lt;/span>, &lt;span style="color:#e06c75">edges&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_two&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">sorted_update&lt;/span>[&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">sorted_update&lt;/span>) &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">total_one&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">total_two&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 4</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-4/</link><pubDate>Fri, 06 Dec 2024 11:44:39 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-4/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/4">Day #4&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty typical 2D matrix search problem, or a graph search problem, if
you will.&lt;/p>
&lt;p>The problem is naturally unraveled into the following searches:&lt;/p>
&lt;ul>
&lt;li>horizontally&lt;/li>
&lt;li>horizontally, reversed&lt;/li>
&lt;li>vertically&lt;/li>
&lt;li>vertically, reversed&lt;/li>
&lt;li>diagonally, all 4 directions (NW, NE, SW, SE)&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s possible to write a single pair of for loops that addresses the general
case. The (classic) idea is to think of all 8 compass directions to move along
the matrix:&lt;/p>
&lt;ul>
&lt;li>(1, 0)&lt;/li>
&lt;li>(-1, 0)&lt;/li>
&lt;li>(0, 1)&lt;/li>
&lt;li>(0, -1)&lt;/li>
&lt;li>(1, 1)&lt;/li>
&lt;li>(-1, -1)&lt;/li>
&lt;li>(-1, 1)&lt;/li>
&lt;li>(1, -1)&lt;/li>
&lt;/ul>
&lt;p>Within the inner iteration, change &lt;code>x += dx&lt;/code> and &lt;code>y += dy&lt;/code> (or &lt;code>i += di&lt;/code>, &lt;code>j += dj&lt;/code>, naming is hard). I did this many times in C++ though, and I want to write
elegant Python code.&lt;/p>
&lt;p>Therefore I came up with the following solution instead, with nested list
comprehensions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_horizontal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>((&lt;span style="color:#e5c07b">True&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">row&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">row&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">row&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>:&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>)]) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It follows the same principle as the original intent, however it leverages
list slices so that we can omit the &lt;code>dx/dy&lt;/code> step.&lt;/p>
&lt;p>The vertical search is pretty straightforward: it is just a matter of running
the horizontal search in the transposed matrix (&lt;code>zip(*matrix)&lt;/code>).&lt;/p>
&lt;p>I must confess that using &lt;code>zip&lt;/code> to transpose matrices always felt magical and a
mere coincidence that it just works™. Ruby has a &lt;code>.transpose&lt;/code> method, which is
more readable.&lt;/p>
&lt;p>For the diagonal search, I couldn&amp;rsquo;t think of an elegant list comprehension
manner to address it. Is it even possible to &amp;ldquo;2D slice&amp;rdquo; in Python?&lt;/p>
&lt;p>After-the-fact I decided to ask ChatGPT, and it is indeed possible, but it
requires NumPy:&lt;/p>
&lt;blockquote>
&lt;p>If a is 2-D, returns the diagonal of a with the given offset, i.e., the
collection of elements of the form a[i, i+offset]. If a has more than two
dimensions, then the axes specified by axis1 and axis2 are used to determine
the 2-D sub-array whose diagonal is returned. The shape of the resulting array
can be determined by removing axis1 and axis2 and appending an index to the
right equal to the size of the resulting diagonals.&lt;/p>
&lt;/blockquote>
&lt;p>The method call resembles &lt;code>numpy.array([[1, 2], [3, 4]]).diagonal(offset=1)&lt;/code>,
perhaps with the aid of &lt;code>.flip()&lt;/code> to account for the other direction.&lt;/p>
&lt;p>Anyway, my plain diagonal search is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_diagonal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">rows&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">cols&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">cols&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>] &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">k&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>))) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>] &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">k&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>))) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">count&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Part two is fundamentally a different problem.&lt;/p>
&lt;p>One way to address it is to search for all &lt;code>'A'&lt;/code> characters, and then look
around its &amp;ldquo;edges&amp;rdquo; to see if they contain exactly two &lt;code>'M'&lt;/code> and two &lt;code>'S'&lt;/code>, and
that they are properly arranged:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_double_mas&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#98c379">&amp;#39;A&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># look at a QWERTY keyboard to make sense of these variable names&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">z&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">edges&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">q&lt;/span>, &lt;span style="color:#e06c75">e&lt;/span>, &lt;span style="color:#e06c75">z&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#98c379">&amp;#39;M&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#98c379">&amp;#39;S&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">count&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I couldn&amp;rsquo;t find an opportunity for reuse of the solution from part one.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_horizontal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>((&lt;span style="color:#e5c07b">True&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">row&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">row&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">row&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>:&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>)]) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_vertical&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">search_horizontal&lt;/span>(&lt;span style="color:#e5c07b">zip&lt;/span>(&lt;span style="color:#56b6c2">*&lt;/span>&lt;span style="color:#e06c75">matrix&lt;/span>), &lt;span style="color:#e06c75">keyword&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_diagonal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">rows&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">cols&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">cols&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>] &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">k&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>))) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>] &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">k&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">keyword&lt;/span>))) &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#e06c75">keyword&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">count&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">search_double_mas&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#d19a66">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">rows&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">cols&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#98c379">&amp;#39;A&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># look at a QWERTY keyboard to make sense of these variable names&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">z&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">matrix&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>][&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">edges&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">q&lt;/span>, &lt;span style="color:#e06c75">e&lt;/span>, &lt;span style="color:#e06c75">z&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#98c379">&amp;#39;M&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">edges&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#98c379">&amp;#39;S&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">e&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">q&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">z&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">count&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">keyword&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;XMAS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [&amp;#39;abcd&amp;#39;, &amp;#39;efgh&amp;#39;, &amp;#39;ijkl&amp;#39;] -&amp;gt; [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;h&amp;#39;], [&amp;#39;i&amp;#39;, &amp;#39;j&amp;#39;, &amp;#39;k&amp;#39;, &amp;#39;l&amp;#39;]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">matrix&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">search_horizontal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">search_vertical&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">search_diagonal&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>, &lt;span style="color:#e06c75">keyword&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">search_double_mas&lt;/span>(&lt;span style="color:#e06c75">matrix&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 3</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-3/</link><pubDate>Tue, 03 Dec 2024 16:41:23 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-3/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/3">Day #3&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty typical regex problem.
To choose not to use regex is to endeavour in pain.&lt;/p>
&lt;p>The regex for part one to extract all occurrences of &lt;code>mul&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#39;mul\(\d+,\d+\)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that with &lt;code>r&lt;/code> there is no need to escape the backslashes in Python.&lt;/p>
&lt;p>Later on I extract the numbers with &lt;code>r'\d+'&lt;/code>.&lt;/p>
&lt;p>If we really wanted we could do everything with a single regex by using
capturing groups, however it would become less readable.&lt;/p>
&lt;p>Once the numbers are captured, it&amp;rsquo;s just a matter of accumulating their product.&lt;/p>
&lt;p>I craft and test my regex with the support of &lt;a href="https://regex101.com/">https://regex101.com/&lt;/a> and then
follow up with the Python interpreter in my laptop.&lt;/p>
&lt;p>Part two adds two more operators, which we can easily account for with an or
(&lt;code>|&lt;/code>).&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">re&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">prod&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">prod_two&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">memory&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ops&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">re&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">findall&lt;/span>(&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#39;mul\(\d+,\d+\)&amp;#39;&lt;/span>, &lt;span style="color:#e06c75">memory&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">op&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">ops&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e06c75">f1&lt;/span>, &lt;span style="color:#e06c75">f2&lt;/span>) &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">re&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">findall&lt;/span>(&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#39;\d+&amp;#39;&lt;/span>, &lt;span style="color:#e06c75">op&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">prod&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">f1&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">f2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">prod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enabled&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">memory&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ops&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">re&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">findall&lt;/span>(&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#34;mul\(\d+,\d+\)|do\(\)|don&amp;#39;t\(\)&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">memory&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">op&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">ops&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#98c379">&amp;#34;don&amp;#39;t&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">op&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enabled&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#98c379">&amp;#34;do&amp;#34;&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">op&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">enabled&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#98c379">&amp;#39;mul&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">op&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e06c75">f1&lt;/span>, &lt;span style="color:#e06c75">f2&lt;/span>) &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">re&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">findall&lt;/span>(&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#39;\d+&amp;#39;&lt;/span>, &lt;span style="color:#e06c75">op&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">enabled&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">prod_two&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">f1&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">f2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">prod_two&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I intended to use &lt;a href="https://docs.python.org/3/whatsnew/3.10.html">&lt;code>match&lt;/code>&lt;/a> merely
for style points however it&amp;rsquo;s only available from Python 3.10+, thus I sticked
with a mere &lt;code>if-elif&lt;/code> construct.&lt;/p></description></item><item><title>Advent of Code 2024: Day 2</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-2/</link><pubDate>Tue, 03 Dec 2024 01:15:00 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-2/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/2">Day #2&lt;/a> puzzle.&lt;/p>
&lt;p>The first part is straightforward. It felt right to use &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.pairwise">&lt;code>pairwise&lt;/code>&lt;/a> to compute the differences between each adjacent pair:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">diffs&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [(&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">pairwise&lt;/span>(&lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>)))]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we combine it with &lt;code>all&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">all&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e5c07b">all&lt;/span>(&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that it is necessary to use two &lt;code>all&lt;/code> expressions. It feels tempting to do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">all&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;however that&amp;rsquo;s incorrect. For example: &lt;code>diffs = [1, -1, 1, -1]&lt;/code> with an input
such as &lt;code>[1, 2, 1, 2]&lt;/code> would pass the test even though it shouldn&amp;rsquo;t.&lt;/p>
&lt;p>It also feels tempting to use &lt;code>abs()&lt;/code> but then an additional check would be
necessary to ensure the diffs are either all positive or all negative.&lt;/p>
&lt;p>The second part was trickier.&lt;/p>
&lt;p>Initially I was doing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>)&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#e5c07b">False&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>)&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">count&lt;/span>(&lt;span style="color:#e5c07b">False&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;but then I realized I misunderstood the problem.&lt;/p>
&lt;p>The &lt;code>1 2 7 8 9&lt;/code> line, whose diff is &lt;code>[1, 5, 1, 1]&lt;/code>, illustrates it well: in
principle it would pass the test by dropping &amp;ldquo;5&amp;rdquo; from the diff. However, that
cannot be correct, because &lt;code>2 -&amp;gt; 8&lt;/code> is too big of a jump.&lt;/p>
&lt;p>The brute force way is to drop elements one by one, splitting the original list
into two, and then checking &lt;code>is_safe&lt;/code> in the merged sublists. That would
require computing &lt;code>diffs&lt;/code> every time, which would yield an &lt;code>O(n^2)&lt;/code> solution.&lt;/p>
&lt;p>We can do better by pre-computing &lt;code>diffs&lt;/code> only once, and then adding a bit of
manipulation to reconstruct what the merged diffs would be. The end goal is to
compute this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>[:&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> [&lt;span style="color:#e06c75">l&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">l&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>:]):
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;i.e. the left part of &lt;code>diffs&lt;/code>, the right part of &lt;code>diffs&lt;/code>, and a rolling diff
element in the middle.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">pairwise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe_damp&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">all&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e5c07b">all&lt;/span>(&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">l&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>(&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">diffs&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [(&lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">pairwise&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">is_this_safe&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_this_safe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe_damp&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>:]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe_damp&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>[:&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe_damp&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_safe&lt;/span>(&lt;span style="color:#e06c75">diffs&lt;/span>[:&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> [&lt;span style="color:#e06c75">l&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">l&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">diffs&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>:]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">safe_damp&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">safe&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">safe_damp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A few notes:&lt;/p>
&lt;ul>
&lt;li>there&amp;rsquo;s no need for &lt;code>pairwise&lt;/code>; a plain &lt;code>for-range&lt;/code> loop would have done the
job just fine; &lt;code>pairwise&lt;/code> is stylish though&lt;/li>
&lt;li>&lt;code>1 &amp;lt;= n &amp;lt;= 3&lt;/code> is syntactic sugar for &lt;code>1 &amp;lt;= n and n &amp;lt;= 3&lt;/code>. Python is sweet.&lt;/li>
&lt;li>part two could become a bit more elegant by introducing another helper
function&lt;/li>
&lt;li>naming is hard&lt;/li>
&lt;li>&lt;code>pairwise&lt;/code> is only available from Python 3.10+. macOS 15 (Sequoia) ships with
Python 3.9. Oh well&amp;hellip;I needed to use the Python binary from homebrew.&lt;/li>
&lt;/ul></description></item><item><title>Advent of Code 2024: Day 1</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-1/</link><pubDate>Sun, 01 Dec 2024 22:29:19 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-1/</guid><description>&lt;p>Refer to the &lt;a href="https://perrotta.dev/2022/01/advent-of-code/">previous post&lt;/a> about AoC,
and to the &lt;a href="https://github.com/thiagowfx/adventofcode">git repository&lt;/a> with my
solutions in Python 3.&lt;/p>
&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/1">Day #1&lt;/a> puzzle.&lt;/p>
&lt;p>This is just a warm-up.&lt;/p>
&lt;p>Given two lists of integers, iterate over them and sum the absolute difference
between each pair. &lt;code>zip&lt;/code> + &lt;code>sum&lt;/code> is the perfect pair&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for the job.&lt;/p>
&lt;p>Part two: iterate over the left list whilst accumulating how often the element
appears in the right list. &amp;ldquo;How often&amp;rdquo; has, almost always, the smell of a
&lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter">&lt;code>Counter&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The full solution&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">with&lt;/span> &lt;span style="color:#e5c07b">open&lt;/span>(&lt;span style="color:#e06c75">sys&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">argv&lt;/span>[&lt;span style="color:#d19a66">1&lt;/span>]) &lt;span style="color:#c678dd">as&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lines&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">input&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">read&lt;/span>()&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">splitlines&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">left&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">lines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">l&lt;/span>, &lt;span style="color:#e06c75">r&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">map&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">left&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sort&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">right&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sort&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">sum&lt;/span>(&lt;span style="color:#e5c07b">abs&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">r&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> (&lt;span style="color:#e06c75">l&lt;/span>, &lt;span style="color:#e06c75">r&lt;/span>) &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">zip&lt;/span>(&lt;span style="color:#e06c75">left&lt;/span>, &lt;span style="color:#e06c75">right&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">freqs&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>(&lt;span style="color:#e06c75">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># part two&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e5c07b">sum&lt;/span>(&lt;span style="color:#e06c75">l&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">freqs&lt;/span>[&lt;span style="color:#e06c75">l&lt;/span>] &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">l&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">left&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">__name__&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://www.youtube.com/watch?v=3WpdCZC9q6w">I&amp;rsquo;m not sure I like it, And I&amp;rsquo;m so tired of
fighting&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>The git repository is ever-evolving and the source of truth, whereas the
blog post is a snapshot. I&amp;rsquo;ll experiment with cross-posting solutions here
even though it duplicates the repository ones.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code</title><link>https://perrotta.dev/2022/01/advent-of-code/</link><pubDate>Fri, 28 Jan 2022 17:44:00 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/advent-of-code/</guid><description>&lt;p>Last year I found out about &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>.&lt;/p>
&lt;h2 id="you-said-what">You said what?&lt;/h2>
&lt;p>&lt;strong>Advent of Code&lt;/strong> by &lt;a href="http://was.tl/">Eric Wastl&lt;/a> happens every year since 2015, every December from the 1st to
the 25th. Each day there&amp;rsquo;s a new programming challenge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> split into two
parts. The first part tends to be easier than the second one. The second part
usually builds upon the first one, being a follow-up task that requires more
steps and/or with a higher degree of complexity. You can&amp;rsquo;t always reuse the
bits from the first part to solve the second one though.&lt;/p>
&lt;p>For those familiar with programming contests like &lt;a href="https://icpc.global/">ACM ICPC&lt;/a> or &lt;a href="https://olimpiada.ic.unicamp.br/">OBI&lt;/a>, or online judges like &lt;a href="https://www.spoj.com/">SPOJ&lt;/a> or &lt;a href="https://onlinejudge.org/">UVa&lt;/a>, advent of code feels like home. The main difference is that there is no time pressure and no need to write spaghetti and unreadable code; in fact, writing readable and elegant solutions is encouraged (&lt;em>citation needed&lt;/em>&amp;hellip;).&lt;/p>
&lt;p>For those familiar with FAANG/Tech whiteboard interviews, advent of code feels a lot like a typical interview. I would even go further and say it&amp;rsquo;s a great way to practice for interviews.&lt;/p>
&lt;p>It is a great moment to either (i) learn a new exciting programming language or (ii) improve your mastery on programming languages that you already know. I know several people (see below) that used AoC&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to learn Rust or Kotlin or whatever else was exciting for them at the time. It&amp;rsquo;s surprising that the official Kotlin Docs even contain a section called &lt;a href="https://kotlinlang.org/docs/advent-of-code.html">Advent of Code puzzles in idiomatic Kotlin&lt;/a>.&lt;/p>
&lt;p>Some folks go even further and use it to practice their &lt;a href="https://codegolf.stackexchange.com/questions/216024/advent-of-code-2020-day-2-part-1">code golfing&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> or even &lt;a href="https://ryxcommar.com/2021/12/04/advent-of-code-2021-in-google-sheets-first-4-days/">Google Sheets&lt;/a> skills. I have a deep amount of respect for them as it&amp;rsquo;s quite a challenge. If you think it stops there, I&amp;rsquo;ve also seen solutions in &lt;a href="https://github.com/phillbush/aoc">awk&lt;/a> and &lt;a href="https://twitter.com/_rsc/status/1476683352493207561">sed&lt;/a>.&lt;/p>
&lt;p>Another positive aspect of AoC is that it has an integrated dashboard that tracks your progress as you go. It&amp;rsquo;s a simple element of gamification that immensely improves motivation and fun. You really feel a big desire to collect all those 50 stars&amp;hellip;&lt;/p>
&lt;h2 id="what-about-me">What about me?&lt;/h2>
&lt;p>My goal for 2021 was relatively less ambitious than that, I just wanted to improve my Python skills, more specifically Python 3. I learned Python 2 during my first year in university and used it sparingly at work and for personal endeavours, but always had a knowledge gap in Python 3.&lt;/p>
&lt;p>I set up a public git repository with &lt;a href="https://github.com/thiagowfx/adventofcode">my solutions&lt;/a> and aspired to write simple and elegant python, my only &lt;a href="https://frantic.im/no-constraints-no-fun/">constraint&lt;/a> was to limit myself to what is available in the standard library of a vanilla python3 installation in Alpine linux, with the exception of &lt;a href="https://numpy.org/">&lt;code>numpy&lt;/code>&lt;/a> which is widespread enough to deserve an entry in my &lt;a href="https://github.com/thiagowfx/adventofcode/blob/master/requirements.txt">&lt;code>requirements.txt&lt;/code>&lt;/a>, and of course devtools like debuggers, linters and auto formatters as needed.&lt;/p>
&lt;p>As an additional, non-programming challenge I also limited myself to only use the command line. This basically meant no IDEs&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. My programming environment was ultimately &lt;code>ssh&lt;/code> to an Alpine Linux VPS + &lt;code>tmux&lt;/code> + &lt;code>vim&lt;/code>. To make my life easier, one of the first tasks I accomplished was to write a generic &lt;a href="https://github.com/thiagowfx/adventofcode/blob/master/2022/Makefile">&lt;code>Makefile&lt;/code>&lt;/a> to help me test and run my scripts. A typical invocation would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ make &lt;span style="color:#e06c75">DEBUG&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#e06c75">DAY&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;whereas I could choose between the sample input versus the real one with &lt;code>DEBUG&lt;/code>, and the puzzle day with &lt;code>DAY&lt;/code>.&lt;/p>
&lt;p>Was the experience worth it? &lt;strong>Definitely yes&lt;/strong>! Even though I only completed ~8 puzzles out of the 25 ones due to having my attention split with another project I was working on at the time, the thematic submarine puzzles were hella fun and I learned a lot of python 3 on the way.&lt;/p>
&lt;p>A few highlights of what I learned &lt;em>and used&lt;/em> from my python &lt;code>2to3&lt;/code> transition were f-strings / string interpolation (&lt;code>print(f'The sum is {sum}')&lt;/code>), &amp;ldquo;everything is an iterator now&amp;rdquo; even &lt;code>map&lt;/code> and &lt;code>range&lt;/code>, the standard library is awesome and sometimes you stumble upon useful abstractions like &lt;code>Counter&lt;/code> and &lt;code>defaultdict&lt;/code>, &lt;code>sort&lt;/code> is different now (&lt;code>key&lt;/code> instead of comparison function), this &lt;code>pdb&lt;/code> debugger thingy, among other topics I can&amp;rsquo;t remember at the moment. I realized the only concept that was previously familiar was the different syntax of the &lt;code>print&lt;/code> function (you have to use parentheses now).&lt;/p>
&lt;p>In terms of workflow, I also learned that virtual environments are now
supported natively&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> (&lt;code>python -m venv&lt;/code>), &lt;a href="https://perrotta.dev/2022/01/direnv-automate-your-environment-variables/">&lt;code>direnv&lt;/code>&lt;/a> is an amazing tool to
automate/manage environments in git repositories and also happens to have
first-class python integration, &lt;code>pylint&lt;/code> and &lt;code>autopep8&lt;/code> are good integrations
with &lt;code>vim&lt;/code> to help spot basic errors and/or suggest best practices, and &lt;code>numpy&lt;/code> takes forever to build from source.&lt;/p>
&lt;h2 id="what-about-the-community">What about the community?&lt;/h2>
&lt;p>AoC enjoys a lot of popularity and zeitgeist, especially during times of the COVID-19 pandemic, but even before then. There&amp;rsquo;s a large &lt;a href="https://www.reddit.com/r/adventofcode/">/r/adventofcode&lt;/a> subreddit community, lots of people share their solution snippets and impressions on Twitter (&lt;a href="https://twitter.com/search?q=%23adventofcode&amp;amp;src=typed_query">#AdventOfCode&lt;/a>), there&amp;rsquo;s a ton of public git repositories on &lt;a href="https://github.com/search?q=adventofcode">GitHub&lt;/a> where people share their coding solutions, in pretty much any programming language you can think of, and finally there are many screencasts on &lt;a href="https://www.youtube.com/results?search_query=advent+of+code">YouTube&lt;/a>. The Internet in the 2020s sparks creativity in every unimaginable corner.&lt;/p>
&lt;p>There&amp;rsquo;s so much information that it&amp;rsquo;s impossible to stay on top of everything. Here is a small list of repositories that I followed this year, most of those are acquaintances/friends and/or stumbled upon Twitter:&lt;/p>
&lt;p>C++:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/riuri/adventofcode">https://github.com/riuri/adventofcode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Python:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sjvrijn/AdventofCode">https://github.com/sjvrijn/AdventofCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/oomenn/AOC">https://github.com/oomenn/AOC&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Rust:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dimo414/advent-2021">https://github.com/dimo414/advent-2021&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mfs/aoc">https://github.com/mfs/aoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Edit (2024-08-06)&lt;/strong>: Additions from 2022:&lt;/p>
&lt;p>C++:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eariassoto/advent-of-code-cpp">https://github.com/eariassoto/advent-of-code-cpp&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Python:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/achrafmam2/adventofcode">https://github.com/achrafmam2/adventofcode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mcerdeiro/aoc2022">https://github.com/mcerdeiro/aoc2022&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I find it&amp;rsquo;s really constructive and useful (and also &lt;em>fun&lt;/em>) to peek at other people&amp;rsquo;s solutions after I coded my own. I have extensive (albeit kinda rusty these days) experience with C++ so I wanted to follow at least one repository coded with it; since I wrote my solutions in python it was also a natural choice to follow a few python repositories; and, finally, I wanted to peek at some languages I am not familiar with to get a gist of them. This year I watched Rust and a few bits of Clojure and Kotlin on Twitter.&lt;/p>
&lt;p>Finally, for some extra inspiration, there are also some &lt;em>10x programmers&lt;/em>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> out there that seem to be fans of AoC as well: &lt;a href="https://github.com/norvig/pytudes">Peter Norvig&lt;/a> and &lt;a href="https://twitter.com/_rsc/status/1466089522718986241">Russ Cox (&lt;em>rsc&lt;/em>)&lt;/a>. There are probably several others I am not aware of.&lt;/p>
&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>I am hoping to participate in AoC this year (2022) as well, and possibly revisit the 2021 puzzles and resolve the rest of the ones I missed as time permits.&lt;/p>
&lt;p>Hopefully this post encourages and motivates you to try Advent of Code as well! Happy coding.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Or puzzle, if you will.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Acronym not to be confused with a certain &lt;del>annoying&lt;/del>^W politician.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For those unfamiliar with the concept, code golfing is all about writing a correct solution with the &lt;strong>fewest&lt;/strong> amount of characters.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>For example: PyCharm, and also VSCode, which is getting so big these days I don&amp;rsquo;t even know if it&amp;rsquo;s possible to just call it a simple text editor anymore.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Back in the days, &lt;code>virtualenvwrapper&lt;/code> was all the rage.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>The &lt;em>10x programmer&lt;/em> thing is a well-known joke however in this instance the mentioned characters are indeed superb programmers that I immensely respect.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>