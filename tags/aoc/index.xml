<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aoc on not just serendipity</title><link>https://perrotta.dev/tags/aoc/</link><description>Recent content in Aoc on not just serendipity</description><generator>Hugo</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><lastBuildDate>Wed, 25 Dec 2024 16:13:30 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/aoc/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2024: Day 17</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</link><pubDate>Wed, 25 Dec 2024 16:13:30 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/17">Day #17&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a simulation problem, a quite delightful one to implement.&lt;/p>
&lt;p>Using python data classes would have been natural, but I went full imperative in
this one.&lt;/p>
&lt;p>Part 2 would require clever backwards computation, and I wasn&amp;rsquo;t interested in
doing so. I liked the approach from &lt;a href="https://todd.ginsberg.com/post/advent-of-code/2024/day17/">Todd
Ginsberg&lt;/a>.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a, b, c &lt;span style="color:#f92672">=&lt;/span> [int(line&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">2&lt;/span>]) &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">3&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> program &lt;span style="color:#f92672">=&lt;/span> [int(op) &lt;span style="color:#66d9ef">for&lt;/span> op &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">combo&lt;/span>(operand):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ip &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(program) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#f92672">=&lt;/span> program[ip]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operand &lt;span style="color:#f92672">=&lt;/span> program[ip &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># adv, division&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxl, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bst, modulo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># jnz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxc, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout&lt;span style="color:#f92672">.&lt;/span>append(combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># cdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, stdout)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 9</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</link><pubDate>Wed, 25 Dec 2024 16:09:53 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/9">Day #9&lt;/a> puzzle.&lt;/p>
&lt;p>A disk fragmentation problem.&lt;/p>
&lt;p>It&amp;rsquo;s mostly an ad-hoc problem, there isn&amp;rsquo;t much commentary to make.&lt;/p>
&lt;p>Part two was quite annoying so I simply skipped it.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">expand&lt;/span>(disk: list[int]) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> disk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> fill:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> [str(s) &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> [d]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">not&lt;/span> fill
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">defrag&lt;/span>(disk: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> expand(disk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">=&lt;/span> len(p) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> p[left] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p[left], p[right] &lt;span style="color:#f92672">=&lt;/span> p[right], p[left]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p[right] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">checksum&lt;/span>(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, d &lt;span style="color:#f92672">in&lt;/span> enumerate(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> d &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">+=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> int(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> disk &lt;span style="color:#f92672">=&lt;/span> [int(x) &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(checksum(defrag(disk)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 8</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-8/</link><pubDate>Fri, 20 Dec 2024 22:47:51 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-8/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/8">Day #8&lt;/a> puzzle.&lt;/p>
&lt;p>This is a problem in a 2D grid. I like to start by making a frequency map
(dictionary) from the frequencies to the coordinates where they occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># {&amp;#39;0&amp;#39;: ((1,8), ...)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>freq_map &lt;span style="color:#f92672">=&lt;/span> defaultdict(tuple)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x, line &lt;span style="color:#f92672">in&lt;/span> enumerate(lines):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> y, field &lt;span style="color:#f92672">in&lt;/span> enumerate(line):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> field&lt;span style="color:#f92672">.&lt;/span>isalnum():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_map[field] &lt;span style="color:#f92672">+=&lt;/span> ((x, y),)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then it&amp;rsquo;s just a matter of going through every coordinate pair for a given
frequency. &lt;code>combinations()&lt;/code> from &lt;code>itertools&lt;/code> is great for that:&lt;/p></description></item><item><title>Advent of Code 2024: Day 7</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-7/</link><pubDate>Thu, 12 Dec 2024 23:12:31 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-7/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/7">Day #7&lt;/a> puzzle.&lt;/p>
&lt;p>Part one: dynamic programming!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">calibrate_one&lt;/span>(test_value, operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@lru_cache&lt;/span>(maxsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">dp_calibrate&lt;/span>(acc, index):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> acc &lt;span style="color:#f92672">==&lt;/span> test_value &lt;span style="color:#f92672">and&lt;/span> index &lt;span style="color:#f92672">==&lt;/span> len(operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> acc &lt;span style="color:#f92672">&amp;gt;&lt;/span> test_value &lt;span style="color:#f92672">or&lt;/span> index &lt;span style="color:#f92672">==&lt;/span> len(operands):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_calibrate(acc &lt;span style="color:#f92672">+&lt;/span> operands[index], index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">or&lt;/span> dp_calibrate(acc &lt;span style="color:#f92672">*&lt;/span> operands[index], index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_calibrate(operands[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I learned this style from &lt;a href="https://neetcode.io/">NeetCode&lt;/a>. An inner function to
drive the memoization alongside &lt;code>lru_cache&lt;/code>. Beautiful!&lt;/p>
&lt;p>In my initial solution I passed the whole operands tuple as the second argument.
Later on I changed it to pass the current index in the tuple, which is simpler.&lt;/p></description></item><item><title>Advent of Code: discussion group</title><link>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</link><pubDate>Thu, 12 Dec 2024 19:30:53 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</guid><description>&lt;p>Assuming you are following this year&amp;rsquo;s advent of code, you are welcome to join
our Telegram discussion group &lt;a href="https://t.me/+mtPcW45EuFBjNGMx">here&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. It is
a supergroup, one of its channels is &lt;code>#adventofcode&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s a moderated group, and this invitation link will expire within 2
weeks of the time of this post.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code 2024: Day 11</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-11/</link><pubDate>Thu, 12 Dec 2024 19:15:35 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-11/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/11">Day #11&lt;/a> puzzle.&lt;/p>
&lt;p>Part one can be done with a simulation.&lt;/p>
&lt;p>It is very delightful to do it in python: lists are quite flexible, and
converting from integers to strings and vice-versa is seamless. Counting the
number of digits of &lt;code>x&lt;/code> is just a matter of &lt;code>len(str(x))&lt;/code>. In C++ it&amp;rsquo;s a bit
kludgier with &lt;code>std::string(x).size()&lt;/code> and &lt;code>std::stoi(s)&lt;/code>, but then you need to
remember which header to import&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I thought of using &lt;code>reduce&lt;/code> to do &lt;code>blink(blink(stone))...&lt;/code> and so on:&lt;/p></description></item><item><title>Advent of Code 2024: Day 6</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-6/</link><pubDate>Thu, 12 Dec 2024 15:26:35 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-6/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/6">Day #6&lt;/a> puzzle.&lt;/p>
&lt;p>Part one is a classic 2D matrix (graph) traversal problem.&lt;/p>
&lt;p>To store state I created a &lt;code>visited&lt;/code> set with the &lt;code>(x, y)&lt;/code> coordinates.
Alternatively I could have changed the input inplace, but I didn&amp;rsquo;t want to deal
with the immutability of python strings, i.e. given:&lt;/p>
&lt;pre tabindex="0">&lt;code>l = [&amp;#34;.....&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;you can&amp;rsquo;t simply do &lt;code>l[0][0] = 'X'&lt;/code>, because python strings are immutable. We
could define a new string and assign it to &lt;code>l[0]&lt;/code>, or we could change the input
to:&lt;/p></description></item><item><title>Advent of Code 2024: Day 5</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-5/</link><pubDate>Sun, 08 Dec 2024 23:24:27 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-5/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/5">Day #5&lt;/a> puzzle.&lt;/p>
&lt;p>It is a topological sort problem, plain and simple.&lt;/p>
&lt;p>In part one all we care about is whether certain input sequences are valid,
within the sort constraints. It&amp;rsquo;s very straightforward to verify that by
exhaustively checking all constraints (&amp;ldquo;edges&amp;rdquo;):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_correct&lt;/span>(update, edges):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> position &lt;span style="color:#f92672">=&lt;/span> defaultdict(&lt;span style="color:#66d9ef">lambda&lt;/span>: sys&lt;span style="color:#f92672">.&lt;/span>maxsize, {node: i &lt;span style="color:#66d9ef">for&lt;/span> (i, node) &lt;span style="color:#f92672">in&lt;/span> enumerate(update)})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (first, second) &lt;span style="color:#f92672">in&lt;/span> edges:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> first &lt;span style="color:#f92672">in&lt;/span> update &lt;span style="color:#f92672">and&lt;/span> second &lt;span style="color:#f92672">in&lt;/span> update &lt;span style="color:#f92672">and&lt;/span> position[first] &lt;span style="color:#f92672">&amp;gt;&lt;/span> position[second]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>position&lt;/code> is a dictionary representing in which index (position) each element
occurs. I make use of a &lt;code>defaultdict&lt;/code> with a very large value set by default
(instead of a vanilla &lt;code>dict&lt;/code>) to avoid the need to explicitly check for element
presence.&lt;/p></description></item><item><title>Advent of Code 2024: Day 4</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-4/</link><pubDate>Fri, 06 Dec 2024 11:44:39 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-4/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/4">Day #4&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty typical 2D matrix search problem, or a graph search problem, if
you will.&lt;/p>
&lt;p>The problem is naturally unraveled into the following searches:&lt;/p>
&lt;ul>
&lt;li>horizontally&lt;/li>
&lt;li>horizontally, reversed&lt;/li>
&lt;li>vertically&lt;/li>
&lt;li>vertically, reversed&lt;/li>
&lt;li>diagonally, all 4 directions (NW, NE, SW, SE)&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s possible to write a single pair of for loops that addresses the general
case. The (classic) idea is to think of all 8 compass directions to move along
the matrix:&lt;/p></description></item><item><title>Advent of Code 2024: Day 3</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-3/</link><pubDate>Tue, 03 Dec 2024 16:41:23 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-3/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/3">Day #3&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty typical regex problem.
To choose not to use regex is to endeavour in pain.&lt;/p>
&lt;p>The regex for part one to extract all occurrences of &lt;code>mul&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mul\(\d+,\d+\)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that with &lt;code>r&lt;/code> there is no need to escape the backslashes in Python.&lt;/p>
&lt;p>Later on I extract the numbers with &lt;code>r'\d+'&lt;/code>.&lt;/p>
&lt;p>If we really wanted we could do everything with a single regex by using
capturing groups, however it would become less readable.&lt;/p></description></item><item><title>Advent of Code 2024: Day 2</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-2/</link><pubDate>Tue, 03 Dec 2024 01:15:00 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-2/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/2">Day #2&lt;/a> puzzle.&lt;/p>
&lt;p>The first part is straightforward. It felt right to use &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.pairwise">&lt;code>pairwise&lt;/code>&lt;/a> to compute the differences between each adjacent pair:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>diffs &lt;span style="color:#f92672">=&lt;/span> [(b &lt;span style="color:#f92672">-&lt;/span> a) &lt;span style="color:#66d9ef">for&lt;/span> (a,b) &lt;span style="color:#f92672">in&lt;/span> pairwise(map(int, line&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)))]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we combine it with &lt;code>all&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_safe&lt;/span>(diffs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> all(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> diffs) &lt;span style="color:#f92672">or&lt;/span> all(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> diffs)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that it is necessary to use two &lt;code>all&lt;/code> expressions. It feels tempting to do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>all(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">or&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> diffs)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;however that&amp;rsquo;s incorrect. For example: &lt;code>diffs = [1, -1, 1, -1]&lt;/code> with an input
such as &lt;code>[1, 2, 1, 2]&lt;/code> would pass the test even though it shouldn&amp;rsquo;t.&lt;/p></description></item><item><title>Advent of Code 2024: Day 1</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-1/</link><pubDate>Sun, 01 Dec 2024 22:29:19 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-1/</guid><description>&lt;p>Refer to the &lt;a href="https://perrotta.dev/2022/01/advent-of-code/">previous post&lt;/a> about AoC,
and to the &lt;a href="https://github.com/thiagowfx/adventofcode">git repository&lt;/a> with my
solutions in Python 3.&lt;/p>
&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/1">Day #1&lt;/a> puzzle.&lt;/p>
&lt;p>This is just a warm-up.&lt;/p>
&lt;p>Given two lists of integers, iterate over them and sum the absolute difference
between each pair. &lt;code>zip&lt;/code> + &lt;code>sum&lt;/code> is the perfect pair&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for the job.&lt;/p>
&lt;p>Part two: iterate over the left list whilst accumulating how often the element
appears in the right list. &amp;ldquo;How often&amp;rdquo; has, almost always, the smell of a
&lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter">&lt;code>Counter&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Advent of Code</title><link>https://perrotta.dev/2022/01/advent-of-code/</link><pubDate>Fri, 28 Jan 2022 17:44:00 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/advent-of-code/</guid><description>&lt;p>Last year I found out about &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>.&lt;/p>
&lt;h2 id="you-said-what">You said what?&lt;/h2>
&lt;p>&lt;strong>Advent of Code&lt;/strong> by &lt;a href="http://was.tl/">Eric Wastl&lt;/a> happens every year since 2015, every December from the 1st to
the 25th. Each day there&amp;rsquo;s a new programming challenge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> split into two
parts. The first part tends to be easier than the second one. The second part
usually builds upon the first one, being a follow-up task that requires more
steps and/or with a higher degree of complexity. You can&amp;rsquo;t always reuse the
bits from the first part to solve the second one though.&lt;/p></description></item></channel></rss>