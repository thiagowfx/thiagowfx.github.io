<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Classics on Not Just Serendipity</title><link>https://www.perrotta.dev/tags/classics/</link><description>Recent content in Classics on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Fri, 03 Apr 2015 17:20:19 +0000</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/classics/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing Haiku from an existing linux</title><link>https://www.perrotta.dev/2015/04/installing-haiku-from-an-existing-linux/</link><pubDate>Fri, 03 Apr 2015 17:20:19 +0000</pubDate><guid>https://www.perrotta.dev/2015/04/installing-haiku-from-an-existing-linux/</guid><description>&lt;h2 id="what8217s-haiku-in-the-first-place">What’s Haiku in the first place?&lt;/h2>
&lt;p>It is an operating system, period. What might cause a small surprise is that it is not based either on Linux or on BSD — and yet it is (probably) runnable in your modern computer/laptop!&lt;/p></description><content:encoded><![CDATA[<h2 id="what8217s-haiku-in-the-first-place">What’s Haiku in the first place?</h2>
<p>It is an operating system, period. What might cause a small surprise is that it is not based either on Linux or on BSD — and yet it is (probably) runnable in your modern computer/laptop!</p>
<p>What I most like on it is that the system is integrated with the GUI, so the end user gets a nice experience. This is not so common as it sounds: most Linux distributions are simply a collection of programs and utilities put together in one place, but they are not necessarily integrated — however, <strong>you</strong> can integrate them. This makes all the difference between user-friendly and user-centered paradigms<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Anyway, Haiku is simple, so for me this post is more a hobby than something useful that I will use in the future; however, I find that knowing about more and more about different operating systems has its own advantages.</p>
<p>For more, see <!-- raw HTML omitted --><a href="https://www.haiku-os.org/about">https://www.haiku-os.org/about</a><!-- raw HTML omitted -->.</p>
<h2 id="installing-haiku">Installing Haiku</h2>
<p><strong>Note:</strong> most of those instructions come from <a href="https://www.haiku-os.org/guides/installing_haiku_image_disk_partition">here</a>. Also, thanks David Couzelis for kindly giving me some advice and pointing me out to them.</p>
<ol>
<li>Get Haiku. You can do it either from <a href="https://www.haiku-os.org/get-haiku">here</a>, or get nightly releases from <a href="http://download.haiku-os.org/nightly-images/x86_gcc2_hybrid/">here</a>. I personally recommend the nightly releases; I first installed the latest non-nightly one, but later on I discovered that is was very old (circa 2012): it didn’t even have a package manager.</li>
<li>Which image should you download? In this post, I am assuming we’ll install Haiku directly to a (real) disk, so I’m downloading the <strong>raw</strong> image. Actually, the <strong>anyboot</strong> image can also be downloaded — and this is the one you will get if you opted for a non-nightly version; however, the anyboot image will be converted to a raw one in step 3 before we proceed. So, skip the next step if you downloaded the raw image.</li>
<li>Got your anyboot image? Now, convert it to raw (run this from a bash compatible shell):</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>haiku-anyboot.image of<span style="color:#f92672">=</span>haiku.raw bs<span style="color:#f92672">=</span>1M skip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#66d9ef">$(</span>od -j <span style="color:#ae81ff">454</span> -N4 -i -A n haiku-anyboot.image<span style="color:#66d9ef">)</span> / 2048<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>$ dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/zero of<span style="color:#f92672">=</span>haiku.raw bs<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> seek<span style="color:#f92672">=</span><span style="color:#ae81ff">506</span> count<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span> conv<span style="color:#f92672">=</span>notrunc
</span></span></code></pre></div><p><strong>Update (2022)</strong>: These days <code>dd</code> supports <code>status=progress</code> to display the image writing progress.</p>
<ol start="4">
<li>Now that we got a raw image, we are writing it directly to a disk partition. First things first: find 3GB or more of free space in your disk. Then create room for a partition in there (for example, with <em>fdisk</em> or <em>gparted)</em>. Got it? Now create a partition in there. I’ll assume the partition is <code>/dev/sda42</code>. Please change 42 for the appropriate number in your case.</li>
<li>Copy the raw image to the partition (this should be done as ROOT); <strong>WARNING</strong>: double check the partition and the disk number, otherwise you might lose data.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>haiku.raw of<span style="color:#f92672">=</span>/dev/sda42 bs<span style="color:#f92672">=</span>1M conv<span style="color:#f92672">=</span>notrunc
</span></span></code></pre></div><ol start="6">
<li>Make the installation <em>bootable</em>: you’ll need to compile and run the <em>makebootabletiny</em> program, which can be downloaded from <a href="https://www.haiku-os.org/guides/installing_haiku_image_disk_partition">here</a>. It is a simple C program, so:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ gcc makebootabletiny.c -o makebootabletiny
</span></span><span style="display:flex;"><span>% ./makebootabletiny /dev/sda42  <span style="color:#75715e"># this one: as ROOT</span>
</span></span></code></pre></div><ol start="7">
<li>Make your bootloader know about Haiku. If you’re using <code>grub2</code>z, you can add something such as the following lines to <code>/etc/grub.d/40_custom</code>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>menuentry <span style="color:#e6db74">&#34;Haiku OS&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    set root<span style="color:#f92672">(</span>hd0,42<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    chainloader +1
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ol start="8">
<li>Then run as root: <em>grub-mkconfig -o /boot/grub/grub.cfg</em></li>
</ol>
<p><strong>Done!</strong> Now you should be able to boot into Haiku.</p>
<h2 id="now-what">Now what?</h2>
<p>This post is not a review of Haiku, so I’m stopping here. However, if I write a review about Haiku, I’ll do that from Haiku 🙂.</p>
<p>I’m just leaving this here: <a href="https://www.haiku-os.org/slideshows/haiku-1">https://www.haiku-os.org/slideshows/haiku-1</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>By the way, Arch Linux is user-centered, which means that you’re supposed to integrate the system as you wish. If you don’t wish that then you’re screwed anyway, so go away 🙂&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>The Eudyptula Challenge</title><link>https://www.perrotta.dev/2015/01/the-eudyptula-challenge/</link><pubDate>Wed, 07 Jan 2015 12:54:40 +0000</pubDate><guid>https://www.perrotta.dev/2015/01/the-eudyptula-challenge/</guid><description>Update: I stopped at task 06 on February. Little seems to have stopped responding e-mails. Which is sad, because I was liking those tasks =/
I am participating in the Eudyptula Challenge, which is not something exactly new, but it is as able to get you out of your comfort zone as if it were1.
It puts you into the mind of a Linux Kernel developer, where you are required to write and submit patches and to complete some tasks.</description><content:encoded><![CDATA[<p><strong>Update: I stopped at task 06 on February. Little seems to have stopped responding e-mails. Which is sad, because I was liking those tasks =/</strong></p>
<p>I am participating in the <a href="http://eudyptula-challenge.org/">Eudyptula Challenge</a>, which is not something exactly new, but it is as able to get you out of your comfort zone as if it were<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>It puts you into the mind of a Linux Kernel developer, where you are required to write and submit patches and to complete some tasks.</p>
<p>Subscribing to the challenge is a mini challenge itself<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>: you must write to <em>little</em> (the superuser behind the thing) an e-mail in plain text. This means: NO HTML. This looks like a silly requirement, but it’s the way how the (real) Linux developers work, and it is actually slightly fancier than you probably imagine. <em>Little</em> himself recommends that the participants don&rsquo;t use either the Gmail web interface or Outlook.</p>
<p>I intend to document here my own experiences with Eudyptula<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<h2 id="setting-up">Setting up</h2>
<p>The first thing I went after was a decent and updated Linux distro; doing the challenge within a Linux rather than anything else offers a better experience. Zero effort here, as I’ve already had Arch Linux<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> installed.</p>
<p>Next: a good text editor. Wait…why not two? I am using vim to compose e-mails, and emacs to write code.</p>
<p>What’s next? Oh yes…a decent <code>sendmail</code> program. It is not mandatory to have one of those, but it eases a lot the process of writing e-mail in plain text. I grabbed <code>msmtp</code> plus its MTA. Writing a config file for it is pretty straightforward.</p>
<p>And now I was ready: I subscribed to the challenge.</p>
<h2 id="the-task-01">The task #01</h2>
<p>Hours later, <!-- raw HTML omitted -->little<!-- raw HTML omitted --><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> acknowledged my e-mail and sent me the instructions for the first task.</p>
<blockquote>
<p>I should write my first module for the Linux Kernel.</p>
</blockquote>
<p>A good start. <!-- raw HTML omitted -->I didn’t even know how to begin, oh no!<!-- raw HTML omitted --></p>
<p>The task was to write a module that would write ‘Hello World’ to the debug level log of the running kernel when loaded.</p>
<p>First, I had to install some dependencies to be able to compile a couple of C programs. Actually, the <code>base-devel</code> group from Arch already contained most of the things I would need. <code>linux-headers</code> and <code>bc</code> were also relevant.</p>
<p>My first module, written in C<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>, looked like this in the end:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_AUTHOR</span>(<span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_DESCRIPTION</span>(<span style="color:#e6db74">&#34;A gentle Hello World module&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MODULE_LICENSE</span>(<span style="color:#e6db74">&#34;GPL&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">hello_init</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printk</span>(KERN_DEBUG <span style="color:#e6db74">&#34;Hello world!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">hello_cleanup</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printk</span>(KERN_DEBUG <span style="color:#e6db74">&#34;Goodbye World!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_init</span>(hello_init);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module_exit</span>(hello_cleanup);
</span></span></code></pre></div><p>I didn’t get it right in my first trial, of course. In particular, I wrote ‘Hello World’ to the INFO log level, using <code>KERN_INFO</code>, instead of <code>KERN_DEBUG</code>.</p>
<p>And I also needed a <code>Makefile</code> to be able to compile it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span>obj-m <span style="color:#f92672">+=</span> hello.o
</span></span><span style="display:flex;"><span>KERNEL <span style="color:#f92672">?=</span> /lib/modules/<span style="color:#66d9ef">$(</span>shell uname -r<span style="color:#66d9ef">)</span>/build
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    make -C <span style="color:#66d9ef">$(</span>KERNEL<span style="color:#66d9ef">)</span> M<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> modules
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    make -C <span style="color:#66d9ef">$(</span>KERNEL<span style="color:#66d9ef">)</span> M<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> clean
</span></span></code></pre></div><p>The <code>Makefile</code> wasn’t right in my first trial, either. Another requirement of this task was that this file should provide an environment variable, as an alternative location for the build directory of the kernel, opposed to being a hard coded value. I provided one from the beginning, but the way I wrote it was slightly wrong.</p>
<p>Now, this code didn’t just pop out of my head out of nothing. Although I know how to program in C, I never did kernel programming before. I had to look up for some documentation about how to write a module. It wasn’t super straightforward, because I found many documentation sources about writing modules for the Linux 2.6.x version, which is outdated now<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>, and the modern version of writing modules is a bit different from it.</p>
<p>Also, I was careful not to accidentally find a solution for this task directly. Of course, some people have already done it, and they could have written something about their experiences, as I am doing right now.</p>
<p>Anyways, after writing those two files and testing that they really worked as expected, I loaded my freshly built module. And yay, a simple <code>dmesg</code> would reveal my hello message out there. It was really cool to see it worked:</p>
<pre tabindex="0"><code class="language-none" data-lang="none">thiago@archpad ~//01 % sudo modinfo hello.ko
filename:       /home/thiago//01/hello.ko
license:        GPL
description:    A gentle Hello World module
author:         Thiago Perrotta
depends:
vermagic:       3.17.6-1-ARCH SMP preempt mod_unload modversions
</code></pre><p>After that, I’ve sent everything I should to <!-- raw HTML omitted -->little<!-- raw HTML omitted -->, and today I got its reply, about the second task. So, let’s go…</p>
<h2 id="what-have-i-learned-with-this-task">What have I learned with this task?</h2>
<ul>
<li>how to write a Makefile to compile a kernel module</li>
<li>how to execute shell commands within a Makefile</li>
<li>how to use an environment variable within a Makefile</li>
<li>how to write e-mails in plain text and send them with msmtp</li>
<li>how to send attachments <!-- raw HTML omitted -->without<!-- raw HTML omitted --> base64 encoding<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup></li>
<li>how to load, unload and get information about modules</li>
<li>modules are so dynamic and easy to load, huh? Like USB devices. I would never imagine that.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>It is also a excuse for me to write something here :-)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Pun intended.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I can’t write this in one shot. Really. Eudi←yptull←a. <!-- raw HTML omitted -->EUDYPTULA<!-- raw HTML omitted -->.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>The distro that will conquer the <!-- raw HTML omitted -->moon<!-- raw HTML omitted -->.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Which turned out to be a bot.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Damn, everything will be written in C from now on. That’s what we get with kernel programming, I guess.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Only lazy or paranoid Linux sysadmins will tell you otherwise 😉&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>This turned out to be the hardest thing of this task, yet it wasn’t even part of it.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>My first ebuild</title><link>https://www.perrotta.dev/2014/09/my-first-ebuild/</link><pubDate>Sun, 28 Sep 2014 03:24:00 +0000</pubDate><guid>https://www.perrotta.dev/2014/09/my-first-ebuild/</guid><description>Ebuilds are not evil
— Larry, the Cow
From now on, this will be my overlay repository: https://github.com/thiagowfx/overlay
I might change its name in the future, however it will probably remain on GitHub. From my experience with this blog, I realized it would be better to leave a copy of this ebuild here:
# Copyright 1999-2014 Gentoo Foundation # Distributed under the terms of the GNU General Public License v2 # $Header: $ EAPI=&amp;#34;5&amp;#34; inherit font DESCRIPTION=&amp;#34;A font specially designed for comfortably reading on any computer or device&amp;#34; HOMEPAGE=&amp;#34;http://www.</description><content:encoded><![CDATA[<blockquote>
<p>Ebuilds are not evil</p>
<p>— <!-- raw HTML omitted -->Larry, the Cow<!-- raw HTML omitted --></p>
</blockquote>
<p><del>From now on, this will be my overlay repository: <a href="https://github.com/thiagowfx/overlay">https://github.com/thiagowfx/overlay</a></del></p>
<p>I might change its name in the future, however it will probably remain on GitHub. From my experience with this blog, I realized it would be better to leave a copy of this ebuild here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Copyright 1999-2014 Gentoo Foundation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Distributed under the terms of the GNU General Public License v2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># $Header: $</span>
</span></span><span style="display:flex;"><span>EAPI<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;5&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>inherit font
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DESCRIPTION<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A font specially designed for comfortably reading on any computer or device&#34;</span>
</span></span><span style="display:flex;"><span>HOMEPAGE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.huertatipografica.com/fonts/bitter-ht&#34;</span>
</span></span><span style="display:flex;"><span>SRC_URI<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.fontsquirrel.com/fonts/download/</span><span style="color:#e6db74">${</span>PN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>LICENSE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;OFL&#34;</span>
</span></span><span style="display:flex;"><span>SLOT<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>KEYWORDS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;amd64 ~arm ~arm64 ~ppc ~ppc64 x86&#34;</span>
</span></span><span style="display:flex;"><span>IUSE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>HDEPEND<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app-arch/unzip&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>FONT_SUFFIX<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;otf&#34;</span>
</span></span><span style="display:flex;"><span>S<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>WORKDIR<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>src_unpack<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  mv <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>DISTDIR<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>A<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>DISTDIR<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>A<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip&#34;</span>
</span></span><span style="display:flex;"><span>  unpack <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>A<span style="color:#e6db74">}</span><span style="color:#e6db74">.zip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>src_install<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  FONT_S<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>WORKDIR<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> font_src_install
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>My <strong>conclusion</strong>? Writing ebuilds is nice, very nice (yeah, more complex than writing PKGBUILDs, I know, but at least this complexity is justified).</p>
<p><em>Edit</em>: Thanks Buss for pointing me out a small  error (<code>RDEPEND</code>, instead of <code>HDEPEND</code>).</p>
]]></content:encoded></item><item><title>Instalando o Gentoo a partir do Arch</title><link>https://www.perrotta.dev/2014/05/instalando-o-gentoo-a-partir-do-arch/</link><pubDate>Thu, 01 May 2014 02:20:00 +0000</pubDate><guid>https://www.perrotta.dev/2014/05/instalando-o-gentoo-a-partir-do-arch/</guid><description>&lt;p>&lt;strong>TL;DR&lt;/strong>: pequena TODO list sobre como instalar o Gentoo. Você vai passar 90% do seu tempo olhando para &lt;strong>texto&lt;/strong> dando scroll na tela (processo demorado…).&lt;/p></description><content:encoded><![CDATA[<p><strong>TL;DR</strong>: pequena TODO list sobre como instalar o Gentoo. Você vai passar 90% do seu tempo olhando para <strong>texto</strong> dando scroll na tela (processo demorado…).</p>
<p>Esse é o método mais tradicional possível (e que me interessa) que pude constatar. Adapte-o para as suas próprias necessidades:</p>
<ul>
<li>
<p>Boote em um ambiente com o Arch (na verdade, você pode fazer isso a partir de qualquer distro decente).</p>
</li>
<li>
<p>Crie uma partição <code>/</code>, do tipo ext4, para acomodar a instalação do Gentoo. De preferência, coloque um label decente lá. Sugestões de ferramentas para isso: <code>cfdisk</code> ou <code>gparted</code>.</p>
</li>
<li>
<p>Monte essa partição em <code>/mnt/gentoo</code>.</p>
</li>
<li>
<p>Continue a partir do <a href="http:www.gentoo.org/doc/en/handbook/handbook-amd64.xml?part=1&amp;chap=4">handbook</a> oficial do Gentoo – nesse caso, para a arquitetura amd64. No entanto, <!-- raw HTML omitted -->atenção<!-- raw HTML omitted -->. Use <a href="https:wiki.gentoo.org/wiki/Installation_alternatives">esse</a> guia para perceber quais etapas de instalação e configuração são diferentes (em relação a se estivéssemos instalando pelo método oficial, a partir do live environment do gentoo), mais especificamente <!-- raw HTML omitted -->da parte 4 à parte 6<!-- raw HTML omitted -->.</p>
</li>
<li>
<p>Baixe o <code>PKGBUILD</code> <code>gentoo-mirrorselect</code> do AUR.</p>
</li>
<li>
<p>Use <code>mirrorselect -i -o</code> e então selecione interativamente os mirrors mais próximos da sua localização atual. Copie o valor da variável <code>GENTOO_MIRRORS</code> para o final do seu <code>/mnt/gentoo/etc/portage/make.conf</code>.</p>
</li>
<li>
<p>Copie o seu <code>/etc/resolv.conf</code> para <code>/mnt/gentoo/etc/resolv.conf</code>. Isso é <a href="https:bbs.archlinux.org/viewtopic.php?id=95865">importante</a> para ter conectividade dentro do ambiente de chroot.</p>
</li>
<li>
<p><code>CFLAGS</code> que recomendo para o <code>/etc/portake/make.conf</code> (<!-- raw HTML omitted -->helper<!-- raw HTML omitted -->):</p>
</li>
</ul>
<pre tabindex="0"><code>-march=native -O2 -pipe
</code></pre><ul>
<li>
<p>A partir daqui, nada especial, apenas continue seguindo o handbook do gentoo, até a parte do bootloader.</p>
</li>
<li>
<p>Chegando na parte do bootloader, optei por deixar o Arch gerenciá-lo. Nesse caso, basta rodar um típico <code>grub-mkconfig -o /boot/grub/grb.cfg</code> que o Gentoo deverá ser automaticamente detectado (supondo que o pacote <code>os-prober</code> esteja instalado).</p>
</li>
<li>
<p>Configure a rede no Gentoo. Isso é bastante específico, mas o procedimento é bem parecido com a configuração da rede no Arch. A única questão é que, ao dar emerge no <code>wpa_supplicant</code> (no caso de você utilizar Wi-fi), vai demorar bastante até todas as dependências serem instaladas (esse é o ponto principal que me afastou do Gentoo até hoje. Sem pacotes binários, ter que compilar tudo localmente…ao menos, se no final a otimização do sistema for maior, poderia ter valido mais a pena.)</p>
</li>
<li>
<p>Teste o Gentoo durante uma semana e diga o que você achou dele 😉</p>
</li>
<li>
<p>Decida se você gosta mais do Gentoo ou do Arch. Isso vale tanto para o sistema, tanto para a comunidade. Não tenho ideia de como seja a comunidade do Gentoo (a do Arch eu já tinha uma boa noção de como era mesmo antes de ter o sistema instalado).</p>
</li>
</ul>
<p>Valeu pessoal. Como sou 100% newbie no Gentoo, apreciarei quaisquer dicas! (Enquanto as dicas não aparecem, Wiki Pages e Forums Threads me esperam). Sabe, é bom, de vez em quando, ser newbie em alguma coisa. Claro que ser expert / muito bom / hacker em algumas aplicações é ótimo, mas eu acredito na importância de possuir uma boa base de conhecimento em geral (não necessariamente apenas para fins acadêmicos ou financeiros, mas também para satisfazer a mente: desafios são importantes!).</p>
<p>Ah, mais dois comentários:</p>
<ul>
<li>
<p>Terminando de escrever esse post e de editá-lo, a compilação dos (130) pacotes que o <code>wpa_supplicant</code> puxou não chegou nem na metade… (eu teria instalado uns três ou quatro Archs automatizados nesse tempo – tá bom, não vale comparar pacotes binários com código-fonte, eu sei)</p>
</li>
<li>
<p>Esse é o meu terceiro ou quarto post utilizando o <code>org2blog</code> (do emacs). Já ficou bastante claro para mim que vou passar a usá-lo de maneira fixa. O único problema é que eu ainda não sei a sintaxe de formatação dele direito, é muita informação. Não é nem que não seja intuitiva, mas já tem LaTeX, BBCode, Markdown, aí eu tenho que aprender mais uma markup language. Mas, provavelmente vou me submeter a isso, o <strong>orgmode</strong> é sensacional para <em>management</em> em geral.</p>
</li>
</ul>]]></content:encoded></item><item><title>Recovery típico via USB</title><link>https://www.perrotta.dev/2014/04/recovery-t%C3%ADpico-via-usb/</link><pubDate>Fri, 18 Apr 2014 16:38:36 +0000</pubDate><guid>https://www.perrotta.dev/2014/04/recovery-t%C3%ADpico-via-usb/</guid><description>Meu computador não boota! E agora? Possíveis sintomas: tela preta congelada, tela de splash congelada, systemd travado, upstart travado, corrupção (fsck não ficou satisfeito), bootloader (grub, syslinux, EFI) mal configurado (ou não configurado) Obter uma distro de Linux e gravá-la num USB Flash Drive (pendrive). Meu gosto pessoal: System rescue cd, Parted magic, Slitaz ou Arch Linux. Bootar a distro e imediatamente abrir um console / emulador de terminal. Com interface gráfica ou não, a gosto.</description><content:encoded><![CDATA[<ol>
<li>Meu computador não boota! E agora? Possíveis sintomas: tela preta congelada, tela de splash congelada, <code>systemd</code> travado, <code>upstart</code> travado, corrupção (<code>fsck</code> não ficou satisfeito), bootloader (grub, syslinux, EFI) mal configurado (ou não configurado)</li>
<li>Obter uma distro de Linux e gravá-la num USB Flash Drive (pendrive). Meu gosto pessoal: System rescue cd, Parted magic, Slitaz ou Arch Linux.</li>
<li>Bootar a distro e imediatamente abrir um console / emulador de terminal. Com interface gráfica ou não, a gosto.</li>
<li><code>fdisk -l</code> para detectar os discos do computador. Detectar o disco cujo sistema está com problema. Geralmente o que contém a partição <code>/boot</code> ou <code>/</code>. Identificar as partições também é usualmente importante.</li>
<li>Se você precisar formatar alguma partição, use <code>cfdisk</code> ou <code>parted</code>. Exemplo: <code>cfdisk /dev/sda1</code>.</li>
<li>Se você precisar (re)criar algum <em>filesystem</em>, use <code>mkfs</code> (por exemplo, <code>mkfs.ext4 -L &quot;archroot&quot; /dev/sda1</code>).</li>
<li>Para (re)montar o seu sistema de arquivos: (por exemplo) <code>mount /dev/sda1 /mnt</code>.</li>
<li><code>chroot</code> no sistema que você acabou de montar: <code>chroot /mnt</code>.</li>
<li>Para recuperar (na verdade, gerar novamente) o arquivo de configuração do grub <strong>dentro do chroot</strong>: <code>grub-mkconfig -o /boot/grub/grub.cfg</code>.</li>
<li>Para reinstalar o grub (<strong>fora do chroot</strong>!), use <code>grub-install</code>.</li>
<li>Explorar o diretório <code>/etc/systemd/system</code>.</li>
</ol>
<p>Usualmente um desses passos é um caminho para resolver o problema. No final das contas, as coisas são bastante específicas, dependem do contexto.</p>
]]></content:encoded></item><item><title>Testando uma ISO no Linux sem o VirtualBox</title><link>https://www.perrotta.dev/2014/01/testando-uma-iso-no-linux-sem-o-virtualbox/</link><pubDate>Tue, 07 Jan 2014 16:22:01 +0000</pubDate><guid>https://www.perrotta.dev/2014/01/testando-uma-iso-no-linux-sem-o-virtualbox/</guid><description>Não imagino que seja incomum o seguinte cenário:
News: uma nova versão da distro Debisuse está disponível. Usuário: vou baixar a ISO, criar uma máquina virtual no VirtualBox (ou no VMWare, vai que), Bootar a ISO a partir dela. Isso tudo é muito mais prático do que gravar a ISO num Flash (Pen) Drive e então testá-la com um novo boot. No entanto, podemos ser mais práticos ainda se utilizarmos, para isso, um único comando, com o qemu!</description><content:encoded><![CDATA[<p>Não imagino que seja incomum o seguinte cenário:</p>
<ul>
<li>News: uma nova versão da distro <em>Debisuse</em> está disponível.</li>
<li>Usuário: vou baixar a ISO,</li>
<li>criar uma máquina virtual no <em>VirtualBox</em> (ou no <em>VMWare</em>, vai que),</li>
<li>Bootar a ISO a partir dela.</li>
</ul>
<p>Isso tudo é muito mais prático do que gravar a ISO num Flash (Pen) Drive e então testá-la com um novo <em>boot</em>. No entanto, podemos ser mais práticos ainda se utilizarmos, para isso, <strong>um único comando</strong>, com o <code>qemu</code>! O comando típico é:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>qemu-system-x86_64 --enable-kvm -m 512M -cdrom ~/Downloads/debisuse-latest.iso
</span></span></code></pre></div><p>Se sua arquitetura for de 32 bits, você vai querer <em>qemu-system-i386</em>. O parâmetro <em>m</em> regula a quantidade de memória a ser alocada para a máquina virtual.</p>
<p>Para utilizar o QEMU, você vai precisar encontrar o pacote adequado na sua distro.</p>
<ul>
<li>No Debian/Ubuntu e openSUSE: <code>qemu</code> e <code>kvm</code> (não testei, mas tudo indica que são esses)</li>
<li>No Arch: <code>qemu</code> (veja https://wiki.archlinux.org/index.php/Kvm e https://wiki.archlinux.org/index.php/QEMU)</li>
</ul>
<p>OBS.: O <em>KVM</em> é para deixar a execução ainda mais rápida. Mas ele não é obrigatório, OK? Para poder usá-lo existe uma série de peculiaridades, tais como habilitar as opções de virtualização na sua <em>BIOS</em> (isso é mais comum em laptops) e assegurar-se de que o módulo adequado do kernel foi carregado (geralmente <code>kvm\_intel</code> ou <code>kvm\_amd</code>). Você pode conferir isso com o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>lsmod | grep kvm
</span></span></code></pre></div><p>Se ver alguma saída, existem boas chances de o módulo correto do <em>KVM</em> já ter sido carregado pelo seu kernel. Para fins de comparação, essa é a minha saída:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kvm_intel <span style="color:#ae81ff">131191</span> <span style="color:#ae81ff">3</span> 
</span></span><span style="display:flex;"><span>kvm <span style="color:#ae81ff">388773</span> <span style="color:#ae81ff">1</span> kvm_intel
</span></span></code></pre></div><p><em>Happy hacking!</em></p>
]]></content:encoded></item></channel></rss>