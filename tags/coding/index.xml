<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet type="text/xsl" href="https://perrotta.dev//rss.xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/coding/</link><description>Recent content in Coding on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Sat, 13 Sep 2025 00:17:37 +0200</lastBuildDate><atom:link href="https://perrotta.dev/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode #20: Valid Parentheses</title><link>https://perrotta.dev/2025/09/leetcode-%2320-valid-parentheses/</link><pubDate>Sat, 13 Sep 2025 00:17:37 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2320-valid-parentheses/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/valid-parentheses/">LeetCode #20: Valid
Parentheses&lt;/a>:&lt;/p>
&lt;p>&lt;strong>Stack&lt;/strong>!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">isValid&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">s&lt;/span>: &lt;span style="color:#e5c07b">str&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stack&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Example 4:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># ( [&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#98c379">&amp;#39;(&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;)&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;[&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;]&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;{&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;}&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># always push open brackets&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> [&lt;span style="color:#98c379">&amp;#39;(&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;[&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;{&amp;#39;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">stack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># elif c in [&amp;#39;)&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;}&amp;#39;]:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">stack&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">co&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">stack&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">co&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#98c379">&amp;#39;(&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">co&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#98c379">&amp;#39;[&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">co&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#98c379">&amp;#39;{&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">stack&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Previously, two years ago, I did this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">isValid&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">s&lt;/span>: &lt;span style="color:#e5c07b">str&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">match&lt;/span>(&lt;span style="color:#e06c75">c&lt;/span>, &lt;span style="color:#e06c75">d&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;)&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;]&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">or&lt;/span> (&lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;}&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#98c379">&amp;#39;[{(&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> &lt;span style="color:#e06c75">c&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#98c379">&amp;#39;)}]&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">p&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">d&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">pop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">not&lt;/span> &lt;span style="color:#c678dd">match&lt;/span>(&lt;span style="color:#e06c75">d&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">p&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #283: Move Zeroes</title><link>https://perrotta.dev/2025/09/leetcode-%23283-move-zeroes/</link><pubDate>Fri, 12 Sep 2025 23:07:57 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23283-move-zeroes/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/move-zeroes/">LeetCode #283: Move Zeroes&lt;/a>:&lt;/p>
&lt;h2 id="low-stress">Low-stress&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">moveZeroes&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> Do not return anything, modify nums in-place instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> [&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or even:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">moveZeroes&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> Do not return anything, modify nums in-place instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">non_zeroes&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">non_zeroes&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> [&lt;span style="color:#d19a66">0&lt;/span>] &lt;span style="color:#56b6c2">*&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">non_zeroes&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s in-place, but it creates a new list – O(n) memory.&lt;/p>
&lt;p>We can do better, with O(1) memory.&lt;/p>
&lt;h2 id="in-place">In-place&lt;/h2>
&lt;p>&lt;strong>Two pointers&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>i&lt;/code> scans the entire list once&lt;/li>
&lt;li>&lt;code>j&lt;/code> tracks the position of the next zero to swap&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">moveZeroes&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> Do not return anything, modify nums in-place instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 5, 0, 0, 1, 0, 3, 12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">is&lt;/span> &lt;span style="color:#56b6c2">not&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>], &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">is&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #1: Two Sum</title><link>https://perrotta.dev/2025/09/leetcode-%231-two-sum/</link><pubDate>Thu, 11 Sep 2025 16:09:32 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%231-two-sum/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/two-sum/description/">LeetCode #1: Two Sum&lt;/a>:&lt;/p>
&lt;p>Initially:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">twoSum&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">target&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> {&lt;span style="color:#e06c75">num&lt;/span>: &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># seek a + b == target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">target&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">index&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">keys&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> [&lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">a&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">b&lt;/span>]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this approach is that it fails for the &lt;code>nums = [3, 3], target = 6&lt;/code> input.&lt;/p>
&lt;p>Therefore we must assume a given &lt;code>num&lt;/code> may appear multiple times.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">twoSum&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">target&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">index&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#e5c07b">list&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">num&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">num&lt;/span>]&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># seek a + b == target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">target&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">index&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">keys&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> [&lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">a&lt;/span>][&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">b&lt;/span>][&lt;span style="color:#d19a66">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">a&lt;/span>]) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> [&lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">a&lt;/span>][&lt;span style="color:#d19a66">0&lt;/span>], &lt;span style="color:#e06c75">index&lt;/span>[&lt;span style="color:#e06c75">a&lt;/span>][&lt;span style="color:#d19a66">1&lt;/span>]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another way to solve it is with &lt;strong>two pointers&lt;/strong> in a sorted array:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">twoSum&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">target&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">numss&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">numss&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n1&lt;/span>, &lt;span style="color:#e06c75">n2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">numss&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>], &lt;span style="color:#e06c75">numss&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">n1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n2&lt;/span>) &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">n1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n2&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">elif&lt;/span> (&lt;span style="color:#e06c75">n1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n2&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">target&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n1&lt;/span>, &lt;span style="color:#e06c75">n2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">numss&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>], &lt;span style="color:#e06c75">numss&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> [&lt;span style="color:#e06c75">nums&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">index&lt;/span>(&lt;span style="color:#e06c75">n1&lt;/span>), &lt;span style="color:#e06c75">nums&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">index&lt;/span>(&lt;span style="color:#e06c75">n2&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #6: Zigzag Conversion</title><link>https://perrotta.dev/2025/09/leetcode-%236-zigzag-conversion/</link><pubDate>Wed, 10 Sep 2025 10:43:01 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%236-zigzag-conversion/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/zigzag-conversion/">LeetCode #6: Zigzag Conversion&lt;/a>:&lt;/p>
&lt;p>The first way to resolve this problem is to build the zigzag pattern
dynamically by performing its simulation.&lt;/p>
&lt;p>The second way is to discover the pattern that each row follows. This is the
approach I originally chose, as you can infer from my code comment annotations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">convert&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">s&lt;/span>: &lt;span style="color:#e5c07b">str&lt;/span>, &lt;span style="color:#e06c75">numRows&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 3 rows:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Row 0: from 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># |- 0, +4, +0, +4, +0, ... (sum: 4)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 4 rows:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Row 0: from 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># inc (numRows - 2) * 2 + 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># |- 0, +6, +0, +6, +0, ... (sum: 6 = (numRows - 1) * 2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Row 1: from 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># inc (numRows - 3) * 2 + 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># inc sum - the above&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># |- 1, +4, +2, +4, +2, ... (sum: 6 = (numRows - 1) * 2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Row 2: from 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># inc (numRows - 4) * 2 + 2 |- numRows - (j + 2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># inc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># |- 2, +2, +4, +2, +4, ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># base case: mySum is 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">numRows&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">mySum&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">numRows&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">numRows&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inc1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">numRows&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> (&lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>)) &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inc2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mySum&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">inc1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">inc1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">inc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">inc1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">inc2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">inc&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">inc1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The intermediate variable is named &lt;code>mySum&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> instead of &lt;code>sum&lt;/code> in order to avoid
shadowing the built-in &lt;code>sum&lt;/code> function.&lt;/p>
&lt;!-- TODO: Use a generator for inc. -->
&lt;!-- TODO: Zigzag simulation. -->
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Long live Perl (&lt;code>my @var;&lt;/code>).&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>LeetCode #151: Reverse Words in a String</title><link>https://perrotta.dev/2025/09/leetcode-%23151-reverse-words-in-a-string/</link><pubDate>Wed, 10 Sep 2025 00:22:18 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23151-reverse-words-in-a-string/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/reverse-words-in-a-string/">LeetCode #151: Reverse Words in a String&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">reverseWords&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">s&lt;/span>: &lt;span style="color:#e5c07b">str&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the following property of &lt;code>split()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#98c379">&amp;#39; blue sky &amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">split&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#98c379">&amp;#39;blue&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;sky&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It strips leading and trailing whitespace. Furthermore, it collates multiple
whitespace characters in the middle. &lt;code>.split(' ')&lt;/code> works as well. There&amp;rsquo;s no
need to call &lt;code>s.strip()&lt;/code>.&lt;/p></description></item><item><title>LeetCode #68: Text Justification</title><link>https://perrotta.dev/2025/09/leetcode-%2368-text-justification/</link><pubDate>Tue, 09 Sep 2025 00:37:44 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2368-text-justification/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/text-justification/">LeetCode #68: Text Justification&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>The problem is broken down into two parts: &lt;code>split_lines&lt;/code> and &lt;code>justify&lt;/code>.&lt;/li>
&lt;li>&lt;code>split_lines&lt;/code> is quite straightforward, greedy.&lt;/li>
&lt;li>&lt;code>justify&lt;/code>: watch out for uneven spaces; pretty chill otherwise.&lt;/li>
&lt;li>&lt;code>left_justify&lt;/code>: a special case for the last line.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">fullJustify&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">words&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">str&lt;/span>], &lt;span style="color:#e06c75">maxWidth&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">str&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">split_lines&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # -&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # [
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # [&amp;#34;this&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;an&amp;#34;],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # [&amp;#34;example, &amp;#34;of&amp;#34;, &amp;#34;text&amp;#34;],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # [&amp;#34;justification.&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_line&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_len&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">word&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">words&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">first_word&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#e06c75">next_len&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>) &lt;span style="color:#7f848e"># or len(next_line) == 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">next_len&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> (&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first_word&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)) &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">maxWidth&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_line&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_len&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> (&lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">first_word&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">next_line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_line&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">word&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">next_len&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">next_line&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">output&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">next_line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">left_justify&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> [&amp;#34;shall&amp;#34;, &amp;#34;be&amp;#34;] -&amp;gt; &amp;#34;shall be &amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> (&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> (&lt;span style="color:#e06c75">maxWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> (&lt;span style="color:#e5c07b">sum&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">w&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR, a bit easier to grasp:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># init = &amp;#39; &amp;#39;.join(words)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># return init + (&amp;#39; &amp;#39; * (maxWidth - len(init)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">justify&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # [&amp;#34;this&amp;#34;, &amp;#34;is&amp;#34;, &amp;#34;an&amp;#34;],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> #
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # -&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> #
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> # &amp;#34;this is an&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#7f848e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_non_spaces&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">sum&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">word&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#7f848e"># 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_spaces&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">maxWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">total_non_spaces&lt;/span> &lt;span style="color:#7f848e"># 16 - 8 = 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#7f848e"># only word, avoid division by zero next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">left_justify&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">spaces_per_word&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">total_spaces&lt;/span> &lt;span style="color:#56b6c2">//&lt;/span> (&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#7f848e"># 8 // (3 - 1) = 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">remainder&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">total_spaces&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> (&lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#7f848e"># uneven spaces&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">word&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>): &lt;span style="color:#7f848e"># last word should not insert spaces afterwards&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">spaces_per_word&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">remainder&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#98c379">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">remainder&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">ans&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [&amp;#34;example&amp;#34;, &amp;#34;of&amp;#34;, &amp;#34;text&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 16 - 13 = 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 3 // (3 - 1) = 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">split&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">split_lines&lt;/span>(&lt;span style="color:#e06c75">words&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># last line must be left justified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> [&lt;span style="color:#e06c75">justify&lt;/span>(&lt;span style="color:#e06c75">line&lt;/span>) &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">split&lt;/span>[:&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]] &lt;span style="color:#56b6c2">+&lt;/span> [&lt;span style="color:#e06c75">left_justify&lt;/span>(&lt;span style="color:#e06c75">split&lt;/span>[&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>])]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s the solution from the LLM. It boils down to the same approach, but it&amp;rsquo;s
more concise (perhaps at the expense of readability):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">fullJustify&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">words&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">str&lt;/span>], &lt;span style="color:#e06c75">maxWidth&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">str&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">num_of_letters&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">w&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">words&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">num_of_letters&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">w&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">cur&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">maxWidth&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># distribute spaces&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">maxWidth&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">num_of_letters&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">cur&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)] &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">cur&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>, &lt;span style="color:#e06c75">num_of_letters&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [], &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">cur&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#e06c75">w&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">num_of_letters&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">w&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># last line -&amp;gt; left-justified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">res&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">append&lt;/span>(&lt;span style="color:#98c379">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">join&lt;/span>(&lt;span style="color:#e06c75">cur&lt;/span>)&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ljust&lt;/span>(&lt;span style="color:#e06c75">maxWidth&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">res&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Today I learned&lt;/strong>: &lt;code>.ljust()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#98c379">&amp;#34;aa&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">ljust&lt;/span>(&lt;span style="color:#d19a66">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&amp;#39;aa &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#98c379">&amp;#34;aa&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">rjust&lt;/span>(&lt;span style="color:#d19a66">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">&amp;#39; aa&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#98c379">&amp;#34;aa&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">just&lt;/span>(&lt;span style="color:#d19a66">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Traceback&lt;/span> (&lt;span style="color:#e06c75">most&lt;/span> &lt;span style="color:#e06c75">recent&lt;/span> &lt;span style="color:#e06c75">call&lt;/span> &lt;span style="color:#e06c75">last&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">File&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;lt;python-input-2&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">module&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#98c379">&amp;#34;aa&amp;#34;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">just&lt;/span>(&lt;span style="color:#d19a66">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">^^^^^^^^^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">AttributeError&lt;/span>: &lt;span style="color:#98c379">&amp;#39;str&amp;#39;&lt;/span> &lt;span style="color:#e5c07b">object&lt;/span> &lt;span style="color:#e06c75">has&lt;/span> &lt;span style="color:#e06c75">no&lt;/span> &lt;span style="color:#e06c75">attribute&lt;/span> &lt;span style="color:#98c379">&amp;#39;just&amp;#39;&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span> &lt;span style="color:#e06c75">Did&lt;/span> &lt;span style="color:#e06c75">you&lt;/span> &lt;span style="color:#e06c75">mean&lt;/span>: &lt;span style="color:#98c379">&amp;#39;ljust&amp;#39;&lt;/span>?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #45: Jump Game II</title><link>https://perrotta.dev/2025/09/leetcode-%2345-jump-game-ii/</link><pubDate>Sun, 07 Sep 2025 16:44:31 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2345-jump-game-ii/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/jump-game-ii/">LeetCode #45: Jump Game II&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://perrotta.dev/2025/09/leetcode-%2355-jump-game/">Previously&lt;/a>.&lt;/p>
&lt;p>In the previous problem we were interested whether the end was reachable at
all.&lt;/p>
&lt;p>In the current problem we are interested in minimizing the number of jumps
required to reach it. In this scenario we can safely assume the end is always
reachable. It&amp;rsquo;s a &lt;strong>dynamic programming&lt;/strong> problem as well.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">jump&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">jumpsFrom&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">best&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span>(&lt;span style="color:#98c379">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">step&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">t&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">jumpsFrom&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">step&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">t&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">best&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">min&lt;/span>(&lt;span style="color:#e06c75">best&lt;/span>, &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">best&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">jumpsFrom&lt;/span>(&lt;span style="color:#d19a66">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We could avoid the &lt;code>None&lt;/code> quirks by checking for out-of-bounds in advance. Then
there&amp;rsquo;s no need to store the intermediate result &lt;code>t&lt;/code> to check for &lt;code>None&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">lru_cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">jump&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">jumpsFrom&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">best&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span>(&lt;span style="color:#98c379">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">step&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">step&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>): &lt;span style="color:#7f848e"># out of bounds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">best&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">min&lt;/span>(&lt;span style="color:#e06c75">best&lt;/span>, &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">jumpsFrom&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">step&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">best&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">jumpsFrom&lt;/span>(&lt;span style="color:#d19a66">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we can only insert a &lt;code>break&lt;/code> when increasing &lt;code>step&lt;/code>. Otherwise,
&lt;code>continue&lt;/code> when &lt;code>step&lt;/code> is decreasing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">step&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">step&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>): &lt;span style="color:#7f848e"># out of bounds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">continue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s no noticeable time difference in either approach.&lt;/p></description></item><item><title>LeetCode #55: Jump Game</title><link>https://perrotta.dev/2025/09/leetcode-%2355-jump-game/</link><pubDate>Sun, 07 Sep 2025 15:56:17 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2355-jump-game/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/jump-game/">LeetCode #55: Jump Game&lt;/a>:&lt;/p>
&lt;p>A classic &lt;strong>dynamic programming&lt;/strong> problem.&lt;/p>
&lt;p>&lt;a href="https://perrotta.dev/2024/01/python-all-hail-to-cache-memoization/">Previously: memoization&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">canJump&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef">@cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">canReach&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>): &lt;span style="color:#7f848e"># ouf of bounds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>: &lt;span style="color:#7f848e"># reached the end!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 2 3 1 1 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">step&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">canReach&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">step&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">canReach&lt;/span>(&lt;span style="color:#d19a66">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works, but it is slow (6s).&lt;/p>
&lt;p>We could slightly improve it by jumping more eagerly, attempting to reduce the
solution space. All it takes is to start with bigger steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">step&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># [...]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This solution yields 3.3s, which is significantly better.&lt;/p>
&lt;p>Nonetheless, the memoization may needlessly allocate a lot of space in the
stack, when the recursion depth is high. For example, consider the following
input:&lt;/p>
&lt;pre tabindex="0">&lt;code>Input: [1, 1, ...]
&lt;/code>&lt;/pre>&lt;p>If we have &lt;code>n&lt;/code> elements, then it allocates up to &lt;code>n&lt;/code> &lt;code>canReach()&lt;/code> entries in the
stack. Ooopsie.&lt;/p>
&lt;p>We can avoid this altogether by adopting a &lt;strong>greedy&lt;/strong> approach.&lt;/p>
&lt;p>We try to jump as further as possible. For example, let&amp;rsquo;s say we can reach
indexes &lt;code>m&lt;/code> and &lt;code>n&lt;/code>, where &lt;code>m &amp;gt; n&lt;/code>. The key observation is that there&amp;rsquo;s no point
to check for &lt;code>n&lt;/code> if we know we can get to &lt;code>m&lt;/code>. By definition, we must have
gotten to &lt;code>m&lt;/code> by having passed through &lt;code>n&lt;/code> at some point.&lt;/p>
&lt;p>As such, let&amp;rsquo;s keep track of the &lt;strong>furthest index reached so far&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">functools&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">canJump&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">maxReach&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">jump&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># no point updating maxReach if it&amp;#39;s not even reachable!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># no point continuing either: from here, `i` will keep increasing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">maxReach&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">maxReach&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">max&lt;/span>(&lt;span style="color:#e06c75">maxReach&lt;/span>, &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">maxReach&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> (&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #122: Best Time To Buy And Sell Stock II</title><link>https://perrotta.dev/2025/09/leetcode-%23122-best-time-to-buy-and-sell-stock-ii/</link><pubDate>Sun, 07 Sep 2025 02:37:02 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23122-best-time-to-buy-and-sell-stock-ii/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">LeetCode #122: Best Time To Buy And Sell Stock II&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://perrotta.dev/2025/09/leetcode-%23121-best-time-to-buy-and-sell-stock/">Previously&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">maxProfit&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">prices&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#7f848e"># i + 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#7f848e"># sanity check&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">prices&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">max&lt;/span>(&lt;span style="color:#e06c75">profit&lt;/span>, &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> (&lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">profit&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_profit&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">profit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 1 3 6 2 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">total_profit&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">profit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">total_profit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #121: Best Time To Buy And Sell Stock</title><link>https://perrotta.dev/2025/09/leetcode-%23121-best-time-to-buy-and-sell-stock/</link><pubDate>Sun, 07 Sep 2025 02:06:22 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23121-best-time-to-buy-and-sell-stock/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">LeetCode #121: Best Time To Buy And Sell Stock&lt;/a>:&lt;/p>
&lt;p>Initially I would think that we should start with the lowest element of the
list, and then find the maximum profit from it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">maxProfit&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">prices&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lowest&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span>(&lt;span style="color:#98c379">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i_lowest&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">prices&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">lowest&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">lowest&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i_lowest&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i_lowest&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">max&lt;/span>(&lt;span style="color:#e06c75">profit&lt;/span>, &lt;span style="color:#e06c75">p&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">lowest&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">profit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 6 4 2 1 4 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this approach is evident with an input such as &lt;code>[2, 4, 1]&lt;/code>.
This initial solution returns &lt;code>0&lt;/code>, whereas it should return &lt;code>2&lt;/code>.&lt;/p>
&lt;p>We need to employ &lt;strong>two pointers&lt;/strong>. The first pointer (&lt;code>i&lt;/code>) tracks the lowest
element (so far), the second pointer (&lt;code>j&lt;/code>) scans for the maximum profit. We
should update &lt;code>i&lt;/code> only if it would result in a better profit; this helps
avoiding failing on the above scenario.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">maxProfit&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">prices&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#7f848e"># i + 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e5c07b">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#7f848e"># sanity check&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">prices&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">profit&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">max&lt;/span>(&lt;span style="color:#e06c75">profit&lt;/span>, &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">prices&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">profit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #189: Rotate Array</title><link>https://perrotta.dev/2025/09/leetcode-%23189-rotate-array/</link><pubDate>Sat, 06 Sep 2025 20:18:36 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23189-rotate-array/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/rotate-array/">LeetCode #189: Rotate Array&lt;/a>:&lt;/p>
&lt;h2 id="easy">Easy&lt;/h2>
&lt;p>Use another list (&lt;code>v&lt;/code>) for aux.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">rotate&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">k&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Input: nums = [1,2,3,4,5,6,7], k = 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Output (v): [5,6,7,1,2,3,4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># v[0] = nums[7 - k + 0]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># v[1] = nums[7 - k + 1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">None&lt;/span>] &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or we can populate the aux list from the perspective of &lt;code>nums&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">rotate&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">k&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">None&lt;/span>] &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span>[(&lt;span style="color:#e06c75">k&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>) &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>We can solve it by slicing + reversing the input tactically a couple of times:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">rotate&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">k&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Input: nums = [1,2,3,4,5,6,7], k = 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># Output: [5,6,7,1,2,3,4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [1,2,3,4,5,6,7] -&amp;gt; in-place reverse the first len(nums) - k elements&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [4,3,2,1,5,6,7] -&amp;gt; in-place reverse the last k elements&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [4,3,2,1,7,6,5] -&amp;gt; in-place reverse the entire list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># [5,6,7,1,2,3,4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>[:&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#e06c75">k&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">reverse&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the last statement, &lt;code>nums[:] = nums[::-1]&lt;/code> works too. No need to memorize
&lt;code>.reverse()&lt;/code>. You could also do &lt;code>nums[:] = reversed(nums)&lt;/code>.&lt;/p></description></item><item><title>LeetCode #169: Majority Element</title><link>https://perrotta.dev/2025/09/leetcode-%23169-majority-element/</link><pubDate>Sat, 06 Sep 2025 01:37:01 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%23169-majority-element/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/majority-element/">LeetCode #169: Majority Element&lt;/a>:&lt;/p>
&lt;h2 id="quickly-via-sorting">Quickly via sorting&lt;/h2>
&lt;p>It must appear in the middle (&lt;code>(n - 1) / 2&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">majorityElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)[(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">//&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 1 (n - 1) / 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># a b c d&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># a b c (n - 1) / 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because we&amp;rsquo;re sorting the list, this is &lt;code>O(n * log n)&lt;/code>.&lt;/p>
&lt;h2 id="counter">Counter&lt;/h2>
&lt;p>Use a &lt;code>Counter&lt;/code> to keep track of the most common element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">majorityElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">counter&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">counter&lt;/span>[&lt;span style="color:#e06c75">n&lt;/span>] &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans_freq&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span>(&lt;span style="color:#98c379">&amp;#39;-inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>, &lt;span style="color:#e06c75">freq&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">counter&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">items&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">freq&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">ans_freq&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans_freq&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">freq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">ans&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">ans&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need to know about counters. A &lt;code>defaultdict(int)&lt;/code> would suffice.&lt;/p>
&lt;p>If you can leverage built-in methods from &lt;code>Counter&lt;/code>, then it&amp;rsquo;s even simpler:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">majorityElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">Counter&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">most_common&lt;/span>()[&lt;span style="color:#d19a66">0&lt;/span>][&lt;span style="color:#d19a66">0&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which also makes me realize you can construct a counter straight off a list,
instead of doing it element by element.&lt;/p>
&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>&lt;strong>Challenge&lt;/strong>: Could you solve the problem in linear time and in O(1) space?&lt;/p>
&lt;p>&lt;a href="https://www.cs.utexas.edu/~moore/best-ideas/mjrty/index.html">A Linear Time Majority Vote Algorithm&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>We will sweep down the sequence starting at the pointer position shown above.&lt;/p>
&lt;p>As we sweep we maintain a pair consisting of a current candidate and a
counter. Initially, the current candidate is unknown and the counter is 0.&lt;/p>
&lt;p>When we move the pointer forward over an element e:&lt;/p>
&lt;ul>
&lt;li>If the counter is 0, we set the current candidate to e and we set the
counter to 1.&lt;/li>
&lt;li>If the counter is not 0, we increment or decrement the counter according to
whether e is the current candidate.&lt;/li>
&lt;/ul>
&lt;p>When we are done, the current candidate is the majority element.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">majorityElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">candidate&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">candidate&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">count&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">candidate&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">candidate&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>O(1) space, O(n) time.&lt;/p></description></item><item><title>LeetCode #80: Duplicate From Sorted Array II</title><link>https://perrotta.dev/2025/09/leetcode-%2380-duplicate-from-sorted-array-ii/</link><pubDate>Fri, 05 Sep 2025 20:29:31 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2380-duplicate-from-sorted-array-ii/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/">LeetCode #80: Duplicate From Sorted Array II&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://perrotta.dev/2025/09/leetcode-%2326-duplicate-from-sorted-array/">Previously&lt;/a>.
Now each element can appear at most twice.&lt;/p>
&lt;h2 id="elegant">Elegant&lt;/h2>
&lt;p>Keeping track of a counter is the most straightforward way to do so.&lt;/p>
&lt;p>I like to use &lt;code>defaultdict&lt;/code> for that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">from&lt;/span> &lt;span style="color:#e06c75">collections&lt;/span> &lt;span style="color:#c678dd">import&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeDuplicates&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">counter&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">defaultdict&lt;/span>(&lt;span style="color:#e5c07b">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">counter&lt;/span>[&lt;span style="color:#e06c75">el&lt;/span>] &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">counter&lt;/span>[&lt;span style="color:#e06c75">el&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">del&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>Can we do it without allocating a separate counter, with &lt;code>O(1)&lt;/code> extra memory?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeDuplicates&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>))[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>][:&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">del&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #26: Duplicate From Sorted Array</title><link>https://perrotta.dev/2025/09/leetcode-%2326-duplicate-from-sorted-array/</link><pubDate>Wed, 03 Sep 2025 20:00:06 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2326-duplicate-from-sorted-array/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array">LeetCode #26: Duplicate From Sorted Array&lt;/a>:&lt;/p>
&lt;h2 id="naive-and-elegant">Naive and elegant&lt;/h2>
&lt;p>If we can create a new array, it&amp;rsquo;s trivial:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeDuplicates&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e5c07b">set&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Initially I thought &lt;code>list(set(nums))&lt;/code> is enough, but it turns out sets in
Python do not guarantee any order.&lt;/p>
&lt;p>&lt;code>sorted()&lt;/code> returns a list already, there&amp;rsquo;s no need to do &lt;code>list(sorted())&lt;/code>,
though it wouldn&amp;rsquo;t hurt.&lt;/p>
&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>We need to modify the original list in-place. We could create another list and
then copy it to the original list in the end, but let&amp;rsquo;s avoid this approach.&lt;/p>
&lt;p>Instead, let&amp;rsquo;s go backwards and remove duplicates as we find them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeDuplicates&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>]) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>))[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>][:&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">del&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LeetCode #27: Remove Element</title><link>https://perrotta.dev/2025/09/leetcode-%2327-remove-element/</link><pubDate>Wed, 03 Sep 2025 01:09:13 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2327-remove-element/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/remove-element/">LeetCode #27: Remove Element&lt;/a>:&lt;/p>
&lt;p>The original problem states:&lt;/p>
&lt;blockquote>
&lt;p>remove all occurrences of val in &lt;code>nums&lt;/code> in-place&lt;/p>
&lt;/blockquote>
&lt;p>Instead, I opted for allocating a new list.&lt;/p>
&lt;h2 id="elegant">Elegant&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#7f848e"># OR nums[0:len(a)] = a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might as well get rid of &lt;code>a&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>Can we get by without allocating a new list?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">n&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or we could always use indexes, if you prefer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#7f848e"># avoid unnecessary assignments&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">n&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You really like C/C++&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">!=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#7f848e"># avoid unnecessary assignments&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">n&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-delete-way">The &lt;code>delete&lt;/code> way&lt;/h2>
&lt;p>We could also drop elements from the list.&lt;/p>
&lt;p>However, to keep the order stable, we need to start from the end.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>))):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">del&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we cannot use &lt;code>reversed&lt;/code> with &lt;code>enumerate&lt;/code> directly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>([&lt;span style="color:#d19a66">3&lt;/span>,&lt;span style="color:#d19a66">4&lt;/span>,&lt;span style="color:#d19a66">5&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">enumerate&lt;/span> &lt;span style="color:#e5c07b">object&lt;/span> &lt;span style="color:#e06c75">at&lt;/span> &lt;span style="color:#d19a66">0x1056d1b70&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>([&lt;span style="color:#d19a66">3&lt;/span>,&lt;span style="color:#d19a66">4&lt;/span>,&lt;span style="color:#d19a66">5&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[(&lt;span style="color:#d19a66">0&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">5&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>([&lt;span style="color:#d19a66">3&lt;/span>,&lt;span style="color:#d19a66">4&lt;/span>,&lt;span style="color:#d19a66">5&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Traceback&lt;/span> (&lt;span style="color:#e06c75">most&lt;/span> &lt;span style="color:#e06c75">recent&lt;/span> &lt;span style="color:#e06c75">call&lt;/span> &lt;span style="color:#e06c75">last&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">File&lt;/span> &lt;span style="color:#98c379">&amp;#34;&amp;lt;python-input-2&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e06c75">line&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span>&lt;span style="color:#e06c75">module&lt;/span>&lt;span style="color:#56b6c2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">reversed&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>([&lt;span style="color:#d19a66">3&lt;/span>,&lt;span style="color:#d19a66">4&lt;/span>,&lt;span style="color:#d19a66">5&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#56b6c2">~~~~~~~~^^^^^^^^^^^^^^^^^^^^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">TypeError&lt;/span>: &lt;span style="color:#98c379">&amp;#39;enumerate&amp;#39;&lt;/span> &lt;span style="color:#e5c07b">object&lt;/span> &lt;span style="color:#56b6c2">is&lt;/span> &lt;span style="color:#56b6c2">not&lt;/span> &lt;span style="color:#e06c75">reversible&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s no need to memorize that.
Heck, there&amp;rsquo;s no need to even remember that &lt;code>reversed&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> exists:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">removeElement&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">val&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">nums&lt;/span>))[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">val&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">del&lt;/span> &lt;span style="color:#e06c75">nums&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In Python, there&amp;rsquo;s generally no need to use &lt;code>for i in range(len(v))&lt;/code>. In general,
it&amp;rsquo;s more elegant to use &lt;code>for i, el in enumerate(v)&lt;/code>. Even if you don&amp;rsquo;t
care about the element: &lt;code>for i, _ in enumerate(v)&lt;/code>. If you don&amp;rsquo;t care about
the index: &lt;code>for el in v&lt;/code> which is simpler than &lt;code>for _, el in enumerate(v)&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;code>[::-1]&lt;/code> slicing reverses a list.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>LeetCode #88: Merge Sorted Array</title><link>https://perrotta.dev/2025/09/leetcode-%2388-merge-sorted-array/</link><pubDate>Tue, 02 Sep 2025 23:51:51 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2388-merge-sorted-array/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/merge-sorted-array/">LeetCode #88: Merge Sorted Array&lt;/a>:&lt;/p>
&lt;p>The original problem states:&lt;/p>
&lt;blockquote>
&lt;p>Do not return anything, modify &lt;code>nums1&lt;/code> in-place instead.&lt;/p>
&lt;/blockquote>
&lt;p>Instead, I opted for allocating a new list.&lt;/p>
&lt;h2 id="naive-and-elegant">Naive and elegant&lt;/h2>
&lt;p>&lt;code>O((m + n) * log (m + n))&lt;/code>. Total disregard for the fact the inputs are already
sorted&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">nums1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>&lt;code>O(m + n)&lt;/code>. We can achieve a linear solution by iterating only &lt;em>once&lt;/em> on each
element, keeping tracking of &lt;strong>two pointers&lt;/strong>.&lt;/p>
&lt;p>Storage: we can either start with an empty list and keep appending&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to it, or
preallocate &lt;code>m + n&lt;/code> elements and simply populate them&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">None&lt;/span>] &lt;span style="color:#56b6c2">*&lt;/span> (&lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a = []&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> (&lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pa&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> (&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>[&lt;span style="color:#e06c75">pa&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a.append(nums1[p1])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>[&lt;span style="color:#e06c75">pa&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a.append(nums2[p2])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="original-naive-and-elegant">Original: Naive and elegant&lt;/h2>
&lt;p>The original problem modifies &lt;code>num1&lt;/code> in-place.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">m&lt;/span>:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sort&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="original-optimal">Original: Optimal&lt;/h2>
&lt;p>On top of the previous solution, just amend the end:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, use list slicing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">nums1&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that a simple assignment (&lt;code>nums1 = a&lt;/code> or &lt;code>nums1 = a.copy()&lt;/code>) does not
entail in-place modification.&lt;/p>
&lt;p>A solution from scratch, without allocating a separate list, could look like
this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">m&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>], &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>], &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">mysorted&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">m&lt;/span>:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mysorted&lt;/span>(&lt;span style="color:#e06c75">nums2&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">copy&lt;/span>())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Except that it fails for the following input:&lt;/p>
&lt;pre tabindex="0">&lt;code>nums1: [4,5,6,0,0,0]
m = 3
nums2: [1,2,3]
n = 3

result: [1,4,5,2,3,6]
&lt;/code>&lt;/pre>&lt;p>A revised solution † starts from the end, to account for the fact we need to
modify the list in-place:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># This is a no-op&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># while p1 &amp;gt;= 0:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># nums1[p1 + p2 + 1] = nums1[p1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># p1 -= 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># nums1[:p2 + 1] = nums2[:p2 + 1]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;code>a = [3, 2, 1]; a.sort()&lt;/code> modifies &lt;code>a&lt;/code> in-place, whereas &lt;code>sorted(a)&lt;/code>
creates a new list.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Given &lt;code>a = []&lt;/code>, do either &lt;code>a.append(1)&lt;/code> or &lt;code>a += [1]&lt;/code>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;code>a = nums1 + nums2&lt;/code> or &lt;code>a = [None] * (m + n)&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Python: nested loops</title><link>https://perrotta.dev/2025/08/python-nested-loops/</link><pubDate>Fri, 29 Aug 2025 20:30:39 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/python-nested-loops/</guid><description>&lt;p>Given a list &lt;code>v = [1, 2, 3, 4]&lt;/code>, use a double nested&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> loop to iterate over
every pair of its elements, in order.&lt;/p>
&lt;p>In other words, the iteration must yield the following deterministic order:&lt;/p>
&lt;ul>
&lt;li>1, 2&lt;/li>
&lt;li>1, 3&lt;/li>
&lt;li>1, 4&lt;/li>
&lt;li>2, 3&lt;/li>
&lt;li>2, 4&lt;/li>
&lt;li>3, 4&lt;/li>
&lt;/ul>
&lt;h2 id="cc-style">C/C++ style&lt;/h2>
&lt;p>Use indexes + &lt;code>range&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cc-style-but-iterating-directly">C/C++ style, but iterating directly&lt;/h2>
&lt;p>We could use &lt;code>enumerate&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is not an objectively superior improvement to the previous form, but at least
we avoid &lt;code>range&lt;/code> and &lt;code>len&lt;/code>.&lt;/p>
&lt;h2 id="itertools">&lt;code>itertools&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Discrete Mathematics &lt;code>combinations&lt;/code> provides an elegant one-liner for this
situation. The second argument controls how many elements to include per tuple,
for comparison:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Doubly-nested?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>LeetCode #7: Reverse Integer</title><link>https://perrotta.dev/2025/08/leetcode-%237-reverse-integer/</link><pubDate>Fri, 29 Aug 2025 02:17:23 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/leetcode-%237-reverse-integer/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/reverse-integer/">LeetCode #7: Reverse Integer&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Given a signed 32-bit integer x, return x with its digits reversed. If
reversing x causes the value to go outside the signed 32-bit integer range
[-2^31, 2^31 - 1], then return 0.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Assume the environment does not allow you to store 64-bit integers (signed or
unsigned).&lt;/p>
&lt;/blockquote>
&lt;h2 id="string-space">string space&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">reverse&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">x&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">remove_leading_zeroes&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">lstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">fix_sign&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>) &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;-&amp;#39;&lt;/span>: &lt;span style="color:#7f848e"># OR: s.endswith(&amp;#39;-&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#98c379">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>[:&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># -120 -&amp;gt; 021- -&amp;gt; 21- -&amp;gt; -21&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># 123 -&amp;gt; 321 -&amp;gt; 321 -&amp;gt; 321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>(&lt;span style="color:#e06c75">fix_sign&lt;/span>(&lt;span style="color:#e06c75">remove_leading_zeroes&lt;/span>((&lt;span style="color:#e5c07b">str&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>))[::&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>])) &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#56b6c2">**&lt;/span> &lt;span style="color:#d19a66">31&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">**&lt;/span>&lt;span style="color:#d19a66">31&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What if we do not remember &lt;code>.lstrip()&lt;/code>?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">lstrip&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>, &lt;span style="color:#e06c75">c&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">last&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">s&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#e06c75">c&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">last&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#e06c75">last&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">s&lt;/span>[&lt;span style="color:#e06c75">last&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:] &lt;span style="color:#7f848e"># OR &amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">lstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;000&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;0&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">lstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;0023&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;0&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;23&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">lstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;0&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">assert&lt;/span> &lt;span style="color:#e06c75">lstrip&lt;/span>(&lt;span style="color:#98c379">&amp;#39;23&amp;#39;&lt;/span>, &lt;span style="color:#98c379">&amp;#39;0&amp;#39;&lt;/span>) &lt;span style="color:#56b6c2">==&lt;/span> &lt;span style="color:#98c379">&amp;#39;23&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="integer-space">integer space&lt;/h2>
&lt;p>Let&amp;rsquo;s do it without converting the input to a string.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">reverse&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">x&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">is_minus&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">x&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e5c07b">abs&lt;/span>(&lt;span style="color:#e06c75">x&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">*=&lt;/span> &lt;span style="color:#d19a66">10&lt;/span> &lt;span style="color:#7f848e"># 0 -&amp;gt; 30 -&amp;gt; 320&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">%&lt;/span> &lt;span style="color:#d19a66">10&lt;/span> &lt;span style="color:#7f848e"># 3 -&amp;gt; 32 -&amp;gt; 321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR: a = 10 * a + n % 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">//=&lt;/span> &lt;span style="color:#d19a66">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> (&lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">is_minus&lt;/span> &lt;span style="color:#c678dd">else&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>) &lt;span style="color:#56b6c2">*&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">**&lt;/span>&lt;span style="color:#d19a66">31&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#56b6c2">**&lt;/span>&lt;span style="color:#d19a66">31&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hello world</title><link>https://perrotta.dev/2025/08/hello-world/</link><pubDate>Fri, 29 Aug 2025 01:51:03 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/hello-world/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>