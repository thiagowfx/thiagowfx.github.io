<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet type="text/xsl" href="https://perrotta.dev//rss.xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/coding/</link><description>Recent content in Coding on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Tue, 02 Sep 2025 23:51:51 +0200</lastBuildDate><atom:link href="https://perrotta.dev/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode #88: Merge Sorted Array</title><link>https://perrotta.dev/2025/09/leetcode-%2388-merge-sorted-array/</link><pubDate>Tue, 02 Sep 2025 23:51:51 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/09/leetcode-%2388-merge-sorted-array/</guid><description>&lt;p>&lt;a href="https://leetcode.com/problems/merge-sorted-array/">LeetCode #88: Merge Sorted Array&lt;/a>:&lt;/p>
&lt;p>The original problem states:&lt;/p>
&lt;blockquote>
&lt;p>Do not return anything, modify &lt;code>nums1&lt;/code> in-place instead.&lt;/p>
&lt;/blockquote>
&lt;p>Instead, I opted for allocating a new list.&lt;/p>
&lt;h2 id="naive-and-elegant">Naive and elegant&lt;/h2>
&lt;p>&lt;code>O((m + n) * log (m + n))&lt;/code>. Total disregard for the fact the inputs are already
sorted&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e5c07b">sorted&lt;/span>(&lt;span style="color:#e06c75">nums1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optimal">Optimal&lt;/h2>
&lt;p>&lt;code>O(m + n)&lt;/code>. We can achieve a linear solution by iterating only &lt;em>once&lt;/em> on each
element, keeping tracking of &lt;strong>two pointers&lt;/strong>.&lt;/p>
&lt;p>Storage: we can either start with an empty list and keep appending&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to it, or
preallocate &lt;code>m + n&lt;/code> elements and simply populate them&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> [&lt;span style="color:#e5c07b">None&lt;/span>] &lt;span style="color:#56b6c2">*&lt;/span> (&lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a = []&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> (&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span>) &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> (&lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">n&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">pa&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> (&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>[&lt;span style="color:#e06c75">pa&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a.append(nums1[p1])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">a&lt;/span>[&lt;span style="color:#e06c75">pa&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR a.append(nums2[p2])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="original-naive-and-elegant">Original: Naive and elegant&lt;/h2>
&lt;p>The original problem modifies &lt;code>num1&lt;/code> in-place.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">m&lt;/span>:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">sort&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="original-optimal">Original: Optimal&lt;/h2>
&lt;p>On top of the previous solution, just amend the end:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">el&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">el&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, use list slicing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">nums1&lt;/span>[:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that a simple assignment (&lt;code>nums1 = a&lt;/code> or &lt;code>nums1 = a.copy()&lt;/code>) does not
entail in-place modification.&lt;/p>
&lt;p>A solution from scratch, without allocating a separate list, could look like
this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">m&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">or&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>], &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>], &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">mysorted&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>) &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>] &lt;span style="color:#56b6c2">&amp;gt;&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>&lt;span style="color:#56b6c2">+&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">return&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">m&lt;/span>:] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">mysorted&lt;/span>(&lt;span style="color:#e06c75">nums2&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">copy&lt;/span>())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Except that it fails for the following input:&lt;/p>
&lt;pre tabindex="0">&lt;code>nums1: [4,5,6,0,0,0]
m = 3
nums2: [1,2,3]
n = 3

result: [1,4,5,2,3,6]
&lt;/code>&lt;/pre>&lt;p>A revised solution † starts from the end, to account for the fact we need to
modify the list in-place:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">class&lt;/span> &lt;span style="color:#e5c07b">Solution&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">def&lt;/span> &lt;span style="color:#61afef;font-weight:bold">merge&lt;/span>(&lt;span style="color:#e06c75">self&lt;/span>, &lt;span style="color:#e06c75">nums1&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">m&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>, &lt;span style="color:#e06c75">nums2&lt;/span>: &lt;span style="color:#e06c75">List&lt;/span>[&lt;span style="color:#e5c07b">int&lt;/span>], &lt;span style="color:#e06c75">n&lt;/span>: &lt;span style="color:#e5c07b">int&lt;/span>) &lt;span style="color:#56b6c2">-&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">m&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">n&lt;/span> &lt;span style="color:#56b6c2">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span> &lt;span style="color:#56b6c2">and&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>] &lt;span style="color:#56b6c2">&amp;lt;&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># This is a no-op&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># while p1 &amp;gt;= 0:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># nums1[p1 + p2 + 1] = nums1[p1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># p1 -= 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">while&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">nums1&lt;/span>[&lt;span style="color:#e06c75">p1&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>] &lt;span style="color:#56b6c2">=&lt;/span> &lt;span style="color:#e06c75">nums2&lt;/span>[&lt;span style="color:#e06c75">p2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">p2&lt;/span> &lt;span style="color:#56b6c2">-=&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># OR:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e"># nums1[:p2 + 1] = nums2[:p2 + 1]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;code>a = [3, 2, 1]; a.sort()&lt;/code> modifies &lt;code>a&lt;/code> in-place, whereas &lt;code>sorted(a)&lt;/code>
creates a new list.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Given &lt;code>a = []&lt;/code>, do either &lt;code>a.append(1)&lt;/code> or &lt;code>a += [1]&lt;/code>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;code>a = nums1 + nums2&lt;/code> or &lt;code>a = [None] * (m + n)&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Python: nested loops</title><link>https://perrotta.dev/2025/08/python-nested-loops/</link><pubDate>Fri, 29 Aug 2025 20:30:39 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/python-nested-loops/</guid><description>&lt;p>Given a list &lt;code>v = [1, 2, 3, 4]&lt;/code>, use a double nested&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> loop to iterate over
every pair of its elements, in order.&lt;/p>
&lt;p>In other words, the iteration must yield the following deterministic order:&lt;/p>
&lt;ul>
&lt;li>1, 2&lt;/li>
&lt;li>1, 3&lt;/li>
&lt;li>1, 4&lt;/li>
&lt;li>2, 3&lt;/li>
&lt;li>2, 4&lt;/li>
&lt;li>3, 4&lt;/li>
&lt;/ul>
&lt;h2 id="cc-style">C/C++ style&lt;/h2>
&lt;p>Use indexes + &lt;code>range&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cc-style-but-iterating-directly">C/C++ style, but iterating directly&lt;/h2>
&lt;p>We could use &lt;code>enumerate&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is not an objectively superior improvement to the previous form, but at least
we avoid &lt;code>range&lt;/code> and &lt;code>len&lt;/code>.&lt;/p>
&lt;h2 id="itertools">&lt;code>itertools&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Discrete Mathematics &lt;code>combinations&lt;/code> provides an elegant one-liner for this
situation. The second argument controls how many elements to include per tuple,
for comparison:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Doubly-nested?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hello world</title><link>https://perrotta.dev/2025/08/hello-world/</link><pubDate>Fri, 29 Aug 2025 01:51:03 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/hello-world/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>