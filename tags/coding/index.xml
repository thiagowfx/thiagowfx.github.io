<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet type="text/xsl" href="https://perrotta.dev//rss.xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/coding/</link><description>Recent content in Coding on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Fri, 29 Aug 2025 20:30:39 +0200</lastBuildDate><atom:link href="https://perrotta.dev/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Python: editorial: nested loops</title><link>https://perrotta.dev/2025/08/python-editorial-nested-loops/</link><pubDate>Fri, 29 Aug 2025 20:30:39 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/python-editorial-nested-loops/</guid><description>&lt;p>Given a list &lt;code>v = [1, 2, 3, 4]&lt;/code>, use a double nested&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> loop to iterate over
every pair of its elements, in order.&lt;/p>
&lt;p>In other words, the iteration must yield the following deterministic order:&lt;/p>
&lt;ul>
&lt;li>1, 2&lt;/li>
&lt;li>1, 3&lt;/li>
&lt;li>1, 4&lt;/li>
&lt;li>2, 3&lt;/li>
&lt;li>2, 4&lt;/li>
&lt;li>3, 4&lt;/li>
&lt;/ul>
&lt;h2 id="cc-style">C/C++ style&lt;/h2>
&lt;p>Use indexes + &lt;code>range&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">j&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>(&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#e5c07b">len&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span>], &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">j&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">1&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">2&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">3&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cc-style-but-iterating-directly">C/C++ style, but iterating directly&lt;/h2>
&lt;p>We could use &lt;code>enumerate&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">i&lt;/span>, &lt;span style="color:#e06c75">a&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e5c07b">enumerate&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">v&lt;/span>[&lt;span style="color:#e06c75">i&lt;/span> &lt;span style="color:#56b6c2">+&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is not an objectively superior improvement to the previous form, but at least
we avoid &lt;code>range&lt;/code> and &lt;code>len&lt;/code>.&lt;/p>
&lt;h2 id="itertools">&lt;code>itertools&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">for&lt;/span> &lt;span style="color:#e06c75">a&lt;/span>, &lt;span style="color:#e06c75">b&lt;/span> &lt;span style="color:#56b6c2">in&lt;/span> &lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#e06c75">a&lt;/span>,&lt;span style="color:#e06c75">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Discrete Mathematics &lt;code>combinations&lt;/code> provides an elegant one-liner for this
situation. The second argument controls how many elements to include per tuple,
for comparison:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>(&lt;span style="color:#e06c75">itertools&lt;/span>&lt;span style="color:#56b6c2">.&lt;/span>&lt;span style="color:#e06c75">combinations&lt;/span>(&lt;span style="color:#e06c75">v&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[(&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">1&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>), (&lt;span style="color:#d19a66">2&lt;/span>, &lt;span style="color:#d19a66">3&lt;/span>, &lt;span style="color:#d19a66">4&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Doubly-nested?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hello world</title><link>https://perrotta.dev/2025/08/hello-world/</link><pubDate>Fri, 29 Aug 2025 01:51:03 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/08/hello-world/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>(&lt;span style="color:#98c379">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>