<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bestof★ on not just serendipity</title><link>https://www.perrotta.dev/tags/bestof/</link><description>Recent content in Bestof★ on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 Thiago Perrotta · [RSS](/index.xml) · [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Fri, 13 Dec 2024 01:16:41 -0300</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/bestof/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Just</title><link>https://www.perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><guid>https://www.perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p></description></item><item><title>★ prodaccess</title><link>https://www.perrotta.dev/2024/10/prodaccess/</link><pubDate>Fri, 18 Oct 2024 14:57:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/prodaccess/</guid><description>&lt;p>At Google we had a &lt;code>prodaccess&lt;/code> command used to log in and authenticate in all
sorts of internal corp systems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for 20 hours. It became a daily ritual to run
&lt;code>prodaccess&lt;/code> first thing in the morning when logging in upon unlocking our
physical workstations&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>During the pandemic, when heavily using our virtual workstations (dubbed
&lt;em>cloudtops&lt;/em>, think of an EC2 instance or a VPS) it was common to hook
&lt;code>prodaccess&lt;/code> into &lt;code>ssh&lt;/code>. There was a &lt;code>prodcertstatus&lt;/code> command that would tell
you when &lt;code>prodaccess&lt;/code> would expire. A common pattern was to modify your &lt;code>ssh&lt;/code>
startup command to automatically run &lt;code>prodaccess&lt;/code> whenever &lt;code>prodcertstatus&lt;/code>
indicated that access would expire within 2-4 hours, depending on the user&amp;rsquo;s
preference.&lt;/p>
&lt;p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:&lt;/p></description></item><item><title>★ New series: Raspberry Pi fun with DevOps</title><link>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</link><pubDate>Sun, 13 Oct 2024 11:31:13 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I have two raspberry pi&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> units sitting idle at home, a 3B and a 4.&lt;/p>
&lt;p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.&lt;/p></description></item><item><title>★ Erratic: human-friendly google3 piper snapshots</title><link>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</link><pubDate>Wed, 02 Oct 2024 13:33:56 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</guid><description>&lt;p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called &lt;code>erratic&lt;/code> (abbrev: &lt;code>er&lt;/code>),
which was a 20% project of another Software Engineer&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>★ Anki: custom language card (cont.)</title><link>https://www.perrotta.dev/2024/09/anki-custom-language-card-cont./</link><pubDate>Sun, 22 Sep 2024 13:02:39 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/anki-custom-language-card-cont./</guid><description>&lt;p>This post builds upon the previous &lt;a href="https://www.perrotta.dev/2024/02/anki-custom-language-card/">Anki: custom language card&lt;/a>.&lt;/p></description></item><item><title>★ Self-documented Makefiles</title><link>https://www.perrotta.dev/2024/08/self-documented-makefiles/</link><pubDate>Thu, 08 Aug 2024 10:42:49 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/self-documented-makefiles/</guid><description>&lt;p>&lt;code>Makefile&lt;/code>s are often great &lt;code>bash&lt;/code> script replacements. Instead of creating a
&lt;code>bash&lt;/code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of &lt;code>Makefile&lt;/code> targets.&lt;/p></description></item><item><title>★ XY problem</title><link>https://www.perrotta.dev/2024/06/xy-problem/</link><pubDate>Sun, 23 Jun 2024 14:50:19 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/xy-problem/</guid><description>&lt;p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:&lt;/p></description></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description></item><item><title>★ Anki: custom language card</title><link>https://www.perrotta.dev/2024/02/anki-custom-language-card/</link><pubDate>Sat, 03 Feb 2024 13:02:21 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/anki-custom-language-card/</guid><description>&lt;p>The more time you spent playing with &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a>, the
more opinionated you become.&lt;/p>
&lt;p>Upon reading &lt;a href="https://fluent-forever.com/index.html">Fluent Forever&lt;/a> by Gabriel
Wyner, I got an itch to create my own Anki note template for learning
languages.&lt;/p></description></item><item><title>★ Integrating terraform with ansible</title><link>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p></description></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description></item><item><title>★ Terraforming a Linode: hello world</title><link>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p></description></item><item><title>★ Synchronized in Python</title><link>https://www.perrotta.dev/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>★ Tools you should know about: moreutils</title><link>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><guid>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description></item><item><title>★ Keychron K2 on macOS: fix Home and End keys</title><link>https://www.perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><guid>https://www.perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://www.perrotta.dev/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p></description></item><item><title>★ Wayland: from i3 to sway</title><link>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://www.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description></item><item><title>★ SSH plus tmux automatically</title><link>https://www.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description></item><item><title>★ systemd: share environment variables with xorg</title><link>https://www.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p></description></item><item><title>★ Watch files and react to changes during development</title><link>https://www.perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p></description></item></channel></rss>