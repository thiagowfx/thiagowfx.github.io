<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Bestof on not just serendipity</title><link>https://www.perrotta.dev/tags/bestof/</link><description>Recent content in Bestof on not just serendipity</description><generator>Hugo -- 0.128.2</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 • RSS</copyright><lastBuildDate>Sun, 23 Jun 2024 14:50:19 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/bestof/index.xml" rel="self" type="application/rss+xml"/><item><title>★ XY problem</title><link>https://www.perrotta.dev/2024/06/xy-problem/</link><pubDate>Sun, 23 Jun 2024 14:50:19 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/xy-problem/</guid><description>&lt;p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:&lt;/p></description><content:encoded><![CDATA[<p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:</p>
<ul>
<li><a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a> by Eric S. Raymond</li>
<li><a href="https://xyproblem.info">XY problem</a>: The XY problem is asking about your
attempted solution rather than your actual problem. This leads to enormous
amounts of wasted time and energy, both on the part of people asking for help,
and on the part of those providing help.</li>
</ul>
<p>Here is a recent example: <a href="https://github.com/23andMe/Yamale/issues/250">https://github.com/23andMe/Yamale/issues/250</a></p>
<blockquote>
<p><a href="https://xyproblem.info">https://xyproblem.info</a> / Motivation: Somewhat related to #228: It&rsquo;s not
currently possible to exclude files from a given directory. In the context of
developing Kubernetes GitOps repository this is often an issue. The ability to
run yamale on individual files would address it.</p>
</blockquote>]]></content:encoded></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description><content:encoded><![CDATA[<p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.</p>
<h2 id="assumptions">Assumptions</h2>
<ul>
<li>You have <code>git</code>, <code>jq</code> and the <a href="https://cli.github.com/"><code>gh</code></a> command-line tool
installed (<code>brew install gh</code>)</li>
<li>You have a github actions file in
<code>~/.github/workflows/package-release-dispatch.yml</code>.</li>
<li>The action has the following form:</li>
</ul>
<pre tabindex="0"><code>on:
  workflow_dispatch:
    inputs:
      ref:
        description: &#39;Ref to build from. This can either be a SHA or a branch/tag&#39;
        required: true
        type: string
  push:
    branches:
      - master
    paths:
      - &#39;.github/workflows/package-release-dispatch.yml&#39;
      - &#39;helm/**&#39;
</code></pre><p>The goal is to iterate on the <code>jobs:</code> section of the action.</p>
<h2 id="workflow">Workflow</h2>
<p>Trigger an action run from the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml <span style="color:#f92672">[</span>--ref master<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f ref<span style="color:#f92672">=</span>master<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><code>--ref</code> should be the git branch you&rsquo;re working on, for example,
<code>thiagowfx/my-cool-feature</code>.</p>
<p><code>-f</code> provides an input to the workflow. In this case, there&rsquo;s an input named
<code>ref</code>, which is meant to be the branch the action will act upon.</p>
<p>The action takes a little while to trigger, we can <code>sleep</code> to give it some time.
I found that <code>sleep 3</code> is a sensible value (3 seconds).</p>
<p>How to view the action?</p>
<p>First we need to get its ID. Here&rsquo;s one way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span>
</span></span></code></pre></div><h3 id="option-1-via-the-command-line">Option 1) Via the command-line</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run watch &lt;id&gt;
</span></span></code></pre></div><p>It&rsquo;s analogous to <code>watch</code>, continuously refreshing the action progress in the
background, step by step. Example:</p>
<pre tabindex="0"><code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
  ✓ Set up job
  ✓ Checkout source code
  ✓ Run azure/setup-helm@v4
  ✓ Install yq
  ✓ Install helm cm-push plugin
  ✓ Set up Helm repos
  * Helm package all charts sans blacklist
  * Publish all helm packages
  * Post Checkout source code
</code></pre><h3 id="option-2-via-the-web-browser">Option 2) Via the web browser</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run view &lt;id&gt; -w
</span></span></code></pre></div><p>It will open the system web browser in the right page, pertaining to the action
run.</p>
<h2 id="putting-everything-together">Putting everything together</h2>
<h3 id="option-1">Option 1)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run watch <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="option-2">Option 2)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run view <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span> -w
</span></span></code></pre></div>]]></content:encoded></item><item><title>★ Integrating terraform with ansible</title><link>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p></description><content:encoded><![CDATA[<p>This post is a follow-up of <a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world</a>.</p>
<blockquote>
<p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.</p>
</blockquote>
<p>Before we extensively use Ansible to configure our VPS instance, first let&rsquo;s
set up a basic integration between Terraform and Ansible.</p>
<p>First of all, here&rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&rsquo;ll explain some of them
below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> var<span style="color:#a6e22e">iables</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_hostname&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_region&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>All variables were moved to a <code>variables.tf</code> file. This is to follow standard
terraform
<a href="https://developer.hashicorp.com/terraform/language/modules/develop/structure">conventions</a>
/ recommendations for module structures. Furthermore, it becomes easier to
manage variables when they are all stored in a single place.</p>
<p>The main module file now looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">main</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;nanode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>             = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>            = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>            = var.<span style="color:#a6e22e">linode_hostname</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span>           = var.<span style="color:#a6e22e">linode_region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">keys</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I removed the token from the linode provider. Now it is supplied via the
<code>LINODE_TOKEN</code> environment variable. In order to automatically populate that
variable, I use <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a>. There&rsquo;s an <code>.envrc</code> file that provides its value, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># terraform init</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export LINODE_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-token-here&#34;</span>
</span></span></code></pre></div><p>I also created a repository for this project:
<a href="https://github.com/thiagowfx/knol">https://github.com/thiagowfx/knol</a>. That&rsquo;s enough for preliminaries, now let&rsquo;s
go back to Ansible.</p>
<p>The first component we&rsquo;ll need is an Ansible
<a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">inventory</a>
file, containing the IP address of the host we&rsquo;ll manage. It could look like
this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[all]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">1.2.3.4 ansible_user</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
</span></span></code></pre></div><p>&hellip;wherein <code>1.2.3.4</code> is the IP address of our VPS.</p>
<p>That said, due to the fact the VPS instance is created dynamically, maintaining
that IP address manually would be tedious. Therefore, let&rsquo;s have Terraform
manage it.</p>
<p>We can do so with a
<a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file"><code>local_file</code></a>.
Heck, we could even use a
<a href="https://registry.terraform.io/providers/hashicorp/template/latest/docs/data-sources/file"><code>template_file</code></a>,
however it would be overkill as there are only two simple lines in our
inventory at this point. A <code>local_file</code> is created upon <code>terraform apply</code> and
deleted upon <code>terraform destroy</code>. Therefore it doesn&rsquo;t even need to be tracked
by our VCS:</p>
<pre tabindex="0"><code>resource &#34;local_file&#34; &#34;ansible_inventory&#34; {
  content  = &lt;&lt;-EOF
[all]
${linode_instance.nanode.ip_address} ansible_user=root
EOF
  filename = &#34;inventory.ini&#34;
  file_permission = &#34;0644&#34;
}
</code></pre><p>Once we run terraform (plan + apply), an <code>inventory.ini</code> file should be created
with the above contents.</p>
<p>Because the IP address is ephemeral and dynamic, we should have a
straightforward way to see its value. A terraform
<a href="https://developer.hashicorp.com/terraform/language/values/outputs"><code>output</code></a>
is perfect for that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">outputs</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">output</span> <span style="color:#e6db74">&#34;ip_address&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">value</span> = <span style="color:#a6e22e">linode_instance</span>.<span style="color:#a6e22e">nanode</span>.<span style="color:#a6e22e">ip_address</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Later on (after terraforming) we will be able to use <code>terraform output</code> to see
the server IP address.</p>
<p>We have the inventory file. Now we need a
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">playbook</a>.
A playbook contains a sequence of tasks to be applied to our server.</p>
<p>Let&rsquo;s start with a basic playbook that just installs and starts <code>nginx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">all</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install the web server (nginx)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.general.apk</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Start the web server</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">started</span>
</span></span></code></pre></div><p>Save this to a <code>playbook.yml</code> file.</p>
<p>After terraforming, we should now be able to run ansible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ansible-playbook -i inventory.ini playbook.yml
</span></span></code></pre></div><p>In order to make this setup more ergonomic, let&rsquo;s create a <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> terraform ansible
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ansible</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	ansible-playbook -i inventory.ini playbook.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> init
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> plan
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> destroy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all ansible terraform clean
</span></span></code></pre></div><p>Then we can just run <code>make terraform</code> or <code>make ansible</code> for granular steps. Or
just <code>make</code> to run everything in the right order.</p>
<p>I extracted the <code>terraform</code> binary to its own variable because it facilitates
the use of <a href="https://opentofu.org/">OpenTofu</a> (a fork) in lieu of terraform.</p>
<p>And that&rsquo;s it for today! In a future post, we&rsquo;ll look into extending our
Ansible usage to fully bootstrap Miniflux on the server.</p>]]></content:encoded></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s discuss the <em>raison d&rsquo;etre</em> of <a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing</a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.</p>
<p><a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago</a>, web developers would run
(web) integration tests with <a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic</a> using Google Chrome (or Chromium)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This was a <a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era</a>.</p>
<p><em>&ldquo;Why?&rdquo;</em>, you may rightfully ask.</p>
<ul>
<li>The web browser and/or its components / extensions / etc could
<strong>auto-update</strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness</li>
<li>Chrome adds an <strong>info bar</strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.</li>
<li>There are no versioned Chrome builds for download. There&rsquo;s no <strong>browser
pinning</strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
<ul>
<li><strong>Corollary</strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
<a href="https://chromedriver.chromium.org/downloads">Chromedriver</a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ul>
</li>
</ul>
<p>In order to address these (and other) issues, <a href="https://goo.gle/chrome-for-testing">Chrome for
Testing</a> (hereafter &ldquo;CfT&rdquo;) was born. To
clarify, today where are three flavours of Chrom*:</p>
<ul>
<li><strong>Chromium</strong>: the open-source project, <a href="https://chromium.org/">https://chromium.org/</a>. The root of all
derivatives (Microsoft Edge, Brave, etc). It is available in full source
form, but there are no (official) pre-built binaries for it.</li>
<li><strong>Google Chrome</strong>: the proprietary, closed-source version of Chromium developed
by Google. Think of it as Chromium on steroids. Google distributes pre-built
Chrome binaries for every platform it supports.</li>
<li><strong>Google Chrome for Testing</strong>: think of it as &ldquo;reproducible (or pinned, or
frozen) Google Chrome&rdquo;. It is basically a snapshot of Google Chrome in a
fixed time in the past, plus a few bits of developer-oriented features
mentioned in this article.</li>
</ul>
<p>There are other <em>niceties</em> that Chrome for Testing accomplishes as of today:</p>
<ul>
<li>The <a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)</a> experiment
(&ldquo;Protocol Monitor&rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.</li>
<li>Mechanisms such as <a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts</a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
<a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable"><code>DEBIAN_FRONTEND=noninteractive</code></a>
when running <code>apt</code> in dockerfiles. You don&rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.</li>
<li>Completely agnostic to the concept of &ldquo;Stable&rdquo; / &ldquo;Beta&rdquo; / &ldquo;Dev&rdquo;. If you have
pinned versions, you don&rsquo;t need to care about any of that.</li>
<li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases</li>
</ul>
<p>Something important to note:</p>
<blockquote>
<p><strong>Warning</strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.</p>
</blockquote>
<p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&rsquo;s
package manager (e.g. <code>apt</code>, <code>dnf</code>, <code>pacman</code>, etc). Why should it be different
for Chrome for Testing?</p>
<p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&rsquo;t want end users to shoot themselves on the foot, therefore it&rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Because of that, CfT cannot be made the default system browser.</p>
<p>The easiest way to obtain CfT is via its public API, which is documented here:
<a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/</a>, or through the official
<a href="https://pptr.dev/browsers-api">CLI utility</a> that is part of Puppeteer.</p>
<p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.</p>
<h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?</h2>
<p>The <a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi</a> repository is an excellent (and simple-ish) example on how to do so<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Given a <code>.github/workflows/e2e.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">E2E tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">e2e</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is the exciting part wherein we fetch CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Despite the &#34;chromium&#34; name, this is actually CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We set a explicit shell to force &#34;set -eo pipefail&#34; so that,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># if the command fails, then the entire step fails.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We do not want &#34;cut&#34; to run if the download fails for some reason.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># version of the CLI tool, but that&#39;s how it should be done for now.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We store the location of the CfT binary in an environment variable.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Google Chrome for Testing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cft_binary=&#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&#39; &#39;)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;cft_binary=$cft_binary&#34; &gt;&gt; $GITHUB_ENV</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip install -r tests/requirements.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># out to CfT, using the environment variable set earlier.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run E2E tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm run e2e</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">BROWSER_BIN</span>: <span style="color:#ae81ff">${{ env.cft_binary }}</span>
</span></span></code></pre></div><p>You can find the complete version of this example in an <a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit</a>
within that repository. The reason I link to an older commit is due to its
direct usage of the <a href="https://pptr.dev/browsers-api">@puppeteer/browsers</a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.</p>
<p>To fully realize the benefits of reproducibility, you should not use <code>latest</code>.
Instead, pin the browser to a specific version.</p>
<p>If using an environment variable (or a command-line flag) is not an option for
some reason, then an alternative would be to create a symlink (<code>ln -s</code>) to
<code>$cft_binary</code> from a place in the front of your <code>$PATH</code>. Or, alternatively,
temporarily update your <code>$PATH</code> with the <code>dirname</code> of <code>$cft_binary</code>.</p>
<p>Also, if you cannot or do not want to install <code>npm</code> (<code>npx</code>) just for the sake
of fetching CfT<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, then just fetch it directly (use <code>curl</code> or <code>wget</code>) from
its <a href="https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints">API
endpoint</a>, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/121.0.6167.85/linux64/chrome-linux64.zip
</span></span></code></pre></div><p>Although note that this is not a future-proof way of fetching CfT. It&rsquo;s a
simple shortcut. The better way is to query the JSON metadata file for a
specific platform and browser version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% curl https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json | jq -r <span style="color:#e6db74">&#39;.builds.&#34;121.0.6167&#34;.downloads.chrome[] | select(.platform == &#34;linux64&#34;).url&#39;</span>
</span></span></code></pre></div><p>&hellip;so that the download works even if the URL changes in the future <a href="https://github.com/GoogleChromeLabs/chrome-for-testing/pull/102">for some
reason</a>.</p>
<h2 id="references">References</h2>
<ul>
<li>Chrome for Testing Design Document: <a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing</a></li>
<li><a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For simplicity, referred to as just <em>Chrome</em> hereafter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You can find lots of such reports <a href="https://groups.google.com/g/chromedriver-users">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The same way you wouldn&rsquo;t recommend Arch Linux for linux newbies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><strong>Disclaimer</strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I know, I know, JS bloat.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Terraforming a Linode: hello world</title><link>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I host my own <a href="https://miniflux.app/">Miniflux</a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running <a href="https://www.alpinelinux.org/">Alpine Linux</a>.</p>
<p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
<a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC</a>.</p>
<p>The current setup does not use any containers. I had proudly made it as KISS as
possible at the time:</p>
<ol>
<li>Linode is a very beginner-friendly (and cheap) VPS</li>
<li>Alpine Linux is a first-class citizen on Linode</li>
<li>There&rsquo;s an <code>apk</code> <a href="https://pkgs.alpinelinux.org/packages?name=miniflux">package</a> for <code>miniflux</code></li>
<li>There&rsquo;s an OpenRC<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> script for <code>miniflux</code> (so that it can be controlled via <code>service</code>)</li>
</ol>
<p>For the first part of this automation we will look into provisioning a Linode
with an Alpine Linux installation. In order to do so we will use HashiCorp
<a href="https://www.terraform.io/">Terraform</a>.</p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>Provision a new Linode</li>
<li>Deploy it in Europe</li>
<li>Use the smallest shape (a so-called <a href="https://www.linode.com/community/questions/211/what-is-a-nanode">Nanode</a>)</li>
<li>Run Alpine Linux</li>
<li>Set it up with my <a href="https://github.com/thiagowfx.keys">public ssh key</a>, which is hosted on Github</li>
</ul>
<h2 id="terraform-setup">Terraform setup</h2>
<ul>
<li>Install a provider for Linode: <a href="https://registry.terraform.io/providers/linode/linode/latest/docs">https://registry.terraform.io/providers/linode/linode/latest/docs</a></li>
</ul>
<p>Scaffold it like this, in a <code>main.tf</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform init
</span></span></code></pre></div><ul>
<li>Generate a Linode API token</li>
</ul>
<p>Go to <a href="https://cloud.linode.com/profile/tokens">https://cloud.linode.com/profile/tokens</a>, create a new token called
<code>terraform</code>. with the &ldquo;Linodes&rdquo; scope set to &ldquo;Read/Write&rdquo;.</p>
<ul>
<li>Append this API token to <code>main.tf</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">token</span> = <span style="color:#e6db74">&#34;&lt;your token here&gt;&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Add a
<a href="https://registry.terraform.io/providers/linode/linode/latest/docs/resources/instance"><code>linode_instance</code></a>
with the appropriate fields set according to the documentation:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>  = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>  = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>   = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = [<span style="color:#e6db74">&#34;&lt;your ssh public key here&gt;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan
</span></span></code></pre></div><p>&ldquo;Plan&rdquo; is basically a dry-run. Terraform will output what it intends to do, but nothing will be done yet.</p>
<ul>
<li>Analyze the output and double check that it looks correct.</li>
</ul>
<p>To actually perform the provisioning, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform apply
</span></span></code></pre></div><p>Then confirm the prompt.</p>
<p>Within a few seconds (or maybe minutes), you should see your new Linode in the
<a href="https://cloud.linode.com/">Linode Console</a>.</p>
<p>We can test our deployment by ssh&rsquo;ing to our new machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ssh root@&lt;public IP address&gt; -i ~/.ssh/my_ssh_key
</span></span><span style="display:flex;"><span>Welcome to Alpine!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Alpine Wiki contains a large amount of how-to guides and general
</span></span><span style="display:flex;"><span>information about administrating Alpine systems.
</span></span><span style="display:flex;"><span>See &lt;https://wiki.alpinelinux.org/&gt;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You can setup the system with the command: setup-alpine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You may change this message by editing /etc/motd.
</span></span></code></pre></div><p>Let&rsquo;s take a pause to appreciate how lightweight it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>localhost:~# df -h
</span></span><span style="display:flex;"><span>Filesystem                Size      Used Available Use% Mounted on
</span></span><span style="display:flex;"><span>devtmpfs                 10.0M         <span style="color:#ae81ff">0</span>     10.0M   0% /dev
</span></span><span style="display:flex;"><span>shm                     487.8M         <span style="color:#ae81ff">0</span>    487.8M   0% /dev/shm
</span></span><span style="display:flex;"><span>/dev/sda                 24.1G    238.1M     22.6G   1% /
</span></span><span style="display:flex;"><span>tmpfs                   195.1M    268.0K    194.8M   0% /run
</span></span></code></pre></div><p>Only 238 MiB!</p>
<p>To deprovision it, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -destroy
</span></span></code></pre></div><p>If everything looks correct, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform destroy
</span></span></code></pre></div><p><strong>Warning</strong>: It turns out the &ldquo;Linodes&rdquo; scope was not enough to do the
deprovisioning. I needed to create a new scope, with more permissions, in order
to do so.</p>
<p>As you can see, terraform makes it very trivial to deprovision systems.</p>
<p><strong>Bonus points</strong>: run <code>terraform fmt</code> to format your file. Never go <a href="https://www.youtube.com/watch?v=-CmadmM5cOk">out of
style</a>.</p>
<p><strong>Tip</strong>: At any point you can run <code>terraform validate</code> to verify your <code>main.tf</code>
file is syntactically correct.</p>
<p>Two things could be improved in the previous setup:</p>
<ul>
<li>We could use <code>authorized_users</code> to pass in our linode username. If we add an
SSH key to our linode account, then that key would be automatically deployed
to the system, thereby removing the need to specify <code>authorized_keys</code>.</li>
<li>Alternatively, we could fetch our key from an URL endpoint with the use of
the <code>hashicorp/http</code> provider, like so:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;thiagowfx_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/thiagowfx.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">thiagowfx_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The &ldquo;list comprehension&rdquo; above does line splitting magic to convert them to a
list of string, and the <code>compact</code> removes the empty new line at the end.</p>
<p>We could improve the example above even further.</p>
<p>For starters, let&rsquo;s parameterize out the username to a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;user_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We could then easily supply another username with <code>-var</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -var github_username<span style="color:#f92672">=</span>torvalds
</span></span></code></pre></div><p>Note that the above example leverages <a href="https://developer.hashicorp.com/terraform/language/expressions/strings">string interpolation</a>.</p>
<p>We could also extract the SSH keys list to its own &ldquo;variable&rdquo; (<a href="https://developer.hashicorp.com/terraform/language/values/locals">locals</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">ssh_keys</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>A more robust (and stable) way to query the key though is through the Github API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that a typical response body looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;id&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;&lt;ssh key&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>API endpoint documentation:
<a href="https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user">https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user</a></p>
<p>If we use <code>output</code> instead of <code>locals</code>, then we can debug (inspect) it with
<code>terraform output</code>.</p>
<p>And that&rsquo;s it for today! In a future post, we will continue from here by using
<a href="https://www.ansible.com/">Ansible</a> to install and set up Miniflux in our new
Linode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alpine Linux does not use <code>systemd</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Synchronized in Python</title><link>https://www.perrotta.dev/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><guid>https://www.perrotta.dev/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<blockquote>
<p><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the <code>synchronized</code>
keyword. Is there anything that can achieve the same results in
Python?</a></p>
</blockquote>
<p>Without having prior knowledge of any python libraries to do so, the primitive interface
I would expect resembles the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>This isn&rsquo;t robust: if an exception happens in <code>perform_mutation</code> the lock would
never be released. A small improvement we can make is to wrap it with
<code>try/finally</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>However it turns out there&rsquo;s a more pythonic way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How can we test this? First, let&rsquo;s use a single thread.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  foo<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;hello from the main thread&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use multiple threads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>write, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>Without the lock this is one of the results I get locally:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 6
hello from thread 8
hello from thread 7
hello from thread 5
hello from thread 9
</code></pre><p>With the lock I always get the following, as you would predict:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 5
hello from thread 6
hello from thread 7
hello from thread 8
hello from thread 9
</code></pre><p>We could go one level deeper in the abstraction by using a <code>@synchronized</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@synchronized</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How do we implement it?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">synchronized</span>(member):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(member)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> lock <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>setdefault(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, Lock())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> lock:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> member(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span></code></pre></div><p>One last concept to learn: <code>RLock</code> a.k.a. reentrant lock.</p>
<p>Consider the following program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock, Thread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeA</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeAandB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeA(bytes) <span style="color:#75715e"># a usual lock would block here</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeB(bytes)
</span></span></code></pre></div><p>Invoked as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeA, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> A&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> B&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeAandB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> AB&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>It will not work as expected. As soon as the first <code>changeAandB</code> gets called, its inner
<code>self.changeA</code> call will block. This is because the lock can only be acquired once.</p>
<p>In this specific example, the straightforward way to fix the issue is to use an <code>RLock</code>:
<code>self.lock = RLock()</code>. The reentrant lock can be locked multiple times.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://theorangeduck.com/page/synchronized-python">https://theorangeduck.com/page/synchronized-python</a></li>
<li><a href="https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances">https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances</a></li>
<li><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized</a></li>
<li><a href="https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock">https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock</a></li>
</ul>]]></content:encoded></item><item><title>★ Tools you should know about: moreutils</title><link>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><guid>https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://joeyh.name/code/moreutils/"><code>moreutils</code></a> has previously been covered <a href="https://news.ycombinator.com/item?id=31043655">elsewhere</a>, multiple times. It&rsquo;s a collection of small unix tools that follow the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> very strongly.</p>
<p>Here are some of my favorites with example usages. Obviously this post isn&rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.</p>
<h2 id="sponge">sponge</h2>
<blockquote>
<p>sponge(1) - soak up standard input and write to a file</p>
</blockquote>
<p>Here&rsquo;s a typical workflow <code>sponge(1)</code> is great at:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Given a file</span>
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Imagine that for whatever reason we want to replace &#39;a&#39; with &#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naively, we could try this:</span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> &gt; myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># However the file becomes empty!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sponge comes to the rescue!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> | sponge myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span></code></pre></div><p>It is great to use <code>sponge</code> in lieu of <code>&gt;</code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.</p>
<h2 id="vidir">vidir</h2>
<blockquote>
<p>vidir(1) - edit directories and filenames</p>
</blockquote>
<p><code>vidir(1)</code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open <code>vidir</code> at the top-level directory of this blog repository, it opens up <code>vim</code> (although it doesn&rsquo;t need to be <code>vim</code>, your <code>$EDITOR</code> is honoured) with the following content:</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>If I make, say, the following modifications (lines 7 and 8):</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>And then save and quit <code>vim</code> (<code>:wq</code>), then the effect would have been the same as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ mv Makefile GNUMakefile
</span></span><span style="display:flex;"><span>$ mv README.md README.rst
</span></span></code></pre></div><p>If I changed my mind and decided not to save the modifications, I could just do <code>:cq</code>.</p>
<p>It&rsquo;s possible to leverage vim features such as <code>.</code> (repeat command) and <code>:%s/</code> (find and replace) to perform those mass file renames quickly and effectively. <code>vidir</code> is a breeze to use!</p>
<h2 id="ifne">ifne</h2>
<blockquote>
<p>ifne(1) - Run command if the standard input is not empty</p>
</blockquote>
<p><code>ifne(1)</code> is effective when used with <code>find</code> or <code>fd</code> to keep shell pipes &ldquo;happy&rdquo;. Here&rsquo;s one simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | xargs clang-format
</span></span></code></pre></div><p>This should work as expected, but it&rsquo;s cleaner to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | ifne xargs clang-format
</span></span></code></pre></div><p>The added <code>ifne</code> ensures the <code>xargs</code> command is only executed if and only if <code>find</code> yields at least one result in its output.</p>
<p>This wasn&rsquo;t a very practical example though: a more realistic way to use <code>ifne</code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend <code>ifne</code> to it:</p>
<pre tabindex="0"><code>$ this | is | a | complicated | pipe
# assume &#34;complicated&#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
</code></pre><h2 id="combine">combine</h2>
<blockquote>
<p>combine(1) - combine sets of lines from two files using boolean operations</p>
</blockquote>
<p><code>combine(1)</code> is pretty much <code>comm(1)</code>, but much more user-friendly. Given two files <code>file1</code> and <code>file2</code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&rsquo;s one example to find the <em>common lines</em> in <em>both</em> files, compare <code>combine</code> and <code>comm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ combine file1 and file2
</span></span><span style="display:flex;"><span>$ comm -12 file1 file2     <span style="color:#75715e"># flags are harder to remember</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Keychron K2 on macOS: fix Home and End keys</title><link>https://www.perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><guid>https://www.perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://www.perrotta.dev/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p></description><content:encoded><![CDATA[<p><strong>Issue</strong>: For whatever reason, the <code>Home</code> and <code>End</code> keys on my <a href="https://www.perrotta.dev/2022/01/keychron-k2-review/">Keychron K2</a> do not work as intended on macOS.</p>
<h2 id="expectations-vs-reality">Expectations vs Reality</h2>
<p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&rsquo;d expect:</p>
<ul>
<li><code>Home</code> to position the text cursor in the beginning of the line (à la <code>C-a</code> in emacs)</li>
<li><code>End</code> to position the text cursor in the end of the line (à la <code>C-e</code> in emacs)</li>
</ul>
<p>The only way to provoke these effects <em>out-of-the-box</em> is by pressing, respectively, the <code>Cmd + Left</code> and <code>Cmd + Right</code> shortcuts, as you would normally do in a Macbook laptop native keyboard.</p>
<p>This is very annoying because it only happens in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: the <code>Home</code> and <code>End</code> keys work just fine in both Linux and Windows. <a href="https://www.reddit.com/r/Keychron/comments/ooice5/home_and_end_keys_not_working_on_monterrey/">A reddit user</a> reported the same issue in <code>/r/keychron</code>, but the existing thread has no proposed solutions.</p>
<h2 id="enter-karabiner-elements">Enter Karabiner Elements</h2>
<p>I&rsquo;ve always heard good things about <a href="http://karabiner-elements.pqrs.org">Karabiner Elements</a> as a praised one-size-fits-all application for keyboards and macros in macOS, thus decided to give it a try. <strong>Bonus points</strong>: it is <a href="https://github.com/pqrs-org/Karabiner-Elements">open source</a>, released into the public domain.</p>
<p>Upon installing it with <a href="https://formulae.brew.sh/cask/karabiner-elements">Homebrew Cask</a> (<code>brew install karabiner-elements</code>), I executed it. Then I needed to give a bunch of permissions to the application via <code>macOS Settings &gt; Security &amp; Privacy &gt; Privacy &gt; Input Monitoring</code>. The following apps were whitelisted accordingly:</p>
<ul>
<li><code>karabiner_grabber</code></li>
<li><code>karabiner_observer</code></li>
<li><code>Karabiner-EventViewer.app</code>: this one is optional, but useful for debugging</li>
</ul>
<p>The app is straightforward to use. It allows you to do all sorts of reactions to key codes input events.</p>
<p>I had a simple idea: I wanted to map <code>Home</code> to <code>Cmd + Left</code>, and <code>End</code> to <code>Cmd + Right</code>.</p>
<p>Unfortunately these are considered &ldquo;Complex modifications&rdquo; because they map one origin key to two destination keys. &ldquo;Simple modifications&rdquo; are <em>one-to-one</em> key mappings. Why is it unfortunate? Because it doesn&rsquo;t seem to be possible to do such mappings via the app UI. Apparently one needs to express those mappings in a <code>.json</code> file instead.</p>
<h2 id="ah-communities">Ah, communities</h2>
<p>Sure, no problem, I was about to do it but then I realized there&rsquo;s an <a href="https://ke-complex-modifications.pqrs.org">official website</a> for community-maintained mappings. The website is well organized and curated. Why create something fully from scratch when I could just reuse an existing one?</p>
<p>I found a &ldquo;Keychron K2&rdquo; category which made me instantly happy but it turned out not to be useful, as there were only two defined mappings therein:</p>
<blockquote>
<ul>
<li>Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard</li>
<li>Remap some Keychrom K2(US) keys to make it less painful to switch from Macbook(RU) keyboard</li>
</ul>
</blockquote>
<p>None of these mattered to me. Then I searched for <code>home to cmd</code> which led me to <a href="https://ke-complex-modifications.pqrs.org/#HomeEnd">this entry</a>, which had exactly the mappings I wanted:</p>
<blockquote>
<p>Home and End</p>
<ul>
<li>Home to Command Left</li>
<li>End to Command Right</li>
</ul>
</blockquote>
<p><a href="https://ke-complex-modifications.pqrs.org/json/HomeEnd.json">Its resulting JSON</a> looks roughly like this (irrelevant bits stripped for the sake of brevity):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Home and End&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;rules&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Home to Command Left&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;home&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;left_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;End to Command Right&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;end&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;right_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There&rsquo;s conveniently an <strong>Import</strong> button in the website though, which automatically opens the mappings in Karabiner Elements, so I didn&rsquo;t even need to copy and paste the JSON.</p>
<h2 id="verdict">Verdict</h2>
<p><strong>End Result</strong>: It worked flawlessly! The only caveat is that from now on I need to keep the Karabiner Elements application running as a daemon, but it is well justified. Plus, if I ever need<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to map additional keys in the future, now I already have a workflow in place to do so.</p>
<p>Karabiner is like having <a href="https://qmk.fm">QMK</a> purely at the software layer, which works for any keyboard whatsoever.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As of this writing: macOS Monterey: 12.3.1.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it</a>&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Wayland: from i3 to sway</title><link>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I&rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is <a href="https://i3wm.org/"><code>i3</code></a>, so the natural choice in Wayland is <a href="https://swaywm.org/"><code>sway</code></a>.</p>
<h2 id="intro">Intro</h2>
<p><code>sway</code> works well with the <code>i3</code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tree ~/.config/<span style="color:#f92672">{</span>i3,sway<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>/home/typhoon/.config/i3
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── i3.conf
</span></span><span style="display:flex;"><span>└── config
</span></span><span style="display:flex;"><span>/home/typhoon/.config/sway
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── sway.conf
</span></span><span style="display:flex;"><span>└── config -&gt; ../../../i3/.config/i3/config
</span></span></code></pre></div><ul>
<li>The master config is
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config"><code>~/.config/i3/config</code></a>.
It is pretty standard, generated by
<a href="https://build.i3wm.org/docs/i3-config-wizard.html"><code>i3-config-wizard</code></a> with
a few tweaks on top for my own workflow. It works for both <code>i3</code> and <code>sway</code>.
The config contains this snippet:</li>
</ul>
<pre tabindex="0"><code># Load user configs if existing. Order is important.
include conf.d/*.conf
</code></pre><p>The snippet allows drop-in customizations to live in <code>conf.d</code>. The <code>include</code> directive is a relatively <a href="https://github.com/i3/i3/pull/4420">new</a> addition to the i3config syntax and it&rsquo;s the main reason this setup is elegant and minimalist.</p>
<ul>
<li>i3-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf"><code>~/.config/i3/conf.d/i3.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with <code>sway</code>, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
#   dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25

    colors {
        background $black
        statusline $white

        focused_workspace $bgcolor $bgcolor $white $black
        active_workspace $gray $gray $black $gray
        inactive_workspace $black $black $gray $gray
        urgent_workspace $red $red $white $green
    }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
</code></pre><p>It&rsquo;s possible some of these configs will become compatible with <code>sway</code> over time, but at the time of this writing they are not.</p>
<ul>
<li>sway-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf"><code>~/.config/sway/conf.d/sway.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with i3, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
#   sway(5)
#   https://github.com/swaywm/sway/wiki
#   https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &#34;*&#34; scale 1.5

# Wallpaper
output &#34;*&#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
</code></pre><p>Most of those are wayland-specific options.</p>
<h2 id="quirks">Quirks</h2>
<p><code>gaps</code> is available in <code>i3</code> as well but only if you use
<a href="https://github.com/Airblader/i3"><code>i3-gaps</code></a>, which generally I refuse to in
order to stay closer to vanilla/upstream <code>i3</code>.</p>
<p>The <code>play-pause</code> multimedia key is
a <a href="https://github.com/swaywm/sway/issues/4783">bug</a> I found on <code>sway</code>. It&rsquo;s quite
annoying, the workaround as you can see above is to use <code>bindcode</code> instead of
<code>bindsym</code>. For more details see the bug.</p>
<p>In general <code>sway</code> works very well out-of-the-box so long as you install
<a href="https://wayland.freedesktop.org/xserver.html">XWayland</a> (<code>xorg-xwayland</code> on
Arch Linux). XWayland <strong>transparently</strong> proxies X11 apps to a X11 server that
runs inside wayland.</p>
<p>It&rsquo;s possible to detect those apps by running
<a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html"><code>xprop</code></a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
<a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes"><code>xeyes</code></a>
is another way to detect them.</p>
<p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
<code>xwayland disable</code> to the <code>sway</code> config. I wouldn&rsquo;t recommend that though, most
Linux GUI apps aren&rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&rsquo;s life.</p>
<p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&rsquo;s
noticeable.</p>
<p>There&rsquo;s no need to replace all of your small <code>i3</code> Xorg utilities with wayland
ones. For example, <a href="https://github.com/davatorium/rofi"><code>rofi</code></a> (application
launcher) works just fine (no need for <code>wofi</code>). The stock <code>i3</code> bar (<code>sway</code> bar?)
works just fine, there&rsquo;s no need for <code>polybar</code> or <code>waybar</code>.</p>
<p>Some utilities need to be replaced though. For example, <code>dunst</code> (notification
daemon) does not seem to work with <code>sway</code> out-of-the-box, <code>mako</code> seems to be a
recommended replacement. <code>i3lock</code> (lock screen) also does not work, <code>sway</code>
comes with its own screen lock directives. Screenshotters (e.g. <code>scrot</code>) will
also need to be replaced.</p>
<p>The system tray does not seem to work fine out-of-the-box. I haven&rsquo;t
investigated much to figure out what&rsquo;s wrong with it.</p>
<p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying <a href="https://git.sr.ht/~kennylevinsen/greetd"><code>greetd</code></a>,
<a href="https://github.com/tvrzna/emptty/"><code>emptty</code></a> and
<a href="https://github.com/fairyglade/ly"><code>ly</code></a>, in that order. <code>ly</code> is in my opinion
the best one in terms of balancing simplicity and usefulness.</p>
<p><code>sway</code> / <code>XWayland</code> doesn&rsquo;t source <code>~/.Xresources</code>. This is an issue if you
rely on customizations therein. It does source <code>~/.Xdefaults</code> though!
Leveraging this, I did the following changes:</p>
<ul>
<li>(i) <code>~/.Xresources</code> sources <code>~/.Xdefaults</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xresources
</span></span><span style="display:flex;"><span>! These settings apply to X11 only.
</span></span><span style="display:flex;"><span>! Use ~/.Xdefaults <span style="color:#66d9ef">for</span> settings that apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;.Xdefaults&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! Source:
</span></span><span style="display:flex;"><span>!   xrdb -merge ~/.Xresources
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Dump all properties:
</span></span><span style="display:flex;"><span>!   xrdb -q
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Check <span style="color:#66d9ef">if</span> DPI is set:
</span></span><span style="display:flex;"><span>!   xrdb -q | grep -i dpi
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! HiDPI
</span></span><span style="display:flex;"><span>! Common values:
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">96</span>  <span style="color:#f92672">(</span>x1.0, baseline<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">144</span> <span style="color:#f92672">(</span>x1.5<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">192</span> <span style="color:#f92672">(</span>x2.0, HiDPI<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>*.dpi: <span style="color:#ae81ff">144</span>
</span></span></code></pre></div><ul>
<li>(ii) <code>~/.Xdefaults</code> holds my customizations that originally lived in <code>~/.Xresources</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xdefaults
</span></span><span style="display:flex;"><span>! These settings apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span>! Use ~/.Xresources <span style="color:#66d9ef">for</span> X11-only settings.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Xft.antialias: true
</span></span><span style="display:flex;"><span>Xft.hinting: true
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>In principle I could just have symlinked them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ln -s ~/.Xresources ~/.Xdefaults
</span></span></code></pre></div><p>The reason why I didn&rsquo;t do it is to avoid double scaling (DPI). You see, my
<code>sway</code> config already sets DPI / scaling to 1.5x. If we do that in
<code>~/.Xdefaults</code> as well then Xorg applications would have been scaled twice.</p>
<h2 id="closing-remarks">Closing remarks</h2>
<p>In general Wayland / <code>sway</code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&rsquo;ll run into other quirks. I have mixed feelings
and wouldn&rsquo;t necessarily recommend it. I wouldn&rsquo;t give an anti recommendation
either. It&rsquo;s complicated&hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.</p>]]></content:encoded></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://www.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>I am currently evaluating <a href="https://nixos.org/download.html">Nix</a> as a
replacement for <a href="https://brew.sh">Homebrew</a> CLI apps in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
<a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others</a>
<a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have</a>
<a href="https://ghedam.at/15490/so-tell-me-about-nix">previously</a> written about this.</p>
<p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &hellip;). The good news is that those components
are for the most part modular, there&rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.</p>
<p>For now, I am only adopting <code>nix-env</code> and <code>nix-shell</code>, with no <code>*.nix</code> config
files. This post covers <code>nix-env</code>.</p>
<p>For simplicity, think of <code>nix-env</code> as a package manager, akin to <code>apk</code>,
<code>pacman</code>, <code>brew</code>, <code>apt</code>, <code>pkg</code>, etc.</p>
<h2 id="install-a-package">Install a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i moreutils
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>I see some guides using <code>nix-env -iA</code> but <code>-i</code> seems to suffice. We could
optionally specify the <code>nixpkgs.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i nixpkgs.moreutils
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;nixpkgs.moreutils&#39;</span> matches no derivations
</span></span></code></pre></div><p>Oh no! Maybe that&rsquo;s what the <code>-A</code> is for?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -iA nixpkgs.moreutils
</span></span><span style="display:flex;"><span>replacing old <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span></code></pre></div><p>Indeed! Apparently that <code>-A</code> thing stands for attribute. The only thing I know
is that there are both <code>nixpkgs.*</code> and <code>nixos.*</code>. But I don&rsquo;t care about NixOS
at this point. I&rsquo;ll just ignore <code>-A</code> from now on, for the time being.</p>
<h2 id="list-installed-packages">List installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span></code></pre></div><p>Easy! This actually gets displayed in my <code>less</code> pager.</p>
<h2 id="upgrade-installed-packages">Upgrade installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -u
</span></span></code></pre></div><p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&rsquo;s some update to one of my
installed CLI applications. I&rsquo;ve heard there&rsquo;s something called nix channel to
control that. Leaving it for another day though.</p>
<p><strong>Update(2022-02-18)</strong>: I learned that <code>nix-env -u</code> is akin to <code>apt upgrade</code> or
<code>apk upgrade</code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
<code>apt update</code> or <code>apk update</code>, use <code>nix-channel --update</code>.</p>
<p><strong>Note</strong>: On macOS this needs to be <code>sudo -i nix-channel --update</code>. See
<a href="https://github.com/NixOS/nix/issues/3595">issue</a>.</p>
<h2 id="uninstall-a-package">Uninstall a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env --uninstall moreutils
</span></span><span style="display:flex;"><span>uninstalling <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>Easy!</p>
<h2 id="search-for-packages">Search for packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP <span style="color:#e6db74">&#39;.*moreutils.*&#39;</span>
</span></span></code></pre></div><p>The <code>.*</code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &lsquo;derivation&rsquo; in Nix):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutils
</span></span><span style="display:flex;"><span>nixpkgs.moreutils  moreutils-0.67
</span></span></code></pre></div><p>If I write the wrong package name, the following happens:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutil
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;moreutil&#39;</span> matches no derivations, maybe you meant:
</span></span><span style="display:flex;"><span>       moreutils
</span></span></code></pre></div><p>It was helpful in this case, but I wouldn&rsquo;t always count on that. It is a bit
annoying that there&rsquo;s no <code>nix search moreutils</code> command, but it seems that
<code>nix-env</code> is very heavily tailored to use short flags, just like <code>pacman</code> in
Arch Linux. I got used to <code>pacman</code>, hopefully I can get used to the <code>nix-env</code>
short flags at some point.</p>
<p>Actually I tried it out and there is a <code>nix search</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix search moreutils
</span></span><span style="display:flex;"><span>error: experimental Nix feature <span style="color:#e6db74">&#39;nix-command&#39;</span> is disabled; use <span style="color:#e6db74">&#39;--extra-experimental-features nix-command&#39;</span> to override
</span></span></code></pre></div><p>This isn&rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the <code>nix-env</code> form for now.</p>
<p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>atool-0.39.0
</span></span><span style="display:flex;"><span>bash-interactive-5.1-p12
</span></span><span style="display:flex;"><span>coreutils-9.0
</span></span><span style="display:flex;"><span>exa-0.10.1
</span></span><span style="display:flex;"><span>fpp-0.9.2
</span></span><span style="display:flex;"><span>fzf-0.29.0
</span></span><span style="display:flex;"><span>git-2.34.1
</span></span><span style="display:flex;"><span>htop-3.1.2
</span></span><span style="display:flex;"><span>hugo-0.92.0
</span></span><span style="display:flex;"><span>jq-1.6
</span></span><span style="display:flex;"><span>less-600
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span><span style="display:flex;"><span>ncdu-1.16
</span></span><span style="display:flex;"><span>perl5.34.0-ack-3.5.0
</span></span><span style="display:flex;"><span>ranger-1.9.3
</span></span><span style="display:flex;"><span>stow-2.3.1
</span></span><span style="display:flex;"><span>tmux-3.2a
</span></span><span style="display:flex;"><span>tree-1.8.0
</span></span><span style="display:flex;"><span>vim-8.2.4186
</span></span><span style="display:flex;"><span>watch-procps-3.3.16
</span></span><span style="display:flex;"><span>wget-1.21.2
</span></span><span style="display:flex;"><span>zoxide-0.8.0
</span></span></code></pre></div><p>Those were very intuitive to find, with the exception of <code>ack</code> and <code>bash-interactive</code>:</p>
<ul>
<li><code>bash</code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
<code>~/.bashrc</code> wrecked havoc with the non-interactive version.</li>
<li><code>ack</code> is very oddly named. Really. Also: <code>nix-env -i ack</code> doesn&rsquo;t work, but
<code>nix-env -iA nixpkgs.ack</code> does. I suspect it will be hard to ignore <code>-A</code> in
the future.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking there&rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, <a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu</a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ SSH plus tmux automatically</title><link>https://www.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><guid>https://www.perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description><content:encoded><![CDATA[<p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.</p>
<p>To persist those connections, a terminal multiplexer is often used, <code>tmux</code> and <code>screen</code> being the two most popular ones.</p>
<p>In this post I will cover a few different client-side and server-side ways to have <code>ssh</code> automatically spawn <code>tmux</code> upon connection.</p>
<h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)</h2>
<p>Start <code>tmux</code>, forcing unicode, attaching to and/or creating a session named <em>main</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- tmux -u new -A -s main
</span></span></code></pre></div><p><code>-u</code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&rsquo;s safer to always include <code>-u</code> just in case.</p>
<p>Tip: If it&rsquo;s annoying to remember to type the full command above, consider adding an <code>alias</code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the <a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell</a> extension.</p>
<h2 id="option-2-use-sshconfig-client-side">Option #2: Use <code>~/.ssh/config</code> (client-side)</h2>
<p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.ssh/config
</span></span><span style="display:flex;"><span>Host *
</span></span><span style="display:flex;"><span>  RequestTTY yes
</span></span><span style="display:flex;"><span>  RemoteCommand tmux -u new -A -s main
</span></span></code></pre></div><p>You don&rsquo;t need to match all hosts (<code>Host *</code>), if you&rsquo;d rather match one or more specific hosts, refer to the ssh config syntax <code>ssh_config(5)</code> to add them. A simple example would be <code>Host mymachine.example.org</code>.</p>
<p><strong>Caveat</strong>: I&rsquo;ve found this method interferes with <code>git</code> + <code>ssh</code> authentication. More specifically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git remote -v
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ git push
</span></span><span style="display:flex;"><span>Cannot execute command-line and remote command.
</span></span><span style="display:flex;"><span>fatal: Could not read from remote repository.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please make sure you have the correct access rights
</span></span><span style="display:flex;"><span>and the repository exists.
</span></span></code></pre></div><p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&rsquo;t use it with <code>Host *</code>.</p>
<h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use <code>~/.bash_profile</code> or similar (server-side, recommended)</h2>
<p>This method leverages your login shell startup config file (<code>~/.bash_profile</code>, <code>~/.zprofile</code>, etc) to automatically spawn <code>tmux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.</span>
</span></span><span style="display:flex;"><span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The session is called `main`.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Escape hatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ssh &lt;host&gt; -t -- NOTMUX=1 &lt;shell&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$NOTMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$TMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$SSH_TTY<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> $- <span style="color:#f92672">=</span>~ i <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  tmux -u new -A -s main
</span></span><span style="display:flex;"><span>  exit
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The <code>if</code> basically checks:</p>
<ul>
<li>whether we&rsquo;re not already inside a tmux session (we shouldn&rsquo;t be), so that we don&rsquo;t nest <code>tmux</code></li>
<li>whether we&rsquo;re accessing the shell via <code>ssh</code> (we should be)</li>
<li>whether we&rsquo;re accessing an interactive shell (we should be), so that it doesn&rsquo;t interfere with oneshot <code>ssh</code> commands</li>
</ul>
<p>There&rsquo;s also a escape hatch. If you want to get an interactive shell but bypass <code>tmux</code> for some reason<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, just set <code>NOTMUX=1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- NOTMUX<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> bash
</span></span></code></pre></div><h2 id="final-remarks">Final remarks</h2>
<p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn <code>tmux</code> server-side, or selectively spawn <code>tmux</code> client-side.</p>
<p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your <code>ssh</code> host settings. That said, in scenarios where I fully control a host and it&rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, maybe if <code>tmux</code> broke due to a recent upgrade, or if the <code>~/.tmux.conf</code> is invalid.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ systemd: share environment variables with xorg</title><link>https://www.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p></description><content:encoded><![CDATA[<p>In this post we will learn how to share environment variables (e.g.
<code>$GDK_SCALE</code>) between a system user session and X11/Xorg.</p>
<p>The typical <a href="https://wiki.archlinux.org/title/Xinit"><code>~/.xinitrc</code></a> and/or <a href="https://wiki.archlinux.org/title/Xprofile"><code>~/.xprofile</code></a> setup in
2020s involves some environment variable exports such as the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>export _JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>export DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>export GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>export GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>export QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>This particular set of customizations stems from my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a> but
there isn&rsquo;t anything special about it. I&rsquo;ll include an explanation anyway for
completeness:</p>
<ul>
<li>
<p>The java setting is meant for launching certain java-based applications from
within a tiling window manager.</p>
</li>
<li>
<p>All the other settings are meant for 4K HiDPI displays. The baseline DPI is
96, which is too small for 4K monitors, the fonts and icons all look tiny. In
order to make them scale it&rsquo;s necessary to use a higher DPI. Typical setups
use either 144 (x1.5) or 192 (x2.0), the bigger the DPI the bigger fonts and
icons will appear in the screen.</p>
</li>
</ul>
<p>Those exports work well for graphical applications launched from your favorite
window manager after it has already started, however if you decide to launch an
application from <code>systemd</code>, those settings will not be picked up by it.</p>
<p>For example, if you decide to manage <a href="http://jonls.dk/redshift/"><code>redshift</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> (more
specifically, <code>redshift-gtk</code> which has a system tray app) from a systemd user
session<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, its fonts will look small.</p>
<p>There are several ways to address this issue.</p>
<p>One of them is to edit the service file directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user edit redshift-gtk
</span></span></code></pre></div><p>And then add:</p>
<pre tabindex="0"><code>[Unit]
Environment=GDK_SCALE=2 GDK_DPI_SCALE=0.5
</code></pre><p>Which results in:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/systemd/user/redshift-gtk.service.d/override.conf
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Environment<span style="color:#f92672">=</span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span></code></pre></div><p>Which you can make effective by:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user daemon-reload
</span></span><span style="display:flex;"><span>$ systemctl --user restart redshift-gtk
</span></span></code></pre></div><p>I am not a fan of this approach though, because this step would need to be repeated
to all service files you want to manage this way. There&rsquo;s a better, <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> way to
do so.</p>
<p><code>systemd</code> supports <a href="https://www.freedesktop.org/software/systemd/man/environment.d.html">environment
files</a>
(<code>environment.d(5)</code>). User-defined ones live in
<code>~/.config/environment.d/*.conf</code> by default.</p>
<p>This means we could produce the following file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># systemd environment.d(5) EnvironmentFile</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://www.freedesktop.org/software/systemd/man/environment.d.html</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Do not use export here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternatively</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user import-environment [var1] [var2] [...]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Troubleshooting</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user show-environment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>_JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>Which is applied to all systemd user service files automatically, no need to
set <code>Environment=</code> manually everywhere.</p>
<p>However, now we need to maintain two different files: the systemd <code>.conf</code> one
and the xorg <code>~/.xinitrc</code> one.</p>
<p>One elegant way to reduce maintenance burden is, in my opinion, the follownig:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.xinitrc
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Parse user session environment variables.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is shared with the systemd user instance.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export all variables: https://stackoverflow.com/a/30969768/1745064</span>
</span></span><span style="display:flex;"><span>set -a
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> -r ~/.config/environment.d/user.conf <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span>set +a
</span></span></code></pre></div><p>It does what you expect: the underlying shell sources the <code>*.conf</code> file as if
you were <code>export</code>ing each variable therein.</p>
<p>One caveat of this setup is that you cannot define the variables
dynamically; for example, with subshells, with external programs, or with
simple mathematical operations derived from other variables<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Ultimately though you end up with only one file to manage, which is the systemd one.
<a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a>™.</p>
<figure class="align-center "><a href="https://xkcd.com/963/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/x11.png#center"
         alt="Thomas Jefferson thought that every law and every constitution should be torn down and rewritten from scratch every nineteen years--which means X is overdue."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Redshift adjusts the color temperature of your screen according to your
surroundings. This may help your eyes hurt less if you are working in front
of the screen at night. Redshift is similar to <a href="https://justgetflux.com/">f.lux</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>systemctl --user start redshift</code>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, <code>QT_FONT_DPI=$(($GDK_SCALE * 96))</code> or similar.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Watch files and react to changes during development</title><link>https://www.perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p></description><content:encoded><![CDATA[<p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.</p>
<h2 id="context">Context</h2>
<p>I am contributing to <a href="https://github.com/miniflux/v2">miniflux</a>, a minimalist and opinionated RSS reader. Miniflux&rsquo;s stack is as minimalist as the app itself: It&rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive <a href="https://github.com/miniflux/v2/blob/master/Makefile"><code>Makefile</code></a>.</p>
<p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&rsquo;s needed is to execute <code>make run</code> whenever any<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> file in the repository is changed.</p>
<p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.</p>
<h2 id="option-1-entr-recommended">Option #1: entr (recommended)</h2>
<p><a href="https://eradman.com/entrproject/"><code>entr(1)</code></a>:</p>
<blockquote>
<p>Run arbitrary commands when files change</p>
</blockquote>
<p>The following invocation does the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd | entr -r -- make run
</span></span></code></pre></div><p>However, we could do better. From the upstream docs:</p>
<blockquote>
<p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git</p>
</blockquote>
<p>I am happy with <code>fd</code> for this use case though. To limit <code>entr</code> to <code>.go</code> files only, we could do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd -e go | entr -r -- make run
</span></span></code></pre></div><p>It took me less than 5 minutes to install and figure out how to use <code>entr</code>.</p>
<p><a href="https://schauderbasis.de/posts/entr/">This blog post</a> covers it in more detail.</p>
<h2 id="option-2-watchman">Option #2: watchman</h2>
<p><a href="https://facebook.github.io/watchman/"><code>watchman</code></a> from Facebook Open Source:</p>
<blockquote>
<p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.</p>
</blockquote>
<p>Watchman&rsquo;s workflow doesn&rsquo;t seem to be very suited for this job though. It&rsquo;s much more centered on subscribing to <code>inotify</code> events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;repository root&gt;
</span></span><span style="display:flex;"><span>watchman watch .
</span></span></code></pre></div><p>&hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># set up a trigger named &#39;buildme&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># will run &#39;minify-css&#39; whenever a CSS file is changed</span>
</span></span><span style="display:flex;"><span>watchman -- trigger . buildme <span style="color:#e6db74">&#39;*.css&#39;</span> -- minify-css
</span></span></code></pre></div><p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.</p>
<p>That said, for the simple use case of triggering (and reloading) <code>make run</code>, it seems overkill. I also found its <a href="https://facebook.github.io/watchman/docs/install.html">official docs</a> too verbose and lacking sample usages for simple <code>Makefile</code>-based projects like miniflux.</p>
<p>One caveat of <a href="https://repology.org/project/watchman/versions"><code>watchman</code></a> is that it&rsquo;s less widely available than <a href="https://repology.org/project/entr/versions"><code>entr</code></a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.</p>
<p>It took me several minutes to figure out what&rsquo;s the gist of watchman, only to realize it is more bloated than warranted.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For simple projects, <code>entr</code> is the way to go, hands down. For complex webdev projects, I would look into <code>watchman</code> more deeply.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To be truly strict, only changes to <code>.go</code> files matter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Advent of Code</title><link>https://www.perrotta.dev/2022/01/advent-of-code/</link><pubDate>Fri, 28 Jan 2022 17:44:00 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/advent-of-code/</guid><description>&lt;p>Last year I found out about &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>Last year I found out about <a href="https://adventofcode.com/">Advent of Code</a>.</p>
<h2 id="you-said-what">You said what?</h2>
<p><strong>Advent of Code</strong> by <a href="http://was.tl/">Eric Wastl</a> happens every year since 2015, every December from the 1st to
the 25th. Each day there&rsquo;s a new programming challenge<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> split into two
parts. The first part tends to be easier than the second one. The second part
usually builds upon the first one, being a follow-up task that requires more
steps and/or with a higher degree of complexity. You can&rsquo;t always reuse the
bits from the first part to solve the second one though.</p>
<p>For those familiar with programming contests like <a href="https://icpc.global/">ACM ICPC</a> or <a href="https://olimpiada.ic.unicamp.br/">OBI</a>, or online judges like <a href="https://www.spoj.com/">SPOJ</a> or <a href="https://onlinejudge.org/">UVa</a>, advent of code feels like home. The main difference is that there is no time pressure and no need to write spaghetti and unreadable code; in fact, writing readable and elegant solutions is encouraged (<em>citation needed</em>&hellip;).</p>
<p>For those familiar with FAANG/Tech whiteboard interviews, advent of code feels a lot like a typical interview. I would even go further and say it&rsquo;s a great way to practice for interviews.</p>
<p>It is a great moment to either (i) learn a new exciting programming language or (ii) improve your mastery on programming languages that you already know. I know several people (see below) that used AoC<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to learn Rust or Kotlin or whatever else was exciting for them at the time. It&rsquo;s surprising that the official Kotlin Docs even contain a section called <a href="https://kotlinlang.org/docs/advent-of-code.html">Advent of Code puzzles in idiomatic Kotlin</a>.</p>
<p>Some folks go even further and use it to practice their <a href="https://codegolf.stackexchange.com/questions/216024/advent-of-code-2020-day-2-part-1">code golfing</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> or even <a href="https://ryxcommar.com/2021/12/04/advent-of-code-2021-in-google-sheets-first-4-days/">Google Sheets</a> skills. I have a deep amount of respect for them as it&rsquo;s quite a challenge. If you think it stops there, I&rsquo;ve also seen solutions in <a href="https://github.com/phillbush/aoc">awk</a> and <a href="https://twitter.com/_rsc/status/1476683352493207561">sed</a>.</p>
<p>Another positive aspect of AoC is that it has an integrated dashboard that tracks your progress as you go. It&rsquo;s a simple element of gamification that immensely improves motivation and fun. You really feel a big desire to collect all those 50 stars&hellip;</p>
<h2 id="what-about-me">What about me?</h2>
<p>My goal for 2021 was relatively less ambitious than that,  I just wanted to improve my Python skills, more specifically Python 3. I learned Python 2 during my first year in university and used it sparingly at work and for personal endeavours, but always had a knowledge gap in Python 3.</p>
<p>I set up a public git repository with <a href="https://github.com/thiagowfx/adventofcode">my solutions</a> and aspired to write simple and elegant python, my only <a href="https://frantic.im/no-constraints-no-fun/">constraint</a> was to limit myself to what is available in the standard library of a vanilla python3 installation in Alpine linux, with the exception of <a href="https://numpy.org/"><code>numpy</code></a> which is widespread enough to deserve an entry in my <a href="https://github.com/thiagowfx/adventofcode/blob/master/requirements.txt"><code>requirements.txt</code></a>, and of course devtools like debuggers, linters and auto formatters as needed.</p>
<p>As an additional, non-programming challenge I also limited myself to only use the command line. This basically meant no IDEs<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. My programming environment was ultimately <code>ssh</code> to an Alpine Linux VPS + <code>tmux</code> + <code>vim</code>. To make my life easier, one of the first tasks I accomplished was to write a generic <a href="https://github.com/thiagowfx/adventofcode/blob/master/Makefile"><code>Makefile</code></a> to help me test and run my scripts. A typical invocation would look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ make DEBUG<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> DAY<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>&hellip;whereas I could choose between the sample input versus the real one with <code>DEBUG</code>, and the puzzle day with <code>DAY</code>.</p>
<p>Was the experience worth it? <strong>Definitely yes</strong>! Even though I only completed ~8 puzzles out of the 25 ones due to having my attention split with another project I was working on at the time, the thematic submarine puzzles were hella fun and I learned a lot of python 3 on the way.</p>
<p>A few highlights of what I learned <em>and used</em> from my python <code>2to3</code> transition were f-strings / string interpolation (<code>print(f'The sum is {sum}')</code>), &ldquo;everything is an iterator now&rdquo; even <code>map</code> and <code>range</code>, the standard library is awesome and sometimes you stumble upon useful abstractions like <code>Counter</code> and <code>defaultdict</code>, <code>sort</code> is different now (<code>key</code> instead of comparison function), this <code>pdb</code> debugger thingy, among other topics I can&rsquo;t remember at the moment. I realized the only concept that was previously familiar was the different syntax of the <code>print</code> function (you have to use parentheses now).</p>
<p>In terms of workflow, I also learned that virtual environments are now
supported natively<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> (<code>python -m venv</code>), <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a> is an amazing tool to
automate/manage environments in git repositories and also happens to have
first-class python integration, <code>pylint</code> and <code>autopep8</code> are good integrations
with <code>vim</code> to help spot basic errors and/or suggest best practices, and <code>numpy</code> takes forever to build from source.</p>
<h2 id="what-about-the-community">What about the community?</h2>
<p>AoC enjoys a lot of popularity and zeitgeist, especially during times of the COVID-19 pandemic, but even before then. There&rsquo;s a large <a href="https://www.reddit.com/r/adventofcode/">/r/adventofcode</a> subreddit community, lots of people share their solution snippets and impressions on Twitter (<a href="https://twitter.com/search?q=%23adventofcode&amp;src=typed_query">#AdventOfCode</a>), there&rsquo;s a ton of public git repositories on <a href="https://github.com/search?q=adventofcode">GitHub</a> where people share their coding solutions, in pretty much any programming language you can think of, and finally there are many screencasts on <a href="https://www.youtube.com/results?search_query=advent+of+code">YouTube</a>. The Internet in the 2020s sparks creativity in every unimaginable corner.</p>
<p>There&rsquo;s so much information that it&rsquo;s impossible to stay on top of everything. Here is a small list of repositories that I followed this year, most of those are acquaintances/friends and/or stumbled upon Twitter:</p>
<p>C++:</p>
<ul>
<li><a href="https://github.com/riuri/adventofcode">https://github.com/riuri/adventofcode</a></li>
</ul>
<p>Python:</p>
<ul>
<li><a href="https://github.com/sjvrijn/AdventofCode">https://github.com/sjvrijn/AdventofCode</a></li>
<li><a href="https://github.com/oomenn/AOC">https://github.com/oomenn/AOC</a></li>
</ul>
<p>Rust:</p>
<ul>
<li><a href="https://github.com/dimo414/advent-2021">https://github.com/dimo414/advent-2021</a></li>
<li><a href="https://github.com/mfs/aoc">https://github.com/mfs/aoc</a></li>
</ul>
<p>I find it&rsquo;s really constructive and useful (and also <em>fun</em>) to peek at other people&rsquo;s solutions after I coded my own. I have extensive (albeit kinda rusty these days) experience with C++ so I wanted to follow at least one repository coded with it; since I wrote my solutions in python it was also a natural choice to follow a few python repositories; and, finally, I wanted to peek at some languages I am not familiar with to get a gist of them. This year I watched Rust and a few bits of Clojure and Kotlin on Twitter.</p>
<p>Finally, for some extra inspiration, there are also some <em>10x programmers</em><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> out there that seem to be fans of AoC as well: <a href="https://github.com/norvig/pytudes">Peter Norvig</a> and <a href="https://twitter.com/_rsc/status/1466089522718986241">Russ Cox (<em>rsc</em>)</a>. There are probably several others I am not aware of.</p>
<h2 id="final-remarks">Final remarks</h2>
<p>I am hoping to participate in AoC this year (2022) as well, and possibly revisit the 2021 puzzles and resolve the rest of the ones I missed as time permits.</p>
<p>Hopefully this post encourages and motivates you to try Advent of Code as well! Happy coding.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or puzzle, if you will.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Acronym not to be confused with a certain <del>annoying</del>^W politician.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For those unfamiliar with the concept, code golfing is all about writing a correct solution with the <strong>fewest</strong> amount of characters.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>For example: PyCharm, and also VSCode, which is getting so big these days I don&rsquo;t even know if it&rsquo;s possible to just call it a simple text editor anymore.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Back in the days, <code>virtualenvwrapper</code> was all the rage.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>The <em>10x programmer</em> thing is a well-known joke however in this instance the mentioned characters are indeed superb programmers that I immensely respect.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Alpine Linux: New APKBUILD Workflow</title><link>https://www.perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</link><pubDate>Sun, 23 Jan 2022 19:15:02 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>APKBUILDs&lt;/code> for the
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository in &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>This document describes my workflow to manage <code>APKBUILDs</code> for the
<a href="https://gitlab.alpinelinux.org/alpine/aports">aports</a> repository in <a href="https://alpinelinux.org/">Alpine Linux</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>First of all, this post is not a substitute to the <a href="https://wiki.alpinelinux.org/wiki/Main_Page">AlpineWiki</a>
and it will likely get outdated at some point. In particular, refer to the
following articles for up-to-date documentation that will outlive this blog:</p>
<ul>
<li><a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers">https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Aports_tree">https://wiki.alpinelinux.org/wiki/Aports_tree</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package</a></li>
</ul>
<p>This article is not a tutorial, as such it assumes you already know what an
<code>APKBUILD</code> is and how to use <code>abuild</code>. In particular, you should have the
<code>alpine-sdk</code>, <code>atools</code> and <code>spdx-licenses-list</code> packages installed in your
system.</p>
<h2 id="structure">Structure</h2>
<p>I manage my packages with <code>git</code>. Create a GitLab account on
<a href="https://gitlab.alpinelinux.org/">https://gitlab.alpinelinux.org/</a>, fork the <a href="https://gitlab.alpinelinux.org/alpine/aports"><code>aports</code></a> tree, and <code>git clone</code> your fork.</p>
<p>The structure follows Alpine Linux repositories:</p>
<pre tabindex="0"><code>$ git clone https://gitlab.alpinelinux.org/alpine/aports.git &amp;&amp; tree -L 1 aports
aports
├── CODINGSTYLE.md
├── COMMITSTYLE.md
├── README.md
├── community
├── main
├── non-free
├── scripts
├── testing
└── unmaintained
</code></pre><h2 id="bootstrapping">Bootstrapping</h2>
<p>I am going to illustrate with a package I added recently, <a href="https://packages.debian.org/source/sensible-utils"><code>sensible-utils</code></a>:</p>
<ul>
<li>
<p>Before you even begin, check if the package already exists, do a quick search in the <a href="https://pkgs.alpinelinux.org/packages?name=sensible%2Dutils">Alpine Repositories</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
</li>
<li>
<p>Start by scaffolding a new <code>APKBUILD</code> from the base template:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cd aports/testing  <span style="color:#75715e"># Always add new packages in testing/ first.</span>
</span></span><span style="display:flex;"><span>$ newapkbuild sensible-utils
</span></span><span style="display:flex;"><span>$ cd sensible-utils
</span></span><span style="display:flex;"><span>$ $EDITOR APKBUILD
</span></span></code></pre></div><p><strong>Note</strong>: If you have a language-specific package (e.g. perl, python, rust),
use the language-specific template instead of the base one. Run <code>newapkbuild -h</code> to list available templates. There are also some <code>apkbuild-*</code> helpers such
as <code>apkbuild-pypi</code> and <code>apkbuild-cpan</code>.</p>
<ul>
<li>
<p>Fill in <code>APKBUILD</code> metadata like <code>pkgname=</code>, <code>url=</code>, etc. Refer to the AlpineWiki for up-to-date best practices.</p>
</li>
<li>
<p>By doing so, I produced the following <code>APKBUILD</code>:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>sensible-utils
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.0.14
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Utilities for sensible alternative selection&#34;</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://packages.debian.org/source/sensible-utils&#34;</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GPL-2.0-or-later&#34;</span>
</span></span><span style="display:flex;"><span>makedepends<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;po4a&#34;</span>
</span></span><span style="display:flex;"><span>subpackages<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-doc&#34;</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://ftp.debian.org/debian/pool/main/s/</span>$pkgname<span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>pkgname<span style="color:#e6db74">}</span><span style="color:#e6db74">_</span>$pkgver<span style="color:#e6db74">.tar.xz&#34;</span>
</span></span><span style="display:flex;"><span>builddir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">.git&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>build<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	./configure --prefix<span style="color:#f92672">=</span>/usr
</span></span><span style="display:flex;"><span>	make
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>check<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	make -k check
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	make DESTDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/&#34;</span> install
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># only works with update-alternatives, specific to debian</span>
</span></span><span style="display:flex;"><span>	rm <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin/select-editor&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sha512sums<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">15ba996f811ab3a9c1f5726f35766d74aafdf925c5c2392b33c6643d6c439796a742f9d0f4625c79de640e6b5e4a6a032b768eb1bc4ac31b448f9767b0ceed44  sensible-utils_0.0.14.tar.xz
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p><strong>Note</strong>: <code>$srcdir</code> refers to the <code>src/</code> directory within <code>sensible-utils</code>. <code>$pkgdir</code>
refers to the <code>pkg/</code> directory within <code>sensible-utils</code>.</p>
<p>If you&rsquo;re used to Arch Linux <code>PKGBUILDs</code> you&rsquo;ll notice a striking similarity to
<code>APKBUILDs</code>. I highlighted a few notable differences in a previous post, <a href="https://www.perrotta.dev/2022/01/my-first-apkbuild/#build-comparison"><code>My First APKBUILD</code></a>.</p>
<h2 id="adjustments">Adjustments</h2>
<ul>
<li>
<p>Generate the checksums with <code>abuild checksum</code>. It will automatically update the <code>APKBUILD</code> inplace.</p>
</li>
<li>
<p>Download and extract package files with <code>abuild unpack</code>.</p>
</li>
<li>
<p><code>ls src/</code> and check the directory structure. Update <code>$builddir</code> in your
<code>APKBUILD</code> to match it. Usually it will be <code>$srcdir/$pkgname-$pkgver</code>, but
sometimes tiny adjustments are necessary. In this case, it was
<code>$srcdir/$pkgname.git</code>.</p>
</li>
<li>
<p>Then run <code>abuild -r</code>. If everything goes well, your package (and subpackages,
if any) will be successfully built<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in an isolated environment and placed
in <code>~/packages</code> (<code>sensible-utils-0.0.14-r0.apk</code> and
<code>sensible-utils-doc-0.0.14-r0.apk</code>), however that doesn&rsquo;t mean it is a decent
package yet.</p>
</li>
<li>
<p>Run <code>apkbuild-lint APKBUILD</code> and <code>abuild sanitycheck</code> to lint your package
and catch common errors. Fix the errors, if any.</p>
</li>
</ul>
<h2 id="request-feedback-if-needed">Request feedback if needed</h2>
<p>If the package is only relevant to you, stop here. <code>git commit</code>, <code>git push</code>, and then you&rsquo;re done. Install the package with <code>doas apk add &lt;pkg&gt;</code>.</p>
<p>Otherwise, if the package might be potentially useful to other Alpine users, you could consider uploading it to the <a href="https://gitlab.alpinelinux.org/alpine/aports">aports</a> repository.</p>
<p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&rsquo;t need to be positive, it&rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.</p>
<p>If the answer is negative, or if you&rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:</p>
<ol>
<li>
<p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:IRC"><code>#alpine-devel</code> on OFTC IRC</a> Drew DeVault wrote a good <a href="https://drewdevault.com/2021/11/24/A-philosophy-for-instant-messaging.html">post</a> about IRC etiquette.</p>
</li>
<li>
<p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:Mailing_lists"><code>alpine-devel</code> mailing list</a>.</p>
</li>
</ol>
<p>If you&rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.</p>
<h2 id="publish-your-package">Publish your package</h2>
<p>If all is well, it&rsquo;s time to publish your <code>APKBUILD</code>. Follow the up-to-date
steps at
<a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review</a>. There are basically two options:</p>
<ol>
<li>
<p>Send a gitlab merge request (MR). This follows the standard git forge workflow
(GitHub / BitBucket / GitLab) wherein you fork the main repository, create
a branch in your own clone, push it and then initiate a pull request<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
</li>
<li>
<p>Alternatively, send an email with your patch to the <code>aports</code> mailing list
with <a href="https://git-send-email.io/"><code>git send-email</code></a>:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git config sendemail.to <span style="color:#e6db74">&#34;alpine-aports@lists.alpinelinux.org&#34;</span>
</span></span><span style="display:flex;"><span>$ git send-email -1  <span style="color:#75715e"># Implicitly uses --to=alpine-linux@lists.alpinelinux.org as set above</span>
</span></span></code></pre></div><p><strong>Tip</strong>: The second approach has a steep learning curve, however once you
figure it out it&rsquo;s actually faster, simpler and more streamlined. Whenever
a new email is sent to the aports mailing list, a MR is automatically created
on GitLab.</p>
<p><strong>Note</strong>: If you adopt the email workflow and need to send a follow-up to your
initial patch, do not use <code>--in-reply-to</code>. Instead, create a new email thread.
This is needed because as of this post new GitLab MRs are only created when new
email threads are created. Replies to existing email threads do not update the
MR patch.</p>
<p>And that&rsquo;s all! Other useful tips:</p>
<ul>
<li>Use <a href="https://repology.org/">repology</a> to look for preexisting packages in other Linux (or even BSD) distributions, it&rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Arch Linux <code>PKGBUILDs</code> are very similar to <code>APKBUILDs</code>. Gentoo <code>EBUILDs</code> and FreeBSD <code>Makefiles</code> are also reasonable approximations.</li>
<li>Use <code>abump</code> to bump pkgver in <code>APKBUILD</code> files if the package gets an update to a newer upstream release.</li>
<li>Use <code>apkgrel</code> to bump or reset the <code>pkgrel</code> value of your <code>APKBUILD</code>.</li>
<li>Use <a href="https://www.perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/#bonus-track-upstream"><code>urlwatch</code></a> to track upstream updates.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you use <a href="https://duckduckgo.com/">https://duckduckgo.com/</a>, query for <code>!alpine sensible-utils</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Package debugging is out of scope of this post.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>In GitLab it&rsquo;s called Merge Request (MR). The list of all aports MRs is <a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests">here</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Arch Linux: New PKGBUILD Workflow</title><link>https://www.perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</link><pubDate>Tue, 18 Jan 2022 21:59:07 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>PKGBUILDs&lt;/code> for the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a> (Arch User Repository) in &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>This document describes my workflow to manage <code>PKGBUILDs</code> for the <a href="https://aur.archlinux.org/">AUR</a> (Arch User Repository) in <a href="https://www.archlinux.org/">Arch Linux</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>First of all, this post is not a substitute to the excellent <a href="https://wiki.archlinux.org/">ArchWiki</a> and it will likely get outdated at some point. In particular, refer to the following articles for up-to-date documentation that will outlive this blog:</p>
<ul>
<li><a href="https://wiki.archlinux.org/title/Arch_User_Repository">https://wiki.archlinux.org/title/Arch_User_Repository</a></li>
<li><a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines</a></li>
<li><a href="https://wiki.archlinux.org/title/Creating_packages">https://wiki.archlinux.org/title/Creating_packages</a></li>
<li><a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD</a></li>
</ul>
<p>This article is not a tutorial, as such it assumes you already know what a <code>PKGBUILD</code> is and how to use <code>makepkg</code>. In particular, you should have the <code>base-devel</code> and <code>devtools</code> packages installed in your system.</p>
<h2 id="structure">Structure</h2>
<p>I manage my packages with <code>git</code> plus Eli Schwartz&rsquo;s excellent
<a href="https://github.com/eli-schwartz/aurpublish">aurpublish</a>. The tree structure is simple, with one <code>PKGBUILD</code> per directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git clone https://github.com/thiagowfx/PKGBUILDs <span style="color:#f92672">&amp;&amp;</span> tree PKGBUILDs
</span></span><span style="display:flex;"><span>PKGBUILDs
</span></span><span style="display:flex;"><span>├── bkt
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── fpp-git
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── git-crecord
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── i3a
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>├── LICENSE
</span></span><span style="display:flex;"><span>├── Makefile
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── ttf-camingocode
</span></span><span style="display:flex;"><span>│   └── PKGBUILD
</span></span><span style="display:flex;"><span>└── urlwatch.yml
</span></span></code></pre></div><p><code>aurpublish</code> is used <em>solely</em> to automate certain interactions with the AUR, more about it later.</p>
<h2 id="bootstrapping">Bootstrapping</h2>
<p>I am going to illustrate with a package I added recently, <a href="https://github.com/dimo414/bkt"><code>bkt</code></a>:</p>
<ul>
<li>
<p>Before you even begin, check if the package already exists, do a quick search in the <a href="https://aur.archlinux.org/packages/?O=0&amp;K=bkt">AUR</a> and also in the <a href="https://archlinux.org/packages/?sort=&amp;q=bkt&amp;maintainer=&amp;flagged=">official repos</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
</li>
<li>
<p>Start by copying over the standard <code>PKGBUILD</code> template:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cd PKGBUILDs
</span></span><span style="display:flex;"><span>$ mkdir bkt <span style="color:#f92672">&amp;&amp;</span> cd bkt
</span></span><span style="display:flex;"><span>$ cp /usr/share/pacman/PKGBUILD.proto PKGBUILD
</span></span><span style="display:flex;"><span>$ $EDITOR PKGBUILD
</span></span></code></pre></div><ul>
<li>
<p>Fill in <code>PKGBUILD</code> metadata like <code>pkgname=</code>, <code>url=</code>, etc. Refer to the ArchWiki for up-to-date best practices.</p>
</li>
<li>
<p>The most important step is to refer to <a href="https://wiki.archlinux.org/title/Category:Arch_package_guidelines">https://wiki.archlinux.org/title/Category:Arch_package_guidelines</a> to figure out the package type.</p>
</li>
</ul>
<p><code>bkt</code> is a Rust package. This is my first time packaging for Rust, not a problem though, as I can just refer to <a href="https://wiki.archlinux.org/title/Rust_package_guidelines">https://wiki.archlinux.org/title/Rust_package_guidelines</a>.</p>
<p>The rust package guidelines page contains the blueprint for <code>prepare()</code>, <code>check()</code>, <code>build()</code> and <code>package()</code>. Packaging is mostly a matter of gluing everything together. Read the project <code>README.md</code> and the wiki, and then combine the needed steps in the <code>PKGBUILD</code>.</p>
<p>By doing so, I produced the following <code>PKGBUILD</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>bkt
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.5.0
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A subprocess caching utility&#34;</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;x86_64&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.bkt.rs/&#34;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;MIT&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>makedepends<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;cargo&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">.tar.gz::https://github.com/dimo414/</span>$pkgname<span style="color:#e6db74">/archive/refs/tags/</span>$pkgver<span style="color:#e6db74">.tar.gz&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>sha256sums<span style="color:#f92672">=()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prepare<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	cargo fetch --locked --target <span style="color:#e6db74">&#34;</span>$CARCH<span style="color:#e6db74">-unknown-linux-gnu&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>build<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export RUSTUP_TOOLCHAIN<span style="color:#f92672">=</span>stable
</span></span><span style="display:flex;"><span>	export CARGO_TARGET_DIR<span style="color:#f92672">=</span>target
</span></span><span style="display:flex;"><span>	cargo build --frozen --release --all-features
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>check<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	export RUSTUP_TOOLCHAIN<span style="color:#f92672">=</span>stable
</span></span><span style="display:flex;"><span>	cargo test --frozen --all-features
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	install -Dm0755 -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin/&#34;</span> <span style="color:#e6db74">&#34;target/release/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	install -Dm644 LICENSE -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/licenses/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>Note</strong>: <code>$srcdir</code> refers to the <code>src/</code> directory within <code>bkt</code>. <code>$pkgdir</code> refers to the <code>pkg/</code> directory within <code>bkt</code>.</p>
<h2 id="adjustments">Adjustments</h2>
<ul>
<li>
<p>Generate the checksums with <code>updpkgsums</code>. It will automatically update the <code>PKGBUILD</code> inplace.</p>
</li>
<li>
<p>Download and extract package files with <code>makepkg -o</code>.</p>
</li>
<li>
<p><code>ls src/</code> and check the directory structure. Update <code>cd</code> in your <code>PKGBUILD</code> to match it. Usually it will be <code>cd $srcdir/$pkgname-$pkgver</code>, but sometimes tiny adjustments are necessary.</p>
</li>
<li>
<p>Then run <code>makepkg -s</code>. If everything goes well, your package will be successfully built<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> (<code>bkt-0.5.0-1-x86_64.pkg.tar.zst</code>), however that doesn&rsquo;t mean it is a decent package yet.</p>
</li>
<li>
<p>Run <code>namcap PKGBUILD</code> and <code>namcap *.pkg.tar.zst</code> to lint your package and catch common errors. Fix the errors, if any.</p>
</li>
<li>
<p>To ensure all dependencies have been correctly declared and none of them are missing, run <code>makepkg</code> within a clean <a href="https://wiki.archlinux.org/title/Chroo"><em>chroot</em></a>. I like to use Graysky&rsquo;s excellent <a href="https://github.com/graysky2/clean-chroot-manager"><code>ccm</code></a> (Clean Chroot Manager) to do so. Run <code>ccm s</code> (=&ldquo;run makepkg in the clean chroot&rdquo;). If it produces any errors, it likely means you missed some dependencies. Adjust <code>depends=</code>, <code>checkdepends=</code> and <code>makedepends=</code> accordingly.</p>
</li>
</ul>
<h2 id="request-feedback-if-needed">Request feedback if needed</h2>
<p>If the package is only relevant to you, stop here. <code>git commit</code>, <code>git push</code>, and then you&rsquo;re done. Install the package with <code>makepkg -i</code>.</p>
<p>Otherwise, if the package might be potentially useful to other Arch users, you could consider uploading it to the AUR.</p>
<p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&rsquo;t need to be positive, it&rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.</p>
<p>If the answer is negative, or if you&rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:</p>
<ol>
<li>
<p><a href="https://bbs.archlinux.org/viewforum.php?id=38.">AUR Issues, Discussion &amp; PKGBUILD Requests</a> BBS / Forums:  Open a new thread, post your <code>PKGBUILD</code> (use <code>[code][/code]</code> tags if you paste it directly!) or a link to it<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Request folks to critique your work, mention that you&rsquo;re looking for feedback. This kind of thread is generally well received in the official forums if you demonstrate you did diligent research before asking for help.</p>
</li>
<li>
<p><a href="https://lists.archlinux.org/pipermail/aur-general/">AUR General Mailing List</a>: Send an email to the mailing list asking for help. In general, follow proper mailing list etiquette, good resources for that are <a href="https://useplaintext.email/">https://useplaintext.email/</a> and <a href="https://man.sr.ht/lists.sr.ht/etiquette.md">https://man.sr.ht/lists.sr.ht/etiquette.md</a>. TL;DR: Use plain-text instead of HTML in your email.</p>
</li>
</ol>
<p>If you&rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.</p>
<h2 id="publish-your-package">Publish your package</h2>
<p>If all is well, it&rsquo;s time to publish your <code>PKGBUILD</code> to the <a href="https://aur.archlinux.org/">AUR</a>. Follow the up-to-date steps at <a href="https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages">https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages</a>.</p>
<p>TL;DR: If you don&rsquo;t use <em>aurpublish</em>, do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ makepkg --printsrcinfo &gt; .SRCINFO
</span></span></code></pre></div><p>Then you&rsquo;ll need both the <code>PKGBUILD</code> and the <code>.SRCINFO</code> file, it&rsquo;s basically a matter of committing your changes and pushing them to the right repository.</p>
<p>If you do use <em>aurpublish</em> this process is much easier, it&rsquo;s mostly a matter of doing <code>git commit</code>, <code>git push</code> and <code>aurpublish bkt</code>. <em>Aurpublish</em> automatically generates the <code>.SRCINFO</code> and a commit message by the means of git hooks.</p>
<p>And that&rsquo;s all! Other useful tips:</p>
<ul>
<li>Use <a href="https://repology.org/">repology</a> to look for preexisting packages in other Linux (or even BSD) distributions, it&rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Alpine Linux <code>APKBUILDs</code> are very similar to <code>PKGBUILDs</code>. Gentoo <code>EBUILDs</code> and FreeBSD <code>Makefiles</code> are also reasonable approximations.</li>
<li>Use <code>makepkg -src</code> to clean up after building a package.</li>
</ul>
<h2 id="bonus-track-upstream">Bonus: Track upstream</h2>
<p>Use a software like <a href="https://thp.io/2008/urlwatch/"><code>urlwatch</code></a> or <a href="https://github.com/lilydjwg/nvchecker"><code>nvchecker</code></a> to track
future upstream changes so that you can update your packages in a timely
fashion<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. There&rsquo;s also a web service called <a href="https://release-monitoring.org/">Release
Monitoring</a>, part of Fedora Infra. I use <code>urlwatch</code> the
following way:</p>
<pre tabindex="0"><code>$ cat PKGBUILDs/urlwatch.yml
# urls for urlwatch(1)
---
name: &#34;bkt&#34;
command: &#34;git ls-remote --tags https://github.com/dimo414/bkt&#34;
---
name: &#34;fpp&#34;
command: &#34;git ls-remote --tags https://github.com/facebook/PathPicker&#34;
---
name: &#34;git-crecord&#34;
command: &#34;git ls-remote --tags https://github.com/andrewshadura/git-crecord&#34;
---
name: &#34;i3a&#34;
command: &#34;git ls-remote --tags https://git.goral.net.pl/mgoral/i3a&#34;
# ---
# name: &#34;ttf-camingocode&#34;
# N/A

# Run this command periodically via cron or systemd timer.
# Set up notifications e.g. via sendmail.
$ urlwatch --urls urlwatch.yml
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If you use <a href="https://duckduckgo.com/">https://duckduckgo.com/</a>, query for <code>!aur bkt</code> and <code>!archpkg bkt</code>. Handy!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Package debugging is out of scope of this post.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, use <a href="https://gist.github.com">https://gist.github.com</a> or <a href="http://paste.opensuse.org/">http://paste.opensuse.org/</a> or
<a href="http://ix.io/">http://ix.io/</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>In 99% of the cases this is just a matter of bumping the <code>pkgver=</code> and
updating the checksums. If <code>pkgver=</code> is the same but there&rsquo;s a fix to the
package itself, then bump <code>pkgrel=</code> instead.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Alpine Linux on Raspberry Pi: Diskless Mode with persistent storage</title><link>https://www.perrotta.dev/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/</link><pubDate>Sat, 15 Jan 2022 23:18:56 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/</guid><description>&lt;p>Use case: Given an Alpine Linux &lt;strong>diskless&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> installation meant for
a Raspberry Pi setup, we would like to add a persistent storage component to it
to make it survive across reboots.&lt;/p></description><content:encoded><![CDATA[<p>Use case: Given an Alpine Linux <strong>diskless</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> installation meant for
a Raspberry Pi setup, we would like to add a persistent storage component to it
to make it survive across reboots.</p>
<h2 id="goal">Goal</h2>
<p>The <a href="https://wiki.alpinelinux.org/wiki/Installation">Alpine Linux Wiki</a> covers most of the installation process, hence I will only document the bits that were lacking and/or confusing therein.</p>
<p>My use case is the following:</p>
<blockquote>
<p>Given a Raspberry Pi 3B with an old 4GiB SD Card as CF storage<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, install Alpine Linux in diskless mode. Find a way to preserve modifications in <code>/etc</code> and <code>/var</code>, as well as any installed packages through its <code>apk</code> package manager.</p>
</blockquote>
<p>Let&rsquo;s follow the steps outlined in the wiki.</p>
<h2 id="copy-alpine-to-the-sd-card">Copy Alpine to the SD Card</h2>
<blockquote>
<p>Grab the SD card and install Alpine Linux in it.</p>
</blockquote>
<p>Alpine provides officially supported images designed for the Raspberry Pi.</p>
<p>Most Linux distributions provide an <code>.iso</code> or <code>.img</code> file to be installed with a tool like <a href="https://www.balena.io/etcher/">Balena Etcher</a>, <a href="https://rufus.ie/en/">Rufus</a>, <a href="https://www.raspberrypi.com/news/raspberry-pi-imager-imaging-utility/"><strong>Raspberry Pi Imager</strong></a> or plain <code>dd</code><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Alpine is not like most Linux distributions: Instead, it provides a <code>.tar.gz</code> archive with files that should be copied directly to the SD card. Grab the latest version (3.15 at the time of this post) from <a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/</a>. There are 3 options:</p>
<ul>
<li>
<p><code>armhf</code>: Works with all Pis, but may perform less optimally on recent versions.</p>
</li>
<li>
<p><code>armv7</code>: Works with the Pi 3B, 32-bit.</p>
</li>
<li>
<p><code>aarch64</code>: Works with the Pi 3B, 64-bit.</p>
</li>
</ul>
<p>I opted for <code>aarch64</code> to make it 64-bit, but <code>armv7</code> would also have worked well for my setup. In fact, Raspberry Pi OS (Debian) uses <code>armv7</code> (32-bit) at the time of this writing.</p>
<p>Before copying files over, format the SD Card. As I was doing this
from a Windows machine because it was the only one I had readily available with
a SD card slot, I just used the native Windows Disk Management tool to do so.
I decided to allocate a 100MB<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> FAT32 partition. The rest of the SD card would be
blank for now. Alpine is surprisingly small, 100MB was more than enough for the kernel and other needed files.</p>
<p>Once the SD card is formatted, copy the files over to it. It turns out Windows cannot extract tarballs (<code>.tar.gz</code>); a tool like <a href="https://www.7-zip.org/">7-zip</a> should do the job. Copy the files over to the root of the newly allocated FAT32 partition, and then safely eject the SD card.</p>
<h2 id="boot-alpine-from-the-sd-card">Boot Alpine from the SD Card</h2>
<p>The next step is to insert the SD Card into the Pi and then boot. I had some trouble in this step and eventually figured out I didn&rsquo;t mark the primary FAT32 partition as bootable. Unfortunately it&rsquo;s not straightforward to mark the partition as bootable from Windows. On a Linux machine there&rsquo;s a wide array of tools to do so: <code>fdisk</code>, <code>cfdisk</code> (TUI), <code>sfdisk</code> (scriptable <code>fdisk</code>), <code>parted</code>, <code>gparted</code> (GUI) are some of them. I worked around that by installing Raspberry Pi OS on the SD card with the Raspberry Pi imager, and then overwriting it with the Alpine files. This works because the Raspberry PI OS installation marks the FAT32 partition as bootable.</p>
<h2 id="install-alpine">Install Alpine</h2>
<p>Installing Alpine is well documented in the <a href="https://wiki.alpinelinux.org/wiki/Installation">wiki</a> thus it won&rsquo;t be covered here. It basically comes down to invoking <code>setup-alpine</code>, which then invokes other <code>setup-*</code> scripts.</p>
<p>Keep in mind we&rsquo;re not really &ldquo;installing&rdquo; Alpine as this is a diskless installation. A more accurate term here would be &ldquo;configuring&rdquo;.</p>
<p>Before invoking the installation script, I created a second primary partition in the SD card, set to <code>ext4</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Configure networking to get working internet access.</span>
</span></span><span style="display:flex;"><span>% setup-interfaces
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install some partitioning tools.</span>
</span></span><span style="display:flex;"><span>% apk add cfdisk e2fsprogs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a second partition (mmcblk0p2) and write it.</span>
</span></span><span style="display:flex;"><span>% cfdisk /dev/mmcblk0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Format the partition as ext4.</span>
</span></span><span style="display:flex;"><span>% mkfs.ext4 /dev/mmcblk0p2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Mount the partition under /media.</span>
</span></span><span style="display:flex;"><span>% mount /dev/mmcblk0p2 /media/mmcblk0p2
</span></span></code></pre></div><p>The installation is straightforward, we just need to pay attention to a few select steps:</p>
<ul>
<li><code>setup-disk</code>: Select <code>none</code> to ensure a <code>diskless</code> installation<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</li>
<li><code>setup-apkcache</code>: Select <code>/media/mmcblk0p2/cache</code> to persist downloaded <code>apk</code> packages.</li>
<li><code>setup-lbu</code>: Edit <code>/etc/lbu/lbu.conf</code> and set <code>LBU_MEDIA=&quot;mmcblk0p2&quot;</code>. Note: Do not add <code>/media</code> as it is implicit.</li>
</ul>
<p>Once the installation is complete, run <code>lbu commit</code> to persist the changes in the second partition. Once you do so, a <code>&lt;hostname&gt;.apkovl.tar.gz</code><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> file should materialize on <code>/media/mmcblk0p2/</code>.</p>
<p>This is a good moment to reboot. Before we do so, let&rsquo;s cache the packages we had previously downloaded.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Cache packages.</span>
</span></span><span style="display:flex;"><span>% apk cache download
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>% reboot
</span></span></code></pre></div><h2 id="after-the-first-reboot">After the first reboot</h2>
<p>If everything worked as expected, once you reboot all your previously installed packages should have been preserved and automatically restored / reinstalled, as well as your modifications done to <code>/etc</code>.</p>
<p>From this point on, whenever you install a new package that you want to be preserved for subsequent reboots, run <code>lbu commit</code> afterwards. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% apk add vim
</span></span><span style="display:flex;"><span>% lbu commit
</span></span></code></pre></div><p>If you would like to see what is going to be committed, run <code>lbu status</code> or <code>lbu diff</code> before doing the actual commit. Whenever you commit, <code>/media/mmcblk0p2/&lt;hostname&gt;.apkovl.tar.gz</code> gets overwritten with your most recent modifications.</p>
<p>It&rsquo;s possible to keep more than one backup file by changing <code>BACKUP_LIMIT=</code> in <code>/etc/lbu/lbu.conf</code>. This is specially handy if you decide to revert to an earlier system snapshot / state later on. The stock config looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat /etc/lbu/lbu.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># what cipher to use with -e option</span>
</span></span><span style="display:flex;"><span>DEFAULT_CIPHER<span style="color:#f92672">=</span>aes-256-cbc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment the row below to encrypt config by default</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ENCRYPTION=$DEFAULT_CIPHER</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment below to avoid &lt;media&gt; option to &#39;lbu commit&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Can also be set to &#39;floppy&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># LBU_MEDIA=usb</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set the LBU_BACKUPDIR variable in case you prefer to save the apkovls</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># in a normal directory instead of mounting an external media.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># LBU_BACKUPDIR=/root/config-backups</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Uncomment below to let lbu make up to 3 backups</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># BACKUP_LIMIT=3</span>
</span></span></code></pre></div><p><strong>Tip</strong>: You can find the list of all explicitly installed packages in <code>/etc/apk/world</code>.</p>
<h2 id="the-last-piece-make-var-persistent">The last piece: make /var persistent</h2>
<p>There are three natural ways that come to mind to make <code>/var</code> persistent:</p>
<h3 id="a-separate-partition-or-file">A) Separate partition (or file)</h3>
<p>Instead of two partitions (FAT32 and ext4), create 3 partitions: FAT32, ext4 and ext4. Use the latter one to mount <code>/var</code> on, saving this information in <code>/etc/fstab</code>. The main disadvantage of this setup is that you&rsquo;ll need to allocate a fixed amount of space of each of the ext4 partitions and it may be difficult to figure out how to split the space between them.</p>
<p>A variant of this approach is to just create the third partition as a file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 500MB file</span>
</span></span><span style="display:flex;"><span>% dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/zero of<span style="color:#f92672">=</span>/media/mmcblk0p2/var.img bs<span style="color:#f92672">=</span>1M count<span style="color:#f92672">=</span><span style="color:#ae81ff">500</span> status<span style="color:#f92672">=</span>progress
</span></span><span style="display:flex;"><span>% mkfs.ext4 /media/mmcblk0p2/var.img
</span></span><span style="display:flex;"><span>% mount /media/mmcblk0p2/var.img /var
</span></span></code></pre></div><p>This works because the Linux kernel supports mounting files as if they were device blocks, treating them as loop devices (pseudo-devices).</p>
<p>I don&rsquo;t like these approaches because they shadow the preexisting <code>/var</code> from the boot media, which in turn messes up with existing services that use it such as <code>cron</code>: <code>% crontab -l</code> would fail. One workaround would be to mount a <code>/var</code> subdirectory instead: for example, <code>/var/lib/docker</code> for docker.</p>
<h3 id="b-bind-mount">B) Bind mount</h3>
<p>This one is straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% mount --bind /media/mmcblk0p2/var/lib/docker /var/lib/docker
</span></span></code></pre></div><p>The actual partition lives in the SD card, however we make a bind mount under
<code>/var</code>, which is like an <em>alias</em>. From <a href="https://unix.stackexchange.com/questions/198590/what-is-a-bind-mount">Stack Exchange</a>:</p>
<blockquote>
<p>A bind mount is an alternate view of a directory tree. Classically, mounting creates a view of a storage device as a directory tree. A bind mount instead takes an existing directory tree and replicates it under a different point. The directories and files in the bind mount are the same as the original. Any modification on one side is immediately reflected on the other side, since the two views show the same data.</p>
</blockquote>
<h3 id="c-overlay-mount">C) Overlay mount</h3>
<p>From <a href="https://wiki.archlinux.org/title/Overlay_filesystem">ArchWiki</a>:</p>
<blockquote>
<p>Overlayfs allows one, usually read-write, directory tree to be overlaid onto another, read-only directory tree. All modifications go to the upper, writable layer. This type of mechanism is most often used for live CDs but there is a wide variety of other uses.</p>
</blockquote>
<p>It&rsquo;s perfect for our use case, which uses a live bootable SD card for Alpine. It blends the preexisting, ephemeral, in-memory <code>/var</code> with the persistent in-disk <code>/var</code>.</p>
<p>I wanted to mount <code>/var</code> directly but found it to be problematic for the same reasons mentioned earlier, therefore I just went with <code>/var/lib/docker</code> instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Create overlay upper and work directories.</span>
</span></span><span style="display:flex;"><span>% mkdir -p /media/mmcblk0p2/var/lib/docker /media/mmcblk0p2/var/lib/docker-work
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add mountpoint entry to fstab. Note: The work dir must be an empty directory in the same filesystem mount as the upper directory.</span>
</span></span><span style="display:flex;"><span>% echo <span style="color:#e6db74">&#34;overlay /var/lib/docker overlay lowerdir=/var/lib/docker,upperdir=/media/mmcblk0p2/var/lib/docker,workdir=/media/mmcblk0p2/var/lib/docker-work 0 0&#34;</span> &gt;&gt; /etc/fstab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Mount all fstab entries, including our newly added one.</span>
</span></span><span style="display:flex;"><span>% mount -a
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I opted for the third approach, using an overlay mount, it was the most
seamless one. A bind mount would have been fine as well.</p>
<p>The final setup works surprisingly well:</p>
<ul>
<li>Alpine Linux is very lightweight and runs mostly from RAM</li>
<li><code>apk</code> cache is persistent to the ext4 partition</li>
<li><code>/var/</code> is persistent to the ext4 partition</li>
<li><code>lbu commit</code> persists changes in <code>/etc/</code> and <code>/home/</code> in the ext4 partition</li>
<li>Every reboot fully resets the system sans persistent components above</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://vincentserpoul.github.io/post/alpine-linux-rpi0/">https://vincentserpoul.github.io/post/alpine-linux-rpi0/</a></li>
<li><a href="http://dahl-jacobsen.dk/tips/blog/2021-04-08-docker-on-alpine-linux/">http://dahl-jacobsen.dk/tips/blog/2021-04-08-docker-on-alpine-linux/</a></li>
<li><a href="http://dahl-jacobsen.dk/tips/blog/2018-03-15-alpine-on-raspberry-pi/">http://dahl-jacobsen.dk/tips/blog/2018-03-15-alpine-on-raspberry-pi/</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Running (almost) fully from RAM.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>CF = Compact disk.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>On Linux I&rsquo;d usually opt for <code>dd</code>, on Windows the Raspberry Pi Imager is a sensible choice.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>100MB is overly conservative, but keep in mind I had a very small SD Card, with only 4GiB storage. 250MB or even 500MB should be a more sensible default if you have a bigger SD Card (e.g. 32GiB).&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>An alternative is to select <code>data</code> disk mode, but it didn&rsquo;t work for me.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><em>ovl</em> is short for <em>overlay</em>. Not to be confused with <em>vol</em> for <em>volume</em>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Keychron K2: Review</title><link>https://www.perrotta.dev/2022/01/keychron-k2-review/</link><pubDate>Wed, 12 Jan 2022 18:09:38 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/keychron-k2-review/</guid><description>&lt;p>This is a follow-up post of &lt;a href="https://www.perrotta.dev/2021/12/keychron-k2-linux-setup/">Keychron K2: Linux Setup&lt;/a>. The previous post focused on the configuration of the keyboard, this one focuses on its user experience from the point of view of a Software Engineer.&lt;/p></description><content:encoded><![CDATA[<p>This is a follow-up post of <a href="https://www.perrotta.dev/2021/12/keychron-k2-linux-setup/">Keychron K2: Linux Setup</a>. The previous post focused on the configuration of the keyboard, this one focuses on its user experience from the point of view of a Software Engineer.</p>
<h2 id="previously">Previously&hellip;</h2>
<p>My first (and previous) mechanical keyboard was a <a href="https://www.logitech.com/assets/64198/g610-orion-red.pdf">Logitech G610 Orion
Red</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It&rsquo;s a full wired keyboard with Cherry MX Red switches
(linear) and dedicated multimedia keys. In my opinion it is a solid choice for
beginners because its interface is quite familiar thanks to the wide range of
available keys. It is branded as a gaming keyboard but frankly it was a fine
office keyboard as well. However after using it for a while I wanted to
upgrade.</p>
<p>The natural upgrade path would contain one or more of the following features, in order of importance:</p>
<ol>
<li>good support for both <strong>Linux</strong> and macOS, especially Linux</li>
<li><strong>compact</strong>: tenkeyless a.k.a. 80%, or 75%<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
<li><strong>portable</strong>: wireless, either with a dongle or with bluetooth or both</li>
<li>with decent battery life: should outlast at least a week of office work</li>
<li>not overpriced: ~$200 CAD budget</li>
<li>playful: with RGB backlight (instead of white LED)</li>
</ol>
<p>Given those, a natural upgrade path would have been the <a href="https://www.logitechg.com/en-ca/products/gaming-keyboards/g915-tkl-wireless.html">Logitech G915
TKL</a>. Its main caveat is that it is relatively overpriced,
~$300 CAD. Above that $300 CAD point one should arguably be looking for
ergonomic and/or fully programmable (QMK firmware) keyboards, like the Kinesis
Advantage and/or the Ergodox EZ<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Even though the G915 TKL is rock solid, it
didn&rsquo;t have any fancy features to justify that investment.</p>
<h2 id="the-quest-for-the-_perfect_-keyboard">The quest for the <em>perfect</em> keyboard&hellip;</h2>
<p>I then proceeded to outsource my luck to the wisdom of the crowds, by asking
for recommendations in a mailing list at $DAYJOB, giving them a subset of the
requirements above.</p>
<p>The choice was then obvious: I&rsquo;d get a <strong>Keychron</strong>. It fit all of my
requirements perfectly. The <a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">issue</a> was that Keychron had
<a href="https://www.keychron.com/collections/all-products">so many choices</a> to pick from.</p>
<figure class="align-center "><a href="https://xkcd.com/1741/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/work.png#center"
         alt="Despite it being imaginary, I already have SUCH a strong opinion on the cord-switch firing incident."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>After some deliberation I had two options in mind: <a href="https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard">Keychron K2</a>
and <a href="https://www.keychron.com/products/keychron-k1-wireless-mechanical-keyboard">Keychron K1</a> TKL. The main difference between them is that
the K1 is a low-profile keyboard. I didn&rsquo;t know what low-profile meant at the
time and had to do some research to figure it out<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>In the end I opted for the <a href="https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard"><strong>Keychron K2</strong></a>, red switches (linear),
with RGB backlight.</p>
<h2 id="the-keyboard">The keyboard</h2>
<p>The keyboard met all my expectations, even surpassing them, I am quite satisfied overall:</p>
<dl>
<dt>Linux support</dt>
<dd>Great out-of-the-box support, it just works. Even though I <a href="https://www.perrotta.dev/2021/12/keychron-k2-linux-setup/">tweaked</a> a few configs, it wasn&rsquo;t strictly
necessary. In particular, there&rsquo;s a physical toggle where you can choose between
macOS (=Linux) or Windows mode. Furthermore they provide both macOS-style (command, option, etc) and
Windows-style keycaps (super, alt, etc). For Linux I tend to stick with the Windows ones.</dd>
<dt>Compact</dt>
<dd>A 75% keyboard is compact by definition, what else could I add?
I wouldn&rsquo;t go lower than that though, in my opinion removing the function keys
goes too far and makes the keyboard harder to use. A Tenkeyless / 80% option
would also be compact enough while maybe increasing comfort a little bit, but
I managed to adapt quickly to the 75% layout. Multimedia and OS keys are easily
available by the means of <code>Fn + F1</code>, etc.</dd>
<dt>Portable</dt>
<dd>It has bluetooth, but can also be used while plugged in. There&rsquo;s a toggle that
controls which mode (wireless or wired) to use. The bluetooth has 3 channels and
it&rsquo;s very easy to switch between them: <code>Fn + 1</code>, <code>Fn + 2</code>, <code>Fn + 3</code>. This makes it easy
to switch between laptops and/or workstation, work and/or personal. The cable connector
is USB-C which in my opinion is a must these days (2020s).</dd>
<dt>Battery life</dt>
<dd>Battery lasts more than enough, to the point that I don&rsquo;t even need to care about it.
I tend to recharge it every 2 weeks or so. <code>Fn + b</code> will let me have a visual indication
of how much juice is still left. The keyboard automatically sleeps after 10 minutes of inactivity
in order to save battery, which I think is a nice bonus, I don&rsquo;t need to worry about turning it off.
This can be disabled if it ends up being annoying, though.</dd>
<dt>Great value for money</dt>
<dd>$90 USD at the time of this writing. Because I didn&rsquo;t want to deal with international shipping, I ended up
simply buying it from one of their official local retailers in Canada, <a href="https://oneofzero.net/">OneOfZero</a>. This
slightly increased what I paid for it (~$150 CAD with taxes), on the other hand the shipping was really fast. Just
beware, this particular retailer does not have a friendly return policy, if I recall correctly they charge a 25% fee
and end up throwing the keyboard away (landfill), which is very depressing.</dd>
<dt>Playful</dt>
<dd>The RGB lighting is fluff and completely irrelevant in terms of productivity, however it adds a playful touch to the keyboard.
I would say that white lighting is enough, but sometimes it&rsquo;s just <em>cool</em> to change to different color(s).
What can I say, we humans are visual creatures. You can easily adjust the light brightness and toggle it on/off (<code>Fn + light</code>),
plus there are several patterns to choose from. I tend to use a still pattern because it isn&rsquo;t distracting for programming or
other type of work that requires focus.</dd>
</dl>
<p><strong>Finally</strong>: The keyboard keycaps are quite sturdy and stick well in place. I had some
issues with my previous keyboard where some of its keycaps would easily fall
off it when moving it within my backpack. I do not have this issue with the
Keychron.</p>
<h2 id="future">Future</h2>
<p>Mechanical keyboards are meant to last. I do not intend to upgrade it any time
soon. However, if/when I ever do it, I will be looking for the following features:</p>
<ul>
<li>QMK firmware / programmable: would unlock more workflow possibilities. The
Keychron Q1 would be a good candidate for this.</li>
<li>With a dongle, in addition to bluetooth. Because sometimes bluetooth is just
annoying and/or unreliable. The Logitech G915 TKL has a dongle.</li>
<li>Other switches? So far I&rsquo;ve only used red ones (linear). More silent switches
could be useful.</li>
<li>Ergonomic: Whether it&rsquo;s a split, an ortholinear or just a curved keyboard,
I figure that at some point it will be a good investment for my wrists.
Adaptation is difficult but it may be necessary one day.</li>
</ul>
<p>I am not particularly attracted to custom keycaps, they are cute but not my cup
of tea. And I also do not see the appeal of hot swappable keycaps. I can
understand why some folks appreciate those features, customizability is
powerful, but for me it&rsquo;s less stressful to keep things simple.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Linked to the <code>.pdf</code> because apparently the SKU isn&rsquo;t listed in the Logitech product website anymore. At the time, it cost ~$120 CAD.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This requirement indirectly excluded all those gaming keyboards with dedicated macro and/or multimedia keys, if they ended up increasing the overall keyboard surface area.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>In the past, I had the opportunity to borrow these from coworkers for a week but couldn&rsquo;t quite adapt to them, their learning curve is quite steep. Maybe I&rsquo;ll try that again in the future.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>It basically means the keys are thinner than usual, comparable to laptop keyboard keys.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ My First APKBUILD</title><link>https://www.perrotta.dev/2022/01/my-first-apkbuild/</link><pubDate>Fri, 07 Jan 2022 20:03:07 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/my-first-apkbuild/</guid><description>&lt;p>In the same spirit of my first PKGBUILD and &lt;a href="https://www.perrotta.dev/2014/09/my-first-ebuild/">&lt;code>Ebuild&lt;/code>&lt;/a>, herein I will describe my first &lt;code>APKBUILD&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>In the same spirit of my first PKGBUILD and <a href="https://www.perrotta.dev/2014/09/my-first-ebuild/"><code>Ebuild</code></a>, herein I will describe my first <code>APKBUILD</code>.</p>
<h2 id="at-a-glance">At a glance</h2>
<p>Alpine Linux package management is very similar to Arch Linux, with tiny differences:</p>
<ul>
<li><code>PKGBUILD</code> → <code>APKBUILD</code>: The filename is obviously different. Their format are very similar though, both of them are bash scripts with variables and functions. In particular, there&rsquo;s <code>check</code>, <code>patch</code>, <code>build</code> and <code>package</code>.</li>
<li><code>cp /usr/share/pacman/PKGBUILD.proto</code> → <code>newapkbuild</code>: Template versus scaffolding.</li>
<li><code>pacman</code> → <code>apk</code>: The package manager is different.</li>
<li><code>makepkg -s</code> → <code>abuild -r</code>: <code>makepkg</code> drives all things package building for <code>pacman</code>. <code>abuild</code> drives package building for <code>apk</code>.</li>
<li><code>makepkg -i</code> → <code>apk add &lt;pkg&gt;</code>: <code>makepkg</code> can also drive package installations whereas <code>abuild</code> cannot, <code>apk</code> must be used.</li>
<li><code>namcap</code> → <code>apkbuild-lint</code> (from <code>atools</code>) + <code>abuild sanitycheck</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: Linters are different.</li>
<li><code>updpkgsums</code> → <code>abuild checksum</code>: Generate hashes for package sources.</li>
</ul>
<figure class="align-center "><a href="https://xkcd.com/927/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/standards.png#center"
         alt="Fortunately, the charging one has been solved now that we&#39;ve all standardized on mini-USB. Or is it micro-USB? Shit."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Other than that, the process of writing an <code>APKBUILD</code> is very similar to writing a <code>PKGBUILD</code>. In fact, the Arch repositories (especially the <a href="https://aur.archlinux.org/">AUR</a>) tend to be much more comprehensive than Alpine&rsquo;s in terms of number of packages, so chances are if you want to write a new package for Alpine, check in Arch&rsquo;s repos first, it&rsquo;s a good starting point.</p>
<h2 id="my-first-package-fpp">My first package: <code>fpp</code></h2>
<p><code>fpp</code> stands for &lsquo;Facebook Path Picker&rsquo;.</p>
<p>As of the time of this post, I maintain <a href="https://aur.archlinux.org/packages/fpp-git/"><code>fpp-git</code></a> in the AUR. It looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>fpp-git
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.9.2.r130.ge0d5cfc
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;TUI that lets you pick paths out of its stdin and run arbitrary commands on them&#39;</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;https://facebook.github.io/PathPicker&#39;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;MIT&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">::git+https://github.com/facebook/PathPicker.git&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>sha256sums<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;SKIP&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;any&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>makedepends<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;git&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>depends<span style="color:#f92672">=(</span><span style="color:#e6db74">&#39;python&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>conflicts<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>provides<span style="color:#f92672">=(</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prepare<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  rm -r <span style="color:#e6db74">&#34;src/tests&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  git describe --long --tags | sed <span style="color:#e6db74">&#39;s/\([^-]*-g\)/r\1/;s/-/./g&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  cd <span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>pkgname%-git<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># library</span>
</span></span><span style="display:flex;"><span>  install -Dm755 <span style="color:#e6db74">&#34;fpp&#34;</span> -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/fpp&#34;</span>
</span></span><span style="display:flex;"><span>  cp -a src <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/fpp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># entrypoint</span>
</span></span><span style="display:flex;"><span>  install -dm755 <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin&#34;</span>
</span></span><span style="display:flex;"><span>  ln -s <span style="color:#e6db74">&#34;/usr/share/fpp/fpp&#34;</span> <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># documentation</span>
</span></span><span style="display:flex;"><span>  install -Dm644 LICENSE -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/licenses/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  install -Dm644 <span style="color:#e6db74">&#34;debian/usr/share/man/man1/fpp.1&#34;</span> -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/man/man1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><code>PKGBUILD</code> guidelines and instructions:</p>
<ul>
<li><a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD</a></li>
<li><a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines</a></li>
</ul>
<p>The equivalent <code>APKBUILD</code> I wrote looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pkgname<span style="color:#f92672">=</span>fpp
</span></span><span style="display:flex;"><span>pkgver<span style="color:#f92672">=</span>0.9.2
</span></span><span style="display:flex;"><span>pkgrel<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>pkgdesc<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TUI that lets you pick paths out of its stdin and run arbitrary commands on them&#34;</span>
</span></span><span style="display:flex;"><span>url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://facebook.github.io/PathPicker&#34;</span>
</span></span><span style="display:flex;"><span>arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noarch&#34;</span>
</span></span><span style="display:flex;"><span>license<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;MIT&#34;</span>
</span></span><span style="display:flex;"><span>depends<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;bash python3&#34;</span>
</span></span><span style="display:flex;"><span>subpackages<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-doc&#34;</span>
</span></span><span style="display:flex;"><span>source<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$pkgname<span style="color:#e6db74">-</span>$pkgver<span style="color:#e6db74">.tar.gz::https://github.com/facebook/PathPicker/archive/</span>$pkgver<span style="color:#e6db74">.tar.gz&#34;</span>
</span></span><span style="display:flex;"><span>builddir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$srcdir<span style="color:#e6db74">/PathPicker-</span>$pkgver<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>check<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	fpp --version
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prepare<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	default_prepare
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	rm -r <span style="color:#e6db74">&#34;src/__tests__&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>package<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># library</span>
</span></span><span style="display:flex;"><span>	install -Dm755 <span style="color:#e6db74">&#34;fpp&#34;</span> -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/fpp&#34;</span>
</span></span><span style="display:flex;"><span>	cp -a src <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/fpp&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># entrypoint</span>
</span></span><span style="display:flex;"><span>	install -dm755 <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin&#34;</span>
</span></span><span style="display:flex;"><span>	ln -s <span style="color:#e6db74">&#34;/usr/share/fpp/fpp&#34;</span> <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/bin&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># documentation</span>
</span></span><span style="display:flex;"><span>	install -Dm644 LICENSE -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/licenses/</span>$pkgname<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	install -Dm644 <span style="color:#e6db74">&#34;debian/usr/share/man/man1/fpp.1&#34;</span> -t <span style="color:#e6db74">&#34;</span>$pkgdir<span style="color:#e6db74">/usr/share/man/man1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sha512sums<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">65b6b077f437bd642ebf94c55be901aabc73f7b9c89e4522c4f51970c4d63d744ad8fa29cac06816851f63bcb81d0480e61d405231c582e9aca0f4e650949a97  fpp-0.9.2.tar.gz
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p><code>APKBUILD</code> guidelines and instructions:</p>
<ul>
<li><a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package</a></li>
<li><a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference</a></li>
</ul>
<h2 id="build-comparison">Build Comparison</h2>
<p>Let&rsquo;s highlight a few similarities and differences in them, excluding the fact that one is fetched from git and the other one fetches a point release directly<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<ul>
<li>package metadata, by the means of bash variables, are almost equivalent
one-to-one
<ul>
<li>A notable difference is the architecture, Arch primarily supports
<em>x86_64</em> whereas Alpine has support for multiple architectures. When
a package is architecture agnostic, Arch denotes it with <code>any</code> whereas
alpine has both <code>noarch</code> and <code>all</code>, the latter is like <code>any</code> (=all
architectures), the <code>former</code> means it&rsquo;s agnostic (=e.g. a pure bash script
or python package).</li>
<li><code>APKBUILDs</code> use flat strings, whereas <code>PKGBUILDs</code> use bash arrays</li>
<li>Alpine encourages splitting larger packages into subpackages, as such
<code>APKBUILD</code> has first-class support and syntactic sugar for that. <code>-dev</code> and
<code>-doc</code> subpackages are very common. On the other hand, Arch tends to have
monolithic packages in order to keep it simple, although it also supports
subpackages.</li>
<li>Alpine supports setting <code>$builddir</code> whereas Arch doesn&rsquo;t. As a consequence, it&rsquo;s often unneeded to <code>cd</code> in <code>build()</code> and <code>package()</code> in Alpine, whereas in Arch one does need to manually change directories to <code>$srcdir/$pkgname</code> before building.</li>
<li>Alpine lacks optional dependencies, whereas Arch has <code>optdepends</code>.</li>
</ul>
</li>
<li>Alpine enforces the use of <code>check</code> in test packages, otherwise it needs to be explicitly disabled and documented with <code>!check</code> in <code>options=</code>. That&rsquo;s not the case in Arch.</li>
<li><code>check()</code>, <code>build()</code> and <code>package()</code> are pretty much similar in both formats. <code>$srcdir</code> and <code>$pkgdir</code> are provided in both.</li>
<li>The <a href="https://wiki.archlinux.org/title/Main_page">ArchWiki</a> is way more documented in terms of packaging guidelines and examples than Alpine&rsquo;s. If you use DuckDuckGo, you can query for <code>!aw &lt;foo&gt;</code> as a bang shortcut to search directly in the ArchWiki.</li>
</ul>
<p>Last but not least, in Arch one can install package tarballs<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> with <code>makepkg -i</code> or <code>pacman -U</code>. In Alpine that approach doesn&rsquo;t seem to be directly supported. The workflow is to add a local repository directory in <code>/etc/apk/repositories</code> (notice the last two lines):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat /etc/apk/repositories
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/v3.15/main</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/v3.15/community</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/latest-stable/main</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/latest-stable/community</span>
</span></span><span style="display:flex;"><span>http://dl-cdn.alpinelinux.org/alpine/edge/main
</span></span><span style="display:flex;"><span>http://dl-cdn.alpinelinux.org/alpine/edge/community
</span></span><span style="display:flex;"><span>http://dl-cdn.alpinelinux.org/alpine/edge/testing
</span></span><span style="display:flex;"><span>/home/$USER/packages/community
</span></span><span style="display:flex;"><span>/home/$USER/packages/testing
</span></span></code></pre></div><p><code>abuild</code> will place the resulting package tarball in <code>~/packages</code>, in this case:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ls ~/packages/testing/x86_64/fpp*
</span></span><span style="display:flex;"><span>/home/$USER/packages/testing/x86_64/fpp-0.9.2-r0.apk
</span></span><span style="display:flex;"><span>/home/$USER/packages/testing/x86_64/fpp-doc-0.9.2-r0.apk
</span></span></code></pre></div><p>&hellip;and then <code>apk add fpp</code> will automagically recognize it&rsquo;s in there and install it. The advantage of this approach is that it keeps a local package repository around and it&rsquo;s well integrated with <code>apk</code>, way differently from <code>pacman</code> that has no integration with the AUR at all. One could also possibly set up a local repository in Arch, for example, with <a href="https://github.com/graysky2/clean-chroot-manager"><code>ccm</code></a>, but it takes extra steps and it&rsquo;s not officially supported.</p>
<h2 id="upstream-contributions">Upstream Contributions</h2>
<p>On Arch, to contribute a <code>PKGBUILD</code> upstream one just needs to create an account in the <a href="https://aur.archlinux.org/">AUR</a>. Armed with a git + ssh infrastructure, all you need to do is <code>git push</code>. There are no ACLs involved, anyone can do that<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>On Alpine there&rsquo;s a bit more of politics involved<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>: Anyone can send a <code>patch(1)</code>, either via <a href="mailto:alpine-aports@lists.alpinelinux.org">mailing list</a> or via a <a href="https://gitlab.alpinelinux.org/alpine/aports">Gitlab MR</a> (merge request). Patch works well with <code>git send-email -1</code>, being automatically cross-posted to a Gitlab MR. On the other hand the MR workflow is easier to be followed up on feedback from developers and other contributors (<code>git push --force</code>), and it&rsquo;s also cross-posted, to the mailing list. An Alpine developer with the appropriate permissions must approve your patch/MR before it becomes available to other Alpine users.</p>
<p>Sadly at the time of this writing <a href="https://lists.alpinelinux.org/~alpine/aports/patches/3799">my patch</a> hasn&rsquo;t yet been approved (2 weeks later), however we&rsquo;re in holiday season. This wouldn&rsquo;t have been a problem in the AUR, where I could have just pushed it immediately, without any review. On the other hand the Alpine approach at least gives me some hope that the submitted packages have slightly higher quality than the average ones in the AUR, since they need to be manually reviewed/approved/vetted by at least one Alpine developer.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Install <code>spdx-licenses-list</code> to lint the licenses, it&rsquo;s used by <code>abuild sanitycheck</code> as an optional dependency.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The AUR tends to have both non-vcs and vcs versions of a software, whereas Alpine is focused a bit more on stability and tends to have non-vcs only. This is not a hard rule though, exceptions may exist.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><code>.tar.xz</code> or, more recently, <code>.tar.zstd</code>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>And this is one of the reasons why you should always inspect every <code>PKGBUILD</code> you install from the Arch User Repository, as it could have been tampered with and/or contain malicious code.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I&rsquo;ll leave it open-ended whether that&rsquo;s a bug or a feature. Depending on the lens you see through, it could be considered either gatekeeping (bureaucracy, control) or sanity (quality, stability). It has pros and cons, and even those are arguable.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Alpine Linux: apk command not found hook</title><link>https://www.perrotta.dev/2022/01/alpine-linux-apk-command-not-found-hook/</link><pubDate>Tue, 04 Jan 2022 16:25:51 -0500</pubDate><guid>https://www.perrotta.dev/2022/01/alpine-linux-apk-command-not-found-hook/</guid><description>&lt;p>In this post we will learn how to define a command-not-found hook to the &lt;code>apk(8)&lt;/code> package manager in Alpine Linux.&lt;/p>
&lt;h2 id="sneak-peek">Sneak peek&lt;/h2>
&lt;p>Before:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: correct &lt;span style="color:#e6db74">&amp;#39;podman&amp;#39;&lt;/span> to &lt;span style="color:#e6db74">&amp;#39;pod2man&amp;#39;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>nyae&lt;span style="color:#f92672">]&lt;/span>? n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: command not found: podman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: correct &lt;span style="color:#e6db74">&amp;#39;podman&amp;#39;&lt;/span> to &lt;span style="color:#e6db74">&amp;#39;pod2man&amp;#39;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>nyae&lt;span style="color:#f92672">]&lt;/span>? n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman may be found in the following packages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;cmd:podman&amp;gt; podman-3.4.4-r1 x86_64 &lt;span style="color:#f92672">{&lt;/span>podman&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Apache-2.0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p>In this post we will learn how to define a command-not-found hook to the <code>apk(8)</code> package manager in Alpine Linux.</p>
<h2 id="sneak-peek">Sneak peek</h2>
<p>Before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ podman
</span></span><span style="display:flex;"><span>zsh: correct <span style="color:#e6db74">&#39;podman&#39;</span> to <span style="color:#e6db74">&#39;pod2man&#39;</span> <span style="color:#f92672">[</span>nyae<span style="color:#f92672">]</span>? n
</span></span><span style="display:flex;"><span>zsh: command not found: podman
</span></span></code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ podman
</span></span><span style="display:flex;"><span>zsh: correct <span style="color:#e6db74">&#39;podman&#39;</span> to <span style="color:#e6db74">&#39;pod2man&#39;</span> <span style="color:#f92672">[</span>nyae<span style="color:#f92672">]</span>? n
</span></span><span style="display:flex;"><span>podman may be found in the following packages:
</span></span><span style="display:flex;"><span>  &lt;cmd:podman&gt; podman-3.4.4-r1 x86_64 <span style="color:#f92672">{</span>podman<span style="color:#f92672">}</span> <span style="color:#f92672">(</span>Apache-2.0<span style="color:#f92672">)</span>
</span></span></code></pre></div><h2 id="preamble">Preamble</h2>
<p>Whenever you type a command that is not in your <code>$PATH</code>, usually your shell
will yell at you that it wasn&rsquo;t found.</p>
<p>The typical workflow in this scenario is to use the search functionality of your package manager in order to find which package provides the binary you&rsquo;re interested in.</p>
<p>In Alpine Linux, one would do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk search podman
</span></span><span style="display:flex;"><span>podman-doc-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-remote-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-docker-3.4.4-r1
</span></span><span style="display:flex;"><span>openscap-1.3.5-r3
</span></span><span style="display:flex;"><span>podman-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-compose-0.1.5-r4
</span></span><span style="display:flex;"><span>podman-bash-completion-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-zsh-completion-3.4.4-r1
</span></span><span style="display:flex;"><span>py3-podman-3.2.1-r1
</span></span><span style="display:flex;"><span>podman-docker-doc-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-openrc-3.4.4-r1
</span></span><span style="display:flex;"><span>podman-fish-completion-3.4.4-r1
</span></span></code></pre></div><p>The output is a bit noisy, but with a bit of experience you could easily figure out the package you&rsquo;re looking for is simply called <code>podman</code>, given the output above.</p>
<p>Surely this was an easy example, what if we tried something less obvious?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ vidir
</span></span><span style="display:flex;"><span>zsh: correct <span style="color:#e6db74">&#39;vidir&#39;</span> to <span style="color:#e6db74">&#39;vdir&#39;</span> <span style="color:#f92672">[</span>nyae<span style="color:#f92672">]</span>? n
</span></span><span style="display:flex;"><span>zsh: command not found: vidir
</span></span></code></pre></div><p>There&rsquo;s no <code>vidir</code> binary, then surely there&rsquo;s a <code>vidir</code> package, right?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ doas apk add vidir
</span></span><span style="display:flex;"><span>ERROR: unable to <span style="color:#66d9ef">select</span> packages:
</span></span><span style="display:flex;"><span>  vidir <span style="color:#f92672">(</span>no such package<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>    required by: world<span style="color:#f92672">[</span>vidir<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Er, no. You&rsquo;ll need to use search again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk search vidir
</span></span><span style="display:flex;"><span>moreutils-0.67-r0
</span></span></code></pre></div><p>There it is, <code>moreutils</code>. Great piece of software, by the way<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>What if we could automate this?</p>
<h2 id="automating-command-not-found-1st-try">Automating command-not-found: 1st try</h2>
<p>In bash, one can define a <code>command_not_found_handle</code> function. In zsh, one can define a <code>command_not_found_handler</code> function. I know, why can&rsquo;t it be the same function, right? Just one <code>r</code> in the way. Regardless of whichever shell you use, the point is that the function is invoked whenever you run a command that is not in the <code>$PATH</code> (or that isn&rsquo;t a shell built-in).</p>
<p>In principle, you could do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>command_not_found_handle<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  local cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  apk search <span style="color:#e6db74">&#34;</span>$cmd<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>It&rsquo;s a good first try, and it surely works as expected, but it can be a bit noisy sometimes. Look at the podman output above, it outputs several unrelated packages, none of which provide the <code>podman</code> binary other than its homonym.</p>
<h2 id="automating-command-not-found-2nd-try">Automating command-not-found: 2nd try</h2>
<p>In Alpine, we can do slightly better. <code>apk(8)</code> has the concept of providers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk list -P | awk <span style="color:#e6db74">&#39;{print $1}&#39;</span> | egrep <span style="color:#e6db74">&#39;&lt;\w+:&#39;</span> | cut -f <span style="color:#ae81ff">1</span> -d <span style="color:#e6db74">&#39;:&#39;</span> | cut -c 2- | sort -u
</span></span><span style="display:flex;"><span>cmd
</span></span><span style="display:flex;"><span>dbus
</span></span><span style="display:flex;"><span>pc
</span></span><span style="display:flex;"><span>so
</span></span></code></pre></div><p><code>-P</code> above stands for <code>--providers</code>. This roughly means one can search for a package that provides a given shared library (<code>so</code>), or a package that provides a given binary (<code>cmd</code>), and so on. We&rsquo;re interested in the <code>cmd:</code> provider.</p>
<p>If we tried it with <code>podman</code>, we would get the following output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk list -P -- <span style="color:#e6db74">&#34;cmd:podman&#34;</span>
</span></span><span style="display:flex;"><span>&lt;cmd:podman&gt; podman-3.4.4-r1 x86_64 <span style="color:#f92672">{</span>podman<span style="color:#f92672">}</span> <span style="color:#f92672">(</span>Apache-2.0<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Look at how much shorter and direct it is, compared to the 1st approach!</p>
<p>Here&rsquo;s what it looks like if we try it with a binary provided by multiple packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk list -P -- <span style="color:#e6db74">&#34;cmd:docker&#34;</span>
</span></span><span style="display:flex;"><span>&lt;cmd:docker&gt; docker-cli-20.10.11-r0 x86_64 <span style="color:#f92672">{</span>docker<span style="color:#f92672">}</span> <span style="color:#f92672">(</span>Apache-2.0<span style="color:#f92672">)</span> <span style="color:#f92672">[</span>installed<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>&lt;cmd:docker&gt; podman-docker-3.4.4-r1 x86_64 <span style="color:#f92672">{</span>podman<span style="color:#f92672">}</span> <span style="color:#f92672">(</span>Apache-2.0<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>It&rsquo;s very easy to see that both <code>docker-cli</code> and <code>podman-docker</code> provide <code>docker</code>. If you just did a simple search, you&rsquo;d get a lot of noise:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ apk search docker
</span></span><span style="display:flex;"><span>docker-bash-completion-20.10.11-r0
</span></span><span style="display:flex;"><span>docker-cli-20.10.11-r0
</span></span><span style="display:flex;"><span>docker-machine-driver-kvm2-1.24.0-r0
</span></span><span style="display:flex;"><span>x11docker-6.9.0-r2
</span></span><span style="display:flex;"><span>docker-volume-local-persist-1.3.0-r5
</span></span><span style="display:flex;"><span>podman-docker-3.4.4-r1
</span></span><span style="display:flex;"><span>openvswitch-2.12.3-r4
</span></span><span style="display:flex;"><span>docker-engine-20.10.11-r0
</span></span><span style="display:flex;"><span>docker-openrc-20.10.11-r0
</span></span><span style="display:flex;"><span>dockerize-0.6.1-r9
</span></span><span style="display:flex;"><span>docker-fish-completion-20.10.11-r0
</span></span><span style="display:flex;"><span>openscap-1.3.5-r3
</span></span><span style="display:flex;"><span>docker-py-5.0.3-r1
</span></span><span style="display:flex;"><span>openvswitch-ovn-2.12.3-r4
</span></span><span style="display:flex;"><span>docker-registry-openrc-2.7.1-r5
</span></span><span style="display:flex;"><span>docker-doc-20.10.11-r0
</span></span><span style="display:flex;"><span>rsyslog-imdocker-8.2108.0-r0
</span></span><span style="display:flex;"><span>lazydocker-0.12-r2
</span></span><span style="display:flex;"><span>docker-compose-bash-completion-1.29.2-r2
</span></span><span style="display:flex;"><span>docker-compose-1.29.2-r2
</span></span><span style="display:flex;"><span>py3-dockerpty-0.4.1-r4
</span></span><span style="display:flex;"><span>docker-compose-zsh-completion-1.29.2-r2
</span></span><span style="display:flex;"><span>docker-registry-2.7.1-r5
</span></span><span style="display:flex;"><span>docker-credential-ecr-login-0.5.0-r2
</span></span><span style="display:flex;"><span>dockerpy-creds-0.4.0-r3
</span></span><span style="display:flex;"><span>docker-cli-compose-2.1.1-r0
</span></span><span style="display:flex;"><span>docker-credential-ecr-login-doc-0.5.0-r2
</span></span><span style="display:flex;"><span>podman-docker-doc-3.4.4-r1
</span></span><span style="display:flex;"><span>docker-20.10.11-r0
</span></span><span style="display:flex;"><span>docker-compose-fish-completion-1.29.2-r2
</span></span><span style="display:flex;"><span>flannel-contrib-cni-0.15.1-r0
</span></span><span style="display:flex;"><span>docker-zsh-completion-20.10.11-r0
</span></span><span style="display:flex;"><span>docker-volume-local-persist-openrc-1.3.0-r5
</span></span><span style="display:flex;"><span>docker-cli-buildx-0.7.1-r0
</span></span></code></pre></div><h2 id="packagingpackaging-it-all-together">Packaging<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> it all together</h2>
<p>I wrote the following scripts, which I source in my respective interactive shells, to achieve this behavior out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat apk-command-not-found.bash
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># apk(8) from Alpine Linux command not found hook for bash</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>command_not_found_handle <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        local cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> pkgs
</span></span><span style="display:flex;"><span>        mapfile -t pkgs &lt; &lt;<span style="color:#f92672">(</span>apk list -P -- <span style="color:#e6db74">&#34;cmd:</span>$cmd<span style="color:#e6db74">&#34;</span> 2&gt;/dev/null<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span> <span style="color:#e6db74">${#</span>pkgs[*]<span style="color:#e6db74">}</span> <span style="color:#f92672">))</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>                echo <span style="color:#e6db74">&#34;</span>$cmd<span style="color:#e6db74"> may be found in the following packages:&#34;</span>
</span></span><span style="display:flex;"><span>                printf <span style="color:#e6db74">&#39;  %s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pkgs[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                echo <span style="color:#e6db74">&#34;bash: command not found: </span>$cmd<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fi</span> 1&gt;&amp;<span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">127</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat apk-command-not-found.zsh
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/zsh</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># apk(8) from Alpine Linux command not found hook for zsh</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>command_not_found_handler<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        local cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        local pkgs<span style="color:#f92672">=(</span><span style="color:#e6db74">${</span>(f)<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>apk list -P -- <span style="color:#e6db74">&#34;cmd:</span>$cmd<span style="color:#e6db74">&#34;</span> 2&gt;/dev/null<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">}</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -n <span style="color:#e6db74">&#34;</span>$pkgs<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>                echo <span style="color:#e6db74">&#34;</span>$cmd<span style="color:#e6db74"> may be found in the following packages:&#34;</span>
</span></span><span style="display:flex;"><span>                printf <span style="color:#e6db74">&#39;  %s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pkgs[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                echo <span style="color:#e6db74">&#34;zsh: command not found: </span>$cmd<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">fi</span> 1&gt;&amp;<span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">127</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The snippets above are snapshots intended for this post.
I keep up-to-date versions of these files in my dotfiles repository, <a href="https://github.com/thiagowfx/.dotfiles/search?q=filename%3Aapk-command-not-found&amp;type=code">try out this query</a> in case I ever move them elsewhere.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://joeyh.name/code/moreutils/">https://joeyh.name/code/moreutils/</a>: moreutils is a collection of the unix tools that nobody thought to write long ago when unix was young.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>pun intended&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>