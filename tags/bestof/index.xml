<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bestof★ on not just serendipity</title><link>https://perrotta.dev/tags/bestof/</link><description>Recent content in Bestof★ on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 [Thiago Perrotta](mailto:tbperrotta@gmail.com) · [RSS](/index.xml) · a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Sun, 22 Dec 2024 23:39:25 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/bestof/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Online diff tool</title><link>https://perrotta.dev/2024/12/online-diff-tool/</link><pubDate>Sun, 22 Dec 2024 23:39:25 -0300</pubDate><guid>https://perrotta.dev/2024/12/online-diff-tool/</guid><description>&lt;p>Sometimes I have two snippets of text in my clipboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that I need to diff.&lt;/p>
&lt;p>The quickest way to do so is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR a &lt;span style="color:#75715e"># then paste&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR b &lt;span style="color:#75715e"># then paste the other one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% diff -uN a b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/">&lt;code>cdtmp&lt;/code>&lt;/a> was previously covered, it &lt;code>cd&lt;/code>s to a
temporary directory.&lt;/p>
&lt;p>The &lt;code>diff&lt;/code> tool in the CLI is not very important, you could pick any one between
&lt;code>diff -uN&lt;/code>, &lt;code>colordiff -uN&lt;/code> or &lt;a href="https://perrotta.dev/2024/07/icdiff-side-by-side-diff/">&lt;code>icdiff&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>★ Pre-commit</title><link>https://perrotta.dev/2024/12/pre-commit/</link><pubDate>Sat, 21 Dec 2024 23:24:23 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit/</guid><description>&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> is a CI framework for &lt;code>git&lt;/code>.
For those who are used to google3 tooling: it&amp;rsquo;s akin to the configuration part of &lt;code>TAP Presubmit&lt;/code>.&lt;/p>
&lt;p>You can plug in linters, formatters, code analyzers&amp;hellip;pretty much any tool or binary that analyzes files, potentially emitting errors whenever style or policy violations occur, is a potential good fit for a pre-commit hook.&lt;/p>
&lt;p>Once properly configured the whole pipeline can be run locally with &lt;code>pre-commit run&lt;/code>. By default, only the stashed files are inspected. In order to consider every file in the repository, pass &lt;code>--all-files&lt;/code>. Modified files that were not yet &lt;code>git add&lt;/code>ed are not included.&lt;/p></description></item><item><title>★ Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p></description></item><item><title>★ pre-commit: create hooks for unsupported tools</title><link>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</link><pubDate>Tue, 17 Dec 2024 22:46:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</guid><description>&lt;p>When using &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a>, in an ideal world, every
formatter / linter / code analyzer would have a &lt;code>.pre-commit-config.yaml&lt;/code> file
in its repository root.&lt;/p>
&lt;p>In the real world, that&amp;rsquo;s not always the case.&lt;/p>
&lt;p>A recent example: &lt;a href="https://github.com/cloudflare/pint">cloudflare/pint&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Prometheus rule linter/validator&lt;/p>
&lt;/blockquote>
&lt;p>It is a golang binary that lints &lt;a href="https://prometheus.io/">prometheus&lt;/a> rules.&lt;/p>
&lt;p>Can we bridge the gap?&lt;/p>
&lt;p>The end goal is the ability to run &lt;code>pre-commit run --all-files pint&lt;/code> in our git
repository.&lt;/p>
&lt;p>For that, we&amp;rsquo;ll need to define a local / custom hook in our
&lt;code>~/.pre-commit-config.yaml&lt;/code>:&lt;/p></description></item><item><title>★ skopeo: operate container images and registries</title><link>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</link><pubDate>Tue, 17 Dec 2024 17:49:31 -0300</pubDate><guid>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</guid><description>&lt;p>When working with &lt;code>docker&lt;/code> and private image registries, a common workflow is to copy images from one private registry in the cloud to another. This can be done with &lt;a href="https://github.com/containers/skopeo/">&lt;code>skopeo&lt;/code>&lt;/a>.&lt;/p>
&lt;p>This post includes some common recipes for it.&lt;/p>
&lt;h2 id="usage-1-default--root-to-staging">Usage 1) Default / Root to Staging&lt;/h2>
&lt;p>From the default / root account registry to the staging registry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>skopeo sync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile default&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --dest-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile staging&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --override-os linux --override-arch amd64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src docker --dest docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_root&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>/&lt;span style="color:#f92672">{&lt;/span>repository&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>tag&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_staging&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example values&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p></description></item><item><title>★ Just</title><link>https://perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p>
&lt;p>It is written in Rust, has sensible defaults, and lots of syntactic sugar.
A good analogy is &lt;code>fish&lt;/code> versus &lt;code>bash&lt;/code> when comparing &lt;code>just&lt;/code> to &lt;code>make&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s very easy to learn from its
&lt;a href="https://github.com/casey/just?tab=readme-ov-file">README.md&lt;/a> alone as it&amp;rsquo;s
quite comprehensive. There&amp;rsquo;s also a &lt;a href="https://just.systems/man/en/">gitbook&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://til.simonwillison.net/django/just-with-django">Simon Willison&lt;/a> prompted
me to try it out.&lt;/p>
&lt;p>As an exercise I decided to convert the &lt;code>Makefile&lt;/code> used to manage this blog into
a &lt;code>Justfile&lt;/code>.&lt;/p></description></item><item><title>★ .gitignore without .gitignore</title><link>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</link><pubDate>Wed, 11 Dec 2024 11:44:12 -0300</pubDate><guid>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</guid><description>&lt;p>&lt;code>.gitignore&lt;/code> is the canonical way to exclude files from your git repository.&lt;/p>
&lt;p>In some situations, however, you may want to exclude files without adding them
to &lt;code>.gitignore&lt;/code>, because they are only relevant to you, as opposed to your
teammates.&lt;/p>
&lt;p>Common examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ackrc&lt;/code>: exclude file patterns from search with &lt;code>ack&lt;/code> – not everyone in your
team may use &lt;code>ack&lt;/code> at all&lt;/li>
&lt;li>&lt;code>.envrc&lt;/code>: &lt;code>direnv&lt;/code> integration to automatically run a couple of commands
whenever &lt;code>cd&lt;/code>&amp;lsquo;ing to within the repository – not everyone in your team may use
&lt;code>direnv&lt;/code> at all&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p></description></item><item><title>★ Helm: enforce the directory name matches the chart name</title><link>https://perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</link><pubDate>Tue, 12 Nov 2024 11:13:06 +0100</pubDate><guid>https://perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a helm chart called &lt;code>foo&lt;/code>, enforce that its &lt;code>Chart.yaml&lt;/code> file lives in a directory called &lt;code>foo&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>In 2016, this &lt;a href="https://github.com/helm/helm/pull/818/">used to be&lt;/a> the default behavior in Helm:&lt;/p>
&lt;blockquote>
&lt;p>fix(helm): produce error if package name is inconsistent&lt;/p>
&lt;/blockquote>
&lt;p>In 2018, this enforcement was &lt;a href="https://github.com/helm/helm/pull/4141">removed&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>remove dirname constraint on helm package&lt;/p>
&lt;/blockquote>
&lt;p>We would like to reintroduce this requirement in our Helm charts codebase, as a best practice, to prevent chart name collisions.&lt;/p></description></item><item><title>★ Performance reviews</title><link>https://perrotta.dev/2024/10/performance-reviews/</link><pubDate>Sun, 20 Oct 2024 12:15:14 +0200</pubDate><guid>https://perrotta.dev/2024/10/performance-reviews/</guid><description>&lt;p>During performance reviews&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, it&amp;rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.&lt;/p>
&lt;p>Usually accomplishments for a software engineer span more than just code: design
documents, documentation, bug triage and fixes, product health initiatives,
tackling of technical debt, processes&amp;hellip;the list is endless.&lt;/p>
&lt;p>Nonetheless in this post I&amp;rsquo;ll focus only in contributions in the form of code.&lt;/p>
&lt;p>99.999% of the time this means &lt;code>git&lt;/code> commits (and/or pull requests, if you will).&lt;/p></description></item><item><title>★ prodaccess</title><link>https://perrotta.dev/2024/10/prodaccess/</link><pubDate>Fri, 18 Oct 2024 14:57:27 +0200</pubDate><guid>https://perrotta.dev/2024/10/prodaccess/</guid><description>&lt;p>At Google we had a &lt;code>prodaccess&lt;/code> command used to log in and authenticate in all
sorts of internal corp systems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for 20 hours. It became a daily ritual to run
&lt;code>prodaccess&lt;/code> first thing in the morning when logging in upon unlocking our
physical workstations&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>During the pandemic, when heavily using our virtual workstations (dubbed
&lt;em>cloudtops&lt;/em>, think of an EC2 instance or a VPS) it was common to hook
&lt;code>prodaccess&lt;/code> into &lt;code>ssh&lt;/code>. There was a &lt;code>prodcertstatus&lt;/code> command that would tell
you when &lt;code>prodaccess&lt;/code> would expire. A common pattern was to modify your &lt;code>ssh&lt;/code>
startup command to automatically run &lt;code>prodaccess&lt;/code> whenever &lt;code>prodcertstatus&lt;/code>
indicated that access would expire within 2-4 hours, depending on the user&amp;rsquo;s
preference.&lt;/p></description></item><item><title>★ New series: Raspberry Pi fun with DevOps</title><link>https://perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</link><pubDate>Sun, 13 Oct 2024 11:31:13 +0200</pubDate><guid>https://perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I have two raspberry pi&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> units sitting idle at home, a 3B and a 4.&lt;/p>
&lt;p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.&lt;/p>
&lt;p>The roadblock to do so was the most classic excuse: lack of non-interrupted time.&lt;/p>
&lt;p>There’s plenty of motivation, and ideas. These will likely &lt;em>never&lt;/em> run out, any time soon.&lt;/p>
&lt;p>That said: It’s very easy to get distracted and lose focus.
There is so much information today, in the form of
YouTube videos,
blog posts,
forums and communities (e.g. the likes of Hacker News and Reddit),
podcasts,
books…the list goes on, and it does not end.&lt;/p></description></item><item><title>★ Tracking cheap flights from Munich</title><link>https://perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</link><pubDate>Sun, 06 Oct 2024 00:31:23 +0200</pubDate><guid>https://perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>I wanted to be notified whenever a flight deal from Munich&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> appeared. The
destination doesn&amp;rsquo;t really matter.&lt;/p>
&lt;p>There are several ways to do so semi-automatically, I tried all of them at least
once:&lt;/p>
&lt;ul>
&lt;li>follow travel blogs&lt;/li>
&lt;li>sign up for newsletters&lt;/li>
&lt;li>follow instagram pages or influencers that relay promos&lt;/li>
&lt;li>visit the websites from airlines directly&lt;/li>
&lt;li>use bots / scraping&lt;/li>
&lt;li>ask friends periodically&lt;/li>
&lt;li>date a flight attendant&lt;/li>
&lt;/ul>
&lt;p>The list above is overwhelming, and I have no time for all of it. Furthermore, I
have zero desire to inundate myself with (even) more social media posts, that
are often empty in nature.&lt;/p></description></item><item><title>★ Erratic: human-friendly google3 piper snapshots</title><link>https://perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</link><pubDate>Wed, 02 Oct 2024 13:33:56 +0200</pubDate><guid>https://perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</guid><description>&lt;p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called &lt;code>erratic&lt;/code> (abbrev: &lt;code>er&lt;/code>),
which was a 20% project of another Software Engineer&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="google3-workflow">google3 workflow&lt;/h2>
&lt;p>The workflow is as follows:&lt;/p>
&lt;ul>
&lt;li>Make some changes: &lt;code>g4 open&lt;/code>, &lt;code>g4 edit&lt;/code>, etc&lt;/li>
&lt;li>Create a CL (ChangeList) &lt;code>g4 change&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Now let&amp;rsquo;s say you&amp;rsquo;re anticipating some heavy refactoring, in the same CL&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
that you could potentially regret and want to revert.&lt;/p></description></item><item><title>★ Anki: custom language card (cont.)</title><link>https://perrotta.dev/2024/09/anki-custom-language-card-cont./</link><pubDate>Sun, 22 Sep 2024 13:02:39 +0200</pubDate><guid>https://perrotta.dev/2024/09/anki-custom-language-card-cont./</guid><description>&lt;p>This post builds upon the previous &lt;a href="https://perrotta.dev/2024/02/anki-custom-language-card/">Anki: custom language card&lt;/a>.&lt;/p>
&lt;h2 id="searching-word-boundaries">Searching word boundaries&lt;/h2>
&lt;p>When searching for a word such as &lt;em>Mann&lt;/em>, results such as &lt;em>Mannschaft&lt;/em> come up.&lt;/p>
&lt;p>To search accounting for the word boundary, like a typical &lt;code>\bMann\b&lt;/code> regex, use
&lt;code>w:&lt;/code>. In this example: &lt;code>w:Mann&lt;/code>.&lt;/p>
&lt;h2 id="searching-ignoring-accents">Searching ignoring accents&lt;/h2>
&lt;p>When searching for a word with Umlauts such as &lt;em>Über&lt;/em>, you should type it
exactly as is.&lt;/p>
&lt;p>If you are lazy or do not recall where the umlaut falls, perhaps you would think
of searching for &lt;em>uber&lt;/em>, however that does not work.&lt;/p></description></item><item><title>★ Self-documented Makefiles</title><link>https://perrotta.dev/2024/08/self-documented-makefiles/</link><pubDate>Thu, 08 Aug 2024 10:42:49 +0200</pubDate><guid>https://perrotta.dev/2024/08/self-documented-makefiles/</guid><description>&lt;p>&lt;code>Makefile&lt;/code>s are often great &lt;code>bash&lt;/code> script replacements. Instead of creating a
&lt;code>bash&lt;/code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of &lt;code>Makefile&lt;/code> targets.&lt;/p>
&lt;p>Recently I found myself writing the following &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It is idempotent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROOT &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell git rev-parse --show-toplevel&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM_GITHUB_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/terraform/modules/global-github&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM &lt;span style="color:#f92672">:=&lt;/span> terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> webhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Update helm dependencies.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">helm helm-dep-update&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/argocd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/external-secrets&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Edit all files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> edit-webhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Modify github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">edit-webhook webhook-edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$$&lt;span style="color:#e6db74">EDITOR&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/main.tf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Apply github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">webhook&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> -chdir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> apply
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, there are a bunch of comments on top of each target. The
question is: How to surface these comments to the user?&lt;/p></description></item><item><title>★ XY problem</title><link>https://perrotta.dev/2024/06/xy-problem/</link><pubDate>Sun, 23 Jun 2024 14:50:19 +0200</pubDate><guid>https://perrotta.dev/2024/06/xy-problem/</guid><description>&lt;p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way&lt;/a> by Eric S. Raymond&lt;/li>
&lt;li>&lt;a href="https://xyproblem.info">XY problem&lt;/a>: The XY problem is asking about your
attempted solution rather than your actual problem. This leads to enormous
amounts of wasted time and energy, both on the part of people asking for help,
and on the part of those providing help.&lt;/li>
&lt;/ul>
&lt;p>Here is a recent example: &lt;a href="https://github.com/23andMe/Yamale/issues/250">https://github.com/23andMe/Yamale/issues/250&lt;/a>&lt;/p></description></item><item><title>★ Github actions workflow</title><link>https://perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;ul>
&lt;li>You have &lt;code>git&lt;/code>, &lt;code>jq&lt;/code> and the &lt;a href="https://cli.github.com/">&lt;code>gh&lt;/code>&lt;/a> command-line tool
installed (&lt;code>brew install gh&lt;/code>)&lt;/li>
&lt;li>You have a github actions file in
&lt;code>~/.github/workflows/package-release-dispatch.yml&lt;/code>.&lt;/li>
&lt;li>The action has the following form:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>on:
 workflow_dispatch:
 inputs:
 ref:
 description: &amp;#39;Ref to build from. This can either be a SHA or a branch/tag&amp;#39;
 required: true
 type: string
 push:
 branches:
 - master
 paths:
 - &amp;#39;.github/workflows/package-release-dispatch.yml&amp;#39;
 - &amp;#39;helm/**&amp;#39;
&lt;/code>&lt;/pre>&lt;p>The goal is to iterate on the &lt;code>jobs:&lt;/code> section of the action.&lt;/p></description></item><item><title>★ Anki: custom language card</title><link>https://perrotta.dev/2024/02/anki-custom-language-card/</link><pubDate>Sat, 03 Feb 2024 13:02:21 -0300</pubDate><guid>https://perrotta.dev/2024/02/anki-custom-language-card/</guid><description>&lt;p>The more time you spent playing with &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a>, the
more opinionated you become.&lt;/p>
&lt;p>Upon reading &lt;a href="https://fluent-forever.com/index.html">Fluent Forever&lt;/a> by Gabriel
Wyner, I got an itch to create my own Anki note template for learning
languages.&lt;/p>
&lt;h2 id="the-template">The template&lt;/h2>
&lt;p>There&amp;rsquo;s no point explaining how to create a new template; the excellent &lt;a href="https://docs.ankiweb.net/templates/intro.html">Anki
documentation&lt;/a> already does so.
Instead, I&amp;rsquo;ll just list and explain the template I created.&lt;/p>
&lt;p>The template is called &amp;ldquo;Deutsch Language Card 🇩🇪&amp;rdquo;. It has four fields:&lt;/p></description></item><item><title>★ Integrating terraform with ansible</title><link>https://perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p>
&lt;p>First of all, here&amp;rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&amp;rsquo;ll explain some of them
below.&lt;/p></description></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><guid>https://perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago&lt;/a>, web developers would run
(web) integration tests with &lt;a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic&lt;/a> using Google Chrome (or Chromium)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
This was a &lt;a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era&lt;/a>.&lt;/p>
&lt;p>&lt;em>&amp;ldquo;Why?&amp;rdquo;&lt;/em>, you may rightfully ask.&lt;/p>
&lt;ul>
&lt;li>The web browser and/or its components / extensions / etc could
&lt;strong>auto-update&lt;/strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness&lt;/li>
&lt;li>Chrome adds an &lt;strong>info bar&lt;/strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.&lt;/li>
&lt;li>There are no versioned Chrome builds for download. There&amp;rsquo;s no &lt;strong>browser
pinning&lt;/strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
&lt;ul>
&lt;li>&lt;strong>Corollary&lt;/strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
&lt;a href="https://chromedriver.chromium.org/downloads">Chromedriver&lt;/a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In order to address these (and other) issues, &lt;a href="https://goo.gle/chrome-for-testing">Chrome for
Testing&lt;/a> (hereafter &amp;ldquo;CfT&amp;rdquo;) was born. To
clarify, today where are three flavours of Chrom*:&lt;/p></description></item></channel></rss>