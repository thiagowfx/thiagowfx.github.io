<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>bestof on Not Just Serendipity</title><link>https://thiagowfx.github.io/tags/bestof/</link><description>Recent content in bestof on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Thu, 25 Jan 2024 18:27:04 -0300</lastBuildDate><atom:link href="https://thiagowfx.github.io/tags/bestof/index.xml" rel="self" type="application/rss+xml"/><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://thiagowfx.github.io/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s discuss the <em>raison d&rsquo;etre</em> of <a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing</a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.</p>
<p><a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago</a>, web developers would run
(web) integration tests with <a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic</a> using Google Chrome (or Chromium)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This was a <a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era</a>.</p>
<p><em>&ldquo;Why?&rdquo;</em>, you may rightfully ask.</p>
<ul>
<li>The web browser and/or its components / extensions / etc could
<strong>auto-update</strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness</li>
<li>Chrome adds an <strong>info bar</strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.</li>
<li>There are no versioned Chrome builds for download. There&rsquo;s no <strong>browser
pinning</strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
<ul>
<li><strong>Corollary</strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
<a href="https://chromedriver.chromium.org/downloads">Chromedriver</a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ul>
</li>
</ul>
<p>In order to address these (and other) issues, <a href="https://goo.gle/chrome-for-testing">Chrome for
Testing</a> (hereafter &ldquo;CfT&rdquo;) was born.</p>
<p>There are other <em>niceties</em> that Chrome for Testing accomplishes as of today:</p>
<ul>
<li>The <a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)</a> experiment
(&ldquo;Protocol Monitor&rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.</li>
<li>Mechanisms such as <a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts</a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
<a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable"><code>DEBIAN_FRONTEND=noninteractive</code></a>
when running <code>apt</code> in dockerfiles. You don&rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.</li>
<li>Completely agnostic to the concept of &ldquo;Stable&rdquo; / &ldquo;Beta&rdquo; / &ldquo;Dev&rdquo;. If you have
pinned versions, you don&rsquo;t need to care about any of that.</li>
<li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases</li>
</ul>
<p>Something important to note:</p>
<blockquote>
<p><strong>Warning</strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.</p>
</blockquote>
<p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&rsquo;s
package manager (e.g. <code>apt</code>, <code>dnf</code>, <code>pacman</code>, etc). Why should it be different
for Chrome for Testing?</p>
<p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&rsquo;t want end users to shoot themselves on the foot, therefore it&rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Because of that, CfT cannot be made the default system browser.</p>
<p>The easiest way to obtain CfT is via its public API, which is documented here:
<a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/</a>, or through the official
<a href="https://pptr.dev/browsers-api">CLI utility</a> that is part of Puppeteer.</p>
<p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.</p>
<h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?</h2>
<p>The <a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi</a> repository is an excellent (and simple-ish) example on how to do so<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Given a <code>.github/workflows/e2e.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">E2E tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">e2e</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is the exciting part wherein we fetch CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Despite the &#34;chromium&#34; name, this is actually CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We set a explicit shell to force &#34;set -eo pipefail&#34; so that,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># if the command fails, then the entire step fails.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We do not want &#34;cut&#34; to run if the download fails for some reason.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># version of the CLI tool, but that&#39;s how it should be done for now.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We store the location of the CfT binary in an environment variable.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Google Chrome for Testing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cft_binary=&#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&#39; &#39;)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;cft_binary=$chromium_binary&#34; &gt;&gt; $GITHUB_ENV</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip install -r tests/requirements.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># out to CfT, using the environment variable set earlier.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run E2E tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm run e2e</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">BROWSER_BIN</span>: <span style="color:#ae81ff">${{ env.chromium_binary }}</span>
</span></span></code></pre></div><p>You can find the complete version of this example in an <a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit</a>
within that repository. The reason I link to an older commit is due to its
direct usage of the <a href="https://pptr.dev/browsers-api">@puppeteer/browsers</a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.</p>
<h2 id="references">References</h2>
<ul>
<li>Chrome for Testing Design Document: <a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing</a></li>
<li><a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For simplicity, referred to as just <em>Chrome</em> hereafter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You can find lots of such reports <a href="https://groups.google.com/g/chromedriver-users">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The same way you wouldn&rsquo;t recommend Arch Linux for linux newbies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><strong>Disclaimer</strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Terraforming a Linode: hello world</title><link>https://thiagowfx.github.io/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I host my own <a href="https://miniflux.app/">Miniflux</a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running <a href="https://www.alpinelinux.org/">Alpine Linux</a>.</p>
<p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
<a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC</a>.</p>
<p>The current setup does not use any containers. I had proudly made it as KISS as
possible at the time:</p>
<ol>
<li>Linode is a very beginner-friendly (and cheap) VPS</li>
<li>Alpine Linux is a first-class citizen on Linode</li>
<li>There&rsquo;s an <code>apk</code> <a href="https://pkgs.alpinelinux.org/packages?name=miniflux">package</a> for <code>miniflux</code></li>
<li>There&rsquo;s an OpenRC<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> script for <code>miniflux</code> (so that it can be controlled via <code>service</code>)</li>
</ol>
<p>For the first part of this automation we will look into provisioning a Linode
with an Alpine Linux installation. In order to do so we will use HashiCorp
<a href="https://www.terraform.io/">Terraform</a>.</p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>Provision a new Linode</li>
<li>Deploy it in Europe</li>
<li>Use the smallest shape (a so-called <a href="https://www.linode.com/community/questions/211/what-is-a-nanode">Nanode</a>)</li>
<li>Run Alpine Linux</li>
<li>Set it up with my <a href="https://github.com/thiagowfx.keys">public ssh key</a>, which is hosted on Github</li>
</ul>
<h2 id="terraform-setup">Terraform setup</h2>
<ul>
<li>Install a provider for Linode: <a href="https://registry.terraform.io/providers/linode/linode/latest/docs">https://registry.terraform.io/providers/linode/linode/latest/docs</a></li>
</ul>
<p>Scaffold it like this, in a <code>main.tf</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform init
</span></span></code></pre></div><ul>
<li>Generate a Linode API token</li>
</ul>
<p>Go to <a href="https://cloud.linode.com/profile/tokens">https://cloud.linode.com/profile/tokens</a>, create a new token called
<code>terraform</code>. with the &ldquo;Linodes&rdquo; scope set to &ldquo;Read/Write&rdquo;.</p>
<ul>
<li>Append this API token to <code>main.tf</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">token</span> = <span style="color:#e6db74">&#34;&lt;your token here&gt;&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Add a
<a href="https://registry.terraform.io/providers/linode/linode/latest/docs/resources/instance"><code>linode_instance</code></a>
with the appropriate fields set according to the documentation:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>  = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>  = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>   = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = [<span style="color:#e6db74">&#34;&lt;your ssh public key here&gt;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan
</span></span></code></pre></div><p>&ldquo;Plan&rdquo; is basically a dry-run. Terraform will output what it intends to do, but nothing will be done yet.</p>
<ul>
<li>Analyze the output and double check that it looks correct.</li>
</ul>
<p>To actually perform the provisioning, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform apply
</span></span></code></pre></div><p>Then confirm the prompt.</p>
<p>Within a few seconds (or maybe minutes), you should see your new Linode in the
<a href="https://cloud.linode.com/">Linode Console</a>.</p>
<p>We can test our deployment by ssh&rsquo;ing to our new machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ssh root@&lt;public IP address&gt; -i ~/.ssh/my_ssh_key
</span></span><span style="display:flex;"><span>Welcome to Alpine!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Alpine Wiki contains a large amount of how-to guides and general
</span></span><span style="display:flex;"><span>information about administrating Alpine systems.
</span></span><span style="display:flex;"><span>See &lt;https://wiki.alpinelinux.org/&gt;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You can setup the system with the command: setup-alpine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You may change this message by editing /etc/motd.
</span></span></code></pre></div><p>Let&rsquo;s take a pause to appreciate how lightweight it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>localhost:~# df -h
</span></span><span style="display:flex;"><span>Filesystem                Size      Used Available Use% Mounted on
</span></span><span style="display:flex;"><span>devtmpfs                 10.0M         <span style="color:#ae81ff">0</span>     10.0M   0% /dev
</span></span><span style="display:flex;"><span>shm                     487.8M         <span style="color:#ae81ff">0</span>    487.8M   0% /dev/shm
</span></span><span style="display:flex;"><span>/dev/sda                 24.1G    238.1M     22.6G   1% /
</span></span><span style="display:flex;"><span>tmpfs                   195.1M    268.0K    194.8M   0% /run
</span></span></code></pre></div><p>Only 238 MiB!</p>
<p>To deprovision it, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -destroy
</span></span></code></pre></div><p>If everything looks correct, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform destroy
</span></span></code></pre></div><p><strong>Warning</strong>: It turns out the &ldquo;Linodes&rdquo; scope was not enough to do the
deprovisioning. I needed to create a new scope, with more permissions, in order
to do so.</p>
<p>As you can see, terraform makes it very trivial to deprovision systems.</p>
<p><strong>Bonus points</strong>: run <code>terraform fmt</code> to format your file. Never go <a href="https://www.youtube.com/watch?v=-CmadmM5cOk">out of
style</a>.</p>
<p><strong>Tip</strong>: At any point you can run <code>terraform validate</code> to verify your <code>main.tf</code>
file is syntatically correct.</p>
<p>Two things could be improved in the previous setup:</p>
<ul>
<li>We could use <code>authorized_users</code> to pass in our linode username. If we add an
SSH key to our linode account, then that key would be automatically deployed
to the system, thereby removing the need to specify <code>authorized_keys</code>.</li>
<li>Alternatively, we could fetch our key from an URL endpoint with the use of
the <code>hashicorp/http</code> provider, like so:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;thiagowfx_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/thiagowfx.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">thiagowfx_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The &ldquo;list comprehension&rdquo; above does line splitting magic to convert them to a
list of string, and the <code>compact</code> removes the empty new line at the end.</p>
<p>We could improve the example above even further.</p>
<p>For starters, let&rsquo;s parameterize out the username to a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;user_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We could then easily supply another username with <code>-var</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -var github_username<span style="color:#f92672">=</span>torvalds
</span></span></code></pre></div><p>Note that the above example leverages <a href="https://developer.hashicorp.com/terraform/language/expressions/strings">string interpolation</a>.</p>
<p>We could also extract the SSH keys list to its own &ldquo;variable&rdquo; (<a href="https://developer.hashicorp.com/terraform/language/values/locals">locals</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">ssh_keys</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>A more robust (and stable) way to query the key though is through the Github API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that a typical response body looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;id&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;&lt;ssh key&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>API endpoint documentation:
<a href="https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user">https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user</a></p>
<p>If we use <code>output</code> instead of <code>locals</code>, then we can debug (inspect) it with
<code>terraform output</code>.</p>
<p>And that&rsquo;s it for today! In a future post, we will continue from here by using
<a href="https://www.ansible.com/">Ansible</a> to install and set up Miniflux in our new
Linode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alpine Linux does not use <code>systemd</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Synchronized in Python</title><link>https://thiagowfx.github.io/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<blockquote>
<p><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the <code>synchronized</code>
keyword. Is there anything that can achieve the same results in
Python?</a></p>
</blockquote>
<p>Without having prior knowledge of any python libraries to do so, the primitive interface
I would expect resembles the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>This isn&rsquo;t robust: if an exception happens in <code>perform_mutation</code> the lock would
never be released. A small improvement we can make is to wrap it with
<code>try/finally</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>acquire()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>lock<span style="color:#f92672">.</span>release()
</span></span></code></pre></div><p>However it turns out there&rsquo;s a more pythonic way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How can we test this? First, let&rsquo;s use a single thread.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  foo<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;hello from the main thread&#34;</span>)
</span></span></code></pre></div><p>Now let&rsquo;s use multiple threads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>  foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>write, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>Without the lock this is one of the results I get locally:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 6
hello from thread 8
hello from thread 7
hello from thread 5
hello from thread 9
</code></pre><p>With the lock I always get the following, as you would predict:</p>
<pre tabindex="0"><code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 5
hello from thread 6
hello from thread 7
hello from thread 8
hello from thread 9
</code></pre><p>We could go one level deeper in the abstraction by using a <code>@synchronized</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>(object):
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">perform_mutation</span>(self, bytes):
</span></span><span style="display:flex;"><span>    print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@synchronized</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write</span>(self, bytes):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>perform_mutation(bytes)
</span></span></code></pre></div><p>How do we implement it?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">synchronized</span>(member):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(member)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> lock <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>            lock <span style="color:#f92672">=</span> vars(member)<span style="color:#f92672">.</span>setdefault(<span style="color:#e6db74">&#34;_synchronized_lock&#34;</span>, Lock())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> lock:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> member(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span></code></pre></div><p>One last concept to learn: <code>RLock</code> a.k.a. reentrant lock.</p>
<p>Consider the following program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> threading <span style="color:#f92672">import</span> Lock, Thread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Foo</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>lock <span style="color:#f92672">=</span> Lock()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeA</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">changeAandB</span>(self, bytes):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>lock:
</span></span><span style="display:flex;"><span>            print(bytes)
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeA(bytes) <span style="color:#75715e"># a usual lock would block here</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>changeB(bytes)
</span></span></code></pre></div><p>Invoked as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> Foo()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>threads <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeA, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> A&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> B&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> Thread(target<span style="color:#f92672">=</span>foo<span style="color:#f92672">.</span>changeAandB, args<span style="color:#f92672">=</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;hello from thread </span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> AB&#34;</span>,))
</span></span><span style="display:flex;"><span>    threads<span style="color:#f92672">.</span>append(thread)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start all threads</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wait for all threads to finish</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> thread <span style="color:#f92672">in</span> threads:
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>join()
</span></span></code></pre></div><p>It will not work as expected. As soon as the first <code>changeAandB</code> gets called, its inner
<code>self.changeA</code> call will block. This is because the lock can only be acquired once.</p>
<p>In this specific example, the straightforward way to fix the issue is to use an <code>RLock</code>:
<code>self.lock = RLock()</code>. The reentrant lock can be locked multiple times.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://theorangeduck.com/page/synchronized-python">https://theorangeduck.com/page/synchronized-python</a></li>
<li><a href="https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances">https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances</a></li>
<li><a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized</a></li>
<li><a href="https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock">https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock</a></li>
</ul>]]></content:encoded></item><item><title>★ Tools you should know about: moreutils</title><link>https://thiagowfx.github.io/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://joeyh.name/code/moreutils/"><code>moreutils</code></a> has previously been covered <a href="https://news.ycombinator.com/item?id=31043655">elsewhere</a>, multiple times. It&rsquo;s a collection of small unix tools that follow the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> very strongly.</p>
<p>Here are some of my favorites with example usages. Obviously this post isn&rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.</p>
<h2 id="sponge">sponge</h2>
<blockquote>
<p>sponge(1) - soak up standard input and write to a file</p>
</blockquote>
<p>Here&rsquo;s a typical workflow <code>sponge(1)</code> is great at:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Given a file</span>
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Imagine that for whatever reason we want to replace &#39;a&#39; with &#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naively, we could try this:</span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> &gt; myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># However the file becomes empty!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sponge comes to the rescue!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> | sponge myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span></code></pre></div><p>It is great to use <code>sponge</code> in lieu of <code>&gt;</code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.</p>
<h2 id="vidir">vidir</h2>
<blockquote>
<p>vidir(1) - edit directories and filenames</p>
</blockquote>
<p><code>vidir(1)</code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open <code>vidir</code> at the top-level directory of this blog repository, it opens up <code>vim</code> (although it doesn&rsquo;t need to be <code>vim</code>, your <code>$EDITOR</code> is honoured) with the following content:</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>If I make, say, the following modifications (lines 7 and 8):</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>And then save and quit <code>vim</code> (<code>:wq</code>), then the effect would have been the same as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ mv Makefile GNUMakefile
</span></span><span style="display:flex;"><span>$ mv README.md README.rst
</span></span></code></pre></div><p>If I changed my mind and decided not to save the modifications, I could just do <code>:cq</code>.</p>
<p>It&rsquo;s possible to leverage vim features such as <code>.</code> (repeat command) and <code>:%s/</code> (find and replace) to perform those mass file renames quickly and effectively. <code>vidir</code> is a breeze to use!</p>
<h2 id="ifne">ifne</h2>
<blockquote>
<p>ifne(1) - Run command if the standard input is not empty</p>
</blockquote>
<p><code>ifne(1)</code> is effective when used with <code>find</code> or <code>fd</code> to keep shell pipes &ldquo;happy&rdquo;. Here&rsquo;s one simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | xargs clang-format
</span></span></code></pre></div><p>This should work as expected, but it&rsquo;s cleaner to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | ifne xargs clang-format
</span></span></code></pre></div><p>The added <code>ifne</code> ensures the <code>xargs</code> command is only executed if and only if <code>find</code> yields at least one result in its output.</p>
<p>This wasn&rsquo;t a very practical example though: a more realistic way to use <code>ifne</code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend <code>ifne</code> to it:</p>
<pre tabindex="0"><code>$ this | is | a | complicated | pipe
# assume &#34;complicated&#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
</code></pre><h2 id="combine">combine</h2>
<blockquote>
<p>combine(1) - combine sets of lines from two files using boolean operations</p>
</blockquote>
<p><code>combine(1)</code> is pretty much <code>comm(1)</code>, but much more user-friendly. Given two files <code>file1</code> and <code>file2</code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&rsquo;s one example to find the <em>common lines</em> in <em>both</em> files, compare <code>combine</code> and <code>comm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ combine file1 and file2
</span></span><span style="display:flex;"><span>$ comm -12 file1 file2     <span style="color:#75715e"># flags are harder to remember</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Keychron K2 on macOS: fix Home and End keys</title><link>https://thiagowfx.github.io/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://thiagowfx.github.io/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p></description><content:encoded><![CDATA[<p><strong>Issue</strong>: For whatever reason, the <code>Home</code> and <code>End</code> keys on my <a href="https://thiagowfx.github.io/2022/01/keychron-k2-review/">Keychron K2</a> do not work as intended on macOS.</p>
<h2 id="expectations-vs-reality">Expectations vs Reality</h2>
<p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&rsquo;d expect:</p>
<ul>
<li><code>Home</code> to position the text cursor in the beginning of the line (à la <code>C-a</code> in emacs)</li>
<li><code>End</code> to position the text cursor in the end of the line (à la <code>C-e</code> in emacs)</li>
</ul>
<p>The only way to provoke these effects <em>out-of-the-box</em> is by pressing, respectively, the <code>Cmd + Left</code> and <code>Cmd + Right</code> shortcuts, as you would normally do in a Macbook laptop native keyboard.</p>
<p>This is very annoying because it only happens in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: the <code>Home</code> and <code>End</code> keys work just fine in both Linux and Windows. <a href="https://www.reddit.com/r/Keychron/comments/ooice5/home_and_end_keys_not_working_on_monterrey/">A reddit user</a> reported the same issue in <code>/r/keychron</code>, but the existing thread has no proposed solutions.</p>
<h2 id="enter-karabiner-elements">Enter Karabiner Elements</h2>
<p>I&rsquo;ve always heard good things about <a href="http://karabiner-elements.pqrs.org">Karabiner Elements</a> as a praised one-size-fits-all application for keyboards and macros in macOS, thus decided to give it a try. <strong>Bonus points</strong>: it is <a href="https://github.com/pqrs-org/Karabiner-Elements">open source</a>, released into the public domain.</p>
<p>Upon installing it with <a href="https://formulae.brew.sh/cask/karabiner-elements">Homebrew Cask</a> (<code>brew install karabiner-elements</code>), I executed it. Then I needed to give a bunch of permissions to the application via <code>macOS Settings &gt; Security &amp; Privacy &gt; Privacy &gt; Input Monitoring</code>. The following apps were whitelisted accordingly:</p>
<ul>
<li><code>karabiner_grabber</code></li>
<li><code>karabiner_observer</code></li>
<li><code>Karabiner-EventViewer.app</code>: this one is optional, but useful for debugging</li>
</ul>
<p>The app is straightforward to use. It allows you to do all sorts of reactions to key codes input events.</p>
<p>I had a simple idea: I wanted to map <code>Home</code> to <code>Cmd + Left</code>, and <code>End</code> to <code>Cmd + Right</code>.</p>
<p>Unfortunately these are considered &ldquo;Complex modifications&rdquo; because they map one origin key to two destination keys. &ldquo;Simple modifications&rdquo; are <em>one-to-one</em> key mappings. Why is it unfortunate? Because it doesn&rsquo;t seem to be possible to do such mappings via the app UI. Apparently one needs to express those mappings in a <code>.json</code> file instead.</p>
<h2 id="ah-communities">Ah, communities</h2>
<p>Sure, no problem, I was about to do it but then I realized there&rsquo;s an <a href="https://ke-complex-modifications.pqrs.org">official website</a> for community-maintained mappings. The website is well organized and curated. Why create something fully from scratch when I could just reuse an existing one?</p>
<p>I found a &ldquo;Keychron K2&rdquo; category which made me instantly happy but it turned out not to be useful, as there were only two defined mappings therein:</p>
<blockquote>
<ul>
<li>Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard</li>
<li>Remap some Keychrom K2(US) keys to make it less painful to switch from Macbook(RU) keyboard</li>
</ul>
</blockquote>
<p>None of these mattered to me. Then I searched for <code>home to cmd</code> which led me to <a href="https://ke-complex-modifications.pqrs.org/#HomeEnd">this entry</a>, which had exactly the mappings I wanted:</p>
<blockquote>
<p>Home and End</p>
<ul>
<li>Home to Command Left</li>
<li>End to Command Right</li>
</ul>
</blockquote>
<p><a href="https://ke-complex-modifications.pqrs.org/json/HomeEnd.json">Its resulting JSON</a> looks roughly like this (irrelevant bits stripped for the sake of brevity):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Home and End&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;rules&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Home to Command Left&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;home&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;left_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;End to Command Right&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;end&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;right_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There&rsquo;s conveniently an <strong>Import</strong> button in the website though, which automatically opens the mappings in Karabiner Elements, so I didn&rsquo;t even need to copy and paste the JSON.</p>
<h2 id="verdict">Verdict</h2>
<p><strong>End Result</strong>: It worked flawlessly! The only caveat is that from now on I need to keep the Karabiner Elements application running as a daemon, but it is well justified. Plus, if I ever need<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to map additional keys in the future, now I already have a workflow in place to do so.</p>
<p>Karabiner is like having <a href="https://qmk.fm">QMK</a> purely at the software layer, which works for any keyboard whatsoever.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As of this writing: macOS Monterey: 12.3.1.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it</a>&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Wayland: from i3 to sway</title><link>https://thiagowfx.github.io/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I&rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is <a href="https://i3wm.org/"><code>i3</code></a>, so the natural choice in Wayland is <a href="https://swaywm.org/"><code>sway</code></a>.</p>
<h2 id="intro">Intro</h2>
<p><code>sway</code> works well with the <code>i3</code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tree ~/.config/<span style="color:#f92672">{</span>i3,sway<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>/home/typhoon/.config/i3
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── i3.conf
</span></span><span style="display:flex;"><span>└── config
</span></span><span style="display:flex;"><span>/home/typhoon/.config/sway
</span></span><span style="display:flex;"><span>├── conf.d
</span></span><span style="display:flex;"><span>│   └── sway.conf
</span></span><span style="display:flex;"><span>└── config -&gt; ../../../i3/.config/i3/config
</span></span></code></pre></div><ul>
<li>The master config is
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config"><code>~/.config/i3/config</code></a>.
It is pretty standard, generated by
<a href="https://build.i3wm.org/docs/i3-config-wizard.html"><code>i3-config-wizard</code></a> with
a few tweaks on top for my own workflow. It works for both <code>i3</code> and <code>sway</code>.
The config contains this snippet:</li>
</ul>
<pre tabindex="0"><code># Load user configs if existing. Order is important.
include conf.d/*.conf
</code></pre><p>The snippet allows drop-in customizations to live in <code>conf.d</code>. The <code>include</code> directive is a relatively <a href="https://github.com/i3/i3/pull/4420">new</a> addition to the i3config syntax and it&rsquo;s the main reason this setup is elegant and minimalist.</p>
<ul>
<li>i3-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf"><code>~/.config/i3/conf.d/i3.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with <code>sway</code>, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
#   dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25

    colors {
        background $black
        statusline $white

        focused_workspace $bgcolor $bgcolor $white $black
        active_workspace $gray $gray $black $gray
        inactive_workspace $black $black $gray $gray
        urgent_workspace $red $red $white $green
    }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
</code></pre><p>It&rsquo;s possible some of these configs will become compatible with <code>sway</code> over time, but at the time of this writing they are not.</p>
<ul>
<li>sway-only config options live in <a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf"><code>~/.config/sway/conf.d/sway.conf</code></a>. To give you an idea of what it looks like and which options aren&rsquo;t compatible with i3, here&rsquo;s a snapshot of my config in early 2022:</li>
</ul>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
#   sway(5)
#   https://github.com/swaywm/sway/wiki
#   https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &#34;*&#34; scale 1.5

# Wallpaper
output &#34;*&#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
    status_command i3status
    position top
    workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
</code></pre><p>Most of those are wayland-specific options.</p>
<h2 id="quirks">Quirks</h2>
<p><code>gaps</code> is available in <code>i3</code> as well but only if you use
<a href="https://github.com/Airblader/i3"><code>i3-gaps</code></a>, which generally I refuse to in
order to stay closer to vanilla/upstream <code>i3</code>.</p>
<p>The <code>play-pause</code> multimedia key is
a <a href="https://github.com/swaywm/sway/issues/4783">bug</a> I found on <code>sway</code>. It&rsquo;s quite
annoying, the workaround as you can see above is to use <code>bindcode</code> instead of
<code>bindsym</code>. For more details see the bug.</p>
<p>In general <code>sway</code> works very well out-of-the-box so long as you install
<a href="https://wayland.freedesktop.org/xserver.html">XWayland</a> (<code>xorg-xwayland</code> on
Arch Linux). XWayland <strong>transparently</strong> proxies X11 apps to a X11 server that
runs inside wayland.</p>
<p>It&rsquo;s possible to detect those apps by running
<a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html"><code>xprop</code></a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
<a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes"><code>xeyes</code></a>
is another way to detect them.</p>
<p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
<code>xwayland disable</code> to the <code>sway</code> config. I wouldn&rsquo;t recommend that though, most
Linux GUI apps aren&rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&rsquo;s life.</p>
<p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&rsquo;s
noticeable.</p>
<p>There&rsquo;s no need to replace all of your small <code>i3</code> Xorg utilities with wayland
ones. For example, <a href="https://github.com/davatorium/rofi"><code>rofi</code></a> (application
launcher) works just fine (no need for <code>wofi</code>). The stock <code>i3</code> bar (<code>sway</code> bar?)
works just fine, there&rsquo;s no need for <code>polybar</code> or <code>waybar</code>.</p>
<p>Some utilities need to be replaced though. For example, <code>dunst</code> (notification
daemon) does not seem to work with <code>sway</code> out-of-the-box, <code>mako</code> seems to be a
recommended replacement. <code>i3lock</code> (lock screen) also does not work, <code>sway</code>
comes with its own screen lock directives. Screenshotters (e.g. <code>scrot</code>) will
also need to be replaced.</p>
<p>The system tray does not seem to work fine out-of-the-box. I haven&rsquo;t
investigated much to figure out what&rsquo;s wrong with it.</p>
<p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying <a href="https://git.sr.ht/~kennylevinsen/greetd"><code>greetd</code></a>,
<a href="https://github.com/tvrzna/emptty/"><code>emptty</code></a> and
<a href="https://github.com/fairyglade/ly"><code>ly</code></a>, in that order. <code>ly</code> is in my opinion
the best one in terms of balancing simplicity and usefulness.</p>
<p><code>sway</code> / <code>XWayland</code> doesn&rsquo;t source <code>~/.Xresources</code>. This is an issue if you
rely on customizations therein. It does source <code>~/.Xdefaults</code> though!
Leveraging this, I did the following changes:</p>
<ul>
<li>(i) <code>~/.Xresources</code> sources <code>~/.Xdefaults</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xresources
</span></span><span style="display:flex;"><span>! These settings apply to X11 only.
</span></span><span style="display:flex;"><span>! Use ~/.Xdefaults <span style="color:#66d9ef">for</span> settings that apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include &#34;.Xdefaults&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! Source:
</span></span><span style="display:flex;"><span>!   xrdb -merge ~/.Xresources
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Dump all properties:
</span></span><span style="display:flex;"><span>!   xrdb -q
</span></span><span style="display:flex;"><span>!
</span></span><span style="display:flex;"><span>! Check <span style="color:#66d9ef">if</span> DPI is set:
</span></span><span style="display:flex;"><span>!   xrdb -q | grep -i dpi
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>! HiDPI
</span></span><span style="display:flex;"><span>! Common values:
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">96</span>  <span style="color:#f92672">(</span>x1.0, baseline<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">144</span> <span style="color:#f92672">(</span>x1.5<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>!   <span style="color:#ae81ff">192</span> <span style="color:#f92672">(</span>x2.0, HiDPI<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>*.dpi: <span style="color:#ae81ff">144</span>
</span></span></code></pre></div><ul>
<li>(ii) <code>~/.Xdefaults</code> holds my customizations that originally lived in <code>~/.Xresources</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.Xdefaults
</span></span><span style="display:flex;"><span>! These settings apply to both X11 and Wayland <span style="color:#f92672">(</span>xorg-xwayland<span style="color:#f92672">)</span>.
</span></span><span style="display:flex;"><span>! Use ~/.Xresources <span style="color:#66d9ef">for</span> X11-only settings.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Xft.antialias: true
</span></span><span style="display:flex;"><span>Xft.hinting: true
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>In principle I could just have symlinked them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ln -s ~/.Xresources ~/.Xdefaults
</span></span></code></pre></div><p>The reason why I didn&rsquo;t do it is to avoid double scaling (DPI). You see, my
<code>sway</code> config already sets DPI / scaling to 1.5x. If we do that in
<code>~/.Xdefaults</code> as well then Xorg applications would have been scaled twice.</p>
<h2 id="closing-remarks">Closing remarks</h2>
<p>In general Wayland / <code>sway</code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&rsquo;ll run into other quirks. I have mixed feelings
and wouldn&rsquo;t necessarily recommend it. I wouldn&rsquo;t give an anti recommendation
either. It&rsquo;s complicated&hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.</p>]]></content:encoded></item><item><title>★ nix-env in a nutshell for basic usage in macOS</title><link>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>I am currently evaluating <a href="https://nixos.org/download.html">Nix</a> as a
replacement for <a href="https://brew.sh">Homebrew</a> CLI apps in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
<a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others</a>
<a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have</a>
<a href="https://ghedam.at/15490/so-tell-me-about-nix">previously</a> written about this.</p>
<p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &hellip;). The good news is that those components
are for the most part modular, there&rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.</p>
<p>For now, I am only adopting <code>nix-env</code> and <code>nix-shell</code>, with no <code>*.nix</code> config
files. This post covers <code>nix-env</code>.</p>
<p>For simplicity, think of <code>nix-env</code> as a package manager, akin to <code>apk</code>,
<code>pacman</code>, <code>brew</code>, <code>apt</code>, <code>pkg</code>, etc.</p>
<h2 id="install-a-package">Install a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i moreutils
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>I see some guides using <code>nix-env -iA</code> but <code>-i</code> seems to suffice. We could
optionally specify the <code>nixpkgs.</code> prefix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -i nixpkgs.moreutils
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;nixpkgs.moreutils&#39;</span> matches no derivations
</span></span></code></pre></div><p>Oh no! Maybe that&rsquo;s what the <code>-A</code> is for?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -iA nixpkgs.moreutils
</span></span><span style="display:flex;"><span>replacing old <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>installing <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span></code></pre></div><p>Indeed! Apparently that <code>-A</code> thing stands for attribute. The only thing I know
is that there are both <code>nixpkgs.*</code> and <code>nixos.*</code>. But I don&rsquo;t care about NixOS
at this point. I&rsquo;ll just ignore <code>-A</code> from now on, for the time being.</p>
<h2 id="list-installed-packages">List installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span></code></pre></div><p>Easy! This actually gets displayed in my <code>less</code> pager.</p>
<h2 id="upgrade-installed-packages">Upgrade installed packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -u
</span></span></code></pre></div><p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&rsquo;s some update to one of my
installed CLI applications. I&rsquo;ve heard there&rsquo;s something called nix channel to
control that. Leaving it for another day though.</p>
<p><strong>Update(2022-02-18)</strong>: I learned that <code>nix-env -u</code> is akin to <code>apt upgrade</code> or
<code>apk upgrade</code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
<code>apt update</code> or <code>apk update</code>, use <code>nix-channel --update</code>.</p>
<p><strong>Note</strong>: On macOS this needs to be <code>sudo -i nix-channel --update</code>. See
<a href="https://github.com/NixOS/nix/issues/3595">issue</a>.</p>
<h2 id="uninstall-a-package">Uninstall a package</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env --uninstall moreutils
</span></span><span style="display:flex;"><span>uninstalling <span style="color:#e6db74">&#39;moreutils-0.67&#39;</span>
</span></span><span style="display:flex;"><span>building <span style="color:#e6db74">&#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&#39;</span>...
</span></span></code></pre></div><p>Easy!</p>
<h2 id="search-for-packages">Search for packages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP <span style="color:#e6db74">&#39;.*moreutils.*&#39;</span>
</span></span></code></pre></div><p>The <code>.*</code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &lsquo;derivation&rsquo; in Nix):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutils
</span></span><span style="display:flex;"><span>nixpkgs.moreutils  moreutils-0.67
</span></span></code></pre></div><p>If I write the wrong package name, the following happens:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -qaP moreutil
</span></span><span style="display:flex;"><span>error: selector <span style="color:#e6db74">&#39;moreutil&#39;</span> matches no derivations, maybe you meant:
</span></span><span style="display:flex;"><span>       moreutils
</span></span></code></pre></div><p>It was helpful in this case, but I wouldn&rsquo;t always count on that. It is a bit
annoying that there&rsquo;s no <code>nix search moreutils</code> command, but it seems that
<code>nix-env</code> is very heavily tailored to use short flags, just like <code>pacman</code> in
Arch Linux. I got used to <code>pacman</code>, hopefully I can get used to the <code>nix-env</code>
short flags at some point.</p>
<p>Actually I tried it out and there is a <code>nix search</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix search moreutils
</span></span><span style="display:flex;"><span>error: experimental Nix feature <span style="color:#e6db74">&#39;nix-command&#39;</span> is disabled; use <span style="color:#e6db74">&#39;--extra-experimental-features nix-command&#39;</span> to override
</span></span></code></pre></div><p>This isn&rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the <code>nix-env</code> form for now.</p>
<p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ nix-env -q
</span></span><span style="display:flex;"><span>atool-0.39.0
</span></span><span style="display:flex;"><span>bash-interactive-5.1-p12
</span></span><span style="display:flex;"><span>coreutils-9.0
</span></span><span style="display:flex;"><span>exa-0.10.1
</span></span><span style="display:flex;"><span>fpp-0.9.2
</span></span><span style="display:flex;"><span>fzf-0.29.0
</span></span><span style="display:flex;"><span>git-2.34.1
</span></span><span style="display:flex;"><span>htop-3.1.2
</span></span><span style="display:flex;"><span>hugo-0.92.0
</span></span><span style="display:flex;"><span>jq-1.6
</span></span><span style="display:flex;"><span>less-600
</span></span><span style="display:flex;"><span>moreutils-0.67
</span></span><span style="display:flex;"><span>ncdu-1.16
</span></span><span style="display:flex;"><span>perl5.34.0-ack-3.5.0
</span></span><span style="display:flex;"><span>ranger-1.9.3
</span></span><span style="display:flex;"><span>stow-2.3.1
</span></span><span style="display:flex;"><span>tmux-3.2a
</span></span><span style="display:flex;"><span>tree-1.8.0
</span></span><span style="display:flex;"><span>vim-8.2.4186
</span></span><span style="display:flex;"><span>watch-procps-3.3.16
</span></span><span style="display:flex;"><span>wget-1.21.2
</span></span><span style="display:flex;"><span>zoxide-0.8.0
</span></span></code></pre></div><p>Those were very intuitive to find, with the exception of <code>ack</code> and <code>bash-interactive</code>:</p>
<ul>
<li><code>bash</code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
<code>~/.bashrc</code> wrecked havoc with the non-interactive version.</li>
<li><code>ack</code> is very oddly named. Really. Also: <code>nix-env -i ack</code> doesn&rsquo;t work, but
<code>nix-env -iA nixpkgs.ack</code> does. I suspect it will be hard to ignore <code>-A</code> in
the future.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Strictly speaking there&rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, <a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu</a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ SSH plus tmux automatically</title><link>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p></description><content:encoded><![CDATA[<p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.</p>
<p>To persist those connections, a terminal multiplexer is often used, <code>tmux</code> and <code>screen</code> being the two most popular ones.</p>
<p>In this post I will cover a few different client-side and server-side ways to have <code>ssh</code> automatically spawn <code>tmux</code> upon connection.</p>
<h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)</h2>
<p>Start <code>tmux</code>, forcing unicode, attaching to and/or creating a session named <em>main</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- tmux -u new -A -s main
</span></span></code></pre></div><p><code>-u</code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&rsquo;s safer to always include <code>-u</code> just in case.</p>
<p>Tip: If it&rsquo;s annoying to remember to type the full command above, consider adding an <code>alias</code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the <a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell</a> extension.</p>
<h2 id="option-2-use-sshconfig-client-side">Option #2: Use <code>~/.ssh/config</code> (client-side)</h2>
<p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.ssh/config
</span></span><span style="display:flex;"><span>Host *
</span></span><span style="display:flex;"><span>  RequestTTY yes
</span></span><span style="display:flex;"><span>  RemoteCommand tmux -u new -A -s main
</span></span></code></pre></div><p>You don&rsquo;t need to match all hosts (<code>Host *</code>), if you&rsquo;d rather match one or more specific hosts, refer to the ssh config syntax <code>ssh_config(5)</code> to add them. A simple example would be <code>Host mymachine.example.org</code>.</p>
<p><strong>Caveat</strong>: I&rsquo;ve found this method interferes with <code>git</code> + <code>ssh</code> authentication. More specifically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ git remote -v
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin	git@github.com:thiagowfx/.dotfiles.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$ git push
</span></span><span style="display:flex;"><span>Cannot execute command-line and remote command.
</span></span><span style="display:flex;"><span>fatal: Could not read from remote repository.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Please make sure you have the correct access rights
</span></span><span style="display:flex;"><span>and the repository exists.
</span></span></code></pre></div><p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&rsquo;t use it with <code>Host *</code>.</p>
<h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use <code>~/.bash_profile</code> or similar (server-side, recommended)</h2>
<p>This method leverages your login shell startup config file (<code>~/.bash_profile</code>, <code>~/.zprofile</code>, etc) to automatically spawn <code>tmux</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.</span>
</span></span><span style="display:flex;"><span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The session is called `main`.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Escape hatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ssh &lt;host&gt; -t -- NOTMUX=1 &lt;shell&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$NOTMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$TMUX<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$SSH_TTY<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[[</span> $- <span style="color:#f92672">=</span>~ i <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  tmux -u new -A -s main
</span></span><span style="display:flex;"><span>  exit
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The <code>if</code> basically checks:</p>
<ul>
<li>whether we&rsquo;re not already inside a tmux session (we shouldn&rsquo;t be), so that we don&rsquo;t nest <code>tmux</code></li>
<li>whether we&rsquo;re accessing the shell via <code>ssh</code> (we should be)</li>
<li>whether we&rsquo;re accessing an interactive shell (we should be), so that it doesn&rsquo;t interefere with oneshot <code>ssh</code> commands</li>
</ul>
<p>There&rsquo;s also a escape hatch. If you want to get an interactive shell but bypass <code>tmux</code> for some reason<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, just set <code>NOTMUX=1</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ssh user@host -t -- NOTMUX<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> bash
</span></span></code></pre></div><h2 id="final-remarks">Final remarks</h2>
<p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn <code>tmux</code> server-side, or selectively spawn <code>tmux</code> client-side.</p>
<p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your <code>ssh</code> host settings. That said, in scenarios where I fully control a host and it&rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, maybe if <code>tmux</code> broke due to a recent upgrade, or if the <code>~/.tmux.conf</code> is invalid.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ systemd: share environment variables with xorg</title><link>https://thiagowfx.github.io/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p></description><content:encoded><![CDATA[<p>In this post we will learn how to share environment variables (e.g.
<code>$GDK_SCALE</code>) between a system user session and X11/Xorg.</p>
<p>The typical <a href="https://wiki.archlinux.org/title/Xinit"><code>~/.xinitrc</code></a> and/or <a href="https://wiki.archlinux.org/title/Xprofile"><code>~/.xprofile</code></a> setup in
2020s involves some environment variable exports such as the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>export _JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>export DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>export GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>export GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>export QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>This particular set of customizations stems from my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a> but
there isn&rsquo;t anything special about it. I&rsquo;ll include an explanation anyway for
completeness:</p>
<ul>
<li>
<p>The java setting is meant for launching certain java-based applications from
within a tiling window manager.</p>
</li>
<li>
<p>All the other settings are meant for 4K HiDPI displays. The baseline DPI is
96, which is too small for 4K monitors, the fonts and icons all look tiny. In
order to make them scale it&rsquo;s necessary to use a higher DPI. Typical setups
use either 144 (x1.5) or 192 (x2.0), the bigger the DPI the bigger fonts and
icons will appear in the screen.</p>
</li>
</ul>
<p>Those exports work well for graphical applications launched from your favorite
window manager after it has already started, however if you decide to launch an
application from <code>systemd</code>, those settings will not be picked up by it.</p>
<p>For example, if you decide to manage <a href="http://jonls.dk/redshift/"><code>redshift</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> (more
specifically, <code>redshift-gtk</code> which has a system tray app) from a systemd user
session<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, its fonts will look small.</p>
<p>There are several ways to address this issue.</p>
<p>One of them is to edit the service file directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user edit redshift-gtk
</span></span></code></pre></div><p>And then add:</p>
<pre tabindex="0"><code>[Unit]
Environment=GDK_SCALE=2 GDK_DPI_SCALE=0.5
</code></pre><p>Which results in:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/systemd/user/redshift-gtk.service.d/override.conf
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Environment<span style="color:#f92672">=</span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span></code></pre></div><p>Which you can make effective by:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ systemctl --user daemon-reload
</span></span><span style="display:flex;"><span>$ systemctl --user restart redshift-gtk
</span></span></code></pre></div><p>I am not a fan of this approach though, because this step would need to be repeated
to all service files you want to manage this way. There&rsquo;s a better, <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> way to
do so.</p>
<p><code>systemd</code> supports <a href="https://www.freedesktop.org/software/systemd/man/environment.d.html">environment
files</a>
(<code>environment.d(5)</code>). User-defined ones live in
<code>~/.config/environment.d/*.conf</code> by default.</p>
<p>This means we could produce the following file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># systemd environment.d(5) EnvironmentFile</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://www.freedesktop.org/software/systemd/man/environment.d.html</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Do not use export here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternatively</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user import-environment [var1] [var2] [...]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Troubleshooting</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   systemctl --user show-environment</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># fix java application decorations, for tiling window managers</span>
</span></span><span style="display:flex;"><span>_JAVA_AWT_WM_NONREPARENTING<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf</span>
</span></span><span style="display:flex;"><span>DESKTOP_SESSION<span style="color:#f92672">=</span>gnome
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for GTK3+</span>
</span></span><span style="display:flex;"><span>GDK_DPI_SCALE<span style="color:#f92672">=</span>0.5
</span></span><span style="display:flex;"><span>GDK_SCALE<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># HiDPI settings for QT</span>
</span></span><span style="display:flex;"><span>QT_FONT_DPI<span style="color:#f92672">=</span><span style="color:#ae81ff">192</span>
</span></span></code></pre></div><p>Which is applied to all systemd user service files automatically, no need to
set <code>Environment=</code> manually everywhere.</p>
<p>However, now we need to maintain two different files: the systemd <code>.conf</code> one
and the xorg <code>~/.xinitrc</code> one.</p>
<p>One elegant way to reduce maintenance burden is, in my opinion, the follownig:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cat ~/.xinitrc
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Parse user session environment variables.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This file is shared with the systemd user instance.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Export all variables: https://stackoverflow.com/a/30969768/1745064</span>
</span></span><span style="display:flex;"><span>set -a
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> -r ~/.config/environment.d/user.conf <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> . ~/.config/environment.d/user.conf
</span></span><span style="display:flex;"><span>set +a
</span></span></code></pre></div><p>It does what you expect: the underlying shell sources the <code>*.conf</code> file as if
you were <code>export</code>ing each variable therein.</p>
<p>One caveat of this setup is that you cannot define the variables
dynamically; for example, with subshells, with external programs, or with
simple mathematical operations derived from other variables<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Ultimately though you end up with only one file to manage, which is the systemd one.
<a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a>™.</p>
<figure class="align-center "><a href="https://xkcd.com/963/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/x11.png#center"
         alt="Thomas Jefferson thought that every law and every constitution should be torn down and rewritten from scratch every nineteen years--which means X is overdue."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Redshift adjusts the color temperature of your screen according to your
surroundings. This may help your eyes hurt less if you are working in front
of the screen at night. Redshift is similar to <a href="https://justgetflux.com/">f.lux</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>systemctl --user start redshift</code>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>For example, <code>QT_FONT_DPI=$(($GDK_SCALE * 96))</code> or similar.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Watch files and react to changes during development</title><link>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p></description><content:encoded><![CDATA[<p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.</p>
<h2 id="context">Context</h2>
<p>I am contributing to <a href="https://github.com/miniflux/v2">miniflux</a>, a minimalist and opinionated RSS reader. Miniflux&rsquo;s stack is as minimalist as the app itself: It&rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive <a href="https://github.com/miniflux/v2/blob/master/Makefile"><code>Makefile</code></a>.</p>
<p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&rsquo;s needed is to execute <code>make run</code> whenever any<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> file in the repository is changed.</p>
<p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.</p>
<h2 id="option-1-entr-recommended">Option #1: entr (recommended)</h2>
<p><a href="https://eradman.com/entrproject/"><code>entr(1)</code></a>:</p>
<blockquote>
<p>Run arbitrary commands when files change</p>
</blockquote>
<p>The following invocation does the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd | entr -r -- make run
</span></span></code></pre></div><p>However, we could do better. From the upstream docs:</p>
<blockquote>
<p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git</p>
</blockquote>
<p>I am happy with <code>fd</code> for this use case though. To limit <code>entr</code> to <code>.go</code> files only, we could do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ fd -e go | entr -r -- make run
</span></span></code></pre></div><p>It took me less than 5 minutes to install and figure out how to use <code>entr</code>.</p>
<p><a href="https://schauderbasis.de/posts/entr/">This blog post</a> covers it in more detail.</p>
<h2 id="option-2-watchman">Option #2: watchman</h2>
<p><a href="https://facebook.github.io/watchman/"><code>watchman</code></a> from Facebook Open Source:</p>
<blockquote>
<p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.</p>
</blockquote>
<p>Watchman&rsquo;s workflow doesn&rsquo;t seem to be very suited for this job though. It&rsquo;s much more centered on subscribing to <code>inotify</code> events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd &lt;repository root&gt;
</span></span><span style="display:flex;"><span>watchman watch .
</span></span></code></pre></div><p>&hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># set up a trigger named &#39;buildme&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># will run &#39;minify-css&#39; whenever a CSS file is changed</span>
</span></span><span style="display:flex;"><span>watchman -- trigger . buildme <span style="color:#e6db74">&#39;*.css&#39;</span> -- minify-css
</span></span></code></pre></div><p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.</p>
<p>That said, for the simple use case of triggering (and reloading) <code>make run</code>, it seems overkill. I also found its <a href="https://facebook.github.io/watchman/docs/install.html">official docs</a> too verbose and lacking sample usages for simple <code>Makefile</code>-based projects like miniflux.</p>
<p>One caveat of <a href="https://repology.org/project/watchman/versions"><code>watchman</code></a> is that it&rsquo;s less widely available than <a href="https://repology.org/project/entr/versions"><code>entr</code></a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.</p>
<p>It took me several minutes to figure out what&rsquo;s the gist of watchman, only to realize it is more bloated than warranted.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For simple projects, <code>entr</code> is the way to go, hands down. For complex webdev projects, I would look into <code>watchman</code> more deeply.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To be truly strict, only changes to <code>.go</code> files matter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>