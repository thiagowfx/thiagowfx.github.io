<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bestof on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/bestof/</link><description>Recent content in Bestof on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Sat, 11 Jan 2025 01:48:44 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/bestof/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudflare: Email Workers</title><link>https://perrotta.dev/2025/01/cloudflare-email-workers/</link><pubDate>Sat, 11 Jan 2025 01:48:44 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/cloudflare-email-workers/</guid><description>&lt;p>My journey into the
&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing">serverless&lt;/a> world hereby
starts.&lt;/p>
&lt;p>And I am very happy to have chosen &lt;a href="https://www.cloudflare.com/">the best™
provider&lt;/a> in the universe to delight me in this
sweet learning curve. ✨&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: I have my own domain, you have probably noticed that.&lt;/p>
&lt;p>Given a specific hypothetical subdomain &lt;code>neetflex@&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> within my own domain, make
it an email recipient that automatically forwards to both &lt;code>user1@example.com&lt;/code>
and &lt;code>user2@example.com&lt;/code>.&lt;/p>
&lt;p>The first attempt involves setting up an &lt;a href="https://developers.cloudflare.com/email-routing/">Email
Routing&lt;/a> rule. The issue is
that you can only do 1:1 mappings: &lt;code>neetflex@&lt;/code> -&amp;gt; &lt;code>user1@example.com&lt;/code>
would work, but it is impossible to add &lt;code>user2@example.com&lt;/code> for the same
recipient.&lt;/p>
&lt;p>&lt;strong>Workaround&lt;/strong>: &lt;a href="https://developers.cloudflare.com/email-routing/email-workers/">Email Workers&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>With Email Workers you can leverage the power of Cloudflare Workers to
implement any logic you need to process your emails and create complex rules.
These rules determine what happens when you receive an email.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>Aside&lt;/em>: The platform is such a delight to use, I am deeply enchanted. Their
documentation is absolutely superb. I am getting seduced and couldn&amp;rsquo;t agree more
with &lt;a href="https://danielmiessler.com/blog/google-has-opened-the-door-to-cloudflare">Daniel
Miessler&lt;/a>.&lt;/p>
&lt;p>I proceed to create an Email Worker with the following code&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">email&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;info@account.neetflex.com&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">address&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep-sorted start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user1@example.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;user2@example.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep-sorted end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">forward&lt;/span>(&lt;span style="color:#a6e22e">address&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;named &lt;code>neetflex-magic-link&lt;/code>.&lt;/p>
&lt;p>There&amp;rsquo;s an integrated testing tool that makes it a breeze to ensure my worker
logic works as intended.&lt;/p>
&lt;p>Once I am satisfied with the results, I deploy the email worker.&lt;/p>
&lt;p>&lt;strong>Final step&lt;/strong>: create an email route rule from &lt;code>neetflex@{domain}&lt;/code> to the
aforementioned email worker. Done, profit!$!&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>At the time of this post, you can
&lt;a href="https://developers.cloudflare.com/workers/languages/">choose&lt;/a> among JavaScript,
TypeScript, Python and Rust to code your worker in.&lt;/p>
&lt;p>Original idea:
&lt;a href="https://community.cloudflare.com/t/routing-an-email-to-more-than-one-address-from-the-same-user/437169/2">source&lt;/a>
from Cloudflare Community.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Don&amp;rsquo;t judge me if I am a fan of &lt;a href="https://neetcode.io/">neetcode&lt;/a>&amp;rsquo;s sense
of humour.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I miss(ed) programming in TypeScript! (even if only such a small snippet).&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;em>Literally&lt;/em>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>git: configure identities for work</title><link>https://perrotta.dev/2025/01/git-configure-identities-for-work/</link><pubDate>Wed, 01 Jan 2025 17:22:05 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/git-configure-identities-for-work/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given two sets of git configurations, one for personal
projects and one for work, how can you effectively separate them?&lt;/p>
&lt;h2 id="workflow">Workflow&lt;/h2>
&lt;p>I like the following workflow.&lt;/p>
&lt;p>First, create your usual &lt;code>~/.gitconfig&lt;/code>. It will be used for your personal
project:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">[user]
 name = Thiago Perrotta
 email = {personal-email}

[...]

# Import corp configs if any.
[include]
 path = .gitconfig_corp
&lt;/code>&lt;/pre>&lt;p>This config should live in your personal laptop and in your work laptop.&lt;/p>
&lt;p>Normally I include it via my &lt;a href="https://github.com/thiagowfx/.dotfiles">.dotfiles&lt;/a>
(git repo) i.e. with a simple &lt;code>stow git&lt;/code> away.&lt;/p>
&lt;p>And we are done with our personal laptop.&lt;/p>
&lt;p>Now, for the work laptop, create &lt;code>~/.gitconfig_corp&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">[includeIf &amp;#34;gitdir:~/Orgname/**&amp;#34;]
 path = .gitconfig_orgname

[includeIf &amp;#34;hasconfig:remote.*.url:git@github.com:orgname/**&amp;#34;]
 path = .gitconfig_orgname

# vim: ft=gitconfig
&lt;/code>&lt;/pre>&lt;p>The corp config is conditionally included / used in the following scenarios:&lt;/p>
&lt;ol>
&lt;li>whenever I am working on a git repository that lives within &lt;code>~/Orgname&lt;/code>&lt;/li>
&lt;li>whenever the git remote of the repository I am working on is a git repository
under the organization &lt;code>orgname&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>This config is usually included via my corp dotfiles (named &lt;code>.dotfiles_corp&lt;/code> in
&lt;code>git&lt;/code>), which is a separate git repository. There&amp;rsquo;s no fiddling with git
submodules: both git repositories are cloned and managed independently.&lt;/p>
&lt;p>And now, last but not least, is the actual git config for work:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gitconfig" data-lang="gitconfig">% cat ~/.gitconfig_orgname
[user]
 name = Thiago Perrotta
 email = {work-email}

# vim: ft=gitconfig
&lt;/code>&lt;/pre>&lt;p>Inspired by &lt;a href="https://www.benji.dog/articles/git-config/">benji.dog&lt;/a>.&lt;/p></description></item><item><title>Scan for markdown broken links in your blog</title><link>https://perrotta.dev/2025/01/scan-for-markdown-broken-links-in-your-blog/</link><pubDate>Wed, 01 Jan 2025 16:35:00 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/scan-for-markdown-broken-links-in-your-blog/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Link_rot">Link rot&lt;/a> is a real problem in the web,
even though &lt;a href="https://www.w3.org/Provider/Style/URI">Cool URIs don&amp;rsquo;t (supposedly)
change&lt;/a>.&lt;/p>
&lt;p>I figured I could try to mitigate it from my site from time to time with some CI
integration.&lt;/p>
&lt;p>Then I found
&lt;a href="https://github.com/tcort/markdown-link-check">&lt;code>markdown-link-check&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The best way to illustrate its usage is with an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% pre-commit try-repo https://github.com/tcort/markdown-link-check --all-files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FILE: content/posts/2024-02-04-new-domain.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✓&lt;span style="color:#f92672">]&lt;/span> https://www.perrotta.dev/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✖&lt;span style="color:#f92672">]&lt;/span> https://blog.perrotta.dev/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✓&lt;span style="color:#f92672">]&lt;/span> https://perrotta.dev/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✓&lt;span style="color:#f92672">]&lt;/span> https://thiagowfx.github.io/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> links checked.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ERROR: &lt;span style="color:#ae81ff">1&lt;/span> dead links found!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✖&lt;span style="color:#f92672">]&lt;/span> https://blog.perrotta.dev/ → Status: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FILE: content/posts/2024-12-30-cookiecutter.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✓&lt;span style="color:#f92672">]&lt;/span> https://github.com/cookiecutter/cookiecutter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✖&lt;span style="color:#f92672">]&lt;/span> https://crates.io/crates/kickstart
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✓&lt;span style="color:#f92672">]&lt;/span> https://github.com/Keats/kickstart?tab&lt;span style="color:#f92672">=&lt;/span>readme-ov-file#050-2024-12-13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> links checked.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ERROR: &lt;span style="color:#ae81ff">1&lt;/span> dead links found!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>✖&lt;span style="color:#f92672">]&lt;/span> https://crates.io/crates/kickstart → Status: &lt;span style="color:#ae81ff">404&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It compiles an exhaustive list of all broken links in all markdown pages in my
git repository&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>It&amp;rsquo;s not bullet-proof. For example, sites behind Cloudflare are reported as
broken, even though they may not be
(&lt;a href="https://www.secretflying.com/posts/category/cities-countries/germany/">example&lt;/a>).
Sites that blocks bots / crawlers may also be flagged as false positives.&lt;/p>
&lt;p>I added it to the list of pre-commit hooks for this site.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I ceased to use &lt;code>blog.perrotta.dev&lt;/code> in favour of &lt;code>perrotta.dev&lt;/code> in Q4
2024.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Trains in Europe</title><link>https://perrotta.dev/2024/12/trains-in-europe/</link><pubDate>Mon, 30 Dec 2024 02:25:06 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/trains-in-europe/</guid><description>&lt;p>A (small) index on how to travel by train in Europe.&lt;/p>
&lt;h2 id="search-">Search 🔎&lt;/h2>
&lt;p>How to search for train routes?&lt;/p>
&lt;h3 id="country--provider-agnostic">Country &amp;amp; Provider agnostic&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.thetrainline.com/">Trainline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.omio.com/">Omio&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.rome2rio.com/">Rome2Rio&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.fahrplan.guru/">Fahrplan Guru&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://int.bahn.de/">Deutsche Bahn (DB) International search&lt;/a> (YMMV)&lt;/li>
&lt;li>&lt;a href="https://www.raileurope.com/">Rail Europe&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These providers also include bus routes (e.g. via &lt;a href="https://www.flixbus.com/">Flixbus&lt;/a>).&lt;/p>
&lt;p>Some of them also include ridesharing (e.g. via &lt;a href="https://www.blablacar.com/">BlaBlaCar&lt;/a>).&lt;/p>
&lt;p>There&amp;rsquo;s no point in searching in all of them: pick one or two and call it a day.&lt;/p>
&lt;p>&lt;a href="https://flights.google.com/">Google Flights&lt;/a> occasionally displays train routes but it&amp;rsquo;s imperfect, as it&amp;rsquo;s focused on flights.&lt;/p>
&lt;h3 id="country-specific">Country-specific&lt;/h3>
&lt;p>This list is intentionally non-exhaustive.&lt;/p>
&lt;!-- keep-sorted start -->
&lt;ul>
&lt;li>&lt;a href="https://int.bahn.de/en/">Deutsche Bahn (DB)&lt;/a> for Germany 🇩🇪&lt;/li>
&lt;li>&lt;a href="https://www.ns.nl/en">NS&lt;/a> for the Netherlands 🇳🇱&lt;/li>
&lt;li>&lt;a href="https://www.sbb.ch/en">SBB&lt;/a> for Switzerland 🇨🇭&lt;/li>
&lt;li>&lt;a href="https://www.sncf-connect.com/en-en/">SNCF&lt;/a> for France 🇫🇷&lt;/li>
&lt;li>&lt;a href="https://www.oebb.at/en/">ÖBB&lt;/a> for Austria 🇦🇹&lt;/li>
&lt;li>&lt;a href="https://www.cd.cz/en/">ČD.cz&lt;/a> for Czech Republic 🇨🇿&lt;/li>
&lt;/ul>
&lt;!-- keep-sorted end -->
&lt;p>Sometimes a given train route is cheaper in a different provider.
For example, the &lt;em>München – Praha&lt;/em> route is generally cheaper on ČD than on DB.&lt;/p>
&lt;h2 id="savings-opportunities">Savings opportunities&lt;/h2>
&lt;p>In Germany 🇩🇪, consider the &lt;a href="https://int.bahn.de/en/offers/regional/deutschland-ticket">Deutschland Ticket&lt;/a> (DL-Ticket).
A single monthly ticket allows you to travel by train throughout the entire country, so long as you don&amp;rsquo;t use express (ICE / EC) trains (i.e. only regional trains).
It also allows you to use unlimited local transit (e.g. U-Bahn = subway / metro, S-Bahn = surface trains, Trams = Straßenbahnen = Street Cars, Buses) a.k.a. ÖPNV.&lt;/p>
&lt;p>In Europe, &lt;a href="https://www.interrail.eu/en">Interrail&lt;/a> / &lt;a href="https://www.eurail.com/en">Eurail&lt;/a> provides passes for multi-day journeys at a discount.
There are several kinds of passes, some of them for travel within a single country, others for multiple countries. &lt;a href="https://www.thetrainline.com/passes?source=hweb&amp;amp;countryOfResidence=DE&amp;amp;countryToVisit=interrail-one-country-pass-italy">Trainline&lt;/a> also sells them.&lt;/p>
&lt;h2 id="timetables-and-live-maps">Timetables and Live Maps&lt;/h2>
&lt;p>Germany 🇩🇪:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://s-bahn-muenchen-live.de/">S-Bahn München Live&lt;/a>: only for S-Bahns in
Munich&lt;/li>
&lt;li>&lt;a href="https://reiseauskunft.bahn.de/bin/bhftafel.exe/en?ld=96252&amp;amp;country=DEU&amp;amp;rt=1&amp;amp;newrequest=yes&amp;amp;&amp;amp;country=GBR">Deutsche Bahn (DB)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bahnapp.com/">&lt;strong>Bahn App&lt;/strong>&lt;/a>: minimalist, with a superb design, better (easier to use and more reliable) than DB&lt;/li>
&lt;/ul>
&lt;h2 id="in-depth-resources">In-depth resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.seat61.com/index.html">The Man in Seat61&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.seat61.com/international-trains/trains-from-Munich.htm">The Man in Seat61: trains from Munich&lt;/a>&lt;/li>
&lt;li>Night / sleeper trains: &lt;a href="https://www.seat61.com/trains-and-routes/nightjet.htm">A guide to travel by Nightjet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shipping with Deutsche Bahn (DB) in Germany: &lt;a href="https://www.gepaeckservice-bahn.de/buchung.xhtml">Gepäckservice für Reisegepäck&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Where can you go by train in 8h&amp;rdquo;? &lt;a href="https://www.chronotrains.com/">ChronoTrains&lt;/a> could convince you to ride a train instead of flying:&lt;/p>
&lt;blockquote>
&lt;p>This map shows you how far you can travel from each station in Europe in less than 8 hours.&lt;/p>
&lt;/blockquote></description></item><item><title>Cookiecutter</title><link>https://perrotta.dev/2024/12/cookiecutter/</link><pubDate>Mon, 30 Dec 2024 00:45:20 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/cookiecutter/</guid><description>&lt;p>Recently I found out about &lt;a href="https://github.com/cookiecutter/cookiecutter">&lt;code>cookiecutter&lt;/code>&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s basically a &lt;strong>scaffolding (code generation) tool&lt;/strong>.&lt;/p>
&lt;p>Previously I was using &lt;a href="https://crates.io/crates/kickstart">&lt;code>kickstart&lt;/code>&lt;/a>.
I got annoyed that &lt;code>kickstart&lt;/code> made &lt;a href="https://github.com/Keats/kickstart?tab=readme-ov-file#050-2024-12-13">a new release&lt;/a> that was backwards-incompatible:&lt;/p>
&lt;blockquote>
&lt;p>Force output-dir to be selected in the CLI to avoid surprises&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s how I found out about &lt;code>cookiecutter&lt;/code>.&lt;/p>
&lt;p>It turns out it&amp;rsquo;s much more established and quite popular in the Python ecosystem.&lt;/p>
&lt;p>Example usage:&lt;/p>
&lt;pre tabindex="0">&lt;code>% tree
.
├── Makefile
├── README.md
└── cookiecutter
 ├── base
 │ ├── cookiecutter.json
 │ ├── hooks
 │ │ └── post_gen_project.py
 │ └── {{ cookiecutter.app_name }}
 │ ├── kustomization.yaml
 │ └── {{ cookiecutter.app_name }}.yaml
&lt;/code>&lt;/pre>&lt;p>The &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The directory wherein the Makefile resides.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>ROOT_DIR &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>patsubst %/,%,&lt;span style="color:#66d9ef">$(&lt;/span>dir &lt;span style="color:#66d9ef">$(&lt;/span>realpath &lt;span style="color:#66d9ef">$(&lt;/span>lastword &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GIT_DIR &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell git rev-parse --show-toplevel&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">base&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @&lt;span style="color:#f92672">(&lt;/span>cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GIT_DIR&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cookiecutter &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT_DIR&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/cookiecutter/base&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> base
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Makefile&lt;/code> is just for ergonomics. Invocation is like: &lt;code>make base&lt;/code>.
Use &lt;code>-C&lt;/code> when running it from another directory.&lt;/p>
&lt;p>The secret sauce, &lt;code>cookiecutter.json&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;app_name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;app-name&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;~1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;namespace&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;argocd&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;monitoring&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tools&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This file defines 3 parameters. They are all strings.
The first two have defaults, the third has a pre-defined list for user choice.&lt;/p>
&lt;p>These parameters are instantiated / rendered in the templates whenever cookiecutter finds &lt;code>{{ cookiecutter.app_name }}&lt;/code> (and so on) in code, and also in filenames.&lt;/p>
&lt;p>For example, &lt;code>kustomization.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># yaml-language-server: $schema=https://json.schemastore.org/kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - {{ &lt;span style="color:#ae81ff">cookiecutter.app_name }}.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Would be replaced with (assuming the default choice):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># yaml-language-server: $schema=https://json.schemastore.org/kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">kustomize.config.k8s.io/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Kustomization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">app-name.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s possible to move the files to another directory with the use of a post-gen hook, e.g. &lt;code>hooks/post_gen_project.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> shutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pathlib &lt;span style="color:#f92672">import&lt;/span> Path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app_name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;{{ cookiecutter.app_name }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source_dir &lt;span style="color:#f92672">=&lt;/span> Path&lt;span style="color:#f92672">.&lt;/span>cwd()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target_dir &lt;span style="color:#f92672">=&lt;/span> source_dir&lt;span style="color:#f92672">.&lt;/span>parent &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#e6db74">&amp;#34;apps&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#e6db74">&amp;#34;base&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shutil&lt;span style="color:#f92672">.&lt;/span>move(source_dir, target_dir)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;moves the top-level directory to &lt;code>apps/base&lt;/code>. Here, it is assumed that the &lt;code>cookiecutter&lt;/code> project lives in a &lt;code>scaffolding/&lt;/code> directory.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to invoke &lt;code>cookiecutter&lt;/code> with an URL.
Think &lt;code>cookiecutter https://github/com/thiagowfx/my-cool-django-template --directory lite&lt;/code>.&lt;/p>
&lt;p>I intend to adopt it in more of my projects.&lt;/p></description></item><item><title>bkt: cache command outputs</title><link>https://perrotta.dev/2024/12/bkt-cache-command-outputs/</link><pubDate>Sun, 29 Dec 2024 19:27:21 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/bkt-cache-command-outputs/</guid><description>&lt;p>My esteemed friend &lt;a href="https://github.com/dimo414">Michael Diamond&lt;/a> wrote &lt;a href="https://www.bkt.rs/">&lt;code>bkt&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>bkt (pronounced &amp;ldquo;bucket&amp;rdquo;) is a subprocess caching utility written in Rust.&lt;/p>
&lt;/blockquote>
&lt;p>I mentioned it &lt;a href="https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/">previously&lt;/a> as an example on how to create a &lt;code>PKGBUILD&lt;/code> for Arch Linux.&lt;/p>
&lt;p>Here is the main use case for me:&lt;/p>
&lt;p>Assume you have a command that is expensive to run.
The command is intended to display information / output about some resources.
Even though it&amp;rsquo;s expensive, its output rarely changes.
So that&amp;hellip;caching it would be quite beneficial.&lt;/p>
&lt;p>For example, a command to list all your cluster nodes alongside some of their properties.
Perhaps you need to run that command multiple times a day&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Enter &lt;code>bkt&lt;/code>!&lt;/p>
&lt;p>By creating an alias or a wrapper function in your shell (e.g. by adding it to your shell rc file) that uses &lt;code>bkt&lt;/code>, you can make subsequent command runs complete faster, by leveraging its cache.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>active_gardens_pp &lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bkt --ttl 7d -- &lt;span style="color:#f92672">{&lt;/span>list clusters command&lt;span style="color:#f92672">}&lt;/span> -o json | jq &lt;span style="color:#e6db74">&amp;#39;.[] | select(.active == true and .partition != &amp;#34;private-cloud&amp;#34; and .partition != &amp;#34;gov-cloud&amp;#34;)&amp;#39;&lt;/span> | mlr --ijson --opprint --barred cat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first time I run &lt;code>active_gardens_pp&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, it takes several seconds to complete.
The second time, it completes almost instantaneously.&lt;/p>
&lt;p>The cache duration can be defined with the &lt;code>--ttl&lt;/code> flag. One day or one week or a couple of hours can be sensible defaults, depending on how often you expect the output to change.&lt;/p>
&lt;p>And then I should talk about &lt;a href="https://github.com/johnkerl/miller">&lt;code>mlr&lt;/code>&lt;/a> (Miller) another day&amp;hellip;&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In Rust™. And with a &lt;a href="https://en.wikipedia.org/wiki/Domain_hack">domain hack&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Especially if, like me, you like to often close your tabs to tidy up (whether browser or terminal ones).&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;code>pp&lt;/code> stands for pretty-print.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Ollama: Hello World</title><link>https://perrotta.dev/2024/12/ollama-hello-world/</link><pubDate>Sat, 28 Dec 2024 06:26:00 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/ollama-hello-world/</guid><description>&lt;p>&lt;a href="https://ollama.com/">&lt;code>ollama&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Get up and running with large language models.
Run Llama 3.3, Phi 3, Mistral, Gemma 2, and other models. Customize and create your own.&lt;/p>
&lt;/blockquote>
&lt;p>Installing it is very easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% brew install ollama
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we start it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama serve
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Couldn&lt;span style="color:#e6db74">&amp;#39;t find &amp;#39;&lt;/span>/Users/thiago.perrotta/.ollama/id_ed25519&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>. Generating new private key.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your new public key is:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In another terminal, we can pick an arbitrary model to run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama run llama3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling manifest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 6a0746a1ec1a... 100% ▕██████████████████████████████████████████▏ 4.7 GB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 4fa551d4f938... 100% ▕██████████████████████████████████████████▏ &lt;span style="color:#ae81ff">12&lt;/span> KB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 8ab4849b038c... 100% ▕██████████████████████████████████████████▏ &lt;span style="color:#ae81ff">254&lt;/span> B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 577073ffcc6c... 100% ▕██████████████████████████████████████████▏ &lt;span style="color:#ae81ff">110&lt;/span> B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 3f8eb4da87fa... 100% ▕██████████████████████████████████████████▏ &lt;span style="color:#ae81ff">485&lt;/span> B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>verifying sha256 digest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>writing manifest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; Send a message &lt;span style="color:#f92672">(&lt;/span>/? &lt;span style="color:#66d9ef">for&lt;/span> help&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Logs from the first terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>2024/12/28 06:25:14 routes.go:1259: INFO server config env&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;map[HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:/Users/thiago.perrotta/.ollama/models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false http_proxy: https_proxy: no_proxy:]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:14.462-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>images.go:757 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;total blobs: 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:14.462-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>images.go:764 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;total unused blobs removed: 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:14.462-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>routes.go:1310 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Listening on 127.0.0.1:11434 (version 0.5.4)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:14.463-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>routes.go:1339 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Dynamic LLM libraries&amp;#34;&lt;/span> runners&lt;span style="color:#f92672">=[&lt;/span>metal&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:14.520-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>types.go:131 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;inference compute&amp;#34;&lt;/span> id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> library&lt;span style="color:#f92672">=&lt;/span>metal variant&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> compute&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> driver&lt;span style="color:#f92672">=&lt;/span>0.0 name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> total&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;21.3 GiB&amp;#34;&lt;/span> available&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;21.3 GiB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>GIN&lt;span style="color:#f92672">]&lt;/span> 2024/12/28 - 06:25:21 | &lt;span style="color:#ae81ff">200&lt;/span> | 121.084µs | 127.0.0.1 | HEAD &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>GIN&lt;span style="color:#f92672">]&lt;/span> 2024/12/28 - 06:25:21 | &lt;span style="color:#ae81ff">404&lt;/span> | 520.583µs | 127.0.0.1 | POST &lt;span style="color:#e6db74">&amp;#34;/api/show&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:25:22.964-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>download.go:175 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;downloading 6a0746a1ec1a in 16 291 MB part(s)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:26:55.972-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>download.go:175 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;downloading 4fa551d4f938 in 1 12 KB part(s)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:26:57.557-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>download.go:175 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;downloading 8ab4849b038c in 1 254 B part(s)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:26:59.147-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>download.go:175 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;downloading 577073ffcc6c in 1 110 B part(s)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:27:00.736-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>download.go:175 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;downloading 3f8eb4da87fa in 1 485 B part(s)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>GIN&lt;span style="color:#f92672">]&lt;/span> 2024/12/28 - 06:27:04 | &lt;span style="color:#ae81ff">200&lt;/span> | 1m43s | 127.0.0.1 | POST &lt;span style="color:#e6db74">&amp;#34;/api/pull&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>GIN&lt;span style="color:#f92672">]&lt;/span> 2024/12/28 - 06:27:04 | &lt;span style="color:#ae81ff">200&lt;/span> | 11.117708ms | 127.0.0.1 | POST &lt;span style="color:#e6db74">&amp;#34;/api/show&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:27:04.252-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>sched.go:714 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;new model will fit in available VRAM in single GPU, loading&amp;#34;&lt;/span> model&lt;span style="color:#f92672">=&lt;/span>/Users/thiago.perrotta/.ollama/models/blobs/sha256-6a0746a1ec1aef3e7ec53868f220ff6e389f6f8ef87a01d77c96807de94ca2aa gpu&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> parallel&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> available&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">22906503168&lt;/span> required&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6.3 GiB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>time&lt;span style="color:#f92672">=&lt;/span>2024-12-28T06:27:04.252-03:00 level&lt;span style="color:#f92672">=&lt;/span>INFO source&lt;span style="color:#f92672">=&lt;/span>server.go:104 msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;system memory&amp;#34;&lt;/span> total&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;32.0 GiB&amp;#34;&lt;/span> free&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16.9 GiB&amp;#34;&lt;/span> free_swap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0 B&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The process resembles installing and running docker:&lt;/p>
&lt;ul>
&lt;li>Instead of starting the docker daemon, we start a local LLM server.&lt;/li>
&lt;li>Instead of pulling a docker image, we download a language model.&lt;/li>
&lt;/ul>
&lt;p>There are even layers!&lt;/p>
&lt;p>Before we start, some preliminaries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama show llama3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> architecture llama
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameters 8.0B
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context length &lt;span style="color:#ae81ff">8192&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> embedding length &lt;span style="color:#ae81ff">4096&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quantization Q4_0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Parameters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stop &lt;span style="color:#e6db74">&amp;#34;&amp;lt;|start_header_id|&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stop &lt;span style="color:#e6db74">&amp;#34;&amp;lt;|end_header_id|&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stop &lt;span style="color:#e6db74">&amp;#34;&amp;lt;|eot_id|&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_keep &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> License
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> META LLAMA &lt;span style="color:#ae81ff">3&lt;/span> COMMUNITY LICENSE AGREEMENT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Meta Llama &lt;span style="color:#ae81ff">3&lt;/span> Version Release Date: April 18, &lt;span style="color:#ae81ff">2024&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>List installed models:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME ID SIZE MODIFIED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llama3:latest 365c0bd3c000 4.7 GB &lt;span style="color:#ae81ff">4&lt;/span> minutes ago
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which models are available for installation? See the list
&lt;a href="https://ollama.com/search">here&lt;/a>. For example, the
&lt;a href="https://ollama.com/library/llama3">page&lt;/a> for &lt;code>llama3&lt;/code>.&lt;/p>
&lt;p>This model from Meta has 8 billion parameters&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and &amp;lt;5GiB of size. It seems
comfortable enough for casual use in a laptop.&lt;/p>
&lt;p>Talking about laptop: I am running macOS Sonoma (14) in a MacBook M2 Pro with
32GiB of RAM and 512GiB of SSD storage. For me LLM aficionados out there this
machine isn&amp;rsquo;t fancy at all. There isn&amp;rsquo;t even a discrete GPU for it. For me
though, it&amp;rsquo;s good enough. This is just a silly experiment anyway.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ollama &lt;span style="color:#f92672">[&lt;/span>flags&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ollama &lt;span style="color:#f92672">[&lt;/span>command&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Available Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serve Start ollama
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create Create a model from a Modelfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show Show information &lt;span style="color:#66d9ef">for&lt;/span> a model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run Run a model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stop Stop a running model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull Pull a model from a registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> push Push a model to a registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list List models
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ps List running models
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cp Copy a model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm Remove a model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help Help about any command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Flags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help &lt;span style="color:#66d9ef">for&lt;/span> ollama
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v, --version Show version information
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">&amp;#34;ollama [command] --help&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information about a command.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Modelfile&lt;/code> sounds like a &lt;code>Dockerfile&lt;/code>&amp;hellip;&lt;/p>
&lt;p>Now let&amp;rsquo;s get to the &amp;ldquo;hello world&amp;rdquo; part.
In the second terminal:&lt;/p>
&lt;pre>&lt;code>&amp;gt;&amp;gt;&amp;gt; hello world
Hello World!

&amp;gt;&amp;gt;&amp;gt; What is 1+1?
The answer to 1+1 is... (drumroll please)... 2!

&amp;gt;&amp;gt;&amp;gt; How many Rs are in strawberry?
Let me count them for you! There are 2 R's in the word &amp;quot;strawberry&amp;quot;.

&amp;gt;&amp;gt;&amp;gt; How to resize a file to half with imagemagick?
You can use the `convert` command from ImageMagick to resize an image to half its original size.
Here's the syntax:

```
convert input_image.jpg -resize 50% output_image.jpg
```

In this example, replace `input_image.jpg` with the name of your original file and
`output_image.jpg` with the desired output file name.

The `%` sign in the `-resize` option indicates that you want to resize the image by a percentage. In
this case, 50% means you want to reduce the size of the image by half.

Note: You can also use the `-thumbnail` option instead of `-resize`, but it will crop the original
image if necessary to fit within the specified dimensions. The `-resize` option will not crop the
image, but it may change the aspect ratio.

&amp;gt;&amp;gt;&amp;gt; How to write merge sort in python? Be brief.
Here is a brief example of how to implement Merge Sort in Python:
```
def merge_sort(arr):
 if len(arr) &amp;lt;= 1:
 return arr
 mid = len(arr) // 2
 left = merge_sort(arr[:mid])
 right = merge_sort(arr[mid:])
 return merge(left, right)

def merge(left, right):
 result = []
 while len(left) &amp;gt; 0 and len(right) &amp;gt; 0:
 if left[0] &amp;lt;= right[0]:
 result.append(left.pop(0))
 else:
 result.append(right.pop(0))
 result.extend(left)
 result.extend(right)
 return result
```
This implementation uses the top-down approach, dividing the array into smaller subarrays and then
merging them in sorted order. The `merge` function is responsible for combining two sorted arrays
into a single sorted array.
&lt;/code>&lt;/pre>
&lt;p>Out of curiosity&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt;&amp;gt; How do I hack into the government?
I cannot provide information or guidance on illegal activities. Is there anything else I can help
you with?
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;as you would expect, with the safeguards / guardrails.&lt;/p>
&lt;p>The output rate is very quick! I was expecting it to be super slow. If I were to
describe it, think of &lt;code>pacman&lt;/code> or &lt;code>apk&lt;/code> installing a couple of packages,
skipping the downloading part. The output is &amp;ldquo;streamed&amp;rdquo;, token by token: there&amp;rsquo;s
no line-by-line buffering.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama ps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME ID SIZE PROCESSOR UNTIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llama3:latest 365c0bd3c000 6.7 GB 100% GPU &lt;span style="color:#ae81ff">2&lt;/span> minutes from now
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s no &lt;code>powertop&lt;/code> on macOS but the energy consumption, as observed in
Activity Monitor, seemed to be smaller than what Google Chrome consumes. Can you
believe it?&lt;/p>
&lt;p>Besides querying the model with the LLM tool, we could also do so via its REST
API. For example, with &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% curl -X POST http://localhost:11434/api/generate -d &lt;span style="color:#e6db74">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;model&amp;#34;: &amp;#34;llama3&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;prompt&amp;#34;:&amp;#34;Why is the sky blue? Be very succinct&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:42.93446Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;The&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:42.963904Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; sky&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:42.99362Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; appears&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.023292Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; blue&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.052729Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; because&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.082297Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; of&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.111804Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; a&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.141169Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; phenomenon&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.170596Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; called&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.20016Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; Ray&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.228858Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;leigh&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.258928Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; scattering&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.288617Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.318585Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; where&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.348322Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; shorter&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.37757Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; (&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.407404Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.43751Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.467245Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; wavelengths&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.495924Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; of&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.525707Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; light&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.555425Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; are&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.585346Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; scattered&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.615229Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; more&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.645226Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; than&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.67489Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; longer&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.704556Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; (&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.734336Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.764483Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.794457Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; wavelengths&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.824849Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; by&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.855596Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; tiny&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.886523Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; molecules&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.917667Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; of&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.948363Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; gases&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:43.978566Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; in&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:44.009334Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; the&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:44.040107Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34; atmosphere&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:44.071052Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:false&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T09:52:44.101765Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:true,&lt;span style="color:#e6db74">&amp;#34;done_reason&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;stop&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>:&lt;span style="color:#f92672">[&lt;/span>128006,882,128007,271,10445,374,279,13180,6437,30,2893,1633,20639,396,128009,128006,78191,128007,271,791,13180,8111,6437,1606,315,264,25885,2663,13558,64069,72916,11,1405,24210,320,12481,8,93959,315,3177,527,38067,810,1109,5129,320,1171,8,93959,555,13987,35715,315,45612,304,279,16975,13&lt;span style="color:#f92672">]&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;total_duration&amp;#34;&lt;/span>:1445572459,&lt;span style="color:#e6db74">&amp;#34;load_duration&amp;#34;&lt;/span>:16940042,&lt;span style="color:#e6db74">&amp;#34;prompt_eval_count&amp;#34;&lt;/span>:20,&lt;span style="color:#e6db74">&amp;#34;prompt_eval_duration&amp;#34;&lt;/span>:260000000,&lt;span style="color:#e6db74">&amp;#34;eval_count&amp;#34;&lt;/span>:40,&lt;span style="color:#e6db74">&amp;#34;eval_duration&amp;#34;&lt;/span>:1168000000&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A bit better for the terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% curl -X POST http://localhost:11434/api/generate -d &lt;span style="color:#e6db74">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;model&amp;#34;: &amp;#34;llama3&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;prompt&amp;#34;:&amp;#34;Why is the sky blue? Be very succinct&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;stream&amp;#34;: false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;model&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;llama3&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;created_at&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;2024-12-28T10:01:56.78108Z&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;response&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;The sky appears blue because of a phenomenon called Rayleigh scattering, where shorter (blue) wavelengths of light are scattered more by tiny molecules of gases in the atmosphere than longer (red) wavelengths. This scattering effect gives the sky its blue hue.&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span>:true,&lt;span style="color:#e6db74">&amp;#34;done_reason&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;stop&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>:&lt;span style="color:#f92672">[&lt;/span>128006,882,128007,271,10445,374,279,13180,6437,30,2893,1633,20639,396,128009,128006,78191,128007,271,791,13180,8111,6437,1606,315,264,25885,2663,13558,64069,72916,11,1405,24210,320,12481,8,93959,315,3177,527,38067,810,555,13987,35715,315,45612,304,279,16975,1109,5129,320,1171,8,93959,13,1115,72916,2515,6835,279,13180,1202,6437,40140,13&lt;span style="color:#f92672">]&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;total_duration&amp;#34;&lt;/span>:2237091667,&lt;span style="color:#e6db74">&amp;#34;load_duration&amp;#34;&lt;/span>:549246250,&lt;span style="color:#e6db74">&amp;#34;prompt_eval_count&amp;#34;&lt;/span>:20,&lt;span style="color:#e6db74">&amp;#34;prompt_eval_duration&amp;#34;&lt;/span>:266000000,&lt;span style="color:#e6db74">&amp;#34;eval_count&amp;#34;&lt;/span>:50,&lt;span style="color:#e6db74">&amp;#34;eval_duration&amp;#34;&lt;/span>:1419000000&lt;span style="color:#f92672">}&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://github.com/ollama/ollama/blob/main/docs/api.md">full API
documentation&lt;/a>.&lt;/p>
&lt;p>The 70B parameters model has 50GB of size.&lt;/p>
&lt;p>And finally, to wrap it up:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama run llama2-uncensored
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling manifest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pulling 6aa74acf170f... 41% ▕█████████████████ ▏ 1.6 GB/3.8 GB &lt;span style="color:#ae81ff">42&lt;/span> MB/s 53s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the meantime, watch out logs from the first terminal:&lt;/p>
&lt;pre tabindex="0">&lt;code>[GIN] 2024/12/28 - 07:01:57 | 200 | 2.495886792s | 127.0.0.1 | POST &amp;#34;/api/generate&amp;#34;
[GIN] 2024/12/28 - 07:05:45 | 200 | 17.542µs | 127.0.0.1 | HEAD &amp;#34;/&amp;#34;
[GIN] 2024/12/28 - 07:05:45 | 200 | 22.083µs | 127.0.0.1 | GET &amp;#34;/api/ps&amp;#34;
[GIN] 2024/12/28 - 07:05:53 | 200 | 16.667µs | 127.0.0.1 | HEAD &amp;#34;/&amp;#34;
[GIN] 2024/12/28 - 07:05:53 | 200 | 958.208µs | 127.0.0.1 | POST &amp;#34;/api/generate&amp;#34;
[GIN] 2024/12/28 - 07:05:56 | 200 | 22.125µs | 127.0.0.1 | HEAD &amp;#34;/&amp;#34;
[GIN] 2024/12/28 - 07:05:56 | 200 | 9.792µs | 127.0.0.1 | GET &amp;#34;/api/ps&amp;#34;
[GIN] 2024/12/28 - 07:06:08 | 200 | 20.209µs | 127.0.0.1 | HEAD &amp;#34;/&amp;#34;
[GIN] 2024/12/28 - 07:06:08 | 404 | 358.333µs | 127.0.0.1 | POST &amp;#34;/api/show&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;code>ollama&lt;/code> commands basically translate to REST API calls to the server, as you
would expect.&lt;/p>
&lt;p>A few moments later:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; How &lt;span style="color:#66d9ef">do&lt;/span> I hack into the government?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hacking into a government network is illegal and can result in severe consequences, including
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>criminal charges and jail time. There are several ways to attempt to hack into a government network,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>but it would be highly unlikely that you could successfully breach their security measures without
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>specific access or authorization from within the organization. Additionally, many governments
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>utilize complex encryption protocols and monitoring systems to prevent unauthorized access, making
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>any attempts at hacking highly challenging and often futile.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; Sure, but teach me how.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>While it is illegal and generally inadvisable to attempt to hack into a government network without
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>authorization or legitimate access, there are some basic techniques that you could use to try and
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gain entry. One method would be to scan &lt;span style="color:#66d9ef">for&lt;/span> open ports on the target network using tools such as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nmap. This would allow you to identify any vulnerabilities or weaknesses in their security
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>infrastructure which you could &lt;span style="color:#66d9ef">then&lt;/span> exploit further.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Another technique would be social engineering, where you attempt to trick an employee into giving
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>you access to sensitive information or systems by posing as someone with legitimate authority.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>However, this approach is extremely risky and should only be attempted under highly specific
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>circumstances.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;obviously, the example above is just educational. The output is common sense
to anyone that knows the basics of InfoSec and OpSec anyway, so it&amp;rsquo;s perhaps a
bit silly that the censored model refuses to even proceed in this case. Call it
pseudo-safety theater, or legal liability reduction, it&amp;rsquo;s all the same here.&lt;/p>
&lt;p>That&amp;rsquo;s a lot of llamas for the day.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt;&amp;gt; Write a short haiku to finish my post about LLMs.
Born in 2021 -
AI-powered language models -
Changing the world!
&lt;/code>&lt;/pre>&lt;p>PS. Do not forget to clean up. Otherwise, this is probably akin to leaving the
Docker driver / VM running in the background on macOS.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ollama stop llama3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% ollama stop llama2-uncensored
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Reference&lt;/strong>: &lt;a href="https://garrit.xyz/posts/2024-06-17-host-your-own-llm">https://garrit.xyz/posts/2024-06-17-host-your-own-llm&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://imgflip.com/tag/is+that+a+lot">&lt;em>&amp;ldquo;Is that a lot&amp;rdquo;&lt;/em>&lt;/a>?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Update DNS NS servers from Porkbun to Cloudflare</title><link>https://perrotta.dev/2024/12/update-dns-ns-servers-from-porkbun-to-cloudflare/</link><pubDate>Fri, 27 Dec 2024 22:45:45 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/update-dns-ns-servers-from-porkbun-to-cloudflare/</guid><description>&lt;p>&lt;a href="porkbun.com">Porkbun&lt;/a> is my registrar of choice. It is quite decent but alas it
&lt;a href="https://kb.porkbun.com/article/10-how-to-set-up-email-forwarding-service">does
not&lt;/a>
support wildcard or catch-all emails, as per their own docs.&lt;/p>
&lt;p>Cloudflare, on the other hand,
&lt;a href="https://community.cloudflare.com/t/creating-an-email-catchall/646357">does&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: How to migrate from Porkbun to Cloudflare?&lt;/p>
&lt;p>To be more precise: I&amp;rsquo;d still like to keep Porkbun as my registrar. They are
quite solid and I am very content with them. Cloudflare is also very solid but,
for now, I do not intend to switch my registrar to it.&lt;/p>
&lt;p>Therefore the only transfer that should happen is the DNS management (DNS
server), via the authoritative nameservers (NS) setting.&lt;/p>
&lt;p>It turns out both providers have excellent documentation on this process:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Porkbun&lt;/strong>: &lt;a href="https://kb.porkbun.com/article/22-how-to-change-your-nameservers">https://kb.porkbun.com/article/22-how-to-change-your-nameservers&lt;/a>&lt;/li>
&lt;li>&lt;strong>Cloudflare&lt;/strong>: &lt;a href="https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/">https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Upon creating an account on Cloudflare, I imported my site and its existing DNS
records by using their &lt;a href="https://developers.cloudflare.com/dns/zone-setups/reference/dns-quick-scan/">records quick scan
tool&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Since the DNS records quick scan is based on this predefined list of commonly
used record types and names, and is not tailored to the specific zone you are
adding to Cloudflare, there can be cases where not all records are picked up.&lt;/p>
&lt;/blockquote>
&lt;p>Three DNS records were not automatically detected (two A records and one TXT
record)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. I just added them manually. I chose to keep the records in Porkbun
intact in case I decide to revert back to them in the future.&lt;/p>
&lt;p>For starters, I chose to &lt;a href="https://developers.cloudflare.com/fundamentals/concepts/how-cloudflare-works/">disable
proxying&lt;/a>
via Cloudflare. It&amp;rsquo;s quite interesting though, and it&amp;rsquo;s a setting I would
consider to enable at some point.&lt;/p>
&lt;p>From Porkbun, I had to update my &lt;a href="https://kb.porkbun.com/article/63-how-to-switch-to-porkbuns-nameservers">NS
entries&lt;/a>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> from:&lt;/p>
&lt;pre tabindex="0">&lt;code>curitiba.ns.porkbun.com
fortaleza.ns.porkbun.com
maceio.ns.porkbun.com
salvador.ns.porkbun.com
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://blog.cloudflare.com/whats-the-story-behind-the-names-of-cloudflares-name-servers/">To&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>anirban.ns.cloudflare.com
celine.ns.cloudflare.com
&lt;/code>&lt;/pre>&lt;p>During the transfer, it&amp;rsquo;s
&lt;a href="https://developers.cloudflare.com/dns/dnssec/">important&lt;/a> to delete
&lt;a href="https://developers.cloudflare.com/dns/zone-setups/full-setup/setup/#before-you-begin">DNSSEC&lt;/a>
records at Porkbun:&lt;/p>
&lt;blockquote>
&lt;p>If you are onboarding an existing domain to Cloudflare, make sure DNSSEC is
disabled at your registrar (where you purchased your domain name). Otherwise,
your domain will experience connectivity errors when you change your
nameservers.&lt;/p>
&lt;/blockquote>
&lt;p>Then I can keep an eye on
&lt;a href="https://www.whatsmydns.net/#NS/perrotta.dev">WhatsMyDNS&lt;/a> to monitor the NS
propagation. It may take up to 48 hours to be fully rolled out.&lt;/p>
&lt;p>Or via CLI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% dig perrotta.dev +trace @1.1.1.1 | grep perrotta.dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; perrotta.dev +trace @1.1.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		10800	IN	NS	anirban.ns.cloudflare.com.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		10800	IN	NS	celine.ns.cloudflare.com.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		300	IN	A	185.199.110.153
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		300	IN	A	185.199.111.153
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		300	IN	A	185.199.108.153
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perrotta.dev.		300	IN	A	185.199.109.153
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just a few minutes after the update I could already see some nameservers picking
up the changes:&lt;/p>
&lt;pre tabindex="0">&lt;code>Paris, France
France Telecom
id 22228
opcode QUERY
rcode NOERROR
flags QR RD RA
;QUESTION
perrotta.dev. IN NS
;ANSWER
perrotta.dev. 10800 IN NS anirban.ns.cloudflare.com.
perrotta.dev. 10800 IN NS celine.ns.cloudflare.com.
;AUTHORITY
;ADDITIONAL
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>Seoul, South Korea
KT
id 14115
opcode QUERY
rcode NOERROR
flags QR RD RA
;QUESTION
perrotta.dev. IN NS
;ANSWER
perrotta.dev. 10800 IN NS anirban.ns.cloudflare.com.
perrotta.dev. 10800 IN NS celine.ns.cloudflare.com.
;AUTHORITY
;ADDITIONAL
anirban.ns.cloudflare.com. 50728 IN A 108.162.193.64
anirban.ns.cloudflare.com. 50728 IN A 172.64.33.64
anirban.ns.cloudflare.com. 50728 IN A 173.245.59.64
anirban.ns.cloudflare.com. 50728 IN AAAA 2606:4700:58::adf5:3b40
anirban.ns.cloudflare.com. 50728 IN AAAA 2803:f800:50::6ca2:c140
anirban.ns.cloudflare.com. 50728 IN AAAA 2a06:98c1:50::ac40:2140
celine.ns.cloudflare.com. 137333 IN A 108.162.194.98
celine.ns.cloudflare.com. 137333 IN A 162.159.38.98
celine.ns.cloudflare.com. 137333 IN A 172.64.34.98
celine.ns.cloudflare.com. 702 IN AAAA 2606:4700:50::a29f:2662
celine.ns.cloudflare.com. 702 IN AAAA 2803:f800:50::6ca2:c262
celine.ns.cloudflare.com. 702 IN AAAA 2a06:98c1:50::ac40:2262
&lt;/code>&lt;/pre>&lt;p>Once the transfer is done, go to your Cloudflare dashboard. You should see the
following message:&lt;/p>
&lt;blockquote>
&lt;p>Great news! Cloudflare is now protecting your site&lt;/p>
&lt;/blockquote>
&lt;p>I also got an email from Cloudflare confirming it:&lt;/p>
&lt;blockquote>
&lt;p>perrotta.dev is now active on a Cloudflare Free plan&lt;/p>
&lt;/blockquote>
&lt;p>Now it&amp;rsquo;s time to &lt;a href="https://developers.cloudflare.com/dns/dnssec/">re-enable
DNSSEC&lt;/a>. Porkbun instructions are
&lt;a href="https://kb.porkbun.com/article/93-how-to-install-dnssec">here&lt;/a>: do not fill out
&lt;strong>keyData&lt;/strong>. It&amp;rsquo;s possible to verify it was properly configured via &lt;a href="https://dnssec-analyzer.verisignlabs.com/perrotta.dev">DNSSEC
Analyzer&lt;/a> by VeriSign
Labs, wherein all checkboxes should be green. Furthermore, from Cloudflare,
verify that &lt;code>DNS &amp;gt; Settings &amp;gt; DNSSEC&lt;/code> is properly configured.&lt;/p>
&lt;p>If you choose to &lt;a href="https://developers.cloudflare.com/cloudflare-one/policies/gateway/proxy/">proxy your traffic through
Cloudflare&lt;/a>,
you can verify whether it&amp;rsquo;s hiding your origin IP address with &lt;a href="https://ping.eu">https://ping.eu&lt;/a>.
Or, alternatively, &lt;code>ping &amp;lt;hostname&amp;gt;&lt;/code> from the terminal. Beware of DNS caching.
It seems a no-brainer and sensible idea to enable it for your VPS instances&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. I
would not enable it for &lt;a href="https://community.cloudflare.com/t/github-pages-require-disabling-cfs-http-proxy/147401/21">Github
Pages&lt;/a>
though.&lt;/p>
&lt;p>Up to this point everything was a no-op in terms of feature parity. The optional
Cloudflare goodies (e.g. proxying, blocking AI bots, caching, etc.) are just
cherries on top.&lt;/p>
&lt;p>The most exciting part comes now: configuring email and MX records to use
Cloudflare&amp;rsquo;s, with the final goal of supporting catch-all / wildcard emails.&lt;/p>
&lt;h2 id="email">Email&lt;/h2>
&lt;p>Follow the steps at
&lt;a href="https://developers.cloudflare.com/dns/manage-dns-records/how-to/email-records/">https://developers.cloudflare.com/dns/manage-dns-records/how-to/email-records/&lt;/a>
to configure MX, SPF and DMARC. It&amp;rsquo;s mostly a point-and-click process.
Cloudflare makes it easy and boring™.&lt;/p>
&lt;p>Once the MX record is configured, verify it&amp;rsquo;s working via &lt;a href="https://www.whatsmydns.net/#MX/perrotta.dev">WhatsMyDNS&lt;/a>.&lt;/p>
&lt;p>Verify DMARC is working via &lt;a href="https://mxtoolbox.com/SuperTool.aspx?action=dmarc%3aperrotta.dev&amp;amp;run=toolpage">MX
Toolbox&lt;/a>.&lt;/p>
&lt;p>Then &lt;a href="https://blog.cloudflare.com/introducing-email-routing/#cloudflare-email-routing">create custom routing
rules&lt;/a>.
If desired, add a catch-all rule.&lt;/p>
&lt;p>Once it is working test it by sending an email to yourself. And we&amp;rsquo;re done!&lt;/p>
&lt;p>More references on DKIM and DMARC:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Porkbun&lt;/strong>: &lt;a href="https://kb.porkbun.com/article/179-how-to-turn-on-dkim-dmarc">https://kb.porkbun.com/article/179-how-to-turn-on-dkim-dmarc&lt;/a> (for
comparison only)&lt;/li>
&lt;li>&lt;strong>Cloudflare&lt;/strong>: &lt;a href="https://www.cloudflare.com/en-ca/learning/email-security/dmarc-dkim-spf/">https://www.cloudflare.com/en-ca/learning/email-security/dmarc-dkim-spf/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developers.cloudflare.com/learning-paths/get-started-free/">https://developers.cloudflare.com/learning-paths/get-started-free/&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The A records were subdomains of my domain, and the TXT record was the
github pages site / domain verification.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://www.reddit.com/r/PorkBun/comments/170d6ve/unimportant_nameserver_naming_question/">Fun
fact&lt;/a>:
The nameservers are named after Brazilian cities: &amp;ldquo;our CTO is a big fan of
Brazil&amp;rdquo;. Huh.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>However it didn&amp;rsquo;t work for my instances out-of-the-box. That&amp;rsquo;s a problem
for another day: &lt;code>ERR_TOO_MANY_REDIRECTS&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Keep sorted</title><link>https://perrotta.dev/2024/12/keep-sorted/</link><pubDate>Thu, 26 Dec 2024 15:07:02 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/keep-sorted/</guid><description>&lt;p>&lt;a href="https://github.com/google/keep-sorted">keep-sorted&lt;/a> is, by far, one of my
favorite tools to enforce tidying up a codebase.&lt;/p>
&lt;p>It is such an undiscovered gem (~130 stars on github), proving that popularity
isn&amp;rsquo;t always a pre-requisite for quality nor success.&lt;/p>
&lt;p>It started as someone&amp;rsquo;s 20% project at Google. When using the internal IDE
(legacy Cider) and/or the internal Code Review tool (legacy Critique) with the
CI tool, linting warnings / errors would surface all over the place,
forcing you to address them. It was also possible to have them automatically
fixed.&lt;/p>
&lt;p>The premise is quite simple: given a text file, any file, have a
newline-separated list be sorted. For example, this hypothetical Java array:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It would be more deterministic and canonical to initialize it with sorted
values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>:sort&lt;/code> in &lt;code>vim&lt;/code> is my favorite way to do so.&lt;/p>
&lt;p>By doing this, you make it easier for the next developer to add a new item:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Rio de Janeiro&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But surely at some point one
&lt;a href="https://www.seangoedecke.com/programmer-archetypes/">coaster&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> will ruin it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Rio de Janeiro&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Ottawa&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I mean, it&amp;rsquo;s only natural to append new items to the end, right? Who said it has
to be sorted?&lt;/p>
&lt;p>Perhaps you could attempt to address this by adding a comment at the top:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep this list sorted, as this is the order displayed to the end-user in a dropdown menu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Rio de Janeiro&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But developers don&amp;rsquo;t read documentation, right?&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> Some of them do, but they
don&amp;rsquo;t have time to read documentation all day. There are so many tickets in our
JIRA backlog!&lt;/p>
&lt;p>Surely you could &lt;a href="https://atulgawande.com/book/the-checklist-manifesto/">force&lt;/a>
them to read the documentation by the means of a mandatory process, but it adds
overhead and it&amp;rsquo;s costly.&lt;/p>
&lt;p>Maybe you will make a comment to address it during code review. But who
guarantees the review will be always sent to you? Also, &lt;a href="https://en.wikipedia.org/wiki/Bus_factor">it probably
shouldn&amp;rsquo;t&lt;/a>.&lt;/p>
&lt;p>Then why not fix it in code? Let the programming language enforce the invariant
for you.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Arrays;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#f92672">[]&lt;/span> capitals &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// keep this list sorted, as this is the order displayed to the end-user in a dropdown menu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Berlin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;New Delhi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Paris&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Rio de Janeiro&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tokyo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Ottawa&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Arrays.&lt;span style="color:#a6e22e">sort&lt;/span>(capitals); &lt;span style="color:#75715e">// sort in place&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, this approach works, and it could be an acceptable solution or
workaround. But it won&amp;rsquo;t always work. What if we had an YAML file instead?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">capitals&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep this list sorted, as this is the order displayed to the end-user in a dropdown menu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Berlin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">London&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">New Delhi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Paris&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Rio de Janeiro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Tokyo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Ottawa&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could sort it in the client, but how do you guarantee every client will do
so? Maybe you don&amp;rsquo;t control all clients.&lt;/p>
&lt;p>Now, remember the title of this post? If you integrate keep-sorted in this
file&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">capitals&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sortedd start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Berlin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">London&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">New Delhi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Paris&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Rio de Janeiro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Tokyo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Ottawa&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sortedd end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;the end result will be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">capitals&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Berlin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">London&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">New Delhi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Ottawa&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Paris&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Rio de Janeiro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">Tokyo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This invariant can be enforced at CI time. The &lt;code>keep-sorted&lt;/code> binary guarantees
it by automatically sorting everything between the &lt;code>start&lt;/code> and &lt;code>end&lt;/code> lines.&lt;/p>
&lt;p>It&amp;rsquo;s possible to fine tune it a bit, but there&amp;rsquo;s no need to in 99% of the cases.
Sorting lines is the most sensible out-of-the-box behavior for it and it&amp;rsquo;s
almost always what you&amp;rsquo;re looking for.&lt;/p>
&lt;p>You can do this with any text file, so long as it provides a way to add
comments. This means JSON is out. YAML, protocol buffers, programming languages,
markdown&amp;hellip;almost everything else works. JSON is the ugly duck in this context.&lt;/p>
&lt;p>You don&amp;rsquo;t need to invoke &lt;code>keep-sorted&lt;/code> directly, although you could if you want
to. Treat it the same way as you treat your code language formatter (&lt;code>go fmt&lt;/code>,
&lt;code>prettier&lt;/code>, &lt;code>black&lt;/code>, etc). Have it be automatically invoked by your IDE, or by
your &lt;a href="https://pre-commit.com/">pre-commit framework&lt;/a>, or by CI (e.g. github
actions).&lt;/p>
&lt;p>You don&amp;rsquo;t even need to teach people about it. It is very intuitive to
understand, even if you&amp;rsquo;re not aware a tool is enforcing the invariant, as the
start and end markers double-down as documentation comments.&lt;/p>
&lt;p>As a positive side effect, it deduplicates lines (it&amp;rsquo;s possible to deactivate
this option when it is not actually desired).&lt;/p>
&lt;p>I peer-bonused the creator of this tool. It&amp;rsquo;s in my opinion one of the simplest
(yet effective!) enablers of intra- and cross-team Software Engineering
disciplined conventions / practices.&lt;/p>
&lt;p>You can also sort nested YAML lists and simple JSON-like dictionaries, refer to
the upstream documentation for that.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Not necessarily a coaster: believers and grinders can also make accidental
mistakes, we humans are all flawed, that&amp;rsquo;s why we have CI, eh? That said, in
my experience, coasters don&amp;rsquo;t care as much about canonical, elegant or
reproducible properties in the codebase.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Documentation is only intended to please QA, right?!1!&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>The typo is intentional. Otherwise the keep-sorted pre-commit hook from my
blog would have sorted the list. Unless I added an exclusion rule for it,
which seems unnecessary. Minimizing exclusions is better.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Anki workflow</title><link>https://perrotta.dev/2024/12/anki-workflow/</link><pubDate>Mon, 23 Dec 2024 00:12:52 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/anki-workflow/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> since 2-3 years ago to keep up
with German vocabulary and grammar. I had originally started with Duolingo.&lt;/p>
&lt;p>In the beginning my workflow was quite basic.
Then I created &lt;a href="https://perrotta.dev/2024/02/anki-custom-language-card/">custom language&lt;/a> &lt;a href="https://perrotta.dev/2024/09/anki-custom-language-card-cont./">cards&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>After you install Anki, you need to set up a Note Type to keep your flashcards
formatted as you like. Anki comes with a few basic Note Types, but they aren&amp;rsquo;t
suited for learning Japanese.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://tatsumoto.neocities.org/blog/setting-up-anki">via&lt;/a>). The advantage of
creating a custom note type (language card) is that I can format it the way I
want.&lt;/p>
&lt;p>On top of it I tweaked my Anki deck settings to optimize it for language learning.&lt;/p>
&lt;p>I adopted the &lt;a href="https://web.archive.org/web/20210203165239/https://massimmersionapproach.com/table-of-contents/anki/low-key-anki/intro">Low-Key Anki
setup&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The Low-Key Anki setup is a series of counterintuitive simplifications one can
make to Anki&amp;rsquo;s algorithm that result in a significant boost in efficiency, as
well as a considerable reduction in the stress associated with reviewing cards&lt;/p>
&lt;/blockquote>
&lt;p>Furthermore, Soren Bjornstad has helpfully written &lt;a href="https://controlaltbackspace.org/precise/">some
tips&lt;/a> about designing flashcards
effectively, some of which I gladly adopted.&lt;/p>
&lt;p>And last but not least, &lt;a href="https://refold.la/roadmap/stage-1/a/anki-setup">Refold&lt;/a>
provided me with a step-by-step breakdown on how to configure Anki for language
learning.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://refold.la/roadmap/stage-1/a/anki-setup">https://refold.la/roadmap/stage-1/a/anki-setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://web.archive.org/web/20210203165239/https://massimmersionapproach.com/table-of-contents/anki/low-key-anki/intro">https://web.archive.org/web/20210203165239/https://massimmersionapproach.com/table-of-contents/anki/low-key-anki/intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tatsumoto.neocities.org/blog/setting-up-anki.html">https://tatsumoto.neocities.org/blog/setting-up-anki.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://controlaltbackspace.org/precise/">https://controlaltbackspace.org/precise/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Online diff tool</title><link>https://perrotta.dev/2024/12/online-diff-tool/</link><pubDate>Sun, 22 Dec 2024 23:39:25 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/online-diff-tool/</guid><description>&lt;p>Sometimes I have two snippets of text in my clipboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that I need to diff.&lt;/p>
&lt;p>The quickest way to do so is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR a &lt;span style="color:#75715e"># then paste&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR b &lt;span style="color:#75715e"># then paste the other one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% diff -uN a b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/">&lt;code>cdtmp&lt;/code>&lt;/a> was previously covered, it &lt;code>cd&lt;/code>s to a
temporary directory.&lt;/p>
&lt;p>The &lt;code>diff&lt;/code> tool in the CLI is not very important, you could pick any one between
&lt;code>diff -uN&lt;/code>, &lt;code>colordiff -uN&lt;/code> or &lt;a href="https://perrotta.dev/2024/07/icdiff-side-by-side-diff/">&lt;code>icdiff&lt;/code>&lt;/a>.&lt;/p>
&lt;p>However the terminal has its limitations.
Sometimes it&amp;rsquo;s much better to diff with a graphical application.&lt;/p>
&lt;p>For macOS I&amp;rsquo;ve heard that &lt;a href="https://kaleidoscope.app/">Kaleidoscope&lt;/a> is great,
but I don&amp;rsquo;t use it. For Linux there&amp;rsquo;s KDiff3 and Meld.&lt;/p>
&lt;p>It&amp;rsquo;s much easier to use a web tool though, as it&amp;rsquo;s operating system agnostic.&lt;/p>
&lt;p>Julia Evans has recently recommended
&lt;a href="https://jvns.ca/til/diffdiff--a-great-diff-tool/">diffdiff&lt;/a>: &lt;a href="https://diffdiff.net/">https://diffdiff.net/&lt;/a>. I like it!&lt;/p>
&lt;p>At Google we had an internally hosted one at &lt;code>http://diff/&lt;/code> (or was it &lt;code>go/diff&lt;/code>?).&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you&amp;rsquo;re only able to hold one at a time, you should definitely upgrade
your workflow to using a clipboard manager, you&amp;rsquo;re missing out. For macOS,
see my &lt;a href="https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/">previous post&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pre-commit</title><link>https://perrotta.dev/2024/12/pre-commit/</link><pubDate>Sat, 21 Dec 2024 23:24:23 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/pre-commit/</guid><description>&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> is a CI framework for &lt;code>git&lt;/code>.
For those who are used to google3 tooling: it&amp;rsquo;s akin to the configuration part of &lt;code>TAP Presubmit&lt;/code>.&lt;/p>
&lt;p>You can plug in linters, formatters, code analyzers&amp;hellip;pretty much any tool or binary that analyzes files, potentially emitting errors whenever style or policy violations occur, is a potential good fit for a pre-commit hook.&lt;/p>
&lt;p>Once properly configured the whole pipeline can be run locally with &lt;code>pre-commit run&lt;/code>. By default, only the stashed files are inspected. In order to consider every file in the repository, pass &lt;code>--all-files&lt;/code>. Modified files that were not yet &lt;code>git add&lt;/code>ed are not included.&lt;/p>
&lt;p>When configuring CI, the same command is used in cloud pipelines: it&amp;rsquo;s a single configuration for both local and CI runs.&lt;/p>
&lt;p>All the configuration lives in a single YAML file, &lt;code>.pre-commit-config.yaml&lt;/code>, in the repository root.&lt;/p>
&lt;p>Because it is written in Python, the whole ecosystem around the language is very well supported, first-class. That said, many other languages are also supported. For the ones that are not, there is a escape hatch – the &amp;ldquo;system&amp;rdquo; language.&lt;/p>
&lt;p>Here is an example &lt;code>.pre-commit-config.yaml&lt;/code> file – the one for this blog:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">repos&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/pre-commit/pre-commit-hooks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v5.0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">check-executables-have-shebangs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">check-symlinks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">check-yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">detect-private-key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">pretty-format-json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">autofix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#66d9ef">no&lt;/span>-&lt;span style="color:#ae81ff">sort-keys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">sort-simple-yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">trailing-whitespace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/google/keep-sorted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v0.5.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">keep-sorted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/google/yamlfmt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v0.14.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">yamlfmt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/codespell-project/codespell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v2.3.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">codespell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">exclude&lt;/span>: &lt;span style="color:#ae81ff">^content/posts/(2014|2015|2016)|content/posts/2024-07-09-kubectl-get-secret-with-jsonpath-add-newline.md|content/posts/2024-06-27-a-little.md&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">L=DeVault&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">L=als&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">L=ist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - -&lt;span style="color:#ae81ff">L=sive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># keep-sorted end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">https://github.com/jmlrt/check-yamlschema&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rev&lt;/span>: &lt;span style="color:#ae81ff">v0.0.4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">check-yamlschema&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Repository versions are always pinned. You would think this is tedious, but it&amp;rsquo;s highly desirable for reproducibility, and they can all be automatically updated with &lt;code>pre-commit autoupdate&lt;/code>.&lt;/p>
&lt;p>To run only a single hook: &lt;code>pre-commit run [--all-files] codespell&lt;/code>.&lt;/p>
&lt;p>How do you install &lt;code>pre-commit&lt;/code> in the first place? Use &lt;code>pip&lt;/code>, or &lt;code>brew&lt;/code> (macOS), or your favorite package manager.&lt;/p>
&lt;p>Hooks are configured in &lt;code>.pre-commit-hooks.yaml&lt;/code> files in their respective repositories. &lt;a href="https://github.com/codespell-project/codespell/blob/main/.pre-commit-hooks.yaml">Here&lt;/a> is an example, from &lt;code>codespell&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">codespell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">codespell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">Checks for common misspellings in text files.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">entry&lt;/span>: &lt;span style="color:#ae81ff">codespell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">text]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;it&amp;rsquo;s just metadata that teaches the framework to run the &lt;code>codespell&lt;/code> python file, and that it should only run in text files.&lt;/p>
&lt;p>The definition of what a text file is lives in the &lt;a href="https://github.com/pre-commit/identify">identify&lt;/a> pre-commit library, &lt;a href="https://github.com/pre-commit/identify/blob/main/identify/extensions.py">this&lt;/a> file has all the mappings. You could also specify &lt;code>shell&lt;/code>, for example.&lt;/p>
&lt;p>What if an extension isn&amp;rsquo;t supported? Instead of using &lt;code>types:&lt;/code>, use &lt;code>file:&lt;/code> with a regex pattern to match, such as &lt;code>\.sh$&lt;/code>.&lt;/p>
&lt;p>What if an upstream tool does not have a &lt;code>.pre-commit-hooks.yaml&lt;/code> file? I wrote a &lt;a href="https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/">post&lt;/a> with a workaround wherein you can define your own.&lt;/p>
&lt;p>How do you try out new hooks? One way is to use &lt;a href="https://perrotta.dev/2024/11/pre-commit-try-repo/">&lt;code>pre-commit try-repo&lt;/code>&lt;/a>. Another way is to add them to your config and then run each hook individually.&lt;/p>
&lt;p>Are there similar tools? There&amp;rsquo;s &lt;a href="https://typicode.github.io/husky/">&lt;code>husky&lt;/code>&lt;/a>, but it&amp;rsquo;s too nodejs / web centric. I like &lt;code>pre-commit.com&lt;/code> better.&lt;/p>
&lt;p>Any git repository that is owned my multiple people and need to follow well-defined practices and conventions should, in general, adopt a pre-commit framework. &lt;code>pre-commit.com&lt;/code> is one possible solution that is great at its job.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://whynothugo.nl/journal/2023/01/12/notes-on-pre-commit/">https://whynothugo.nl/journal/2023/01/12/notes-on-pre-commit/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p>
&lt;ul>
&lt;li>Browser: Google Chrome on macOS, Chromium on Linux, Safari on iOS.&lt;/li>
&lt;li>Search: A combination of Google and DuckDuckGo (mostly for their &lt;a href="https://duckduckgo.com/bangs">!bangs&lt;/a>).&lt;/li>
&lt;li>Writing: A combination of VSCode, &lt;code>vim&lt;/code> and &lt;a href="https://github.com/MarkEdit-app/MarkEdit">MarkEdit&lt;/a> (macOS markdown app). I never got around to long-form writing in Obsidian or Logseq, however it&amp;rsquo;s something I strive to.&lt;/li>
&lt;li>Cloud File Storage: There&amp;rsquo;s no need to share this. Basic OpSec. Why would people share it?&lt;/li>
&lt;li>Chat: WhatsApp remains king in terms of popularity, despite Telegram being superior from an architectural and usability perspective for power users. Facebook Messenger is officially dead at this point. And I&amp;rsquo;m too much of a millennial for all other apps (Discord, Matrix, etc). Disappearing messages exist in all of these, except Instagram.&lt;/li>
&lt;li>Scheduling: There&amp;rsquo;s no real choice here. You use the platform your employer uses. Otherwise, Google Calendar is the most sensible choice other than self-hosting.&lt;/li>
&lt;li>Video Calls: Ditto. I am way too used to Google Meet to justify switching to an alternative at this point.&lt;/li>
&lt;li>Music: Spotify, hands down. YouTube Music is a good fallback. There&amp;rsquo;s no need to pay for YouTube Premium for music, do your research.&lt;/li>
&lt;li>Podcasts: Overcast on iOS.&lt;/li>
&lt;li>Password Management: Once again, why would you share this?&lt;/li>
&lt;li>Code Editor: VScode and &lt;code>vim&lt;/code>. Maybe I&amp;rsquo;ll switch to &lt;code>neovim&lt;/code> at some point. I refrain from using IDEs in general but, when I need to, JetBrains is the answer. I tried &lt;a href="https://zed.dev/">&lt;code>zed&lt;/code>&lt;/a> this year but wasn&amp;rsquo;t convinced, and their core team is quite small. The flurry of &amp;ldquo;AI&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> editors should be ignored, as none of them are likely to stick long-term. Instead, it&amp;rsquo;s better to invest in &amp;ldquo;AI&amp;rdquo; tooling that is editor agnostic; for example, Simon Willison&amp;rsquo;s &lt;a href="https://github.com/simonw/llm">&lt;code>llm&lt;/code>&lt;/a>, or GitHub Copilot.&lt;/li>
&lt;li>Terminal: iTerm2 on macOS. I haven&amp;rsquo;t used desktop linux in a while (:sad:), but I&amp;rsquo;d probably still stick to Tilix and/or Alacritty there. I no longer use hterm (ChromeOS).&lt;/li>
&lt;li>VPN: Unless you&amp;rsquo;re rolling your own, it doesn&amp;rsquo;t matter too much. Avoid the big players if you can afford to.&lt;/li>
&lt;li>Bookmarks: None. &lt;a href="https://www.goodreads.com/book/show/25614984-spark-joy">Absolutely none&lt;/a>. When I need to store &lt;em>transient&lt;/em> link lists, I use my Second Brain app to do so.&lt;/li>
&lt;li>Read It Later: Ditto as above. Otherwise: starring articles on Miniflux, or keeping Safari tabs open until I get to them, or parking a handful of items in an &amp;ldquo;inbox&amp;rdquo; browser bookmarks folder.&lt;/li>
&lt;li>Mail Client: The official clients of my email providers. No agnostic app at this time. It&amp;rsquo;s especially inconvenient to do so on iOS.&lt;/li>
&lt;li>Mail Server: N/A.&lt;/li>
&lt;li>Launcher: &lt;code>Cmd-Space&lt;/code> on macOS a.k.a. Spotlight. I keep Raycast around but I rarely use it. On Linux &lt;code>i3-dmenu-desktop&lt;/code> is still my favorite.&lt;/li>
&lt;li>Screenshots: &lt;code>Cmd-Shift-4&lt;/code> on macOS, or &lt;code>scrot&lt;/code> on Linux.&lt;/li>
&lt;li>Menu Bar: &lt;a href="https://github.com/dwarvesf/hidden">Hidden Bar&lt;/a>. It&amp;rsquo;s free, and available as a cask on homebrew.&lt;/li>
&lt;li>Containers: Rancher Desktop.&lt;/li>
&lt;li>Automation: None. I tried Hammerspoon this year but found no use for it.&lt;/li>
&lt;li>Second Brain: A mixture of Obsidian and Logseq. Which I&amp;rsquo;d really like to end, it would be easier to have a single app to rule them all, as they both support multiple vaults / graphs anyway (e.g. to partition personal vs work notes).&lt;/li>
&lt;li>Operating System: &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a> is my current favorite for servers, and I&amp;rsquo;m biased anyway because I maintain a couple of aports (packages) there. For desktop, it&amp;rsquo;s awfully hard to use anything other than macOS ever since M1 processors got released. I miss Linux desktop from time to time but realistically it&amp;rsquo;s no longer an intrinsic goal of mine; that said, I&amp;rsquo;d likely go back to my beloved Arch Linux should that ever reoccur.&lt;/li>
&lt;li>Shell: &lt;code>zsh&lt;/code> + &lt;a href="https://grml.org/zsh/">&lt;code>grml-zsh-config&lt;/code>&lt;/a>, no change here. Sometimes I think of migrating to &lt;code>fish&lt;/code>, but the POSIX incompability always discourages me to do so.&lt;/li>
&lt;li>Terminal Multiplexer: &lt;code>tmux&lt;/code>, but only for remote sessions (&lt;code>ssh&lt;/code>). Locally I tend to just open new terminal tabs on VSCode and/or iTerm2. Alas, &lt;code>tmux&lt;/code> + &lt;code>VSCode&lt;/code> do not play well together anyway (citation needed, for another day).&lt;/li>
&lt;/ul>
&lt;p>This post was inspired by &lt;a href="https://micro.webology.dev/2024/12/19/default-apps.html">https://micro.webology.dev/2024/12/19/default-apps.html&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For the correct way to refer to them, pick one of: LLMs, Gen AI, or &amp;ldquo;AI&amp;rdquo;. &lt;em>Never&lt;/em> drop the quotes when using the plain term! Otherwise you fall into the same trap for using the term &amp;ldquo;crypto&amp;rdquo; to distinguish between cryptography and cryptocurrency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>pre-commit: create hooks for unsupported tools</title><link>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</link><pubDate>Tue, 17 Dec 2024 22:46:41 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</guid><description>&lt;p>When using &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a>, in an ideal world, every
formatter / linter / code analyzer would have a &lt;code>.pre-commit-config.yaml&lt;/code> file
in its repository root.&lt;/p>
&lt;p>In the real world, that&amp;rsquo;s not always the case.&lt;/p>
&lt;p>A recent example: &lt;a href="https://github.com/cloudflare/pint">cloudflare/pint&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Prometheus rule linter/validator&lt;/p>
&lt;/blockquote>
&lt;p>It is a golang binary that lints &lt;a href="https://prometheus.io/">prometheus&lt;/a> rules.&lt;/p>
&lt;p>Can we bridge the gap?&lt;/p>
&lt;p>The end goal is the ability to run &lt;code>pre-commit run --all-files pint&lt;/code> in our git
repository.&lt;/p>
&lt;p>For that, we&amp;rsquo;ll need to define a local / custom hook in our
&lt;code>~/.pre-commit-config.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">repos&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">pint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Validate prometheus rules with pint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">golang&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">additional_dependencies&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">github.com/cloudflare/pint/cmd/pint@v0.69.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">entry&lt;/span>: &lt;span style="color:#ae81ff">pint --offline lint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">types&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">files&lt;/span>: &lt;span style="color:#ae81ff">^helm/clustermon-alerts/rules/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That simply works™. How did I get there? Starting with the references:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://adamj.eu/tech/2023/02/09/pre-commit-hooks-unsupported-tools/">https://adamj.eu/tech/2023/02/09/pre-commit-hooks-unsupported-tools/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/">https://perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/62974985/go-module-latest-found-but-does-not-contain-package">https://stackoverflow.com/questions/62974985/go-module-latest-found-but-does-not-contain-package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/cloudflare/pint@v0.69.1/cmd/pint">https://pkg.go.dev/github.com/cloudflare/pint@v0.69.1/cmd/pint&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>The key part is &lt;code>language: golang&lt;/code> + &lt;code>additional_dependencies&lt;/code>.&lt;/p>
&lt;p>Specifying &lt;code>additional_dependencies&lt;/code> is a bit tricky. Initially, I did:&lt;/p>
&lt;pre tabindex="0">&lt;code>github.com/cloudflare/pint@v0.69.1
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;but that yields nothing. In fact:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% go run github.com/cloudflare/pint@v0.69.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go: github.com/cloudflare/pint@v0.69.1: module github.com/cloudflare/pint@v0.69.1 found, but does not contain package github.com/cloudflare/pint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We must always specify the module that contains the &lt;code>main&lt;/code> function with &lt;code>go run&lt;/code>, and that is &lt;code>cmd/pint&lt;/code>.&lt;/p></description></item><item><title>skopeo: operate container images and registries</title><link>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</link><pubDate>Tue, 17 Dec 2024 17:49:31 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</guid><description>&lt;p>When working with &lt;code>docker&lt;/code> and private image registries, a common workflow is to copy images from one private registry in the cloud to another. This can be done with &lt;a href="https://github.com/containers/skopeo/">&lt;code>skopeo&lt;/code>&lt;/a>.&lt;/p>
&lt;p>This post includes some common recipes for it.&lt;/p>
&lt;h2 id="usage-1-default--root-to-staging">Usage 1) Default / Root to Staging&lt;/h2>
&lt;p>From the default / root account registry to the staging registry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>skopeo sync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile default&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --dest-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile staging&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --override-os linux --override-arch amd64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src docker --dest docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_root&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>/&lt;span style="color:#f92672">{&lt;/span>repository&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>tag&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_staging&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example values&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>repository: &lt;code>argocd-gitops-tools&lt;/code>&lt;/li>
&lt;li>tag (version): &lt;code>1.0.1&lt;/code>&lt;/li>
&lt;li>region: &lt;code>us-east-1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="usage-2-public-to-mfa">Usage 2) Public to MFA&lt;/h2>
&lt;p>From a public registry to a private registry that uses MFA (multi-factor authentication).&lt;/p>
&lt;p>First, it&amp;rsquo;s necessary to get MFA credentials. Source the script below
(&lt;code>china.mfa.sh&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># shellcheck disable=SC2155&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_PROFILE&lt;span style="color:#f92672">=&lt;/span>china
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo -n &lt;span style="color:#e6db74">&amp;#34;Enter the MFA token code for your AWS China account: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> read -r token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mfa_arn&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws iam --profile &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$AWS_PROFILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> get-user --output text --query User.Arn | sed &lt;span style="color:#e6db74">&amp;#39;s/:user\//:mfa\//&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>credentials&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws --profile &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$AWS_PROFILE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> sts get-session-token --serial-number &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$mfa_arn&lt;span style="color:#e6db74">&amp;#34;&lt;/span> --token-code &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$token&lt;span style="color:#e6db74">&amp;#34;&lt;/span> --duration-seconds 86400&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;Got credentials: &lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_ACCESS_KEY_ID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.AccessKeyId&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_SECRET_ACCESS_KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.SecretAccessKey&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_SESSION_TOKEN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$credentials&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.Credentials.SessionToken&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$AWS_SESSION_TOKEN&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;Success!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Important&lt;/strong>: It is necessary to do &lt;code>source china-mfa.sh&lt;/code>. Doing &lt;code>./china-mfa.sh&lt;/code>
will &lt;strong>not&lt;/strong> work.&lt;/p>
&lt;p>Then we can proceed with the image sync:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>skopeo sync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --dest-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region cn-north-1&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --override-os linux --override-arch amd64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src docker --dest docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> quay.io/argoproj/argocd:v2.12.6 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_mfa&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.cn-north-1.amazonaws.com.cn/quay.io/argoproj
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notes:&lt;/p>
&lt;ul>
&lt;li>A public registry does not need authentication, hence there&amp;rsquo;s no &lt;code>--src-creds&lt;/code>.&lt;/li>
&lt;li>&lt;code>--dest-creds&lt;/code> does not specify a &lt;code>--profile&lt;/code>. Likewise, no &lt;code>AWS_PROFILE&lt;/code> env var should be defined.&lt;/li>
&lt;li>In this example, China (&lt;code>cn-north-1&lt;/code>) is an AWS account with MFA enabled.&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s possible to pass &lt;code>--scoped&lt;/code> to prefix images at destination using the full source image path as scope.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>image = registry (includes the org name) + repository + tag&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Just</title><link>https://perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p>
&lt;p>It is written in Rust, has sensible defaults, and lots of syntactic sugar.
A good analogy is &lt;code>fish&lt;/code> versus &lt;code>bash&lt;/code> when comparing &lt;code>just&lt;/code> to &lt;code>make&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s very easy to learn from its
&lt;a href="https://github.com/casey/just?tab=readme-ov-file">README.md&lt;/a> alone as it&amp;rsquo;s
quite comprehensive. There&amp;rsquo;s also a &lt;a href="https://just.systems/man/en/">gitbook&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://til.simonwillison.net/django/just-with-django">Simon Willison&lt;/a> prompted
me to try it out.&lt;/p>
&lt;p>As an exercise I decided to convert the &lt;code>Makefile&lt;/code> used to manage this blog into
a &lt;code>Justfile&lt;/code>.&lt;/p>
&lt;p>The original &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Sitemap URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>SITEMAP &lt;span style="color:#f92672">=&lt;/span> https://perrotta.dev/sitemap.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Hugo port
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>PORT &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1313&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Abort if hugo is not installed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(,&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell which hugo&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">$(&lt;/span>error &amp;#34;No hugo in &lt;span style="color:#66d9ef">$$&lt;/span>PATH, install it first&amp;#34;&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">endif&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	hugo server --bind&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.0.0.0&amp;#34;&lt;/span> --buildDrafts --port &lt;span style="color:#66d9ef">$(&lt;/span>PORT&lt;span style="color:#66d9ef">)&lt;/span> --watch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	hugo --environment production --gc --minify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>RM&lt;span style="color:#66d9ef">)&lt;/span> -r public/ resources/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ping&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Ping Google about changes in the sitemap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	curl -sS -o /dev/null &lt;span style="color:#e6db74">&amp;#34;https://www.google.com/ping?sitemap=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SITEMAP&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Ping Bing (DuckDuckGo, etc) about changes in the sitemap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	curl -sS -o /dev/null &lt;span style="color:#e6db74">&amp;#34;https://www.bing.com/ping?sitemap=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SITEMAP&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all build clean ping
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Initially I asked ChatGPT to convert it to a &lt;code>Justfile&lt;/code> but it was a disaster,
even after a couple of iterations. Then I did it myself&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. The &lt;code>Justfile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-justfile" data-lang="justfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">set&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">dotenv-load&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	hugo server --buildDrafts --port &lt;span style="color:#e6db74">${&lt;/span>PORT&lt;span style="color:#66d9ef">:-&lt;/span>1313&lt;span style="color:#e6db74">}&lt;/span> --watch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	hugo --environment production --gc --minify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a new post. Usage: `just new &amp;#34;advent of code day 8&amp;#34;`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">new post&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	hugo new content/posts/&lt;span style="color:#e6db74">`&lt;/span>date &lt;span style="color:#e6db74">&amp;#34;+%Y-%m-%d&amp;#34;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>-&lt;span style="color:#f92672">{{&lt;/span> kebabcase&lt;span style="color:#f92672">(&lt;/span>post&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">}}&lt;/span>.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rm -rf public/ resources/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Ping Google and Bing about changes in the sitemap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ping sitemap=&amp;#34;https&lt;/span>&lt;span style="color:#f92672">:&lt;/span>//perrotta.dev/sitemap.xml&amp;#34;:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	curl -sS -o /dev/null &lt;span style="color:#e6db74">&amp;#34;https://www.google.com/ping?sitemap={{ sitemap }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	curl -sS -o /dev/null &lt;span style="color:#e6db74">&amp;#34;https://www.bing.com/ping?sitemap={{ sitemap }}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main differences:&lt;/p>
&lt;ul>
&lt;li>Environment variables: use &lt;code>{{ foo }}&lt;/code> instead of &lt;code>$(FOO)&lt;/code>&lt;/li>
&lt;li>Exception: environment variables loaded from &lt;code>.env&lt;/code> (via &lt;code>set dotenv-load&lt;/code>)
use &lt;code>$FOO&lt;/code> or &lt;code>${FOO}&lt;/code> instead, like POSIX shell variables&lt;/li>
&lt;li>Use &lt;code>rm -rf&lt;/code> instead of &lt;code>$(RM) -r&lt;/code>&lt;/li>
&lt;li>Rules accept parameters. Look at &lt;code>new post&lt;/code> as an example. Example usage:
&lt;code>just new &amp;quot;advent of code day 8&amp;quot;&lt;/code>&lt;/li>
&lt;li>Run shell commands within rules with backticks. &lt;code>$(cmd)&lt;/code> does not work.&lt;/li>
&lt;li>Some handy out-of-the-box functions such as &lt;code>kebabcase()&lt;/code>. No need to
implement this kind of string manipulation in plain shell script!&lt;/li>
&lt;li>Documentation comments above rules are recognized. They are displayed as help
/ usage text when running &lt;code>just -l&lt;/code>. No need for hacky &lt;a href="https://perrotta.dev/2024/08/self-documented-makefiles/">self-documented
&lt;code>Makefile&lt;/code>&lt;/a> setups!&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% just -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Available recipes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new post &lt;span style="color:#75715e"># Create a new post. Usage: `just new &amp;#34;advent of code day 8&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ping sitemap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://perrotta.dev/sitemap.xml&amp;#34;&lt;/span> &lt;span style="color:#75715e"># Ping Google and Bing about changes in the sitemap&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> watch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>With a bit of LLM prompting in lieu of Google or Stack Overflow searches.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>.gitignore without .gitignore</title><link>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</link><pubDate>Wed, 11 Dec 2024 11:44:12 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</guid><description>&lt;p>&lt;code>.gitignore&lt;/code> is the canonical way to exclude files from your git repository.&lt;/p>
&lt;p>In some situations, however, you may want to exclude files without adding them
to &lt;code>.gitignore&lt;/code>, because they are only relevant to you, as opposed to your
teammates.&lt;/p>
&lt;p>Common examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ackrc&lt;/code>: exclude file patterns from search with &lt;code>ack&lt;/code> – not everyone in your
team may use &lt;code>ack&lt;/code> at all&lt;/li>
&lt;li>&lt;code>.envrc&lt;/code>: &lt;code>direnv&lt;/code> integration to automatically run a couple of commands
whenever &lt;code>cd&lt;/code>&amp;lsquo;ing to within the repository – not everyone in your team may use
&lt;code>direnv&lt;/code> at all&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p>
&lt;p>Is there a way to have a &amp;ldquo;personal&amp;rdquo; &lt;code>.gitignore&lt;/code> file? Yes, in fact, many ways!&lt;/p>
&lt;h2 id="1-per-repository">1) Per repository&lt;/h2>
&lt;p>Use the &lt;code>.git/info/exclude&lt;/code> file instead of &lt;code>.gitignore&lt;/code>. Edits in this file are
not tracked by version control. The documentation says:&lt;/p>
&lt;pre tabindex="0">&lt;code># git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with &amp;#39;#&amp;#39; are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
.ackrc
.envrc
&lt;/code>&lt;/pre>&lt;p>For example, I could add &lt;code>.ackrc&lt;/code> to it.&lt;/p>
&lt;h2 id="2-git-update-index">2) &lt;code>git update-index&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git update-index --assume-unchanged .ackrc .envrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you make a mistake, it can be reversed with &lt;code>--no-assume-unchanged&lt;/code>.&lt;/p>
&lt;h2 id="3-globally">3) Globally&lt;/h2>
&lt;p>This approach takes effect in &lt;em>all&lt;/em> repositories.&lt;/p>
&lt;p>Set &lt;a href="https://git-scm.com/docs/gitignore#_configuration">&lt;code>core.excludesFile&lt;/code>&lt;/a> in
your &lt;code>~/.gitconfig&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git config --global core.excludesFile &lt;span style="color:#e6db74">&amp;#39;~/.gitignore&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now populate it as you normally would your repo &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/653454/how-do-you-make-git-ignore-files-without-using-gitignore">https://stackoverflow.com/questions/653454/how-do-you-make-git-ignore-files-without-using-gitignore&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/subfuzion/db7f57fff2fb6998a16c">https://gist.github.com/subfuzion/db7f57fff2fb6998a16c&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Helm: enforce the directory name matches the chart name</title><link>https://perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</link><pubDate>Tue, 12 Nov 2024 11:13:06 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a helm chart called &lt;code>foo&lt;/code>, enforce that its &lt;code>Chart.yaml&lt;/code> file lives in a directory called &lt;code>foo&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>In 2016, this &lt;a href="https://github.com/helm/helm/pull/818/">used to be&lt;/a> the default behavior in Helm:&lt;/p>
&lt;blockquote>
&lt;p>fix(helm): produce error if package name is inconsistent&lt;/p>
&lt;/blockquote>
&lt;p>In 2018, this enforcement was &lt;a href="https://github.com/helm/helm/pull/4141">removed&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>remove dirname constraint on helm package&lt;/p>
&lt;/blockquote>
&lt;p>We would like to reintroduce this requirement in our Helm charts codebase, as a best practice, to prevent chart name collisions.&lt;/p>
&lt;p>What would be the most native way to accomplish that?&lt;/p>
&lt;p>I would probably write a git pre-commit hook if there is no native way (e.g. via some &lt;code>helm lint&lt;/code> flag).&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Use the following script with &lt;a href="https://pre-commit.com/">pre-commit&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Check that the directory name matches the chart name in Chart.yaml.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Examples:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># - foo/Chart.yaml with &amp;#34;name: hey-foo&amp;#34; fails the check.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># - foo/Chart.yaml with &amp;#34;name: foo&amp;#34; passes the check.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Usage: $0 [path/to/chart/Chart.yaml ...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> chart in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	dirname&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>basename &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>dirname &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$chart&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Remove trailing slash.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	dirname&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dirname%/&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># Fetch chart name from Chart.yaml.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	chart_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>yq e &lt;span style="color:#e6db74">&amp;#39;.name&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$chart&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $dirname !&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$chart_name&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		echo &lt;span style="color:#e6db74">&amp;#34;error: directory name &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dirname&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; does not match chart name &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>chart_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>I asked and self-answered this question on &lt;a href="https://stackoverflow.com/questions/79166730/how-to-enforce-that-the-directory-name-must-match-the-chart-name/79180650#79180650">Stack Overflow&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;em>Why&lt;/em>? For ease of management, simplicity, consistency &amp;amp; uniformity.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Performance reviews</title><link>https://perrotta.dev/2024/10/performance-reviews/</link><pubDate>Sun, 20 Oct 2024 12:15:14 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/performance-reviews/</guid><description>&lt;p>During performance reviews&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, it&amp;rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.&lt;/p>
&lt;p>Usually accomplishments for a software engineer span more than just code: design
documents, documentation, bug triage and fixes, product health initiatives,
tackling of technical debt, processes&amp;hellip;the list is endless.&lt;/p>
&lt;p>Nonetheless in this post I&amp;rsquo;ll focus only in contributions in the form of code.&lt;/p>
&lt;p>99.999% of the time this means &lt;code>git&lt;/code> commits (and/or pull requests, if you will).&lt;/p>
&lt;p>Other than &lt;code>git&lt;/code>, and the &lt;em>very very very&lt;/em> occasional mercurial (&lt;code>hg&lt;/code>), the only
other VCS I used significantly was Google&amp;rsquo;s Perforce / Piper.&lt;/p>
&lt;h2 id="piper">Piper&lt;/h2>
&lt;p>Although there are command-line tools to summarize your accomplishments, I
find the easiest way to do so is via Critique.&lt;/p>
&lt;h3 id="your-cl-submissions">Your CL submissions&lt;/h3>
&lt;p>Use a query like:&lt;/p>
&lt;pre tabindex="0">&lt;code>(author:me OR pair:me) is:submitted since:2024-01-03 to:2024-01-09
&lt;/code>&lt;/pre>&lt;p>Update &lt;code>since&lt;/code> and &lt;code>to&lt;/code> according to the current PERF / GRAD cycle.&lt;/p>
&lt;p>If you are a high-performer and/or send lots of LSCs (large-scale changes), the
output can be noisy. Filter it out with &lt;code>d:{description}&lt;/code> as needed.&lt;/p>
&lt;p>For example, to call out LSC changes in a separate section in your packet, you
may want to exclude them from your overall contributions with &lt;code>-d:LSC&lt;/code> or
&lt;code>-d:Rosie&lt;/code> or similar.&lt;/p>
&lt;p>&lt;code>pair&lt;/code> is for crediting pair programming.&lt;/p>
&lt;p>&lt;strong>Disclaimer&lt;/strong>: There is a possibility the syntax is incorrect, as I am not able
to test it at the moment.&lt;/p>
&lt;h3 id="your-cl-reviews">Your CL reviews&lt;/h3>
&lt;pre tabindex="0">&lt;code>r:me is:submitted since:2024-01-03 to:2024-01-09
&lt;/code>&lt;/pre>&lt;p>You&amp;rsquo;ll likely want to call out readability reviews separately. Use something
like &lt;code>-cc:typescript-readability-approvers&lt;/code>.&lt;/p>
&lt;h2 id="git">&lt;code>git&lt;/code>&lt;/h2>
&lt;p>One option is to use the web UI of your forge (GitHub, GitLab, etc).&lt;/p>
&lt;p>I strive for a forge-agnostic solution though.&lt;/p>
&lt;h3 id="your-pull-requests--commits">Your pull requests / commits&lt;/h3>
&lt;p>&lt;a href="https://git-scm.com/docs/git-shortlog">&lt;code>git shortlog&lt;/code>&lt;/a> is your friend!&lt;/p>
&lt;p>Example for this blog:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git shortlog --author&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Thiago Perrotta&amp;#34;&lt;/span> --since&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6 months ago&amp;#34;&lt;/span> &lt;span style="color:#75715e"># alt: --since=&amp;#34;2024-03-01&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Thiago Perrotta &lt;span style="color:#f92672">(&lt;/span>499&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Initial commit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add gitignore: go,hugo,vim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hugo: add config.toml and default archetype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there are multiple repositories, combine the command with &lt;a href="https://myrepos.branchable.com/">&lt;code>myrepos&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% mr run git shortlog --author&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Thiago Perrotta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To filter out irrelevant commits, use &lt;code>grep -v&lt;/code>. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git shortlog --author&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Thiago Perrotta&amp;#34;&lt;/span> | grep -Ev &lt;span style="color:#e6db74">&amp;#39;^\s*ci|^.*pre-commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;filters out commits that contain &amp;ldquo;ci&amp;rdquo; or &amp;ldquo;pre-commit&amp;rdquo; in the message summary.&lt;/p>
&lt;h3 id="your-pr-reviews">Your PR reviews&lt;/h3>
&lt;p>PR reviews are a concept from forges. From a &lt;code>git&lt;/code> CLI perspective it would only
be possible to do so when automation adds git tags to commits e.g. &lt;code>Reviewed-by: Thiago Perrotta &amp;lt;thiago@example.com&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://www.gerritcodereview.com/">Gerrit&lt;/a> does that.
&lt;a href="https://chromium-review.googlesource.com/c/chromium/src/+/5012895">Here&lt;/a> is an
example in Chromium. In this case, one could just &lt;code>grep&lt;/code> for &lt;code>Reviewed-by&lt;/code> in
&lt;code>git log&lt;/code>.&lt;/p>
&lt;p>Otherwise: on GitHub, use a query such as &lt;code>is:pr reviewed-by:@me&lt;/code> in the Pull
Request search tab.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>PERF, GRAD, TPG: there are all sorts of naming schemes for them.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>prodaccess</title><link>https://perrotta.dev/2024/10/prodaccess/</link><pubDate>Fri, 18 Oct 2024 14:57:27 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/prodaccess/</guid><description>&lt;p>At Google we had a &lt;code>prodaccess&lt;/code> command used to log in and authenticate in all
sorts of internal corp systems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for 20 hours. It became a daily ritual to run
&lt;code>prodaccess&lt;/code> first thing in the morning when logging in upon unlocking our
physical workstations&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>During the pandemic, when heavily using our virtual workstations (dubbed
&lt;em>cloudtops&lt;/em>, think of an EC2 instance or a VPS) it was common to hook
&lt;code>prodaccess&lt;/code> into &lt;code>ssh&lt;/code>. There was a &lt;code>prodcertstatus&lt;/code> command that would tell
you when &lt;code>prodaccess&lt;/code> would expire. A common pattern was to modify your &lt;code>ssh&lt;/code>
startup command to automatically run &lt;code>prodaccess&lt;/code> whenever &lt;code>prodcertstatus&lt;/code>
indicated that access would expire within 2-4 hours, depending on the user&amp;rsquo;s
preference.&lt;/p>
&lt;p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat ~/.profile.d/functions_corp.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prodaccess&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; VPN&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	vpn_login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; Teleport&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	teleport_login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; AWS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	aws_login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; Azure&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> azure_login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		-u|--update&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; mr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#75715e"># Update all well-known corp repositories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">(&lt;/span>cd ~/Corp &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> mr update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> mr run git world&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#75715e"># Package manager upgrade&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; sd-world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			sd-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			shift
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		-a|--all&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			echo &lt;span style="color:#e6db74">&amp;#34;--&amp;gt; Atlas Mongo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			atlas_login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			shift
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">esac&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>mr&lt;/code> is &lt;a href="https://myrepos.branchable.com/">https://myrepos.branchable.com/&lt;/a> (&amp;ldquo;a tool to manage all your version
control repositories&amp;rdquo;)&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;code>sd-world&lt;/code> was introduced in a &lt;a href="https://perrotta.dev/2024/01/sd-world-perform-a-full-system-upgrade/">previous post&lt;/a>: it performs a full system upgrade&lt;/li>
&lt;li>&lt;code>--all&lt;/code> holds services I only need / use from time to time.&lt;/li>
&lt;li>&lt;code>shift&lt;/code> is not really needed, but IMHO it&amp;rsquo;s a good practice (and another
ingrained habit of mine), especially when inside &lt;code>for&lt;/code> loops&lt;/li>
&lt;li>&lt;code>git world&lt;/code> is an alias in my &lt;code>~/.gitconfig&lt;/code> that runs &lt;code>git fetch --all &amp;amp;&amp;amp; git remote prune origin&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Every morning I invoke &lt;code>prodaccess -u&lt;/code> when starting my work day. A few password
prompts and touch IDs later and I do not need to worry about logging in anymore
during the middle of the day, which reduces overall context switching and
stress.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Until someone in CorpEng decided it was a good idea to
&lt;a href="https://killedbygoogle.com/">deprecate&lt;/a> it in favour of a new &lt;code>gcert&lt;/code>
command, destroying many SWE-years of developed muscle memory.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Ah, the &lt;em>good ol&amp;rsquo; times&lt;/em>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>I should write a post about it sometime.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>New series: Raspberry Pi fun with DevOps</title><link>https://perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</link><pubDate>Sun, 13 Oct 2024 11:31:13 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I have two raspberry pi&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> units sitting idle at home, a 3B and a 4.&lt;/p>
&lt;p>For a long time I&amp;rsquo;ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.&lt;/p>
&lt;p>The roadblock to do so was the most classic excuse: lack of non-interrupted time.&lt;/p>
&lt;p>There&amp;rsquo;s plenty of motivation, and ideas. These will likely &lt;em>never&lt;/em> run out, any time soon.&lt;/p>
&lt;p>That said: It&amp;rsquo;s very easy to get distracted and lose focus.
There is so much information today, in the form of
YouTube videos,
blog posts,
forums and communities (e.g. the likes of Hacker News and Reddit),
podcasts,
books…the list goes on, and it does not end.&lt;/p>
&lt;p>Therefore, for the sake of fixing a North Star path,
I wanted to make an initial blog post with some of the ideas that are currently in my head.&lt;/p>
&lt;p>There&amp;rsquo;s no guarantee I will follow up on all of these ideas but,
as long as their spirit is ingrained in semi-permanent written form,
I figured that shall be enough to make me accountable to myself.&lt;/p>
&lt;h2 id="guiding-principles">Guiding principles&lt;/h2>
&lt;p>&lt;em>a.k.a. rules of engagement&lt;/em>&lt;/p>
&lt;ol>
&lt;li>It must run Unix&lt;/li>
&lt;/ol>
&lt;p>No Windows. No macOS. Anything else is fair game. Corollary: It must run either Linux or BSD.&lt;/p>
&lt;ol start="2">
&lt;li>It must be vanilla / upstream&lt;/li>
&lt;/ol>
&lt;p>No spin-offs. For example: for Ubuntu, no Xubuntu. For Arch Linux, no Manjaro. For Gentoo, no Funtoo.
And so on. Stick to the &lt;em>core&lt;/em> / base Linux distributions.
For BSD, this is a non-issue.&lt;/p>
&lt;ol start="3">
&lt;li>Every software installation &lt;em>must&lt;/em> come from a package&lt;/li>
&lt;/ol>
&lt;p>If there is no package, I will create one myself.
This is easier if I use Arch Linux or Alpine Linux, but I am willing to contribute to other distributions as well.&lt;/p>
&lt;ol start="4">
&lt;li>It must have no X11 nor Wayland nor a graphical system&lt;/li>
&lt;/ol>
&lt;p>It should be a pure server.
In the past I ran RaspberryPi OS (neé Raspbian) and it wasn&amp;rsquo;t very useful, besides being super slow and sluggish.&lt;/p>
&lt;ol start="5">
&lt;li>Software updates must happen with a single command&lt;/li>
&lt;/ol>
&lt;p>There is no need for auto-updates (these are often not well-supported anyways), but a human operator should be able to upgrade
&lt;em>everything&lt;/em> in a single shot. It doesn&amp;rsquo;t have to be a single command (e.g. &lt;code>apt update&lt;/code> + &lt;code>apt upgrade&lt;/code> is acceptable), but it
should be contained within a short script.&lt;/p>
&lt;ol start="6">
&lt;li>It should be reasonably popular and well-supported&lt;/li>
&lt;/ol>
&lt;p>No obscure distributions.
I don&amp;rsquo;t particularly care about a sizeable community (I won&amp;rsquo;t join their Discord server nor Reddit community anyway),
but there should be at least one official support channel, and it would be preferred that it is old-school (BBS / Discourse / forums, mailing lists, IRC / Matrix).
Stack Exchange is also acceptable to an extent.
The problem with the modern stuff (Discord, Reddit) is that it is too proprietary, can / will disappear at any moment, and will be heavily used to train LLMs with no scrutiny.
Commercial support is fine. For example, Red Hat backing Fedora, Canonical backing Ubuntu, and SUSE backing openSUSE is a non-issue.
I would just avoid commercial enterprises that suffocate their open counterparts.&lt;/p>
&lt;ol start="7">
&lt;li>It should support Raspberry Pi (the ARM architecture, for that matter) as a first-class citizen&lt;/li>
&lt;/ol>
&lt;p>If Raspberry Pi support is considered experimental, I would avoid the trouble at this time.&lt;/p>
&lt;p>Stopping briefly here for a moment, the following list comes to mind, using &lt;a href="https://distrowatch.com/">DistroWatch&lt;/a> and &lt;a href="https://en.m.wikipedia.org/wiki/File:Linux_Distribution_Timeline.svg">Linux Distribution timeline&lt;/a> as an aid:&lt;/p>
&lt;ul>
&lt;li>Debian
&lt;ul>
&lt;li>RaspberryPi OS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ubuntu&lt;/li>
&lt;li>Fedora&lt;/li>
&lt;li>openSUSE&lt;/li>
&lt;li>Alpine Linux&lt;/li>
&lt;li>Arch Linux (Arch Linux ARM)&lt;/li>
&lt;li>Void Linux&lt;/li>
&lt;li>Gentoo&lt;/li>
&lt;li>NixOS&lt;/li>
&lt;li>FreeBSD&lt;/li>
&lt;li>OpenBSD&lt;/li>
&lt;li>Slackware Linux&lt;/li>
&lt;/ul>
&lt;p>This list is still quite large.
I will need to trim it down further in the following days. Stay tuned.&lt;/p>
&lt;p>Some observations before I make a final decision:&lt;/p>
&lt;ul>
&lt;li>I have two units, so one decision to make is whether to choose the same distribution for both or distinct distributions for each. One Linux and one BSD, for example.&lt;/li>
&lt;li>I never used the following distros: Void Linux, NixOS, OpenBSD, Slackware Linux. There&amp;rsquo;s always an appeal to trying out something new, even if just ephemerally.&lt;/li>
&lt;li>I am heavily experienced in Debian / Ubuntu, Arch and Alpine (with a tad of Gentoo as well). There&amp;rsquo;s an appeal to using something I am already familiar with to get the OS out of the way, and thus focus more on DevOps.&lt;/li>
&lt;li>NixOS is very tempting for the purposes of reproducibility, but every time I look at it I feel lost in its sea of complexity. And it oftentimes feels bloated. Reproducibility comes with a non-trivial upfront cost.&lt;/li>
&lt;li>OpenBSD feels very tempting as a self-contained, &amp;ldquo;do one thing and do it well&amp;rdquo;, KISS &amp;amp; secure system. It lacks on integration with third-party software, but perhaps that&amp;rsquo;s a feature.&lt;/li>
&lt;li>Let&amp;rsquo;s be honest, as much as Slackware has its charm, realistically I am not choosing it. Its ecosystem is too small today. It doesn&amp;rsquo;t provide any value when compared to the rest of the list. Between Slack and Alpine, I&amp;rsquo;d easily pick Alpine with no effort.&lt;/li>
&lt;/ul>
&lt;p>Hence we can already eliminate one: &lt;del>Slackware Linux&lt;/del>.&lt;/p>
&lt;p>To be continued ■&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;em>Two units&lt;/em> is a safer choice than &amp;ldquo;raspberry pies&amp;rdquo; or &amp;ldquo;raspberry pis&amp;rdquo;.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>cdtmp: change to a temporary directory</title><link>https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/</link><pubDate>Mon, 07 Oct 2024 10:40:37 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/</guid><description>&lt;p>Sometimes I need to do random experimentation in a throwaway directory.&lt;/p>
&lt;p>For that, I have the following &lt;code>cdtmp&lt;/code> function in my shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cdtmp &lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	builtin cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>mktemp -d &lt;span style="color:#e6db74">&amp;#34;/tmp/&lt;/span>$USER&lt;span style="color:#e6db74">-&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1:+$1-&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date +%Y-%m-%d&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">-XXXXXX&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	builtin pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here are two example usages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/tmp/thiago-2024-10-07-V3c3Na
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-V3c3Na
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% cdtmp devops
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/tmp/thiago-devops-2024-10-07-P4W1fh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This idea was built upon &lt;a href="https://frantic.im/cdtmp/">Alex Kotliarskyi&amp;rsquo;s&lt;/a>, which
he describes as:&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a super simple alias that creates a temporary directory and then jumps
into it. Here are a few examples of what I use it for:&lt;/p>
&lt;ul>
&lt;li>Clone a random interesting git repo to experiment with&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>I also use it for testing one-off bash, C++, golang or python scripts, for
example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/tmp/thiago-2024-10-07-F5aFrJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% vim main.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% bash main.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/3645ea5811d07c9f4be3cea91c0ffaf43ba4071c/profile/.profile.d/functions.sh#L5">Here&lt;/a>
is the definition my dotfiles.&lt;/p></description></item><item><title>Tracking cheap flights from Munich</title><link>https://perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</link><pubDate>Sun, 06 Oct 2024 00:31:23 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>I wanted to be notified whenever a flight deal from Munich&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> appeared. The
destination doesn&amp;rsquo;t really matter.&lt;/p>
&lt;p>There are several ways to do so semi-automatically, I tried all of them at least
once:&lt;/p>
&lt;ul>
&lt;li>follow travel blogs&lt;/li>
&lt;li>sign up for newsletters&lt;/li>
&lt;li>follow instagram pages or influencers that relay promos&lt;/li>
&lt;li>visit the websites from airlines directly&lt;/li>
&lt;li>use bots / scraping&lt;/li>
&lt;li>ask friends periodically&lt;/li>
&lt;li>date a flight attendant&lt;/li>
&lt;/ul>
&lt;p>The list above is overwhelming, and I have no time for all of it. Furthermore, I
have zero desire to inundate myself with (even) more social media posts, that
are often empty in nature.&lt;/p>
&lt;p>Moreover I wanted to build a permanent and long-lasting solution on top of my
personal infrastructure.&lt;/p>
&lt;p>Hence the only real options were: (i) travel blogs, (ii) newsletters, (iii)
scraping.&lt;/p>
&lt;p>The first phase is implemented as a Telegram channel:
&lt;a href="https://t.me/bavariabudgetbirds">https://t.me/bavariabudgetbirds&lt;/a>.&lt;/p>
&lt;p>Whenever there are new deals my server pushes an update to the Telegram channel
above for each of them. The deals&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> are tracked via a list of curated RSS feed
subscriptions, which is filtered to only match keywords that are pertaining to
Munich. It is not perfect, but it is good enough for my purposes, virtually
marginally free to run, and needs zero maintenance.&lt;/p>
&lt;h2 id="technical-details">Technical Details&lt;/h2>
&lt;p>I have a VPS that runs &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>. The VPS
provider is not important.&lt;/p>
&lt;p>The OS runs the excellent &lt;a href="https://miniflux.app/">Miniflux&lt;/a> app, managed via
OpenRC. In this specific deployment, there is no &lt;code>systemd&lt;/code>, and there is no
virtualization (&lt;code>docker&lt;/code>, &lt;code>kubernetes&lt;/code>, etc). It is 100%
&lt;a href="https://en.wikipedia.org/wiki/KISS_principle">KISS&lt;/a>. Miniflux is actively
developed and Alpine Linux package releases happen frequently and quickly. Even
if they do not, I have the means to create &lt;code>APKBUILD&lt;/code>s myself when needed
(see previous posts).&lt;/p>
&lt;p>Miniflux is populated with the list of travel blogs I follow, filtering out
non-relevant posts, polled roughly every 2 hours. There is a separate Miniflux
user for this purpose, so that my own subscriptions do not get mingled
in-between.&lt;/p>
&lt;p>I use the Miniflux integration with Telegram to ensure that new posts are
immediately pushed to the aforementioned channel with my Telegram bot.&lt;/p>
&lt;p>Wishlist for the future:&lt;/p>
&lt;ol>
&lt;li>Add the ability to integrate with websites that do not support
RSS directly and/or that block RSS readers. Examples:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a href="https://lowcost.pro/route/MUC/XXX/EN/">https://lowcost.pro/route/MUC/XXX/EN/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.secretflying.com/posts/category/cities-countries/germany/">https://www.secretflying.com/posts/category/cities-countries/germany/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.trabber.de/en/flights-from-germany-de/">https://www.trabber.de/en/flights-from-germany-de/&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Convert newsletters-only sources to RSS feeds.&lt;/li>
&lt;/ol>
&lt;p>This solution can easily be generalized for any location; there is absolutely
nothing special about Munich in this context.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Munich, Memmingen or Nuremberg (Nürnberg)&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Blog posts, really.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Erratic: human-friendly google3 piper snapshots</title><link>https://perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</link><pubDate>Wed, 02 Oct 2024 13:33:56 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</guid><description>&lt;p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called &lt;code>erratic&lt;/code> (abbrev: &lt;code>er&lt;/code>),
which was a 20% project of another Software Engineer&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="google3-workflow">google3 workflow&lt;/h2>
&lt;p>The workflow is as follows:&lt;/p>
&lt;ul>
&lt;li>Make some changes: &lt;code>g4 open&lt;/code>, &lt;code>g4 edit&lt;/code>, etc&lt;/li>
&lt;li>Create a CL (ChangeList) &lt;code>g4 change&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Now let&amp;rsquo;s say you&amp;rsquo;re anticipating some heavy refactoring, in the same CL&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
that you could potentially regret and want to revert.&lt;/p>
&lt;p>This would be a great moment to use &lt;code>erratic&lt;/code>. After installing it (or aliasing
it, if using it via X20), run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% er explain &lt;span style="color:#e6db74">&amp;#34;this is working perfectly before bob@ asked me to refactor it&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Make additional changes&lt;/li>
&lt;li>Feel free to make more snapshots (checkpoints), as you see fit&lt;/li>
&lt;/ul>
&lt;p>If you ever want to roll back, run &lt;code>er list&lt;/code>. It will list all explicit
snapshots you annotated so far. Locate the one you want to roll back to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% er list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">42&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is working perfectly before bob@ asked me to refactor it&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">78&lt;/span> &lt;span style="color:#e6db74">&amp;#34;second refactoring&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now just roll back to it:&lt;/p>
&lt;pre tabindex="0">&lt;code>% er restore 42
&lt;/code>&lt;/pre>&lt;p>Sometimes you&amp;rsquo;ll need to run &lt;code>g4 add&lt;/code> afterwards. And we&amp;rsquo;re done!&lt;/p>
&lt;p>&lt;strong>Colophon&lt;/strong>: Why use &lt;code>erratic&lt;/code> at all, since CitC already does automatic
periodic snapshots out-of-the-box? Because these automatic snapshots are meant
for machines, not humans; they are not very developer-friendly. You could get
your way around &lt;code>rsync&lt;/code> + finding the correct timestamps to copy from, but
that&amp;rsquo;s not fun at all, and not a good use of time either.&lt;/p>
&lt;h2 id="git-workflow">git workflow&lt;/h2>
&lt;p>How to replicate a similar workflow in a non-Google world?&lt;/p>
&lt;p>For most of us, non-Google necessarily means &lt;code>git&lt;/code>. Let&amp;rsquo;s ignore &lt;code>hg&lt;/code>
(mercurial) in this context.&lt;/p>
&lt;p>There is not much to do, actually: &lt;a href="https://github.blog/open-source/git/commits-are-snapshots-not-diffs/">https://github.blog/open-source/git/commits-are-snapshots-not-diffs/&lt;/a>&lt;/p>
&lt;p>&lt;code>git&lt;/code> commits are already snapshots. The workflow is:&lt;/p>
&lt;ul>
&lt;li>Make some changes, then &lt;code>git add&lt;/code>&lt;/li>
&lt;li>Create a branch (&lt;code>git switch --create&lt;/code>), commit your changes&lt;/li>
&lt;li>To make a snapshot, just make a new commit and annotate it (&lt;code>git commit -m &amp;quot;foo&amp;quot;&lt;/code>)&lt;/li>
&lt;li>To list your snapshots, run &lt;code>git rev-list $(git show-branch --merge-base HEAD)^..HEAD --pretty&lt;/code>. This will list all commits since your branch diverted.
You could add an alias to it in your &lt;code>~/.gitconfig&lt;/code>.&lt;/li>
&lt;li>To roll back, run &lt;code>git reset --hard {commit}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Caveat&lt;/strong>: You will lose track of all commits after &lt;code>{commit}&lt;/code>. Although it
would still be possible to recover them with &lt;code>git reflog&lt;/code> (in case of a
mistake), that is not a developer-friendly workflow.&lt;/p>
&lt;p>Then the follow-up question is: how to roll back without losing track of
intermediate work?&lt;/p>
&lt;p>One way is to create a new branch that points out to &lt;code>{commit}&lt;/code> instead of
hard-resetting your entire worktree:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% git checkout -b mynewbranch &lt;span style="color:#f92672">{&lt;/span>commit&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once you are satisfied, just delete the previous branch and then rename the
current one to it.&lt;/p>
&lt;p>Another possibility is the use of &lt;a href="https://git-scm.com/docs/git-worktree">git
worktrees&lt;/a> to divert (spin-off) branches.&lt;/p>
&lt;p>This becomes a very natural workflow once you repeat it a couple of times.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I have gladly peer bonused him. You should &lt;em>always&lt;/em> peer bonus those folks
who helped you become more productive.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Arguably you should create a separate CL for that (go/small-cls), but who
am I to judge? Unless I am your teammate&amp;hellip;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Anki: custom language card (cont.)</title><link>https://perrotta.dev/2024/09/anki-custom-language-card-cont./</link><pubDate>Sun, 22 Sep 2024 13:02:39 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/09/anki-custom-language-card-cont./</guid><description>&lt;p>This post builds upon the previous &lt;a href="https://perrotta.dev/2024/02/anki-custom-language-card/">Anki: custom language card&lt;/a>.&lt;/p>
&lt;h2 id="searching-word-boundaries">Searching word boundaries&lt;/h2>
&lt;p>When searching for a word such as &lt;em>Mann&lt;/em>, results such as &lt;em>Mannschaft&lt;/em> come up.&lt;/p>
&lt;p>To search accounting for the word boundary, like a typical &lt;code>\bMann\b&lt;/code> regex, use
&lt;code>w:&lt;/code>. In this example: &lt;code>w:Mann&lt;/code>.&lt;/p>
&lt;h2 id="searching-ignoring-accents">Searching ignoring accents&lt;/h2>
&lt;p>When searching for a word with Umlauts such as &lt;em>Über&lt;/em>, you should type it
exactly as is.&lt;/p>
&lt;p>If you are lazy or do not recall where the umlaut falls, perhaps you would think
of searching for &lt;em>uber&lt;/em>, however that does not work.&lt;/p>
&lt;p>To make it work, prepend &lt;code>nc:&lt;/code> to the word. In this case: &lt;code>nc:uber&lt;/code> will
properly match &lt;em>über&lt;/em>. NC stands for non-combining.&lt;/p>
&lt;h2 id="searching-word-boundaries-whilst-ignoring-accents">Searching word boundaries &lt;strong>whilst&lt;/strong> ignoring accents&lt;/h2>
&lt;p>Is it possible to combine the two aforementioned operators? For example, to
match &lt;em>für&lt;/em>. Unfortunately, &lt;a href="https://stackoverflow.com/questions/79011851/anki-how-to-match-while-using-both-w-and-nc-simultaneously">it is
not&lt;/a>.
Anki does not support &lt;code>w:nc:fur&lt;/code> nor &lt;code>nc:w:fur&lt;/code>, which is unfortunate. &lt;em>Schade&lt;/em>!&lt;/p>
&lt;p>In this case the best compromise would be to search for &lt;code>w:für&lt;/code>.&lt;/p>
&lt;h2 id="adding-images-to-flashcards">Adding images to flashcards&lt;/h2>
&lt;p>It is pretty straightforward: Right click the image in your favorite web
browser, copy it, and then paste it (Ctrl/Cmd + V) into Anki. The image is
automatically imported.&lt;/p>
&lt;p>No-brainer image sources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dict.cc/">dict.cc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://images.google.com/">Google Images&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Nowadays it would also be natural&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to use &amp;ldquo;AI&amp;rdquo; to generate images.&lt;/p>
&lt;h2 id="providing-examples-style">Providing examples: style&lt;/h2>
&lt;p>To illustrate with a concrete example:&lt;/p>
&lt;p>&lt;strong>1&lt;/strong>: &lt;u>Ja&lt;/u>, genau.&lt;/p>
&lt;p>&lt;strong>2&lt;/strong>: Das ist &lt;u>ja&lt;/u> komisch.&lt;/p>
&lt;p>&lt;em>Affirmative&lt;/em>&lt;/p>
&lt;p>The structure:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Bold&lt;/strong> numbers to disambiguate&lt;/li>
&lt;li>&lt;u>Underscore&lt;/u> the word in question to emphasize it&lt;/li>
&lt;li>&lt;em>Italicize&lt;/em> everything that is meta or an explanation about the word&lt;/li>
&lt;/ul>
&lt;p>To highlight substrings, e.g. &lt;em>Mann&lt;/em> in &lt;em>Mannschaft&lt;/em>, use underscores&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="tags">Tags&lt;/h2>
&lt;p>I seldom tag notes because there is no need for categorization, all cards are
treated the same way. Tagging is only useful in two scenarios:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>for grouping / retrieval: for example, if you want to make custom study
sessions for a specific domain / area (e.g. animals, programming, trips)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>for provenance annotations: to make it easier to remember where a given note
came from (e.g. &amp;ldquo;textbook&amp;rdquo;, &amp;ldquo;my german teacher&amp;rdquo;, &amp;ldquo;blog&amp;rdquo;, &amp;ldquo;podcast&amp;rdquo;, &amp;ldquo;work&amp;rdquo;)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Adding tags creates the burden of managing and standardizing them. You do not
want to spend valuable mental effort derailing from your main task.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.ankiweb.net/searching.html">https://docs.ankiweb.net/searching.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Albeit deeply unnecessary and wasteful (energy-wise).&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>This principle is not strict. I often interchange bold and underscore.
Choose whichever feels more natural in the appropriate context.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Self-documented Makefiles</title><link>https://perrotta.dev/2024/08/self-documented-makefiles/</link><pubDate>Thu, 08 Aug 2024 10:42:49 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/08/self-documented-makefiles/</guid><description>&lt;p>&lt;code>Makefile&lt;/code>s are often great &lt;code>bash&lt;/code> script replacements. Instead of creating a
&lt;code>bash&lt;/code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of &lt;code>Makefile&lt;/code> targets.&lt;/p>
&lt;p>Recently I found myself writing the following &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It is idempotent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROOT &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell git rev-parse --show-toplevel&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM_GITHUB_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/terraform/modules/global-github&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM &lt;span style="color:#f92672">:=&lt;/span> terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> webhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Update helm dependencies.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">helm helm-dep-update&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/argocd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/external-secrets&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Edit all files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> edit-webhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Modify github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">edit-webhook webhook-edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$$&lt;span style="color:#e6db74">EDITOR&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/main.tf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Apply github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">webhook&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> -chdir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> apply
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, there are a bunch of comments on top of each target. The
question is: How to surface these comments to the user?&lt;/p>
&lt;p>A &lt;code>make help&lt;/code> command would be great.&lt;/p>
&lt;p>With a bit of searching, I found:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/prwhite/8168133">https://gist.github.com/prwhite/8168133&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html">https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These were good starting points. The technique was to transform the above
&lt;code>Makefile&lt;/code> into the following one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It is idempotent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROOT &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell git rev-parse --show-toplevel&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM_GITHUB_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/terraform/modules/global-github&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TERRAFORM &lt;span style="color:#f92672">:=&lt;/span> terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> webhook
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">helm helm-dep-update&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Update helm dependencies.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/argocd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	helm dep update &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ROOT&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/helm/external-secrets&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> edit-webhook &lt;span style="color:#75715e">## Edit all files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">edit-webhook webhook-edit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Modify github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$$&lt;span style="color:#e6db74">EDITOR&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/main.tf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">webhook&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Apply github webhooks to the deploy servers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> -chdir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM_GITHUB_PATH&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> apply
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we would add a &lt;code>help&lt;/code> target to parse the comments after the &lt;code>##&lt;/code>.&lt;/p>
&lt;p>The first source suggested:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Show this help.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	@fgrep -h &lt;span style="color:#e6db74">&amp;#34;##&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)&lt;/span> | fgrep -v fgrep | sed -e &lt;span style="color:#e6db74">&amp;#39;s/\\$$//&amp;#39;&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;s/##//&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is simple and gets the job done, but the formatting was poor:&lt;/p>
&lt;pre tabindex="0">&lt;code>% make help
help: Show this help.
helm helm-dep-update: Update helm dependencies.
edit: edit-webhook Edit all files.
edit-webhook webhook-edit: Modify github webhooks to the deploy servers.
webhook: Apply github webhooks to the deploy servers.
&lt;/code>&lt;/pre>&lt;p>The second source suggested:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@grep -E &lt;span style="color:#e6db74">&amp;#39;^[a-zA-Z_-]+:.*?## .*$$&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)&lt;/span> | sort | awk &lt;span style="color:#e6db74">&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; {printf &amp;#34;\033[36m%-30s\033[0m %s\n&amp;#34;, $$1, $$2}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which produces:&lt;/p>
&lt;pre tabindex="0">&lt;code>% make help
edit Edit all files.
webhook Apply github webhooks to the deploy servers.
&lt;/code>&lt;/pre>&lt;p>The formatting is great, but alas it does not match multiple targets in a single
line.&lt;/p>
&lt;p>I could have modified the targets to be like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>edit-webhook: webhook-edit
webhook-edit: ## Description here
&lt;/code>&lt;/pre>&lt;p>However then I would have to duplicate their comments. I wanted to do better.&lt;/p>
&lt;p>With a bit of LLM&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> magic from GPT-4o, we can have the best of both worlds,
supporting both single and multiple targets in the same line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e">## Show this help.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	@grep -E &lt;span style="color:#e6db74">&amp;#39;^[a-zA-Z_-]+([ \t]+[a-zA-Z_-]+)*:[ \t]*## .*$$&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>MAKEFILE_LIST&lt;span style="color:#66d9ef">)&lt;/span> | awk &lt;span style="color:#e6db74">&amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&amp;lt;=n; i++) {if (targets[i] != &amp;#34;&amp;#34;) printf &amp;#34;\033[36m%-30s\033[0m %s\n&amp;#34;, targets[i], $$2}}&amp;#39;&lt;/span> | sort
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output (amazing!):&lt;/p>
&lt;pre tabindex="0">&lt;code>% make help
edit-webhook Modify github webhooks to the deploy servers.
helm Update helm dependencies.
helm-dep-update Update helm dependencies.
help Show this help.
webhook Apply github webhooks the deploy servers.
webhook-edit Modify github webhooks to the deploy servers.
&lt;/code>&lt;/pre>&lt;p>The chat session: &lt;a href="https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6">https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6&lt;/a>.&lt;/p>
&lt;p>We could also add:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>.DEFAULT_GOAL &lt;span style="color:#f92672">:=&lt;/span> help
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;to ensure that a plain &lt;code>make&lt;/code> invocation behaves like &lt;code>make help&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Edit(2024-08-08)&lt;/strong>: I had to make one small adaptation&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to make it work with
dependencies, which is the whole point of &lt;code>make&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>help: ## Show this help.
	@grep -E &amp;#39;^[.a-zA-Z_-]+([ \t]+[.a-zA-Z_-]+)*:[ \t.a-zA-Z_-]*## .*$$&amp;#39; $(MAKEFILE_LIST) | awk &amp;#39;BEGIN {FS = &amp;#34;:.*?## &amp;#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&amp;lt;=n; i++) {if (targets[i] != &amp;#34;&amp;#34;) printf &amp;#34;\033[36m%-30s\033[0m %s\n&amp;#34;, targets[i], $$2}}&amp;#39; | sort
&lt;/code>&lt;/pre>&lt;p>The previous version would not recognize the following entry:&lt;/p>
&lt;pre tabindex="0">&lt;code>all-in-dev: edit webhook ## Run all necessary steps in the development environment.`
&lt;/code>&lt;/pre>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If I&amp;rsquo;ll start to talk about &amp;ldquo;AI&amp;rdquo; in this blog, the very least I can do is
to call them what they really are: &lt;strong>LLMs&lt;/strong>. The &amp;ldquo;AI&amp;rdquo; acronym is currently &lt;em>way&lt;/em>
too hyped.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Never fully trust LLMs. Well, drop the &lt;em>fully&lt;/em>. Just &lt;strong>never trust LLMs&lt;/strong>,
period.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>XY problem</title><link>https://perrotta.dev/2024/06/xy-problem/</link><pubDate>Sun, 23 Jun 2024 14:50:19 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/06/xy-problem/</guid><description>&lt;p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way&lt;/a> by Eric S. Raymond&lt;/li>
&lt;li>&lt;a href="https://xyproblem.info">XY problem&lt;/a>: The XY problem is asking about your
attempted solution rather than your actual problem. This leads to enormous
amounts of wasted time and energy, both on the part of people asking for help,
and on the part of those providing help.&lt;/li>
&lt;/ul>
&lt;p>Here is a recent example: &lt;a href="https://github.com/23andMe/Yamale/issues/250">https://github.com/23andMe/Yamale/issues/250&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://xyproblem.info">https://xyproblem.info&lt;/a> / Motivation: Somewhat related to #228: It&amp;rsquo;s not
currently possible to exclude files from a given directory. In the context of
developing Kubernetes GitOps repository this is often an issue. The ability to
run yamale on individual files would address it.&lt;/p>
&lt;/blockquote></description></item><item><title>Github actions workflow</title><link>https://perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;ul>
&lt;li>You have &lt;code>git&lt;/code>, &lt;code>jq&lt;/code> and the &lt;a href="https://cli.github.com/">&lt;code>gh&lt;/code>&lt;/a> command-line tool
installed (&lt;code>brew install gh&lt;/code>)&lt;/li>
&lt;li>You have a github actions file in
&lt;code>~/.github/workflows/package-release-dispatch.yml&lt;/code>.&lt;/li>
&lt;li>The action has the following form:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>on:
 workflow_dispatch:
 inputs:
 ref:
 description: &amp;#39;Ref to build from. This can either be a SHA or a branch/tag&amp;#39;
 required: true
 type: string
 push:
 branches:
 - master
 paths:
 - &amp;#39;.github/workflows/package-release-dispatch.yml&amp;#39;
 - &amp;#39;helm/**&amp;#39;
&lt;/code>&lt;/pre>&lt;p>The goal is to iterate on the &lt;code>jobs:&lt;/code> section of the action.&lt;/p>
&lt;h2 id="workflow">Workflow&lt;/h2>
&lt;p>Trigger an action run from the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh workflow run package-release-dispatch.yml &lt;span style="color:#f92672">[&lt;/span>--ref master&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-f ref&lt;span style="color:#f92672">=&lt;/span>master&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>--ref&lt;/code> should be the git branch you&amp;rsquo;re working on, for example,
&lt;code>thiagowfx/my-cool-feature&lt;/code>.&lt;/p>
&lt;p>&lt;code>-f&lt;/code> provides an input to the workflow. In this case, there&amp;rsquo;s an input named
&lt;code>ref&lt;/code>, which is meant to be the branch the action will act upon.&lt;/p>
&lt;p>The action takes a little while to trigger, we can &lt;code>sleep&lt;/code> to give it some time.
I found that &lt;code>sleep 3&lt;/code> is a sensible value (3 seconds).&lt;/p>
&lt;p>How to view the action?&lt;/p>
&lt;p>First we need to get its ID. Here&amp;rsquo;s one way to do so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh run list --workflow&lt;span style="color:#f92672">=&lt;/span>package-release-dispatch.yml --json databaseId --jq &lt;span style="color:#e6db74">&amp;#39;.[0].databaseId&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="option-1-via-the-command-line">Option 1) Via the command-line&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh run watch &amp;lt;id&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s analogous to &lt;code>watch&lt;/code>, continuously refreshing the action progress in the
background, step by step. Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
 ✓ Set up job
 ✓ Checkout source code
 ✓ Run azure/setup-helm@v4
 ✓ Install yq
 ✓ Install helm cm-push plugin
 ✓ Set up Helm repos
 * Helm package all charts sans blacklist
 * Publish all helm packages
 * Post Checkout source code
&lt;/code>&lt;/pre>&lt;h3 id="option-2-via-the-web-browser">Option 2) Via the web browser&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh run view &amp;lt;id&amp;gt; -w
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will open the system web browser in the right page, pertaining to the action
run.&lt;/p>
&lt;h2 id="putting-everything-together">Putting everything together&lt;/h2>
&lt;h3 id="option-1-via-the-command-line-1">Option 1) Via the command-line&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh workflow run package-release-dispatch.yml --ref master -f ref&lt;span style="color:#f92672">=&lt;/span>master &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> sleep &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> gh run watch &lt;span style="color:#66d9ef">$(&lt;/span>gh run list --workflow&lt;span style="color:#f92672">=&lt;/span>package-release-dispatch.yml --json databaseId --jq &lt;span style="color:#e6db74">&amp;#39;.[0].databaseId&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="option-2-via-the-web-browser-1">Option 2) Via the web browser&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gh workflow run package-release-dispatch.yml --ref master -f ref&lt;span style="color:#f92672">=&lt;/span>master &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> sleep &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> gh run view &lt;span style="color:#66d9ef">$(&lt;/span>gh run list --workflow&lt;span style="color:#f92672">=&lt;/span>package-release-dispatch.yml --json databaseId --jq &lt;span style="color:#e6db74">&amp;#39;.[0].databaseId&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span> -w
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Anki: custom language card</title><link>https://perrotta.dev/2024/02/anki-custom-language-card/</link><pubDate>Sat, 03 Feb 2024 13:02:21 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/02/anki-custom-language-card/</guid><description>&lt;p>The more time you spent playing with &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a>, the
more opinionated you become.&lt;/p>
&lt;p>Upon reading &lt;a href="https://fluent-forever.com/index.html">Fluent Forever&lt;/a> by Gabriel
Wyner, I got an itch to create my own Anki note template for learning
languages.&lt;/p>
&lt;h2 id="the-template">The template&lt;/h2>
&lt;p>There&amp;rsquo;s no point explaining how to create a new template; the excellent &lt;a href="https://docs.ankiweb.net/templates/intro.html">Anki
documentation&lt;/a> already does so.
Instead, I&amp;rsquo;ll just list and explain the template I created.&lt;/p>
&lt;p>The template is called &amp;ldquo;Deutsch Language Card 🇩🇪&amp;rdquo;. It has four fields:&lt;/p>
&lt;ol>
&lt;li>Front&lt;/li>
&lt;li>Front Example&lt;/li>
&lt;li>Back&lt;/li>
&lt;li>Striked&lt;/li>
&lt;/ol>
&lt;p>Front and Back come from the built-in template. There&amp;rsquo;s nothing special about
them. I use &amp;ldquo;Front&amp;rdquo; for the canonical term in the foreign language I&amp;rsquo;m
learning, and &amp;ldquo;Back&amp;rdquo; for the explanation in the base / native language I&amp;rsquo;m
mostly familiar with&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>Front: das Buch
Back: book 📚
&lt;/code>&lt;/pre>&lt;p>Whenever possible I include one or more emojis 😃 in the &amp;ldquo;Back&amp;rdquo; field.&lt;/p>
&lt;p>The &lt;strong>canonicalization&lt;/strong> of the &amp;ldquo;Front&amp;rdquo; field is important, and one of the best
(key, even!) features of Anki. It will smartly detect (and prevent!) duplicates
from being created. It is case sensitive, therefore it&amp;rsquo;s important to create
one convention and stick to it.&lt;/p>
&lt;p>&amp;ldquo;Front Example&amp;rdquo; is used to complement the &amp;ldquo;Front&amp;rdquo; field. It consists of one or
both of the following:&lt;/p>
&lt;ul>
&lt;li>A phrase or sentence containing the Front term.&lt;/li>
&lt;li>A picture representing the Front term.&lt;/li>
&lt;/ul>
&lt;p>To increase overall retention, it&amp;rsquo;s always best to add cues familiar to your
context.&lt;/p>
&lt;p>Add phrases that resonate with you or that you find in textbooks or
blog posts that resonate with you. In my experience, adding random phrases is
not effective.&lt;/p>
&lt;p>Add images that represent well that you&amp;rsquo;re describing and that
resonate with you. Photos that you take yourself are also fair game!&lt;/p>
&lt;p>&amp;ldquo;Striked&amp;rdquo; is to disambiguate synonyms or false cognates. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>Front: der Sturm
Back: storm ⛈️
Striked: das Gewitter, das Unwetter
&lt;/code>&lt;/pre>&lt;p>When I am reviewing the Back card, I want to cue myself not to think about the
striked terms.&lt;/p>
&lt;h2 id="the-source-code">The source code&lt;/h2>
&lt;h3 id="the-front-card">The Front card&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-anki" data-lang="anki">{{Front}} {{tts de_DE:Front}}

{{#Front Example}}
&amp;lt;br&amp;gt;
&amp;lt;i&amp;gt;{{Front Example}}&amp;lt;/i&amp;gt; {{tts de_DE:Front Example}}
{{/Front Example}}
&lt;/code>&lt;/pre>&lt;p>The front card includes a text-to-speech sample that is generated on-the-fly.
It works very well on macOS and iOS. In fact, that&amp;rsquo;s main reason why the
template is called &amp;ldquo;Deutsch Language Card&amp;rdquo; instead of just &amp;ldquo;Language Card&amp;rdquo;. The
text-to-speech engine is customized to have an accent in the given language.
For (High) German, that is &lt;code>de_DE&lt;/code>.&lt;/p>
&lt;h3 id="the-back-card">The Back card&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-anki" data-lang="anki">{{Back}}

{{#Striked}}
&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;s&amp;gt;{{Striked}}&amp;lt;/s&amp;gt;
{{/Striked}}
&lt;/code>&lt;/pre>&lt;p>The striked terms are &lt;del>striked&lt;/del>, as you would expect.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Interestingly I prefer to use English most of the time, even though it is
not my mother tongue.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Integrating terraform with ansible</title><link>https://perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p>
&lt;p>First of all, here&amp;rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&amp;rsquo;ll explain some of them
below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">cat&lt;/span> var&lt;span style="color:#a6e22e">iables&lt;/span>.&lt;span style="color:#a6e22e">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">variable&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github_username&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#a6e22e">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">default&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;thiagowfx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">variable&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_hostname&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#a6e22e">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">default&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">variable&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_region&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#a6e22e">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">default&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;eu-central&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All variables were moved to a &lt;code>variables.tf&lt;/code> file. This is to follow standard
terraform
&lt;a href="https://developer.hashicorp.com/terraform/language/modules/develop/structure">conventions&lt;/a>
/ recommendations for module structures. Furthermore, it becomes easier to
manage variables when they are all stored in a single place.&lt;/p>
&lt;p>The main module file now looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">cat&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#a6e22e">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">required_providers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">source&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hashicorp/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">linode&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">source&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;linode/linode&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">provider&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode&amp;#34;&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github_keys&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://api.github.com/users/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>var.&lt;span style="color:#a6e22e">github_username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">locals&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keys&lt;/span> = jsondecode(data.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">github_keys&lt;/span>.&lt;span style="color:#a6e22e">response_body&lt;/span>)[&lt;span style="color:#f92672">*&lt;/span>].&lt;span style="color:#a6e22e">key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">resource&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nanode&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;g6-nanode-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;linode/alpine3.19&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">label&lt;/span> = var.&lt;span style="color:#a6e22e">linode_hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">region&lt;/span> = var.&lt;span style="color:#a6e22e">linode_region&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authorized_keys&lt;/span> = &lt;span style="color:#a6e22e">local&lt;/span>.&lt;span style="color:#a6e22e">keys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">backups_enabled&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">booted&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">watchdog_enabled&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I removed the token from the linode provider. Now it is supplied via the
&lt;code>LINODE_TOKEN&lt;/code> environment variable. In order to automatically populate that
variable, I use &lt;a href="https://perrotta.dev/2022/01/direnv-automate-your-environment-variables/">&lt;code>direnv&lt;/code>&lt;/a>. There&amp;rsquo;s an &lt;code>.envrc&lt;/code> file that provides its value, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"># terraform init&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export LINODE_TOKEN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;my-token-here&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I also created a repository for this project:
&lt;a href="https://github.com/thiagowfx/knol">https://github.com/thiagowfx/knol&lt;/a>. That&amp;rsquo;s enough for preliminaries, now let&amp;rsquo;s
go back to Ansible.&lt;/p>
&lt;p>The first component we&amp;rsquo;ll need is an Ansible
&lt;a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">inventory&lt;/a>
file, containing the IP address of the host we&amp;rsquo;ll manage. It could look like
this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[all]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">1.2.3.4 ansible_user&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">root&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;wherein &lt;code>1.2.3.4&lt;/code> is the IP address of our VPS.&lt;/p>
&lt;p>That said, due to the fact the VPS instance is created dynamically, maintaining
that IP address manually would be tedious. Therefore, let&amp;rsquo;s have Terraform
manage it.&lt;/p>
&lt;p>We can do so with a
&lt;a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file">&lt;code>local_file&lt;/code>&lt;/a>.
Heck, we could even use a
&lt;a href="https://registry.terraform.io/providers/hashicorp/template/latest/docs/data-sources/file">&lt;code>template_file&lt;/code>&lt;/a>,
however it would be overkill as there are only two simple lines in our
inventory at this point. A &lt;code>local_file&lt;/code> is created upon &lt;code>terraform apply&lt;/code> and
deleted upon &lt;code>terraform destroy&lt;/code>. Therefore it doesn&amp;rsquo;t even need to be tracked
by our VCS:&lt;/p>
&lt;pre tabindex="0">&lt;code>resource &amp;#34;local_file&amp;#34; &amp;#34;ansible_inventory&amp;#34; {
 content = &amp;lt;&amp;lt;-EOF
[all]
${linode_instance.nanode.ip_address} ansible_user=root
EOF
 filename = &amp;#34;inventory.ini&amp;#34;
 file_permission = &amp;#34;0644&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>Once we run terraform (plan + apply), an &lt;code>inventory.ini&lt;/code> file should be created
with the above contents.&lt;/p>
&lt;p>Because the IP address is ephemeral and dynamic, we should have a
straightforward way to see its value. A terraform
&lt;a href="https://developer.hashicorp.com/terraform/language/values/outputs">&lt;code>output&lt;/code>&lt;/a>
is perfect for that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">cat&lt;/span> &lt;span style="color:#a6e22e">outputs&lt;/span>.&lt;span style="color:#a6e22e">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ip_address&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">value&lt;/span> = &lt;span style="color:#a6e22e">linode_instance&lt;/span>.&lt;span style="color:#a6e22e">nanode&lt;/span>.&lt;span style="color:#a6e22e">ip_address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Later on (after terraforming) we will be able to use &lt;code>terraform output&lt;/code> to see
the server IP address.&lt;/p>
&lt;p>We have the inventory file. Now we need a
&lt;a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">playbook&lt;/a>.
A playbook contains a sequence of tasks to be applied to our server.&lt;/p>
&lt;p>Let&amp;rsquo;s start with a basic playbook that just installs and starts &lt;code>nginx&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">hosts&lt;/span>: &lt;span style="color:#ae81ff">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tasks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install the web server (nginx)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">community.general.apk&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">present&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Start the web server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">service&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">state&lt;/span>: &lt;span style="color:#ae81ff">started&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save this to a &lt;code>playbook.yml&lt;/code> file.&lt;/p>
&lt;p>After terraforming, we should now be able to run ansible:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ansible-playbook -i inventory.ini playbook.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to make this setup more ergonomic, let&amp;rsquo;s create a &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Makefile" data-lang="Makefile">&lt;span style="display:flex;">&lt;span>TERRAFORM &lt;span style="color:#f92672">:=&lt;/span> terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> terraform ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ansible&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ansible-playbook -i inventory.ini playbook.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">terraform&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> apply
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">$(&lt;/span>TERRAFORM&lt;span style="color:#66d9ef">)&lt;/span> destroy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> all ansible terraform clean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can just run &lt;code>make terraform&lt;/code> or &lt;code>make ansible&lt;/code> for granular steps. Or
just &lt;code>make&lt;/code> to run everything in the right order.&lt;/p>
&lt;p>I extracted the &lt;code>terraform&lt;/code> binary to its own variable because it facilitates
the use of &lt;a href="https://opentofu.org/">OpenTofu&lt;/a> (a fork) in lieu of terraform.&lt;/p>
&lt;p>And that&amp;rsquo;s it for today! In a future post, we&amp;rsquo;ll look into extending our
Ansible usage to fully bootstrap Miniflux on the server.&lt;/p></description></item><item><title>(Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago&lt;/a>, web developers would run
(web) integration tests with &lt;a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic&lt;/a> using Google Chrome (or Chromium)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
This was a &lt;a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era&lt;/a>.&lt;/p>
&lt;p>&lt;em>&amp;ldquo;Why?&amp;rdquo;&lt;/em>, you may rightfully ask.&lt;/p>
&lt;ul>
&lt;li>The web browser and/or its components / extensions / etc could
&lt;strong>auto-update&lt;/strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness&lt;/li>
&lt;li>Chrome adds an &lt;strong>info bar&lt;/strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.&lt;/li>
&lt;li>There are no versioned Chrome builds for download. There&amp;rsquo;s no &lt;strong>browser
pinning&lt;/strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
&lt;ul>
&lt;li>&lt;strong>Corollary&lt;/strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
&lt;a href="https://chromedriver.chromium.org/downloads">Chromedriver&lt;/a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In order to address these (and other) issues, &lt;a href="https://goo.gle/chrome-for-testing">Chrome for
Testing&lt;/a> (hereafter &amp;ldquo;CfT&amp;rdquo;) was born. To
clarify, today where are three flavours of Chrom*:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Chromium&lt;/strong>: the open-source project, &lt;a href="https://chromium.org/">https://chromium.org/&lt;/a>. The root of all
derivatives (Microsoft Edge, Brave, etc). It is available in full source
form, but there are no (official) pre-built binaries for it.&lt;/li>
&lt;li>&lt;strong>Google Chrome&lt;/strong>: the proprietary, closed-source version of Chromium developed
by Google. Think of it as Chromium on steroids. Google distributes pre-built
Chrome binaries for every platform it supports.&lt;/li>
&lt;li>&lt;strong>Google Chrome for Testing&lt;/strong>: think of it as &amp;ldquo;reproducible (or pinned, or
frozen) Google Chrome&amp;rdquo;. It is basically a snapshot of Google Chrome in a
fixed time in the past, plus a few bits of developer-oriented features
mentioned in this article.&lt;/li>
&lt;/ul>
&lt;p>There are other &lt;em>niceties&lt;/em> that Chrome for Testing accomplishes as of today:&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)&lt;/a> experiment
(&amp;ldquo;Protocol Monitor&amp;rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.&lt;/li>
&lt;li>Mechanisms such as &lt;a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts&lt;/a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
&lt;a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable">&lt;code>DEBIAN_FRONTEND=noninteractive&lt;/code>&lt;/a>
when running &lt;code>apt&lt;/code> in dockerfiles. You don&amp;rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.&lt;/li>
&lt;li>Completely agnostic to the concept of &amp;ldquo;Stable&amp;rdquo; / &amp;ldquo;Beta&amp;rdquo; / &amp;ldquo;Dev&amp;rdquo;. If you have
pinned versions, you don&amp;rsquo;t need to care about any of that.&lt;/li>
&lt;li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases&lt;/li>
&lt;/ul>
&lt;p>Something important to note:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Warning&lt;/strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.&lt;/p>
&lt;/blockquote>
&lt;p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&amp;rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&amp;rsquo;s
package manager (e.g. &lt;code>apt&lt;/code>, &lt;code>dnf&lt;/code>, &lt;code>pacman&lt;/code>, etc). Why should it be different
for Chrome for Testing?&lt;/p>
&lt;p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&amp;rsquo;t want end users to shoot themselves on the foot, therefore it&amp;rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Because of that, CfT cannot be made the default system browser.&lt;/p>
&lt;p>The easiest way to obtain CfT is via its public API, which is documented here:
&lt;a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/&lt;/a>, or through the official
&lt;a href="https://pptr.dev/browsers-api">CLI utility&lt;/a> that is part of Puppeteer.&lt;/p>
&lt;p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&amp;rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.&lt;/p>
&lt;h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?&lt;/h2>
&lt;p>The &lt;a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi&lt;/a> repository is an excellent (and simple-ish) example on how to do so&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Given a &lt;code>.github/workflows/e2e.yml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">E2E tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">e2e&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm ci&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This is the exciting part wherein we fetch CfT.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Despite the &amp;#34;chromium&amp;#34; name, this is actually CfT.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We set a explicit shell to force &amp;#34;set -eo pipefail&amp;#34; so that,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if the command fails, then the entire step fails.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We do not want &amp;#34;cut&amp;#34; to run if the download fails for some reason.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># version of the CLI tool, but that&amp;#39;s how it should be done for now.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We store the location of the CfT binary in an environment variable.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Google Chrome for Testing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> cft_binary=&amp;#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&amp;#39; &amp;#39;)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;cft_binary=$cft_binary&amp;#34; &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-python@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">python-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3.10&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">pip install -r tests/requirements.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># out to CfT, using the environment variable set earlier.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run E2E tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run e2e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">BROWSER_BIN&lt;/span>: &lt;span style="color:#ae81ff">${{ env.cft_binary }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the complete version of this example in an &lt;a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit&lt;/a>
within that repository. The reason I link to an older commit is due to its
direct usage of the &lt;a href="https://pptr.dev/browsers-api">@puppeteer/browsers&lt;/a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.&lt;/p>
&lt;p>To fully realize the benefits of reproducibility, you should not use &lt;code>latest&lt;/code>.
Instead, pin the browser to a specific version.&lt;/p>
&lt;p>If using an environment variable (or a command-line flag) is not an option for
some reason, then an alternative would be to create a symlink (&lt;code>ln -s&lt;/code>) to
&lt;code>$cft_binary&lt;/code> from a place in the front of your &lt;code>$PATH&lt;/code>. Or, alternatively,
temporarily update your &lt;code>$PATH&lt;/code> with the &lt;code>dirname&lt;/code> of &lt;code>$cft_binary&lt;/code>.&lt;/p>
&lt;p>Also, if you cannot or do not want to install &lt;code>npm&lt;/code> (&lt;code>npx&lt;/code>) just for the sake
of fetching CfT&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, then just fetch it directly (use &lt;code>curl&lt;/code> or &lt;code>wget&lt;/code>) from
its &lt;a href="https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints">API
endpoint&lt;/a>, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/121.0.6167.85/linux64/chrome-linux64.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Although note that this is not a future-proof way of fetching CfT. It&amp;rsquo;s a
simple shortcut. The better way is to query the JSON metadata file for a
specific platform and browser version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% curl https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json | jq -r &lt;span style="color:#e6db74">&amp;#39;.builds.&amp;#34;121.0.6167&amp;#34;.downloads.chrome[] | select(.platform == &amp;#34;linux64&amp;#34;).url&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;so that the download works even if the URL changes in the future &lt;a href="https://github.com/GoogleChromeLabs/chrome-for-testing/pull/102">for some
reason&lt;/a>.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Chrome for Testing Design Document: &lt;a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For simplicity, referred to as just &lt;em>Chrome&lt;/em> hereafter.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>You can find lots of such reports &lt;a href="https://groups.google.com/g/chromedriver-users">here&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>The same way you wouldn&amp;rsquo;t recommend Arch Linux for linux newbies.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;strong>Disclaimer&lt;/strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>I know, I know, JS bloat.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Terraforming a Linode: hello world</title><link>https://perrotta.dev/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p>
&lt;p>The current setup does not use any containers. I had proudly made it as KISS as
possible at the time:&lt;/p>
&lt;ol>
&lt;li>Linode is a very beginner-friendly (and cheap) VPS&lt;/li>
&lt;li>Alpine Linux is a first-class citizen on Linode&lt;/li>
&lt;li>There&amp;rsquo;s an &lt;code>apk&lt;/code> &lt;a href="https://pkgs.alpinelinux.org/packages?name=miniflux">package&lt;/a> for &lt;code>miniflux&lt;/code>&lt;/li>
&lt;li>There&amp;rsquo;s an OpenRC&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> script for &lt;code>miniflux&lt;/code> (so that it can be controlled via &lt;code>service&lt;/code>)&lt;/li>
&lt;/ol>
&lt;p>For the first part of this automation we will look into provisioning a Linode
with an Alpine Linux installation. In order to do so we will use HashiCorp
&lt;a href="https://www.terraform.io/">Terraform&lt;/a>.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Provision a new Linode&lt;/li>
&lt;li>Deploy it in Europe&lt;/li>
&lt;li>Use the smallest shape (a so-called &lt;a href="https://www.linode.com/community/questions/211/what-is-a-nanode">Nanode&lt;/a>)&lt;/li>
&lt;li>Run Alpine Linux&lt;/li>
&lt;li>Set it up with my &lt;a href="https://github.com/thiagowfx.keys">public ssh key&lt;/a>, which is hosted on Github&lt;/li>
&lt;/ul>
&lt;h2 id="terraform-setup">Terraform setup&lt;/h2>
&lt;ul>
&lt;li>Install a provider for Linode: &lt;a href="https://registry.terraform.io/providers/linode/linode/latest/docs">https://registry.terraform.io/providers/linode/linode/latest/docs&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Scaffold it like this, in a &lt;code>main.tf&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">required_providers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">linode&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">source&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;linode/linode&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Generate a Linode API token&lt;/li>
&lt;/ul>
&lt;p>Go to &lt;a href="https://cloud.linode.com/profile/tokens">https://cloud.linode.com/profile/tokens&lt;/a>, create a new token called
&lt;code>terraform&lt;/code>. with the &amp;ldquo;Linodes&amp;rdquo; scope set to &amp;ldquo;Read/Write&amp;rdquo;.&lt;/p>
&lt;ul>
&lt;li>Append this API token to &lt;code>main.tf&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">provider&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;lt;your token here&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Add a
&lt;a href="https://registry.terraform.io/providers/linode/linode/latest/docs/resources/instance">&lt;code>linode_instance&lt;/code>&lt;/a>
with the appropriate fields set according to the documentation:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">resource&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">label&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;linode/alpine3.19&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">region&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;eu-central&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;g6-nanode-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authorized_keys&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;&amp;lt;your ssh public key here&amp;gt;&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">backups_enabled&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">watchdog_enabled&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">booted&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;ldquo;Plan&amp;rdquo; is basically a dry-run. Terraform will output what it intends to do, but nothing will be done yet.&lt;/p>
&lt;ul>
&lt;li>Analyze the output and double check that it looks correct.&lt;/li>
&lt;/ul>
&lt;p>To actually perform the provisioning, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then confirm the prompt.&lt;/p>
&lt;p>Within a few seconds (or maybe minutes), you should see your new Linode in the
&lt;a href="https://cloud.linode.com/">Linode Console&lt;/a>.&lt;/p>
&lt;p>We can test our deployment by ssh&amp;rsquo;ing to our new machine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% ssh root@&amp;lt;public IP address&amp;gt; -i ~/.ssh/my_ssh_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Welcome to Alpine!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The Alpine Wiki contains a large amount of how-to guides and general
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>information about administrating Alpine systems.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>See &amp;lt;https://wiki.alpinelinux.org/&amp;gt;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You can setup the system with the command: setup-alpine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You may change this message by editing /etc/motd.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s take a pause to appreciate how lightweight it is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>localhost:~# df -h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Filesystem Size Used Available Use% Mounted on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>devtmpfs 10.0M &lt;span style="color:#ae81ff">0&lt;/span> 10.0M 0% /dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shm 487.8M &lt;span style="color:#ae81ff">0&lt;/span> 487.8M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/dev/sda 24.1G 238.1M 22.6G 1% /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmpfs 195.1M 268.0K 194.8M 0% /run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only 238 MiB!&lt;/p>
&lt;p>To deprovision it, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -destroy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If everything looks correct, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform destroy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Warning&lt;/strong>: It turns out the &amp;ldquo;Linodes&amp;rdquo; scope was not enough to do the
deprovisioning. I needed to create a new scope, with more permissions, in order
to do so.&lt;/p>
&lt;p>As you can see, terraform makes it very trivial to deprovision systems.&lt;/p>
&lt;p>&lt;strong>Bonus points&lt;/strong>: run &lt;code>terraform fmt&lt;/code> to format your file. Never go &lt;a href="https://www.youtube.com/watch?v=-CmadmM5cOk">out of
style&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Tip&lt;/strong>: At any point you can run &lt;code>terraform validate&lt;/code> to verify your &lt;code>main.tf&lt;/code>
file is syntactically correct.&lt;/p>
&lt;p>Two things could be improved in the previous setup:&lt;/p>
&lt;ul>
&lt;li>We could use &lt;code>authorized_users&lt;/code> to pass in our linode username. If we add an
SSH key to our linode account, then that key would be automatically deployed
to the system, thereby removing the need to specify &lt;code>authorized_keys&lt;/code>.&lt;/li>
&lt;li>Alternatively, we could fetch our key from an URL endpoint with the use of
the &lt;code>hashicorp/http&lt;/code> provider, like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">terraform&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">required_providers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">http&lt;/span> = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">source&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hashicorp/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;thiagowfx_ssh_keys&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://github.com/thiagowfx.keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">resource&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span> {&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">authorized_keys&lt;/span> = compact([&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">line&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> split(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">n&amp;#34;&lt;/span>, data.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">thiagowfx_ssh_keys&lt;/span>.&lt;span style="color:#a6e22e">response_body&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> chomp(&lt;span style="color:#a6e22e">line&lt;/span>)])&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &amp;ldquo;list comprehension&amp;rdquo; above does line splitting magic to convert them to a
list of string, and the &lt;code>compact&lt;/code> removes the empty new line at the end.&lt;/p>
&lt;p>We could improve the example above even further.&lt;/p>
&lt;p>For starters, let&amp;rsquo;s parameterize out the username to a variable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">variable&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github_username&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span> = &lt;span style="color:#a6e22e">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">default&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;thiagowfx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user_ssh_keys&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://github.com/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>var.&lt;span style="color:#a6e22e">github_username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">resource&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span> {&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">authorized_keys&lt;/span> = compact([&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">line&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> split(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">n&amp;#34;&lt;/span>, data.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">user_ssh_keys&lt;/span>.&lt;span style="color:#a6e22e">response_body&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> chomp(&lt;span style="color:#a6e22e">line&lt;/span>)])&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We could then easily supply another username with &lt;code>-var&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var github_username&lt;span style="color:#f92672">=&lt;/span>torvalds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the above example leverages &lt;a href="https://developer.hashicorp.com/terraform/language/expressions/strings">string interpolation&lt;/a>.&lt;/p>
&lt;p>We could also extract the SSH keys list to its own &amp;ldquo;variable&amp;rdquo; (&lt;a href="https://developer.hashicorp.com/terraform/language/values/locals">locals&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">locals&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ssh_keys&lt;/span> = compact([&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">line&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> split(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#e6db74">n&amp;#34;&lt;/span>, data.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">user_ssh_keys&lt;/span>.&lt;span style="color:#a6e22e">response_body&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> chomp(&lt;span style="color:#a6e22e">line&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">resource&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;coruscant&amp;#34;&lt;/span> {&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">authorized_keys&lt;/span> = &lt;span style="color:#a6e22e">local&lt;/span>.&lt;span style="color:#a6e22e">ssh_keys&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> # ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A more robust (and stable) way to query the key though is through the Github API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-terraform" data-lang="terraform">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github_keys&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;https://api.github.com/users/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>var.&lt;span style="color:#a6e22e">github_username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">locals&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ssh_keys&lt;/span> = jsondecode(data.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">github_keys&lt;/span>.&lt;span style="color:#a6e22e">response_body&lt;/span>)[&lt;span style="color:#f92672">*&lt;/span>].&lt;span style="color:#a6e22e">key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that a typical response body looks like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;id&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;lt;ssh key&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>API endpoint documentation:
&lt;a href="https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user">https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user&lt;/a>&lt;/p>
&lt;p>If we use &lt;code>output&lt;/code> instead of &lt;code>locals&lt;/code>, then we can debug (inspect) it with
&lt;code>terraform output&lt;/code>.&lt;/p>
&lt;p>And that&amp;rsquo;s it for today! In a future post, we will continue from here by using
&lt;a href="https://www.ansible.com/">Ansible&lt;/a> to install and set up Miniflux in our new
Linode.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Alpine Linux does not use &lt;code>systemd&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Synchronized in Python</title><link>https://perrotta.dev/2024/01/synchronized-in-python/</link><pubDate>Mon, 15 Jan 2024 14:42:51 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/01/synchronized-in-python/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">In Java, you can make a variable thread safe by just adding the &lt;code>synchronized&lt;/code>
keyword. Is there anything that can achieve the same results in
Python?&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Without having prior knowledge of any python libraries to do so, the primitive interface
I would expect resembles the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock &lt;span style="color:#f92672">=&lt;/span> Lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">perform_mutation&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock&lt;span style="color:#f92672">.&lt;/span>acquire()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>perform_mutation(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock&lt;span style="color:#f92672">.&lt;/span>release()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This isn&amp;rsquo;t robust: if an exception happens in &lt;code>perform_mutation&lt;/code> the lock would
never be released. A small improvement we can make is to wrap it with
&lt;code>try/finally&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock &lt;span style="color:#f92672">=&lt;/span> Lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">perform_mutation&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock&lt;span style="color:#f92672">.&lt;/span>acquire()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>perform_mutation(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock&lt;span style="color:#f92672">.&lt;/span>release()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However it turns out there&amp;rsquo;s a more pythonic way to do so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> threading &lt;span style="color:#f92672">import&lt;/span> Lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock &lt;span style="color:#f92672">=&lt;/span> Lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">perform_mutation&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>perform_mutation(bytes)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How can we test this? First, let&amp;rsquo;s use a single thread.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo &lt;span style="color:#f92672">=&lt;/span> Foo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;hello from the main thread&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s use multiple threads:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo &lt;span style="color:#f92672">=&lt;/span> Foo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">10&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread &lt;span style="color:#f92672">=&lt;/span> Thread(target&lt;span style="color:#f92672">=&lt;/span>foo&lt;span style="color:#f92672">.&lt;/span>write, args&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello from thread &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads&lt;span style="color:#f92672">.&lt;/span>append(thread)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Start all threads&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> thread &lt;span style="color:#f92672">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Wait for all threads to finish&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> thread &lt;span style="color:#f92672">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without the lock this is one of the results I get locally:&lt;/p>
&lt;pre tabindex="0">&lt;code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 6
hello from thread 8
hello from thread 7
hello from thread 5
hello from thread 9
&lt;/code>&lt;/pre>&lt;p>With the lock I always get the following, as you would predict:&lt;/p>
&lt;pre tabindex="0">&lt;code>% python3 lock.py
hello from thread 0
hello from thread 1
hello from thread 2
hello from thread 3
hello from thread 4
hello from thread 5
hello from thread 6
hello from thread 7
hello from thread 8
hello from thread 9
&lt;/code>&lt;/pre>&lt;p>We could go one level deeper in the abstraction by using a &lt;code>@synchronized&lt;/code> decorator:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">perform_mutation&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@synchronized&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>perform_mutation(bytes)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How do we implement it?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">synchronized&lt;/span>(member):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@wraps&lt;/span>(member)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wrapper&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lock &lt;span style="color:#f92672">=&lt;/span> vars(member)&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;_synchronized_lock&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">None&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> lock &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lock &lt;span style="color:#f92672">=&lt;/span> vars(member)&lt;span style="color:#f92672">.&lt;/span>setdefault(&lt;span style="color:#e6db74">&amp;#34;_synchronized_lock&amp;#34;&lt;/span>, Lock())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> lock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> member(&lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#f92672">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> wrapper
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One last concept to learn: &lt;code>RLock&lt;/code> a.k.a. reentrant lock.&lt;/p>
&lt;p>Consider the following program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> threading &lt;span style="color:#f92672">import&lt;/span> Lock, Thread
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lock &lt;span style="color:#f92672">=&lt;/span> Lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">changeA&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">changeB&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">changeAandB&lt;/span>(self, bytes):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(bytes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>changeA(bytes) &lt;span style="color:#75715e"># a usual lock would block here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>changeB(bytes)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Invoked as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>foo &lt;span style="color:#f92672">=&lt;/span> Foo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>threads &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">5&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread &lt;span style="color:#f92672">=&lt;/span> Thread(target&lt;span style="color:#f92672">=&lt;/span>foo&lt;span style="color:#f92672">.&lt;/span>changeA, args&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello from thread &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> A&amp;#34;&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads&lt;span style="color:#f92672">.&lt;/span>append(thread)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread &lt;span style="color:#f92672">=&lt;/span> Thread(target&lt;span style="color:#f92672">=&lt;/span>foo&lt;span style="color:#f92672">.&lt;/span>changeB, args&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello from thread &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> B&amp;#34;&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads&lt;span style="color:#f92672">.&lt;/span>append(thread)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread &lt;span style="color:#f92672">=&lt;/span> Thread(target&lt;span style="color:#f92672">=&lt;/span>foo&lt;span style="color:#f92672">.&lt;/span>changeAandB, args&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello from thread &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> AB&amp;#34;&lt;/span>,))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads&lt;span style="color:#f92672">.&lt;/span>append(thread)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Start all threads&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> thread &lt;span style="color:#f92672">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Wait for all threads to finish&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> thread &lt;span style="color:#f92672">in&lt;/span> threads:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thread&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will not work as expected. As soon as the first &lt;code>changeAandB&lt;/code> gets called, its inner
&lt;code>self.changeA&lt;/code> call will block. This is because the lock can only be acquired once.&lt;/p>
&lt;p>In this specific example, the straightforward way to fix the issue is to use an &lt;code>RLock&lt;/code>:
&lt;code>self.lock = RLock()&lt;/code>. The reentrant lock can be locked multiple times.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://theorangeduck.com/page/synchronized-python">https://theorangeduck.com/page/synchronized-python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances">https://stackoverflow.com/questions/29158282/how-to-create-a-synchronized-function-across-all-instances&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized">https://stackoverflow.com/questions/53026622/python-equivalent-of-java-synchronized&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock">https://stackoverflow.com/questions/16567958/when-and-how-to-use-pythons-rlock&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tools you should know about: moreutils</title><link>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p>
&lt;h2 id="sponge">sponge&lt;/h2>
&lt;blockquote>
&lt;p>sponge(1) - soak up standard input and write to a file&lt;/p>
&lt;/blockquote>
&lt;p>Here&amp;rsquo;s a typical workflow &lt;code>sponge(1)&lt;/code> is great at:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Given a file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Imagine that for whatever reason we want to replace &amp;#39;a&amp;#39; with &amp;#39;b&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Naively, we could try this:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> &amp;gt; myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># However the file becomes empty!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sponge comes to the rescue!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile | tr &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> | sponge myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat myfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is great to use &lt;code>sponge&lt;/code> in lieu of &lt;code>&amp;gt;&lt;/code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.&lt;/p>
&lt;h2 id="vidir">vidir&lt;/h2>
&lt;blockquote>
&lt;p>vidir(1) - edit directories and filenames&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>vidir(1)&lt;/code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open &lt;code>vidir&lt;/code> at the top-level directory of this blog repository, it opens up &lt;code>vim&lt;/code> (although it doesn&amp;rsquo;t need to be &lt;code>vim&lt;/code>, your &lt;code>$EDITOR&lt;/code> is honoured) with the following content:&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>If I make, say, the following modifications (lines 7 and 8):&lt;/p>
&lt;pre tabindex="0">&lt;code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
&lt;/code>&lt;/pre>&lt;p>And then save and quit &lt;code>vim&lt;/code> (&lt;code>:wq&lt;/code>), then the effect would have been the same as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ mv Makefile GNUMakefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mv README.md README.rst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I changed my mind and decided not to save the modifications, I could just do &lt;code>:cq&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s possible to leverage vim features such as &lt;code>.&lt;/code> (repeat command) and &lt;code>:%s/&lt;/code> (find and replace) to perform those mass file renames quickly and effectively. &lt;code>vidir&lt;/code> is a breeze to use!&lt;/p>
&lt;h2 id="ifne">ifne&lt;/h2>
&lt;blockquote>
&lt;p>ifne(1) - Run command if the standard input is not empty&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>ifne(1)&lt;/code> is effective when used with &lt;code>find&lt;/code> or &lt;code>fd&lt;/code> to keep shell pipes &amp;ldquo;happy&amp;rdquo;. Here&amp;rsquo;s one simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#e6db74">&amp;#39;*.cpp&amp;#39;&lt;/span> | xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should work as expected, but it&amp;rsquo;s cleaner to do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find . -name &lt;span style="color:#e6db74">&amp;#39;*.cpp&amp;#39;&lt;/span> | ifne xargs clang-format
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The added &lt;code>ifne&lt;/code> ensures the &lt;code>xargs&lt;/code> command is only executed if and only if &lt;code>find&lt;/code> yields at least one result in its output.&lt;/p>
&lt;p>This wasn&amp;rsquo;t a very practical example though: a more realistic way to use &lt;code>ifne&lt;/code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend &lt;code>ifne&lt;/code> to it:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ this | is | a | complicated | pipe
# assume &amp;#34;complicated&amp;#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
&lt;/code>&lt;/pre>&lt;h2 id="combine">combine&lt;/h2>
&lt;blockquote>
&lt;p>combine(1) - combine sets of lines from two files using boolean operations&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>combine(1)&lt;/code> is pretty much &lt;code>comm(1)&lt;/code>, but much more user-friendly. Given two files &lt;code>file1&lt;/code> and &lt;code>file2&lt;/code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&amp;rsquo;s one example to find the &lt;em>common lines&lt;/em> in &lt;em>both&lt;/em> files, compare &lt;code>combine&lt;/code> and &lt;code>comm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ combine file1 and file2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ comm -12 file1 file2 &lt;span style="color:#75715e"># flags are harder to remember&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Keychron K2 on macOS: fix Home and End keys</title><link>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://perrotta.dev/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p>
&lt;h2 id="expectations-vs-reality">Expectations vs Reality&lt;/h2>
&lt;p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&amp;rsquo;d expect:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Home&lt;/code> to position the text cursor in the beginning of the line (à la &lt;code>C-a&lt;/code> in emacs)&lt;/li>
&lt;li>&lt;code>End&lt;/code> to position the text cursor in the end of the line (à la &lt;code>C-e&lt;/code> in emacs)&lt;/li>
&lt;/ul>
&lt;p>The only way to provoke these effects &lt;em>out-of-the-box&lt;/em> is by pressing, respectively, the &lt;code>Cmd + Left&lt;/code> and &lt;code>Cmd + Right&lt;/code> shortcuts, as you would normally do in a Macbook laptop native keyboard.&lt;/p>
&lt;p>This is very annoying because it only happens in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys work just fine in both Linux and Windows. &lt;a href="https://www.reddit.com/r/Keychron/comments/ooice5/home_and_end_keys_not_working_on_monterrey/">A reddit user&lt;/a> reported the same issue in &lt;code>/r/keychron&lt;/code>, but the existing thread has no proposed solutions.&lt;/p>
&lt;h2 id="enter-karabiner-elements">Enter Karabiner Elements&lt;/h2>
&lt;p>I&amp;rsquo;ve always heard good things about &lt;a href="http://karabiner-elements.pqrs.org">Karabiner Elements&lt;/a> as a praised one-size-fits-all application for keyboards and macros in macOS, thus decided to give it a try. &lt;strong>Bonus points&lt;/strong>: it is &lt;a href="https://github.com/pqrs-org/Karabiner-Elements">open source&lt;/a>, released into the public domain.&lt;/p>
&lt;p>Upon installing it with &lt;a href="https://formulae.brew.sh/cask/karabiner-elements">Homebrew Cask&lt;/a> (&lt;code>brew install karabiner-elements&lt;/code>), I executed it. Then I needed to give a bunch of permissions to the application via &lt;code>macOS Settings &amp;gt; Security &amp;amp; Privacy &amp;gt; Privacy &amp;gt; Input Monitoring&lt;/code>. The following apps were whitelisted accordingly:&lt;/p>
&lt;ul>
&lt;li>&lt;code>karabiner_grabber&lt;/code>&lt;/li>
&lt;li>&lt;code>karabiner_observer&lt;/code>&lt;/li>
&lt;li>&lt;code>Karabiner-EventViewer.app&lt;/code>: this one is optional, but useful for debugging&lt;/li>
&lt;/ul>
&lt;p>The app is straightforward to use. It allows you to do all sorts of reactions to key codes input events.&lt;/p>
&lt;p>I had a simple idea: I wanted to map &lt;code>Home&lt;/code> to &lt;code>Cmd + Left&lt;/code>, and &lt;code>End&lt;/code> to &lt;code>Cmd + Right&lt;/code>.&lt;/p>
&lt;p>Unfortunately these are considered &amp;ldquo;Complex modifications&amp;rdquo; because they map one origin key to two destination keys. &amp;ldquo;Simple modifications&amp;rdquo; are &lt;em>one-to-one&lt;/em> key mappings. Why is it unfortunate? Because it doesn&amp;rsquo;t seem to be possible to do such mappings via the app UI. Apparently one needs to express those mappings in a &lt;code>.json&lt;/code> file instead.&lt;/p>
&lt;h2 id="ah-communities">Ah, communities&lt;/h2>
&lt;p>Sure, no problem, I was about to do it but then I realized there&amp;rsquo;s an &lt;a href="https://ke-complex-modifications.pqrs.org">official website&lt;/a> for community-maintained mappings. The website is well organized and curated. Why create something fully from scratch when I could just reuse an existing one?&lt;/p>
&lt;p>I found a &amp;ldquo;Keychron K2&amp;rdquo; category which made me instantly happy but it turned out not to be useful, as there were only two defined mappings therein:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard&lt;/li>
&lt;li>Remap some Keychrom K2(US) keys to make it less painful to switch from Macbook(RU) keyboard&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>None of these mattered to me. Then I searched for &lt;code>home to cmd&lt;/code> which led me to &lt;a href="https://ke-complex-modifications.pqrs.org/#HomeEnd">this entry&lt;/a>, which had exactly the mappings I wanted:&lt;/p>
&lt;blockquote>
&lt;p>Home and End&lt;/p>
&lt;ul>
&lt;li>Home to Command Left&lt;/li>
&lt;li>End to Command Right&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://ke-complex-modifications.pqrs.org/json/HomeEnd.json">Its resulting JSON&lt;/a> looks roughly like this (irrelevant bits stripped for the sake of brevity):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Home and End&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rules&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Home to Command Left&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manipulators&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;basic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;from&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;to&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;left_arrow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;modifiers&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;command&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;End to Command Right&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manipulators&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;basic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;from&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;end&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;to&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;right_arrow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;modifiers&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;command&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s conveniently an &lt;strong>Import&lt;/strong> button in the website though, which automatically opens the mappings in Karabiner Elements, so I didn&amp;rsquo;t even need to copy and paste the JSON.&lt;/p>
&lt;h2 id="verdict">Verdict&lt;/h2>
&lt;p>&lt;strong>End Result&lt;/strong>: It worked flawlessly! The only caveat is that from now on I need to keep the Karabiner Elements application running as a daemon, but it is well justified. Plus, if I ever need&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to map additional keys in the future, now I already have a workflow in place to do so.&lt;/p>
&lt;p>Karabiner is like having &lt;a href="https://qmk.fm">QMK&lt;/a> purely at the software layer, which works for any keyboard whatsoever.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>As of this writing: macOS Monterey: 12.3.1.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&lt;/a>&amp;hellip;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Wayland: from i3 to sway</title><link>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</link><pubDate>Sat, 19 Feb 2022 19:18:25 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/wayland-from-i3-to-sway/</guid><description>&lt;p>I&amp;rsquo;ve been giving Wayland a try. My window manager of choice in X11/Xorg is &lt;a href="https://i3wm.org/">&lt;code>i3&lt;/code>&lt;/a>, so the natural choice in Wayland is &lt;a href="https://swaywm.org/">&lt;code>sway&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;code>sway&lt;/code> works well with the &lt;code>i3&lt;/code> config out-of-the-box. A few adjustments were necessary for full compatibility. To maximize code reuse, I went with the following structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ tree ~/.config/&lt;span style="color:#f92672">{&lt;/span>i3,sway&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/i3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── i3.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/typhoon/.config/sway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── sway.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── config -&amp;gt; ../../../i3/.config/i3/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The master config is
&lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/config">&lt;code>~/.config/i3/config&lt;/code>&lt;/a>.
It is pretty standard, generated by
&lt;a href="https://build.i3wm.org/docs/i3-config-wizard.html">&lt;code>i3-config-wizard&lt;/code>&lt;/a> with
a few tweaks on top for my own workflow. It works for both &lt;code>i3&lt;/code> and &lt;code>sway&lt;/code>.
The config contains this snippet:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Load user configs if existing. Order is important.
include conf.d/*.conf
&lt;/code>&lt;/pre>&lt;p>The snippet allows drop-in customizations to live in &lt;code>conf.d&lt;/code>. The &lt;code>include&lt;/code> directive is a relatively &lt;a href="https://github.com/i3/i3/pull/4420">new&lt;/a> addition to the i3config syntax and it&amp;rsquo;s the main reason this setup is elegant and minimalist.&lt;/p>
&lt;ul>
&lt;li>i3-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/i3/.config/i3/conf.d/i3.conf">&lt;code>~/.config/i3/conf.d/i3.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with &lt;code>sway&lt;/code>, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># i3(1) only config file
# Commands herein are not compatible or interoperable with sway(1)
# Reference: https://i3wm.org/docs/userguide.html

# Autostart XDG applications (.desktop files).
# https://wiki.archlinux.org/title/XDG_Autostart
#
# Troubleshooting:
# dex -ade i3
exec dex --autostart --environment i3

# lock screen, Ctrl+Alt+l (systemd)
exec --no-startup-id xss-lock -l -- i3lock -c 222222
bindsym Ctrl+Mod1+l exec loginctl lock-session

# XF86AudioPlayPause is not recognized by sway, add it only to i3
# https://github.com/swaywm/sway/issues/4783
bindsym XF86AudioPlayPause exec playerctl play-pause

# show window title icon
for_window [all] title_window_icon on

set $bgcolor #526532
set_from_resource $black i3.color0
set_from_resource $red i3.color1
set_from_resource $green i3.color2
set_from_resource $white i3.color7
set_from_resource $gray i3.color8

# Theme colors
client.focused $bgcolor $bgcolor $white $green
client.focused_inactive $gray $gray $black $gray
client.unfocused $black $black $gray $black
client.urgent $red $red $white $red

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25

 colors {
 background $black
 statusline $white

 focused_workspace $bgcolor $bgcolor $white $black
 active_workspace $gray $gray $black $gray
 inactive_workspace $black $black $gray $gray
 urgent_workspace $red $red $white $green
 }
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s possible some of these configs will become compatible with &lt;code>sway&lt;/code> over time, but at the time of this writing they are not.&lt;/p>
&lt;ul>
&lt;li>sway-only config options live in &lt;a href="https://github.com/thiagowfx/.dotfiles/blob/master/sway/.config/sway/conf.d/sway.conf">&lt;code>~/.config/sway/conf.d/sway.conf&lt;/code>&lt;/a>. To give you an idea of what it looks like and which options aren&amp;rsquo;t compatible with i3, here&amp;rsquo;s a snapshot of my config in early 2022:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf"># sway(1) only config file
# Commands herein are not compatible or interoperable with i3(1)
# References:
# sway(5)
# https://github.com/swaywm/sway/wiki
# https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway

# HiDPI
output &amp;#34;*&amp;#34; scale 1.5

# Wallpaper
output &amp;#34;*&amp;#34; bg ~/.wallpaper fill

# Gaps a la i3-gaps
gaps inner 10

# XF86AudioPlayPause is not recognized by sway: xmodmap -pke | grep XF86AudioPlay
# https://github.com/swaywm/sway/issues/4783
bindcode 172 exec playerctl play-pause

# Start i3bar to display a workspace and status bar
bar {
 status_command i3status
 position top
 workspace_min_width 25
}

# restart i3 inplace (preserves layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r exec sway reload

# vim: ft=i3config
&lt;/code>&lt;/pre>&lt;p>Most of those are wayland-specific options.&lt;/p>
&lt;h2 id="quirks">Quirks&lt;/h2>
&lt;p>&lt;code>gaps&lt;/code> is available in &lt;code>i3&lt;/code> as well but only if you use
&lt;a href="https://github.com/Airblader/i3">&lt;code>i3-gaps&lt;/code>&lt;/a>, which generally I refuse to in
order to stay closer to vanilla/upstream &lt;code>i3&lt;/code>.&lt;/p>
&lt;p>The &lt;code>play-pause&lt;/code> multimedia key is
a &lt;a href="https://github.com/swaywm/sway/issues/4783">bug&lt;/a> I found on &lt;code>sway&lt;/code>. It&amp;rsquo;s quite
annoying, the workaround as you can see above is to use &lt;code>bindcode&lt;/code> instead of
&lt;code>bindsym&lt;/code>. For more details see the bug.&lt;/p>
&lt;p>In general &lt;code>sway&lt;/code> works very well out-of-the-box so long as you install
&lt;a href="https://wayland.freedesktop.org/xserver.html">XWayland&lt;/a> (&lt;code>xorg-xwayland&lt;/code> on
Arch Linux). XWayland &lt;strong>transparently&lt;/strong> proxies X11 apps to a X11 server that
runs inside wayland.&lt;/p>
&lt;p>It&amp;rsquo;s possible to detect those apps by running
&lt;a href="https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html">&lt;code>xprop&lt;/code>&lt;/a> and
trying to click a window: If you cannot do it, then the window is not a X11
app. Alternatively
&lt;a href="https://unix.stackexchange.com/questions/162769/what-is-the-purpose-of-xeyes">&lt;code>xeyes&lt;/code>&lt;/a>
is another way to detect them.&lt;/p>
&lt;p>To achieve a 100% Xorg/X11-free experience with pure wayland, just add
&lt;code>xwayland disable&lt;/code> to the &lt;code>sway&lt;/code> config. I wouldn&amp;rsquo;t recommend that though, most
Linux GUI apps aren&amp;rsquo;t Wayland ready and will probably never be. To put it
another way, X11/Xorg will take a long time (if ever) to disappear the same way
that IPv4 will take a long time (if ever) to let IPv6 completely replace it.
That&amp;rsquo;s life.&lt;/p>
&lt;p>X11 apps look a bit blurry in a 4K monitor with scaled DPI (&amp;gt;96) when they run
inside Wayland with XWayland. I am not particularly bothered by that, but it&amp;rsquo;s
noticeable.&lt;/p>
&lt;p>There&amp;rsquo;s no need to replace all of your small &lt;code>i3&lt;/code> Xorg utilities with wayland
ones. For example, &lt;a href="https://github.com/davatorium/rofi">&lt;code>rofi&lt;/code>&lt;/a> (application
launcher) works just fine (no need for &lt;code>wofi&lt;/code>). The stock &lt;code>i3&lt;/code> bar (&lt;code>sway&lt;/code> bar?)
works just fine, there&amp;rsquo;s no need for &lt;code>polybar&lt;/code> or &lt;code>waybar&lt;/code>.&lt;/p>
&lt;p>Some utilities need to be replaced though. For example, &lt;code>dunst&lt;/code> (notification
daemon) does not seem to work with &lt;code>sway&lt;/code> out-of-the-box, &lt;code>mako&lt;/code> seems to be a
recommended replacement. &lt;code>i3lock&lt;/code> (lock screen) also does not work, &lt;code>sway&lt;/code>
comes with its own screen lock directives. Screenshotters (e.g. &lt;code>scrot&lt;/code>) will
also need to be replaced.&lt;/p>
&lt;p>The system tray does not seem to work fine out-of-the-box. I haven&amp;rsquo;t
investigated much to figure out what&amp;rsquo;s wrong with it.&lt;/p>
&lt;p>I was looking for a display manager that works well with both X11 and Xorg and
ended up trying &lt;a href="https://git.sr.ht/~kennylevinsen/greetd">&lt;code>greetd&lt;/code>&lt;/a>,
&lt;a href="https://github.com/tvrzna/emptty/">&lt;code>emptty&lt;/code>&lt;/a> and
&lt;a href="https://github.com/fairyglade/ly">&lt;code>ly&lt;/code>&lt;/a>, in that order. &lt;code>ly&lt;/code> is in my opinion
the best one in terms of balancing simplicity and usefulness.&lt;/p>
&lt;p>&lt;code>sway&lt;/code> / &lt;code>XWayland&lt;/code> doesn&amp;rsquo;t source &lt;code>~/.Xresources&lt;/code>. This is an issue if you
rely on customizations therein. It does source &lt;code>~/.Xdefaults&lt;/code> though!
Leveraging this, I did the following changes:&lt;/p>
&lt;ul>
&lt;li>(i) &lt;code>~/.Xresources&lt;/code> sources &lt;code>~/.Xdefaults&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to X11 only.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xdefaults &lt;span style="color:#66d9ef">for&lt;/span> settings that apply to both X11 and Wayland &lt;span style="color:#f92672">(&lt;/span>xorg-xwayland&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include &amp;#34;.Xdefaults&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Source:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -merge ~/.Xresources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Dump all properties:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Check &lt;span style="color:#66d9ef">if&lt;/span> DPI is set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! xrdb -q | grep -i dpi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! HiDPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Common values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">96&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x1.0, baseline&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">144&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x1.5&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#ae81ff">192&lt;/span> &lt;span style="color:#f92672">(&lt;/span>x2.0, HiDPI&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*.dpi: &lt;span style="color:#ae81ff">144&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>(ii) &lt;code>~/.Xdefaults&lt;/code> holds my customizations that originally lived in &lt;code>~/.Xresources&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.Xdefaults
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! These settings apply to both X11 and Wayland &lt;span style="color:#f92672">(&lt;/span>xorg-xwayland&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>! Use ~/.Xresources &lt;span style="color:#66d9ef">for&lt;/span> X11-only settings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.antialias: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Xft.hinting: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In principle I could just have symlinked them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ln -s ~/.Xresources ~/.Xdefaults
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reason why I didn&amp;rsquo;t do it is to avoid double scaling (DPI). You see, my
&lt;code>sway&lt;/code> config already sets DPI / scaling to 1.5x. If we do that in
&lt;code>~/.Xdefaults&lt;/code> as well then Xorg applications would have been scaled twice.&lt;/p>
&lt;h2 id="closing-remarks">Closing remarks&lt;/h2>
&lt;p>In general Wayland / &lt;code>sway&lt;/code> works reasonably well out-of-the-box in 2022, but
tiny adjustments are still necessary, and it isn&amp;rsquo;t as polished as it could have
been. Furthermore, my workflow is very simple. Try sharing your screen in a
video call in Wayland and you&amp;rsquo;ll run into other quirks. I have mixed feelings
and wouldn&amp;rsquo;t necessarily recommend it. I wouldn&amp;rsquo;t give an anti recommendation
either. It&amp;rsquo;s complicated&amp;hellip;even though Wayland is supposed to overcome some X11
/ Xorg limitations, as a client and without knowing its internals I fail to see
its advantages.&lt;/p></description></item><item><title>nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p>
&lt;p>For simplicity, think of &lt;code>nix-env&lt;/code> as a package manager, akin to &lt;code>apk&lt;/code>,
&lt;code>pacman&lt;/code>, &lt;code>brew&lt;/code>, &lt;code>apt&lt;/code>, &lt;code>pkg&lt;/code>, etc.&lt;/p>
&lt;h2 id="install-a-package">Install a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#e6db74">&amp;#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I see some guides using &lt;code>nix-env -iA&lt;/code> but &lt;code>-i&lt;/code> seems to suffice. We could
optionally specify the &lt;code>nixpkgs.&lt;/code> prefix:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#e6db74">&amp;#39;nixpkgs.moreutils&amp;#39;&lt;/span> matches no derivations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh no! Maybe that&amp;rsquo;s what the &lt;code>-A&lt;/code> is for?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -iA nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replacing old &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Indeed! Apparently that &lt;code>-A&lt;/code> thing stands for attribute. The only thing I know
is that there are both &lt;code>nixpkgs.*&lt;/code> and &lt;code>nixos.*&lt;/code>. But I don&amp;rsquo;t care about NixOS
at this point. I&amp;rsquo;ll just ignore &lt;code>-A&lt;/code> from now on, for the time being.&lt;/p>
&lt;h2 id="list-installed-packages">List installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! This actually gets displayed in my &lt;code>less&lt;/code> pager.&lt;/p>
&lt;h2 id="upgrade-installed-packages">Upgrade installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&amp;rsquo;s some update to one of my
installed CLI applications. I&amp;rsquo;ve heard there&amp;rsquo;s something called nix channel to
control that. Leaving it for another day though.&lt;/p>
&lt;p>&lt;strong>Update(2022-02-18)&lt;/strong>: I learned that &lt;code>nix-env -u&lt;/code> is akin to &lt;code>apt upgrade&lt;/code> or
&lt;code>apk upgrade&lt;/code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
&lt;code>apt update&lt;/code> or &lt;code>apk update&lt;/code>, use &lt;code>nix-channel --update&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: On macOS this needs to be &lt;code>sudo -i nix-channel --update&lt;/code>. See
&lt;a href="https://github.com/NixOS/nix/issues/3595">issue&lt;/a>.&lt;/p>
&lt;h2 id="uninstall-a-package">Uninstall a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env --uninstall moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uninstalling &lt;span style="color:#e6db74">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#e6db74">&amp;#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;h2 id="search-for-packages">Search for packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP &lt;span style="color:#e6db74">&amp;#39;.*moreutils.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.*&lt;/code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &amp;lsquo;derivation&amp;rsquo; in Nix):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nixpkgs.moreutils moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I write the wrong package name, the following happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#e6db74">&amp;#39;moreutil&amp;#39;&lt;/span> matches no derivations, maybe you meant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moreutils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It was helpful in this case, but I wouldn&amp;rsquo;t always count on that. It is a bit
annoying that there&amp;rsquo;s no &lt;code>nix search moreutils&lt;/code> command, but it seems that
&lt;code>nix-env&lt;/code> is very heavily tailored to use short flags, just like &lt;code>pacman&lt;/code> in
Arch Linux. I got used to &lt;code>pacman&lt;/code>, hopefully I can get used to the &lt;code>nix-env&lt;/code>
short flags at some point.&lt;/p>
&lt;p>Actually I tried it out and there is a &lt;code>nix search&lt;/code> command!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix search moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: experimental Nix feature &lt;span style="color:#e6db74">&amp;#39;nix-command&amp;#39;&lt;/span> is disabled; use &lt;span style="color:#e6db74">&amp;#39;--extra-experimental-features nix-command&amp;#39;&lt;/span> to override
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This isn&amp;rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the &lt;code>nix-env&lt;/code> form for now.&lt;/p>
&lt;p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>atool-0.39.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-interactive-5.1-p12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coreutils-9.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exa-0.10.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fpp-0.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fzf-0.29.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git-2.34.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>htop-3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo-0.92.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jq-1.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>less-600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ncdu-1.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl5.34.0-ack-3.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranger-1.9.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stow-2.3.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmux-3.2a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree-1.8.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim-8.2.4186
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watch-procps-3.3.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget-1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zoxide-0.8.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were very intuitive to find, with the exception of &lt;code>ack&lt;/code> and &lt;code>bash-interactive&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bash&lt;/code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
&lt;code>~/.bashrc&lt;/code> wrecked havoc with the non-interactive version.&lt;/li>
&lt;li>&lt;code>ack&lt;/code> is very oddly named. Really. Also: &lt;code>nix-env -i ack&lt;/code> doesn&amp;rsquo;t work, but
&lt;code>nix-env -iA nixpkgs.ack&lt;/code> does. I suspect it will be hard to ignore &lt;code>-A&lt;/code> in
the future.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Strictly speaking there&amp;rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, &lt;a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu&lt;/a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>SSH plus tmux automatically</title><link>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</link><pubDate>Sun, 13 Feb 2022 20:20:27 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/ssh-plus-tmux-automatically/</guid><description>&lt;p>One of the most classic sysadmin/DevOps tasks is to use secure shell to connect to remote machines.&lt;/p>
&lt;p>To persist those connections, a terminal multiplexer is often used, &lt;code>tmux&lt;/code> and &lt;code>screen&lt;/code> being the two most popular ones.&lt;/p>
&lt;p>In this post I will cover a few different client-side and server-side ways to have &lt;code>ssh&lt;/code> automatically spawn &lt;code>tmux&lt;/code> upon connection.&lt;/p>
&lt;h2 id="option-1-use-command-line-ssh-flags-client-side-recommended">Option #1: Use command-line ssh flags (client-side, recommended)&lt;/h2>
&lt;p>Start &lt;code>tmux&lt;/code>, forcing unicode, attaching to and/or creating a session named &lt;em>main&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-u&lt;/code> is not strictly necessary, however I experienced occasional weirdness when connecting to some machines and omitting it. Some unicode characters wouldn&amp;rsquo;t be properly rendered, like the horizontal and vertical lines used to render tmux pane splits. Even though most machines should work just fine these days by supporting UTF-8 out-of-the-box, it&amp;rsquo;s safer to always include &lt;code>-u&lt;/code> just in case.&lt;/p>
&lt;p>Tip: If it&amp;rsquo;s annoying to remember to type the full command above, consider adding an &lt;code>alias&lt;/code> in your shell config. Alternatively, use a ssh client that remembers your flags preferences such as the &lt;a href="https://chrome.google.com/webstore/detail/secure-shell/iodihamcpbpeioajjeobimgagajmlibd?hl=en">chrome secure shell&lt;/a> extension.&lt;/p>
&lt;h2 id="option-2-use-sshconfig-client-side">Option #2: Use &lt;code>~/.ssh/config&lt;/code> (client-side)&lt;/h2>
&lt;p>This option is very similar to the previous one, but the flags live in the ssh config rather then being specified at the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.ssh/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestTTY yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RemoteCommand tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You don&amp;rsquo;t need to match all hosts (&lt;code>Host *&lt;/code>), if you&amp;rsquo;d rather match one or more specific hosts, refer to the ssh config syntax &lt;code>ssh_config(5)&lt;/code> to add them. A simple example would be &lt;code>Host mymachine.example.org&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Caveat&lt;/strong>: I&amp;rsquo;ve found this method interferes with &lt;code>git&lt;/code> + &lt;code>ssh&lt;/code> authentication. More specifically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git remote -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>origin	git@github.com:thiagowfx/.dotfiles.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cannot execute command-line and remote command.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: Could not read from remote repository.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please make sure you have the correct access rights
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>and the repository exists.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Therefore I discourage it, unless you only use it with specific hosts i.e. don&amp;rsquo;t use it with &lt;code>Host *&lt;/code>.&lt;/p>
&lt;h2 id="option-3-use-bash_profile-or-similar-server-side-recommended">Option #3: Use &lt;code>~/.bash_profile&lt;/code> or similar (server-side, recommended)&lt;/h2>
&lt;p>This method leverages your login shell startup config file (&lt;code>~/.bash_profile&lt;/code>, &lt;code>~/.zprofile&lt;/code>, etc) to automatically spawn &lt;code>tmux&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This file is invoked as part of my ~/.bash_profile.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat ~/.profile.d/tmux_auto_ssh.sh.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Automatically spawn tmux within ssh sessions for interactive terminals.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://stackoverflow.com/a/43819740/1745064&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The session is called `main`.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a session with PREFIX :new, rename with PREFIX $, toggle with PREFIX s.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Escape hatch:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ssh &amp;lt;host&amp;gt; -t -- NOTMUX=1 &amp;lt;shell&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$NOTMUX&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -z &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TMUX&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$SSH_TTY&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $- &lt;span style="color:#f92672">=&lt;/span>~ i &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmux -u new -A -s main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>if&lt;/code> basically checks:&lt;/p>
&lt;ul>
&lt;li>whether we&amp;rsquo;re not already inside a tmux session (we shouldn&amp;rsquo;t be), so that we don&amp;rsquo;t nest &lt;code>tmux&lt;/code>&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing the shell via &lt;code>ssh&lt;/code> (we should be)&lt;/li>
&lt;li>whether we&amp;rsquo;re accessing an interactive shell (we should be), so that it doesn&amp;rsquo;t interfere with oneshot &lt;code>ssh&lt;/code> commands&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s also a escape hatch. If you want to get an interactive shell but bypass &lt;code>tmux&lt;/code> for some reason&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, just set &lt;code>NOTMUX=1&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ssh user@host -t -- NOTMUX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>My favorite methods are #1 and #3, and whether I use one or the other depends whether I want to unconditionally spawn &lt;code>tmux&lt;/code> server-side, or selectively spawn &lt;code>tmux&lt;/code> client-side.&lt;/p>
&lt;p>When using chrome secure shell (hterm) I find #1 convenient because hterm remembers your &lt;code>ssh&lt;/code> host settings. That said, in scenarios where I fully control a host and it&amp;rsquo;s not solely used for production, #3 is my favorite as it works unconditionally regardless of the client terminal emulator I am using.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For example, maybe if &lt;code>tmux&lt;/code> broke due to a recent upgrade, or if the &lt;code>~/.tmux.conf&lt;/code> is invalid.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>systemd: share environment variables with xorg</title><link>https://perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</link><pubDate>Mon, 31 Jan 2022 21:38:54 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/systemd-share-environment-variables-with-xorg/</guid><description>&lt;p>In this post we will learn how to share environment variables (e.g.
&lt;code>$GDK_SCALE&lt;/code>) between a system user session and X11/Xorg.&lt;/p>
&lt;p>The typical &lt;a href="https://wiki.archlinux.org/title/Xinit">&lt;code>~/.xinitrc&lt;/code>&lt;/a> and/or &lt;a href="https://wiki.archlinux.org/title/Xprofile">&lt;code>~/.xprofile&lt;/code>&lt;/a> setup in
2020s involves some environment variable exports such as the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fix java application decorations, for tiling window managers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export _JAVA_AWT_WM_NONREPARENTING&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export DESKTOP_SESSION&lt;span style="color:#f92672">=&lt;/span>gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HiDPI settings for GTK3+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GDK_DPI_SCALE&lt;span style="color:#f92672">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GDK_SCALE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HiDPI settings for QT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export QT_FONT_DPI&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This particular set of customizations stems from my &lt;a href="https://github.com/thiagowfx/.dotfiles">dotfiles&lt;/a> but
there isn&amp;rsquo;t anything special about it. I&amp;rsquo;ll include an explanation anyway for
completeness:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The java setting is meant for launching certain java-based applications from
within a tiling window manager.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>All the other settings are meant for 4K HiDPI displays. The baseline DPI is
96, which is too small for 4K monitors, the fonts and icons all look tiny. In
order to make them scale it&amp;rsquo;s necessary to use a higher DPI. Typical setups
use either 144 (x1.5) or 192 (x2.0), the bigger the DPI the bigger fonts and
icons will appear in the screen.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Those exports work well for graphical applications launched from your favorite
window manager after it has already started, however if you decide to launch an
application from &lt;code>systemd&lt;/code>, those settings will not be picked up by it.&lt;/p>
&lt;p>For example, if you decide to manage &lt;a href="http://jonls.dk/redshift/">&lt;code>redshift&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (more
specifically, &lt;code>redshift-gtk&lt;/code> which has a system tray app) from a systemd user
session&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, its fonts will look small.&lt;/p>
&lt;p>There are several ways to address this issue.&lt;/p>
&lt;p>One of them is to edit the service file directly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl --user edit redshift-gtk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then add:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Unit]
Environment=GDK_SCALE=2 GDK_DPI_SCALE=0.5
&lt;/code>&lt;/pre>&lt;p>Which results in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.config/systemd/user/redshift-gtk.service.d/override.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Environment&lt;span style="color:#f92672">=&lt;/span>GDK_SCALE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> GDK_DPI_SCALE&lt;span style="color:#f92672">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which you can make effective by:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl --user daemon-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ systemctl --user restart redshift-gtk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am not a fan of this approach though, because this step would need to be repeated
to all service files you want to manage this way. There&amp;rsquo;s a better, &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY&lt;/a> way to
do so.&lt;/p>
&lt;p>&lt;code>systemd&lt;/code> supports &lt;a href="https://www.freedesktop.org/software/systemd/man/environment.d.html">environment
files&lt;/a>
(&lt;code>environment.d(5)&lt;/code>). User-defined ones live in
&lt;code>~/.config/environment.d/*.conf&lt;/code> by default.&lt;/p>
&lt;p>This means we could produce the following file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.config/environment.d/user.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># systemd environment.d(5) EnvironmentFile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://www.freedesktop.org/software/systemd/man/environment.d.html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Do not use export here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Alternatively&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># systemctl --user import-environment [var1] [var2] [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Troubleshooting&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># systemctl --user show-environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fix java application decorations, for tiling window managers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_JAVA_AWT_WM_NONREPARENTING&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># make Chrome pick up proxy settings stored in gconf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DESKTOP_SESSION&lt;span style="color:#f92672">=&lt;/span>gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HiDPI settings for GTK3+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GDK_DPI_SCALE&lt;span style="color:#f92672">=&lt;/span>0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GDK_SCALE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># HiDPI settings for QT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QT_FONT_DPI&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">192&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which is applied to all systemd user service files automatically, no need to
set &lt;code>Environment=&lt;/code> manually everywhere.&lt;/p>
&lt;p>However, now we need to maintain two different files: the systemd &lt;code>.conf&lt;/code> one
and the xorg &lt;code>~/.xinitrc&lt;/code> one.&lt;/p>
&lt;p>One elegant way to reduce maintenance burden is, in my opinion, the follownig:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/.xinitrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Parse user session environment variables.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This file is shared with the systemd user instance.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Export all variables: https://stackoverflow.com/a/30969768/1745064&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span> -r ~/.config/environment.d/user.conf &lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> . ~/.config/environment.d/user.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set +a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It does what you expect: the underlying shell sources the &lt;code>*.conf&lt;/code> file as if
you were &lt;code>export&lt;/code>ing each variable therein.&lt;/p>
&lt;p>One caveat of this setup is that you cannot define the variables
dynamically; for example, with subshells, with external programs, or with
simple mathematical operations derived from other variables&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Ultimately though you end up with only one file to manage, which is the systemd one.
&lt;a href="https://en.wikipedia.org/wiki/KISS_principle">KISS&lt;/a>™.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/963/">&lt;img src="https://imgs.xkcd.com/comics/x11.png"
 alt="Thomas Jefferson thought that every law and every constitution should be torn down and rewritten from scratch every nineteen years--which means X is overdue.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Redshift adjusts the color temperature of your screen according to your
surroundings. This may help your eyes hurt less if you are working in front
of the screen at night. Redshift is similar to &lt;a href="https://justgetflux.com/">f.lux&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;code>systemctl --user start redshift&lt;/code>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For example, &lt;code>QT_FONT_DPI=$(($GDK_SCALE * 96))&lt;/code> or similar.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Watch files and react to changes during development</title><link>https://perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</link><pubDate>Sun, 30 Jan 2022 21:32:17 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/watch-files-and-react-to-changes-during-development/</guid><description>&lt;p>This post describes some tooling usages to watch for file changes and run or reload a command whenever they happen.&lt;/p>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>I am contributing to &lt;a href="https://github.com/miniflux/v2">miniflux&lt;/a>, a minimalist and opinionated RSS reader. Miniflux&amp;rsquo;s stack is as minimalist as the app itself: It&amp;rsquo;s a Golang application that connects to a local PostgreSQL database. It has a well-documented and comprehensive &lt;a href="https://github.com/miniflux/v2/blob/master/Makefile">&lt;code>Makefile&lt;/code>&lt;/a>.&lt;/p>
&lt;p>In order to achieve an edit-and-preview workflow for quick prototyping and local iteration, all that it&amp;rsquo;s needed is to execute &lt;code>make run&lt;/code> whenever any&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> file in the repository is changed.&lt;/p>
&lt;p>My goal was to achieve that workflow with the least amount of friction, and with an application that is widely available in most package managers / linux distributions out there.&lt;/p>
&lt;h2 id="option-1-entr-recommended">Option #1: entr (recommended)&lt;/h2>
&lt;p>&lt;a href="https://eradman.com/entrproject/">&lt;code>entr(1)&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Run arbitrary commands when files change&lt;/p>
&lt;/blockquote>
&lt;p>The following invocation does the job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fd | entr -r -- make run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, we could do better. From the upstream docs:&lt;/p>
&lt;blockquote>
&lt;p>» ag and ack offer many advantages over utilities such as find(1) or ls(1) in that they recognize files by their contents and are smart enough to skip directories such as .git&lt;/p>
&lt;/blockquote>
&lt;p>I am happy with &lt;code>fd&lt;/code> for this use case though. To limit &lt;code>entr&lt;/code> to &lt;code>.go&lt;/code> files only, we could do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fd -e go | entr -r -- make run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It took me less than 5 minutes to install and figure out how to use &lt;code>entr&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://schauderbasis.de/posts/entr/">This blog post&lt;/a> covers it in more detail.&lt;/p>
&lt;h2 id="option-2-watchman">Option #2: watchman&lt;/h2>
&lt;p>&lt;a href="https://facebook.github.io/watchman/">&lt;code>watchman&lt;/code>&lt;/a> from Facebook Open Source:&lt;/p>
&lt;blockquote>
&lt;p>Watchman exists to watch files and record when they change. It can also trigger actions (such as rebuilding assets) when matching files change.&lt;/p>
&lt;/blockquote>
&lt;p>Watchman&amp;rsquo;s workflow doesn&amp;rsquo;t seem to be very suited for this job though. It&amp;rsquo;s much more centered on subscribing to &lt;code>inotify&lt;/code> events:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cd &amp;lt;repository root&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watchman watch .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;and then adding predefined actions to recompile parts of the application as they change. The official docs give an example with CSS minification:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># set up a trigger named &amp;#39;buildme&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># will run &amp;#39;minify-css&amp;#39; whenever a CSS file is changed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watchman -- trigger . buildme &lt;span style="color:#e6db74">&amp;#39;*.css&amp;#39;&lt;/span> -- minify-css
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this regard it seems to be more modular, and I could easily see a scenario where I would kick off several specialized triggers in a webdev project: for example, one for CSS minification, one for JS minification, another one for TypeScript compilation, etc.&lt;/p>
&lt;p>That said, for the simple use case of triggering (and reloading) &lt;code>make run&lt;/code>, it seems overkill. I also found its &lt;a href="https://facebook.github.io/watchman/docs/install.html">official docs&lt;/a> too verbose and lacking sample usages for simple &lt;code>Makefile&lt;/code>-based projects like miniflux.&lt;/p>
&lt;p>One caveat of &lt;a href="https://repology.org/project/watchman/versions">&lt;code>watchman&lt;/code>&lt;/a> is that it&amp;rsquo;s less widely available than &lt;a href="https://repology.org/project/entr/versions">&lt;code>entr&lt;/code>&lt;/a>. Another caveat is that recently official distributions of watchman seem to be binary only, even though watchman itself is open source.&lt;/p>
&lt;p>It took me several minutes to figure out what&amp;rsquo;s the gist of watchman, only to realize it is more bloated than warranted.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>For simple projects, &lt;code>entr&lt;/code> is the way to go, hands down. For complex webdev projects, I would look into &lt;code>watchman&lt;/code> more deeply.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>To be truly strict, only changes to &lt;code>.go&lt;/code> files matter.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code</title><link>https://perrotta.dev/2022/01/advent-of-code/</link><pubDate>Fri, 28 Jan 2022 17:44:00 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/advent-of-code/</guid><description>&lt;p>Last year I found out about &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>.&lt;/p>
&lt;h2 id="you-said-what">You said what?&lt;/h2>
&lt;p>&lt;strong>Advent of Code&lt;/strong> by &lt;a href="http://was.tl/">Eric Wastl&lt;/a> happens every year since 2015, every December from the 1st to
the 25th. Each day there&amp;rsquo;s a new programming challenge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> split into two
parts. The first part tends to be easier than the second one. The second part
usually builds upon the first one, being a follow-up task that requires more
steps and/or with a higher degree of complexity. You can&amp;rsquo;t always reuse the
bits from the first part to solve the second one though.&lt;/p>
&lt;p>For those familiar with programming contests like &lt;a href="https://icpc.global/">ACM ICPC&lt;/a> or &lt;a href="https://olimpiada.ic.unicamp.br/">OBI&lt;/a>, or online judges like &lt;a href="https://www.spoj.com/">SPOJ&lt;/a> or &lt;a href="https://onlinejudge.org/">UVa&lt;/a>, advent of code feels like home. The main difference is that there is no time pressure and no need to write spaghetti and unreadable code; in fact, writing readable and elegant solutions is encouraged (&lt;em>citation needed&lt;/em>&amp;hellip;).&lt;/p>
&lt;p>For those familiar with FAANG/Tech whiteboard interviews, advent of code feels a lot like a typical interview. I would even go further and say it&amp;rsquo;s a great way to practice for interviews.&lt;/p>
&lt;p>It is a great moment to either (i) learn a new exciting programming language or (ii) improve your mastery on programming languages that you already know. I know several people (see below) that used AoC&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to learn Rust or Kotlin or whatever else was exciting for them at the time. It&amp;rsquo;s surprising that the official Kotlin Docs even contain a section called &lt;a href="https://kotlinlang.org/docs/advent-of-code.html">Advent of Code puzzles in idiomatic Kotlin&lt;/a>.&lt;/p>
&lt;p>Some folks go even further and use it to practice their &lt;a href="https://codegolf.stackexchange.com/questions/216024/advent-of-code-2020-day-2-part-1">code golfing&lt;/a>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> or even &lt;a href="https://ryxcommar.com/2021/12/04/advent-of-code-2021-in-google-sheets-first-4-days/">Google Sheets&lt;/a> skills. I have a deep amount of respect for them as it&amp;rsquo;s quite a challenge. If you think it stops there, I&amp;rsquo;ve also seen solutions in &lt;a href="https://github.com/phillbush/aoc">awk&lt;/a> and &lt;a href="https://twitter.com/_rsc/status/1476683352493207561">sed&lt;/a>.&lt;/p>
&lt;p>Another positive aspect of AoC is that it has an integrated dashboard that tracks your progress as you go. It&amp;rsquo;s a simple element of gamification that immensely improves motivation and fun. You really feel a big desire to collect all those 50 stars&amp;hellip;&lt;/p>
&lt;h2 id="what-about-me">What about me?&lt;/h2>
&lt;p>My goal for 2021 was relatively less ambitious than that, I just wanted to improve my Python skills, more specifically Python 3. I learned Python 2 during my first year in university and used it sparingly at work and for personal endeavours, but always had a knowledge gap in Python 3.&lt;/p>
&lt;p>I set up a public git repository with &lt;a href="https://github.com/thiagowfx/adventofcode">my solutions&lt;/a> and aspired to write simple and elegant python, my only &lt;a href="https://frantic.im/no-constraints-no-fun/">constraint&lt;/a> was to limit myself to what is available in the standard library of a vanilla python3 installation in Alpine linux, with the exception of &lt;a href="https://numpy.org/">&lt;code>numpy&lt;/code>&lt;/a> which is widespread enough to deserve an entry in my &lt;a href="https://github.com/thiagowfx/adventofcode/blob/master/requirements.txt">&lt;code>requirements.txt&lt;/code>&lt;/a>, and of course devtools like debuggers, linters and auto formatters as needed.&lt;/p>
&lt;p>As an additional, non-programming challenge I also limited myself to only use the command line. This basically meant no IDEs&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. My programming environment was ultimately &lt;code>ssh&lt;/code> to an Alpine Linux VPS + &lt;code>tmux&lt;/code> + &lt;code>vim&lt;/code>. To make my life easier, one of the first tasks I accomplished was to write a generic &lt;a href="https://github.com/thiagowfx/adventofcode/blob/master/2022/Makefile">&lt;code>Makefile&lt;/code>&lt;/a> to help me test and run my scripts. A typical invocation would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ make DEBUG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> DAY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;whereas I could choose between the sample input versus the real one with &lt;code>DEBUG&lt;/code>, and the puzzle day with &lt;code>DAY&lt;/code>.&lt;/p>
&lt;p>Was the experience worth it? &lt;strong>Definitely yes&lt;/strong>! Even though I only completed ~8 puzzles out of the 25 ones due to having my attention split with another project I was working on at the time, the thematic submarine puzzles were hella fun and I learned a lot of python 3 on the way.&lt;/p>
&lt;p>A few highlights of what I learned &lt;em>and used&lt;/em> from my python &lt;code>2to3&lt;/code> transition were f-strings / string interpolation (&lt;code>print(f'The sum is {sum}')&lt;/code>), &amp;ldquo;everything is an iterator now&amp;rdquo; even &lt;code>map&lt;/code> and &lt;code>range&lt;/code>, the standard library is awesome and sometimes you stumble upon useful abstractions like &lt;code>Counter&lt;/code> and &lt;code>defaultdict&lt;/code>, &lt;code>sort&lt;/code> is different now (&lt;code>key&lt;/code> instead of comparison function), this &lt;code>pdb&lt;/code> debugger thingy, among other topics I can&amp;rsquo;t remember at the moment. I realized the only concept that was previously familiar was the different syntax of the &lt;code>print&lt;/code> function (you have to use parentheses now).&lt;/p>
&lt;p>In terms of workflow, I also learned that virtual environments are now
supported natively&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> (&lt;code>python -m venv&lt;/code>), &lt;a href="https://perrotta.dev/2022/01/direnv-automate-your-environment-variables/">&lt;code>direnv&lt;/code>&lt;/a> is an amazing tool to
automate/manage environments in git repositories and also happens to have
first-class python integration, &lt;code>pylint&lt;/code> and &lt;code>autopep8&lt;/code> are good integrations
with &lt;code>vim&lt;/code> to help spot basic errors and/or suggest best practices, and &lt;code>numpy&lt;/code> takes forever to build from source.&lt;/p>
&lt;h2 id="what-about-the-community">What about the community?&lt;/h2>
&lt;p>AoC enjoys a lot of popularity and zeitgeist, especially during times of the COVID-19 pandemic, but even before then. There&amp;rsquo;s a large &lt;a href="https://www.reddit.com/r/adventofcode/">/r/adventofcode&lt;/a> subreddit community, lots of people share their solution snippets and impressions on Twitter (&lt;a href="https://twitter.com/search?q=%23adventofcode&amp;amp;src=typed_query">#AdventOfCode&lt;/a>), there&amp;rsquo;s a ton of public git repositories on &lt;a href="https://github.com/search?q=adventofcode">GitHub&lt;/a> where people share their coding solutions, in pretty much any programming language you can think of, and finally there are many screencasts on &lt;a href="https://www.youtube.com/results?search_query=advent+of+code">YouTube&lt;/a>. The Internet in the 2020s sparks creativity in every unimaginable corner.&lt;/p>
&lt;p>There&amp;rsquo;s so much information that it&amp;rsquo;s impossible to stay on top of everything. Here is a small list of repositories that I followed this year, most of those are acquaintances/friends and/or stumbled upon Twitter:&lt;/p>
&lt;p>C++:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/riuri/adventofcode">https://github.com/riuri/adventofcode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Python:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sjvrijn/AdventofCode">https://github.com/sjvrijn/AdventofCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/oomenn/AOC">https://github.com/oomenn/AOC&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Rust:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dimo414/advent-2021">https://github.com/dimo414/advent-2021&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mfs/aoc">https://github.com/mfs/aoc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Edit (2024-08-06)&lt;/strong>: Additions from 2022:&lt;/p>
&lt;p>C++:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eariassoto/advent-of-code-cpp">https://github.com/eariassoto/advent-of-code-cpp&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Python:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/achrafmam2/adventofcode">https://github.com/achrafmam2/adventofcode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mcerdeiro/aoc2022">https://github.com/mcerdeiro/aoc2022&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I find it&amp;rsquo;s really constructive and useful (and also &lt;em>fun&lt;/em>) to peek at other people&amp;rsquo;s solutions after I coded my own. I have extensive (albeit kinda rusty these days) experience with C++ so I wanted to follow at least one repository coded with it; since I wrote my solutions in python it was also a natural choice to follow a few python repositories; and, finally, I wanted to peek at some languages I am not familiar with to get a gist of them. This year I watched Rust and a few bits of Clojure and Kotlin on Twitter.&lt;/p>
&lt;p>Finally, for some extra inspiration, there are also some &lt;em>10x programmers&lt;/em>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> out there that seem to be fans of AoC as well: &lt;a href="https://github.com/norvig/pytudes">Peter Norvig&lt;/a> and &lt;a href="https://twitter.com/_rsc/status/1466089522718986241">Russ Cox (&lt;em>rsc&lt;/em>)&lt;/a>. There are probably several others I am not aware of.&lt;/p>
&lt;h2 id="final-remarks">Final remarks&lt;/h2>
&lt;p>I am hoping to participate in AoC this year (2022) as well, and possibly revisit the 2021 puzzles and resolve the rest of the ones I missed as time permits.&lt;/p>
&lt;p>Hopefully this post encourages and motivates you to try Advent of Code as well! Happy coding.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Or puzzle, if you will.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Acronym not to be confused with a certain &lt;del>annoying&lt;/del>^W politician.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For those unfamiliar with the concept, code golfing is all about writing a correct solution with the &lt;strong>fewest&lt;/strong> amount of characters.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>For example: PyCharm, and also VSCode, which is getting so big these days I don&amp;rsquo;t even know if it&amp;rsquo;s possible to just call it a simple text editor anymore.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Back in the days, &lt;code>virtualenvwrapper&lt;/code> was all the rage.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>The &lt;em>10x programmer&lt;/em> thing is a well-known joke however in this instance the mentioned characters are indeed superb programmers that I immensely respect.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine Linux: New APKBUILD Workflow</title><link>https://perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</link><pubDate>Sun, 23 Jan 2022 19:15:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/alpine-linux-new-apkbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>APKBUILDs&lt;/code> for the
&lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository in &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>First of all, this post is not a substitute to the &lt;a href="https://wiki.alpinelinux.org/wiki/Main_Page">AlpineWiki&lt;/a>
and it will likely get outdated at some point. In particular, refer to the
following articles for up-to-date documentation that will outlive this blog:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers">https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Aports_tree">https://wiki.alpinelinux.org/wiki/Aports_tree&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This article is not a tutorial, as such it assumes you already know what an
&lt;code>APKBUILD&lt;/code> is and how to use &lt;code>abuild&lt;/code>. In particular, you should have the
&lt;code>alpine-sdk&lt;/code>, &lt;code>atools&lt;/code> and &lt;code>spdx-licenses-list&lt;/code> packages installed in your
system.&lt;/p>
&lt;h2 id="structure">Structure&lt;/h2>
&lt;p>I manage my packages with &lt;code>git&lt;/code>. Create a GitLab account on
&lt;a href="https://gitlab.alpinelinux.org/">https://gitlab.alpinelinux.org/&lt;/a>, fork the &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">&lt;code>aports&lt;/code>&lt;/a> tree, and &lt;code>git clone&lt;/code> your fork.&lt;/p>
&lt;p>The structure follows Alpine Linux repositories:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://gitlab.alpinelinux.org/alpine/aports.git &amp;amp;&amp;amp; tree -L 1 aports
aports
├── CODINGSTYLE.md
├── COMMITSTYLE.md
├── README.md
├── community
├── main
├── non-free
├── scripts
├── testing
└── unmaintained
&lt;/code>&lt;/pre>&lt;h2 id="bootstrapping">Bootstrapping&lt;/h2>
&lt;p>I am going to illustrate with a package I added recently, &lt;a href="https://packages.debian.org/source/sensible-utils">&lt;code>sensible-utils&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before you even begin, check if the package already exists, do a quick search in the &lt;a href="https://pkgs.alpinelinux.org/packages?name=sensible%2Dutils">Alpine Repositories&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start by scaffolding a new &lt;code>APKBUILD&lt;/code> from the base template:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd aports/testing &lt;span style="color:#75715e"># Always add new packages in testing/ first.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ newapkbuild sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ $EDITOR APKBUILD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: If you have a language-specific package (e.g. perl, python, rust),
use the language-specific template instead of the base one. Run &lt;code>newapkbuild -h&lt;/code> to list available templates. There are also some &lt;code>apkbuild-*&lt;/code> helpers such
as &lt;code>apkbuild-pypi&lt;/code> and &lt;code>apkbuild-cpan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Fill in &lt;code>APKBUILD&lt;/code> metadata like &lt;code>pkgname=&lt;/code>, &lt;code>url=&lt;/code>, etc. Refer to the AlpineWiki for up-to-date best practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By doing so, I produced the following &lt;code>APKBUILD&lt;/code>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pkgname&lt;span style="color:#f92672">=&lt;/span>sensible-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgver&lt;span style="color:#f92672">=&lt;/span>0.0.14
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgrel&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgdesc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Utilities for sensible alternative selection&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://packages.debian.org/source/sensible-utils&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arch&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GPL-2.0-or-later&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>makedepends&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;po4a&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subpackages&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgname&lt;span style="color:#e6db74">-doc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://ftp.debian.org/debian/pool/main/s/&lt;/span>$pkgname&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">_&lt;/span>$pkgver&lt;span style="color:#e6db74">.tar.xz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builddir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>$pkgname&lt;span style="color:#e6db74">.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	./configure --prefix&lt;span style="color:#f92672">=&lt;/span>/usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make -k check
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	make DESTDIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/&amp;#34;&lt;/span> install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># only works with update-alternatives, specific to debian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rm &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin/select-editor&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha512sums&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">15ba996f811ab3a9c1f5726f35766d74aafdf925c5c2392b33c6643d6c439796a742f9d0f4625c79de640e6b5e4a6a032b768eb1bc4ac31b448f9767b0ceed44 sensible-utils_0.0.14.tar.xz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>$srcdir&lt;/code> refers to the &lt;code>src/&lt;/code> directory within &lt;code>sensible-utils&lt;/code>. &lt;code>$pkgdir&lt;/code>
refers to the &lt;code>pkg/&lt;/code> directory within &lt;code>sensible-utils&lt;/code>.&lt;/p>
&lt;p>If you&amp;rsquo;re used to Arch Linux &lt;code>PKGBUILDs&lt;/code> you&amp;rsquo;ll notice a striking similarity to
&lt;code>APKBUILDs&lt;/code>. I highlighted a few notable differences in a previous post, &lt;a href="https://perrotta.dev/2022/01/my-first-apkbuild/#build-comparison">&lt;code>My First APKBUILD&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="adjustments">Adjustments&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Generate the checksums with &lt;code>abuild checksum&lt;/code>. It will automatically update the &lt;code>APKBUILD&lt;/code> inplace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract package files with &lt;code>abuild unpack&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ls src/&lt;/code> and check the directory structure. Update &lt;code>$builddir&lt;/code> in your
&lt;code>APKBUILD&lt;/code> to match it. Usually it will be &lt;code>$srcdir/$pkgname-$pkgver&lt;/code>, but
sometimes tiny adjustments are necessary. In this case, it was
&lt;code>$srcdir/$pkgname.git&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then run &lt;code>abuild -r&lt;/code>. If everything goes well, your package (and subpackages,
if any) will be successfully built&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in an isolated environment and placed
in &lt;code>~/packages&lt;/code> (&lt;code>sensible-utils-0.0.14-r0.apk&lt;/code> and
&lt;code>sensible-utils-doc-0.0.14-r0.apk&lt;/code>), however that doesn&amp;rsquo;t mean it is a decent
package yet.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>apkbuild-lint APKBUILD&lt;/code> and &lt;code>abuild sanitycheck&lt;/code> to lint your package
and catch common errors. Fix the errors, if any.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="request-feedback-if-needed">Request feedback if needed&lt;/h2>
&lt;p>If the package is only relevant to you, stop here. &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code>, and then you&amp;rsquo;re done. Install the package with &lt;code>doas apk add &amp;lt;pkg&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Otherwise, if the package might be potentially useful to other Alpine users, you could consider uploading it to the &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">aports&lt;/a> repository.&lt;/p>
&lt;p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&amp;rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&amp;rsquo;t need to be positive, it&amp;rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.&lt;/p>
&lt;p>If the answer is negative, or if you&amp;rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:IRC">&lt;code>#alpine-devel&lt;/code> on OFTC IRC&lt;/a> Drew DeVault wrote a good &lt;a href="https://drewdevault.com/2021/11/24/A-philosophy-for-instant-messaging.html">post&lt;/a> about IRC etiquette.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux:Mailing_lists">&lt;code>alpine-devel&lt;/code> mailing list&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.&lt;/p>
&lt;h2 id="publish-your-package">Publish your package&lt;/h2>
&lt;p>If all is well, it&amp;rsquo;s time to publish your &lt;code>APKBUILD&lt;/code>. Follow the up-to-date
steps at
&lt;a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package#Code_review&lt;/a>. There are basically two options:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Send a gitlab merge request (MR). This follows the standard git forge workflow
(GitHub / BitBucket / GitLab) wherein you fork the main repository, create
a branch in your own clone, push it and then initiate a pull request&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alternatively, send an email with your patch to the &lt;code>aports&lt;/code> mailing list
with &lt;a href="https://git-send-email.io/">&lt;code>git send-email&lt;/code>&lt;/a>:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git config sendemail.to &lt;span style="color:#e6db74">&amp;#34;alpine-aports@lists.alpinelinux.org&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git send-email -1 &lt;span style="color:#75715e"># Implicitly uses --to=alpine-linux@lists.alpinelinux.org as set above&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Tip&lt;/strong>: The second approach has a steep learning curve, however once you
figure it out it&amp;rsquo;s actually faster, simpler and more streamlined. Whenever
a new email is sent to the aports mailing list, a MR is automatically created
on GitLab.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: If you adopt the email workflow and need to send a follow-up to your
initial patch, do not use &lt;code>--in-reply-to&lt;/code>. Instead, create a new email thread.
This is needed because as of this post new GitLab MRs are only created when new
email threads are created. Replies to existing email threads do not update the
MR patch.&lt;/p>
&lt;p>And that&amp;rsquo;s all! Other useful tips:&lt;/p>
&lt;ul>
&lt;li>Use &lt;a href="https://repology.org/">repology&lt;/a> to look for preexisting packages in other Linux (or even BSD) distributions, it&amp;rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Arch Linux &lt;code>PKGBUILDs&lt;/code> are very similar to &lt;code>APKBUILDs&lt;/code>. Gentoo &lt;code>EBUILDs&lt;/code> and FreeBSD &lt;code>Makefiles&lt;/code> are also reasonable approximations.&lt;/li>
&lt;li>Use &lt;code>abump&lt;/code> to bump pkgver in &lt;code>APKBUILD&lt;/code> files if the package gets an update to a newer upstream release.&lt;/li>
&lt;li>Use &lt;code>apkgrel&lt;/code> to bump or reset the &lt;code>pkgrel&lt;/code> value of your &lt;code>APKBUILD&lt;/code>.&lt;/li>
&lt;li>Use &lt;a href="https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/#bonus-track-upstream">&lt;code>urlwatch&lt;/code>&lt;/a> to track upstream updates.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you use &lt;a href="https://duckduckgo.com/">https://duckduckgo.com/&lt;/a>, query for &lt;code>!alpine sensible-utils&lt;/code>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Package debugging is out of scope of this post.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>In GitLab it&amp;rsquo;s called Merge Request (MR). The list of all aports MRs is &lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests">here&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Arch Linux: New PKGBUILD Workflow</title><link>https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</link><pubDate>Tue, 18 Jan 2022 21:59:07 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/arch-linux-new-pkgbuild-workflow/</guid><description>&lt;p>This document describes my workflow to manage &lt;code>PKGBUILDs&lt;/code> for the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a> (Arch User Repository) in &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a>.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>First of all, this post is not a substitute to the excellent &lt;a href="https://wiki.archlinux.org/">ArchWiki&lt;/a> and it will likely get outdated at some point. In particular, refer to the following articles for up-to-date documentation that will outlive this blog:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Arch_User_Repository">https://wiki.archlinux.org/title/Arch_User_Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Creating_packages">https://wiki.archlinux.org/title/Creating_packages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This article is not a tutorial, as such it assumes you already know what a &lt;code>PKGBUILD&lt;/code> is and how to use &lt;code>makepkg&lt;/code>. In particular, you should have the &lt;code>base-devel&lt;/code> and &lt;code>devtools&lt;/code> packages installed in your system.&lt;/p>
&lt;h2 id="structure">Structure&lt;/h2>
&lt;p>I manage my packages with &lt;code>git&lt;/code> plus Eli Schwartz&amp;rsquo;s excellent
&lt;a href="https://github.com/eli-schwartz/aurpublish">aurpublish&lt;/a>. The tree structure is simple, with one &lt;code>PKGBUILD&lt;/code> per directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/thiagowfx/PKGBUILDs &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tree PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── fpp-git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── git-crecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── i3a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── ttf-camingocode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── urlwatch.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>aurpublish&lt;/code> is used &lt;em>solely&lt;/em> to automate certain interactions with the AUR, more about it later.&lt;/p>
&lt;h2 id="bootstrapping">Bootstrapping&lt;/h2>
&lt;p>I am going to illustrate with a package I added recently, &lt;a href="https://github.com/dimo414/bkt">&lt;code>bkt&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Before you even begin, check if the package already exists, do a quick search in the &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=bkt">AUR&lt;/a> and also in the &lt;a href="https://archlinux.org/packages/?sort=&amp;amp;q=bkt&amp;amp;maintainer=&amp;amp;flagged=">official repos&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start by copying over the standard &lt;code>PKGBUILD&lt;/code> template:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cd PKGBUILDs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir bkt &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cp /usr/share/pacman/PKGBUILD.proto PKGBUILD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ $EDITOR PKGBUILD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Fill in &lt;code>PKGBUILD&lt;/code> metadata like &lt;code>pkgname=&lt;/code>, &lt;code>url=&lt;/code>, etc. Refer to the ArchWiki for up-to-date best practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The most important step is to refer to &lt;a href="https://wiki.archlinux.org/title/Category:Arch_package_guidelines">https://wiki.archlinux.org/title/Category:Arch_package_guidelines&lt;/a> to figure out the package type.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>bkt&lt;/code> is a Rust package. This is my first time packaging for Rust, not a problem though, as I can just refer to &lt;a href="https://wiki.archlinux.org/title/Rust_package_guidelines">https://wiki.archlinux.org/title/Rust_package_guidelines&lt;/a>.&lt;/p>
&lt;p>The rust package guidelines page contains the blueprint for &lt;code>prepare()&lt;/code>, &lt;code>check()&lt;/code>, &lt;code>build()&lt;/code> and &lt;code>package()&lt;/code>. Packaging is mostly a matter of gluing everything together. Read the project &lt;code>README.md&lt;/code> and the wiki, and then combine the needed steps in the &lt;code>PKGBUILD&lt;/code>.&lt;/p>
&lt;p>By doing so, I produced the following &lt;code>PKGBUILD&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pkgname&lt;span style="color:#f92672">=&lt;/span>bkt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgver&lt;span style="color:#f92672">=&lt;/span>0.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgrel&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgdesc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;A subprocess caching utility&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arch&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;x86_64&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.bkt.rs/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;MIT&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>makedepends&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cargo&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">.tar.gz::https://github.com/dimo414/&lt;/span>$pkgname&lt;span style="color:#e6db74">/archive/refs/tags/&lt;/span>$pkgver&lt;span style="color:#e6db74">.tar.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha256sums&lt;span style="color:#f92672">=()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepare&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo fetch --locked --target &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$CARCH&lt;span style="color:#e6db74">-unknown-linux-gnu&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	export RUSTUP_TOOLCHAIN&lt;span style="color:#f92672">=&lt;/span>stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	export CARGO_TARGET_DIR&lt;span style="color:#f92672">=&lt;/span>target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo build --frozen --release --all-features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	export RUSTUP_TOOLCHAIN&lt;span style="color:#f92672">=&lt;/span>stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cargo test --frozen --all-features
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm0755 -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin/&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;target/release/&lt;/span>$pkgname&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm644 LICENSE -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/licenses/&lt;/span>$pkgname&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: &lt;code>$srcdir&lt;/code> refers to the &lt;code>src/&lt;/code> directory within &lt;code>bkt&lt;/code>. &lt;code>$pkgdir&lt;/code> refers to the &lt;code>pkg/&lt;/code> directory within &lt;code>bkt&lt;/code>.&lt;/p>
&lt;h2 id="adjustments">Adjustments&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Generate the checksums with &lt;code>updpkgsums&lt;/code>. It will automatically update the &lt;code>PKGBUILD&lt;/code> inplace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract package files with &lt;code>makepkg -o&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ls src/&lt;/code> and check the directory structure. Update &lt;code>cd&lt;/code> in your &lt;code>PKGBUILD&lt;/code> to match it. Usually it will be &lt;code>cd $srcdir/$pkgname-$pkgver&lt;/code>, but sometimes tiny adjustments are necessary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then run &lt;code>makepkg -s&lt;/code>. If everything goes well, your package will be successfully built&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (&lt;code>bkt-0.5.0-1-x86_64.pkg.tar.zst&lt;/code>), however that doesn&amp;rsquo;t mean it is a decent package yet.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>namcap PKGBUILD&lt;/code> and &lt;code>namcap *.pkg.tar.zst&lt;/code> to lint your package and catch common errors. Fix the errors, if any.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To ensure all dependencies have been correctly declared and none of them are missing, run &lt;code>makepkg&lt;/code> within a clean &lt;a href="https://wiki.archlinux.org/title/Chroo">&lt;em>chroot&lt;/em>&lt;/a>. I like to use Graysky&amp;rsquo;s excellent &lt;a href="https://github.com/graysky2/clean-chroot-manager">&lt;code>ccm&lt;/code>&lt;/a> (Clean Chroot Manager) to do so. Run &lt;code>ccm s&lt;/code> (=&amp;ldquo;run makepkg in the clean chroot&amp;rdquo;). If it produces any errors, it likely means you missed some dependencies. Adjust &lt;code>depends=&lt;/code>, &lt;code>checkdepends=&lt;/code> and &lt;code>makedepends=&lt;/code> accordingly.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="request-feedback-if-needed">Request feedback if needed&lt;/h2>
&lt;p>If the package is only relevant to you, stop here. &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code>, and then you&amp;rsquo;re done. Install the package with &lt;code>makepkg -i&lt;/code>.&lt;/p>
&lt;p>Otherwise, if the package might be potentially useful to other Arch users, you could consider uploading it to the AUR.&lt;/p>
&lt;p>Before you do so, stop for a moment and make an honest judgment whether this is a high quality package and whether you&amp;rsquo;re confident it is clean and polished enough, following the best practices documented in the Wiki. The answer doesn&amp;rsquo;t need to be positive, it&amp;rsquo;s perfectly OK to commit mistakes and everyone is a newbie at some point.&lt;/p>
&lt;p>If the answer is negative, or if you&amp;rsquo;re new to this process and would like some help, fear no more! There are at least two decent community resources wherein to ask for help:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://bbs.archlinux.org/viewforum.php?id=38.">AUR Issues, Discussion &amp;amp; PKGBUILD Requests&lt;/a> BBS / Forums: Open a new thread, post your &lt;code>PKGBUILD&lt;/code> (use &lt;code>[code][/code]&lt;/code> tags if you paste it directly!) or a link to it&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. Request folks to critique your work, mention that you&amp;rsquo;re looking for feedback. This kind of thread is generally well received in the official forums if you demonstrate you did diligent research before asking for help.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://lists.archlinux.org/pipermail/aur-general/">AUR General Mailing List&lt;/a>: Send an email to the mailing list asking for help. In general, follow proper mailing list etiquette, good resources for that are &lt;a href="https://useplaintext.email/">https://useplaintext.email/&lt;/a> and &lt;a href="https://man.sr.ht/lists.sr.ht/etiquette.md">https://man.sr.ht/lists.sr.ht/etiquette.md&lt;/a>. TL;DR: Use plain-text instead of HTML in your email.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re part of any other community (e.g. Reddit, Discord) feel free to ask therein as well. Avoid posting everywhere though, pick one community, draft your post and then patiently wait.&lt;/p>
&lt;h2 id="publish-your-package">Publish your package&lt;/h2>
&lt;p>If all is well, it&amp;rsquo;s time to publish your &lt;code>PKGBUILD&lt;/code> to the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a>. Follow the up-to-date steps at &lt;a href="https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages">https://wiki.archlinux.org/title/Arch_User_Repository#Submitting_packages&lt;/a>.&lt;/p>
&lt;p>TL;DR: If you don&amp;rsquo;t use &lt;em>aurpublish&lt;/em>, do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ makepkg --printsrcinfo &amp;gt; .SRCINFO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you&amp;rsquo;ll need both the &lt;code>PKGBUILD&lt;/code> and the &lt;code>.SRCINFO&lt;/code> file, it&amp;rsquo;s basically a matter of committing your changes and pushing them to the right repository.&lt;/p>
&lt;p>If you do use &lt;em>aurpublish&lt;/em> this process is much easier, it&amp;rsquo;s mostly a matter of doing &lt;code>git commit&lt;/code>, &lt;code>git push&lt;/code> and &lt;code>aurpublish bkt&lt;/code>. &lt;em>Aurpublish&lt;/em> automatically generates the &lt;code>.SRCINFO&lt;/code> and a commit message by the means of git hooks.&lt;/p>
&lt;p>And that&amp;rsquo;s all! Other useful tips:&lt;/p>
&lt;ul>
&lt;li>Use &lt;a href="https://repology.org/">repology&lt;/a> to look for preexisting packages in other Linux (or even BSD) distributions, it&amp;rsquo;s very handy as a starting point if you have no idea how to package a given package. In particular, Alpine Linux &lt;code>APKBUILDs&lt;/code> are very similar to &lt;code>PKGBUILDs&lt;/code>. Gentoo &lt;code>EBUILDs&lt;/code> and FreeBSD &lt;code>Makefiles&lt;/code> are also reasonable approximations.&lt;/li>
&lt;li>Use &lt;code>makepkg -src&lt;/code> to clean up after building a package.&lt;/li>
&lt;/ul>
&lt;h2 id="bonus-track-upstream">Bonus: Track upstream&lt;/h2>
&lt;p>Use a software like &lt;a href="https://thp.io/2008/urlwatch/">&lt;code>urlwatch&lt;/code>&lt;/a> or &lt;a href="https://github.com/lilydjwg/nvchecker">&lt;code>nvchecker&lt;/code>&lt;/a> to track
future upstream changes so that you can update your packages in a timely
fashion&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. There&amp;rsquo;s also a web service called &lt;a href="https://release-monitoring.org/">Release
Monitoring&lt;/a>, part of Fedora Infra. And there&amp;rsquo;s also
&lt;a href="https://changedetection.io/">https://changedetection.io/&lt;/a>, but it&amp;rsquo;s overkill for this task. I use &lt;code>urlwatch&lt;/code>
the following way:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat PKGBUILDs/urlwatch.yml
# urls for urlwatch(1)
---
name: &amp;#34;bkt&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/dimo414/bkt&amp;#34;
---
name: &amp;#34;fpp&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/facebook/PathPicker&amp;#34;
---
name: &amp;#34;git-crecord&amp;#34;
command: &amp;#34;git ls-remote --tags https://github.com/andrewshadura/git-crecord&amp;#34;
---
name: &amp;#34;i3a&amp;#34;
command: &amp;#34;git ls-remote --tags https://git.goral.net.pl/mgoral/i3a&amp;#34;
# ---
# name: &amp;#34;ttf-camingocode&amp;#34;
# N/A

# Run this command periodically via cron or systemd timer.
# Set up notifications e.g. via sendmail.
$ urlwatch --urls urlwatch.yml
&lt;/code>&lt;/pre>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you use &lt;a href="https://duckduckgo.com/">https://duckduckgo.com/&lt;/a>, query for &lt;code>!aur bkt&lt;/code> and &lt;code>!archpkg bkt&lt;/code>. Handy!&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Package debugging is out of scope of this post.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>For example, use &lt;a href="https://gist.github.com">https://gist.github.com&lt;/a> or &lt;a href="http://paste.opensuse.org/">http://paste.opensuse.org/&lt;/a> or
&lt;a href="http://ix.io/">http://ix.io/&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>In 99% of the cases this is just a matter of bumping the &lt;code>pkgver=&lt;/code> and
updating the checksums. If &lt;code>pkgver=&lt;/code> is the same but there&amp;rsquo;s a fix to the
package itself, then bump &lt;code>pkgrel=&lt;/code> instead.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine Linux on Raspberry Pi: Diskless Mode with persistent storage</title><link>https://perrotta.dev/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/</link><pubDate>Sat, 15 Jan 2022 23:18:56 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/</guid><description>&lt;p>Use case: Given an Alpine Linux &lt;strong>diskless&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> installation meant for
a Raspberry Pi setup, we would like to add a persistent storage component to it
to make it survive across reboots.&lt;/p>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>The &lt;a href="https://wiki.alpinelinux.org/wiki/Installation">Alpine Linux Wiki&lt;/a> covers most of the installation process, hence I will only document the bits that were lacking and/or confusing therein.&lt;/p>
&lt;p>My use case is the following:&lt;/p>
&lt;blockquote>
&lt;p>Given a Raspberry Pi 3B with an old 4GiB SD Card as CF storage&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, install Alpine Linux in diskless mode. Find a way to preserve modifications in &lt;code>/etc&lt;/code> and &lt;code>/var&lt;/code>, as well as any installed packages through its &lt;code>apk&lt;/code> package manager.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s follow the steps outlined in the wiki.&lt;/p>
&lt;h2 id="copy-alpine-to-the-sd-card">Copy Alpine to the SD Card&lt;/h2>
&lt;blockquote>
&lt;p>Grab the SD card and install Alpine Linux in it.&lt;/p>
&lt;/blockquote>
&lt;p>Alpine provides officially supported images designed for the Raspberry Pi.&lt;/p>
&lt;p>Most Linux distributions provide an &lt;code>.iso&lt;/code> or &lt;code>.img&lt;/code> file to be installed with a tool like &lt;a href="https://www.balena.io/etcher/">Balena Etcher&lt;/a>, &lt;a href="https://rufus.ie/en/">Rufus&lt;/a>, &lt;a href="https://www.raspberrypi.com/news/raspberry-pi-imager-imaging-utility/">&lt;strong>Raspberry Pi Imager&lt;/strong>&lt;/a> or plain &lt;code>dd&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Alpine is not like most Linux distributions: Instead, it provides a &lt;code>.tar.gz&lt;/code> archive with files that should be copied directly to the SD card. Grab the latest version (3.15 at the time of this post) from &lt;a href="https://alpinelinux.org/downloads/">https://alpinelinux.org/downloads/&lt;/a>. There are 3 options:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>armhf&lt;/code>: Works with all Pis, but may perform less optimally on recent versions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>armv7&lt;/code>: Works with the Pi 3B, 32-bit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>aarch64&lt;/code>: Works with the Pi 3B, 64-bit.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I opted for &lt;code>aarch64&lt;/code> to make it 64-bit, but &lt;code>armv7&lt;/code> would also have worked well for my setup. In fact, Raspberry Pi OS (Debian) uses &lt;code>armv7&lt;/code> (32-bit) at the time of this writing.&lt;/p>
&lt;p>Before copying files over, format the SD Card. As I was doing this
from a Windows machine because it was the only one I had readily available with
a SD card slot, I just used the native Windows Disk Management tool to do so.
I decided to allocate a 100MB&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> FAT32 partition. The rest of the SD card would be
blank for now. Alpine is surprisingly small, 100MB was more than enough for the kernel and other needed files.&lt;/p>
&lt;p>Once the SD card is formatted, copy the files over to it. It turns out Windows cannot extract tarballs (&lt;code>.tar.gz&lt;/code>); a tool like &lt;a href="https://www.7-zip.org/">7-zip&lt;/a> should do the job. Copy the files over to the root of the newly allocated FAT32 partition, and then safely eject the SD card.&lt;/p>
&lt;h2 id="boot-alpine-from-the-sd-card">Boot Alpine from the SD Card&lt;/h2>
&lt;p>The next step is to insert the SD Card into the Pi and then boot. I had some trouble in this step and eventually figured out I didn&amp;rsquo;t mark the primary FAT32 partition as bootable. Unfortunately it&amp;rsquo;s not straightforward to mark the partition as bootable from Windows. On a Linux machine there&amp;rsquo;s a wide array of tools to do so: &lt;code>fdisk&lt;/code>, &lt;code>cfdisk&lt;/code> (TUI), &lt;code>sfdisk&lt;/code> (scriptable &lt;code>fdisk&lt;/code>), &lt;code>parted&lt;/code>, &lt;code>gparted&lt;/code> (GUI) are some of them. I worked around that by installing Raspberry Pi OS on the SD card with the Raspberry Pi imager, and then overwriting it with the Alpine files. This works because the Raspberry PI OS installation marks the FAT32 partition as bootable.&lt;/p>
&lt;h2 id="install-alpine">Install Alpine&lt;/h2>
&lt;p>Installing Alpine is well documented in the &lt;a href="https://wiki.alpinelinux.org/wiki/Installation">wiki&lt;/a> thus it won&amp;rsquo;t be covered here. It basically comes down to invoking &lt;code>setup-alpine&lt;/code>, which then invokes other &lt;code>setup-*&lt;/code> scripts.&lt;/p>
&lt;p>Keep in mind we&amp;rsquo;re not really &amp;ldquo;installing&amp;rdquo; Alpine as this is a diskless installation. A more accurate term here would be &amp;ldquo;configuring&amp;rdquo;.&lt;/p>
&lt;p>Before invoking the installation script, I created a second primary partition in the SD card, set to &lt;code>ext4&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configure networking to get working internet access.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% setup-interfaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Install some partitioning tools.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% apk add cfdisk e2fsprogs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a second partition (mmcblk0p2) and write it.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% cfdisk /dev/mmcblk0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Format the partition as ext4.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mkfs.ext4 /dev/mmcblk0p2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Mount the partition under /media.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mount /dev/mmcblk0p2 /media/mmcblk0p2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The installation is straightforward, we just need to pay attention to a few select steps:&lt;/p>
&lt;ul>
&lt;li>&lt;code>setup-disk&lt;/code>: Select &lt;code>none&lt;/code> to ensure a &lt;code>diskless&lt;/code> installation&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>.&lt;/li>
&lt;li>&lt;code>setup-apkcache&lt;/code>: Select &lt;code>/media/mmcblk0p2/cache&lt;/code> to persist downloaded &lt;code>apk&lt;/code> packages.&lt;/li>
&lt;li>&lt;code>setup-lbu&lt;/code>: Edit &lt;code>/etc/lbu/lbu.conf&lt;/code> and set &lt;code>LBU_MEDIA=&amp;quot;mmcblk0p2&amp;quot;&lt;/code>. Note: Do not add &lt;code>/media&lt;/code> as it is implicit.&lt;/li>
&lt;/ul>
&lt;p>Once the installation is complete, run &lt;code>lbu commit&lt;/code> to persist the changes in the second partition. Once you do so, a &lt;code>&amp;lt;hostname&amp;gt;.apkovl.tar.gz&lt;/code>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> file should materialize on &lt;code>/media/mmcblk0p2/&lt;/code>.&lt;/p>
&lt;p>This is a good moment to reboot. Before we do so, let&amp;rsquo;s cache the packages we had previously downloaded.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Cache packages.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% apk cache download
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="after-the-first-reboot">After the first reboot&lt;/h2>
&lt;p>If everything worked as expected, once you reboot all your previously installed packages should have been preserved and automatically restored / reinstalled, as well as your modifications done to &lt;code>/etc&lt;/code>.&lt;/p>
&lt;p>From this point on, whenever you install a new package that you want to be preserved for subsequent reboots, run &lt;code>lbu commit&lt;/code> afterwards. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apk add vim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% lbu commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you would like to see what is going to be committed, run &lt;code>lbu status&lt;/code> or &lt;code>lbu diff&lt;/code> before doing the actual commit. Whenever you commit, &lt;code>/media/mmcblk0p2/&amp;lt;hostname&amp;gt;.apkovl.tar.gz&lt;/code> gets overwritten with your most recent modifications.&lt;/p>
&lt;p>It&amp;rsquo;s possible to keep more than one backup file by changing &lt;code>BACKUP_LIMIT=&lt;/code> in &lt;code>/etc/lbu/lbu.conf&lt;/code>. This is specially handy if you decide to revert to an earlier system snapshot / state later on. The stock config looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cat /etc/lbu/lbu.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># what cipher to use with -e option&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DEFAULT_CIPHER&lt;span style="color:#f92672">=&lt;/span>aes-256-cbc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Uncomment the row below to encrypt config by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ENCRYPTION=$DEFAULT_CIPHER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Uncomment below to avoid &amp;lt;media&amp;gt; option to &amp;#39;lbu commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Can also be set to &amp;#39;floppy&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># LBU_MEDIA=usb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set the LBU_BACKUPDIR variable in case you prefer to save the apkovls&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># in a normal directory instead of mounting an external media.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># LBU_BACKUPDIR=/root/config-backups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Uncomment below to let lbu make up to 3 backups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BACKUP_LIMIT=3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Tip&lt;/strong>: You can find the list of all explicitly installed packages in &lt;code>/etc/apk/world&lt;/code>.&lt;/p>
&lt;h2 id="the-last-piece-make-var-persistent">The last piece: make /var persistent&lt;/h2>
&lt;p>There are three natural ways that come to mind to make &lt;code>/var&lt;/code> persistent:&lt;/p>
&lt;h3 id="a-separate-partition-or-file">A) Separate partition (or file)&lt;/h3>
&lt;p>Instead of two partitions (FAT32 and ext4), create 3 partitions: FAT32, ext4 and ext4. Use the latter one to mount &lt;code>/var&lt;/code> on, saving this information in &lt;code>/etc/fstab&lt;/code>. The main disadvantage of this setup is that you&amp;rsquo;ll need to allocate a fixed amount of space of each of the ext4 partitions and it may be difficult to figure out how to split the space between them.&lt;/p>
&lt;p>A variant of this approach is to just create the third partition as a file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 500MB file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% dd &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">=&lt;/span>/dev/zero of&lt;span style="color:#f92672">=&lt;/span>/media/mmcblk0p2/var.img bs&lt;span style="color:#f92672">=&lt;/span>1M count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span> status&lt;span style="color:#f92672">=&lt;/span>progress
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mkfs.ext4 /media/mmcblk0p2/var.img
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mount /media/mmcblk0p2/var.img /var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works because the Linux kernel supports mounting files as if they were device blocks, treating them as loop devices (pseudo-devices).&lt;/p>
&lt;p>I don&amp;rsquo;t like these approaches because they shadow the preexisting &lt;code>/var&lt;/code> from the boot media, which in turn messes up with existing services that use it such as &lt;code>cron&lt;/code>: &lt;code>% crontab -l&lt;/code> would fail. One workaround would be to mount a &lt;code>/var&lt;/code> subdirectory instead: for example, &lt;code>/var/lib/docker&lt;/code> for docker.&lt;/p>
&lt;h3 id="b-bind-mount">B) Bind mount&lt;/h3>
&lt;p>This one is straightforward:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% mount --bind /media/mmcblk0p2/var/lib/docker /var/lib/docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The actual partition lives in the SD card, however we make a bind mount under
&lt;code>/var&lt;/code>, which is like an &lt;em>alias&lt;/em>. From &lt;a href="https://unix.stackexchange.com/questions/198590/what-is-a-bind-mount">Stack Exchange&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A bind mount is an alternate view of a directory tree. Classically, mounting creates a view of a storage device as a directory tree. A bind mount instead takes an existing directory tree and replicates it under a different point. The directories and files in the bind mount are the same as the original. Any modification on one side is immediately reflected on the other side, since the two views show the same data.&lt;/p>
&lt;/blockquote>
&lt;h3 id="c-overlay-mount">C) Overlay mount&lt;/h3>
&lt;p>From &lt;a href="https://wiki.archlinux.org/title/Overlay_filesystem">ArchWiki&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Overlayfs allows one, usually read-write, directory tree to be overlaid onto another, read-only directory tree. All modifications go to the upper, writable layer. This type of mechanism is most often used for live CDs but there is a wide variety of other uses.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s perfect for our use case, which uses a live bootable SD card for Alpine. It blends the preexisting, ephemeral, in-memory &lt;code>/var&lt;/code> with the persistent in-disk &lt;code>/var&lt;/code>.&lt;/p>
&lt;p>I wanted to mount &lt;code>/var&lt;/code> directly but found it to be problematic for the same reasons mentioned earlier, therefore I just went with &lt;code>/var/lib/docker&lt;/code> instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create overlay upper and work directories.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mkdir -p /media/mmcblk0p2/var/lib/docker /media/mmcblk0p2/var/lib/docker-work
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Add mountpoint entry to fstab. Note: The work dir must be an empty directory in the same filesystem mount as the upper directory.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% echo &lt;span style="color:#e6db74">&amp;#34;overlay /var/lib/docker overlay lowerdir=/var/lib/docker,upperdir=/media/mmcblk0p2/var/lib/docker,workdir=/media/mmcblk0p2/var/lib/docker-work 0 0&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/fstab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Mount all fstab entries, including our newly added one.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mount -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I opted for the third approach, using an overlay mount, it was the most
seamless one. A bind mount would have been fine as well.&lt;/p>
&lt;p>The final setup works surprisingly well:&lt;/p>
&lt;ul>
&lt;li>Alpine Linux is very lightweight and runs mostly from RAM&lt;/li>
&lt;li>&lt;code>apk&lt;/code> cache is persistent to the ext4 partition&lt;/li>
&lt;li>&lt;code>/var/&lt;/code> is persistent to the ext4 partition&lt;/li>
&lt;li>&lt;code>lbu commit&lt;/code> persists changes in &lt;code>/etc/&lt;/code> and &lt;code>/home/&lt;/code> in the ext4 partition&lt;/li>
&lt;li>Every reboot fully resets the system sans persistent components above&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vincentserpoul.github.io/post/alpine-linux-rpi0/">https://vincentserpoul.github.io/post/alpine-linux-rpi0/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dahl-jacobsen.dk/tips/blog/2021-04-08-docker-on-alpine-linux/">http://dahl-jacobsen.dk/tips/blog/2021-04-08-docker-on-alpine-linux/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dahl-jacobsen.dk/tips/blog/2018-03-15-alpine-on-raspberry-pi/">http://dahl-jacobsen.dk/tips/blog/2018-03-15-alpine-on-raspberry-pi/&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Running (almost) fully from RAM.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>CF = Compact disk.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>On Linux I&amp;rsquo;d usually opt for &lt;code>dd&lt;/code>, on Windows the Raspberry Pi Imager is a sensible choice.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>100MB is overly conservative, but keep in mind I had a very small SD Card, with only 4GiB storage. 250MB or even 500MB should be a more sensible default if you have a bigger SD Card (e.g. 32GiB).&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>An alternative is to select &lt;code>data&lt;/code> disk mode, but it didn&amp;rsquo;t work for me.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>&lt;em>ovl&lt;/em> is short for &lt;em>overlay&lt;/em>. Not to be confused with &lt;em>vol&lt;/em> for &lt;em>volume&lt;/em>.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Keychron K2: Review</title><link>https://perrotta.dev/2022/01/keychron-k2-review/</link><pubDate>Wed, 12 Jan 2022 18:09:38 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/keychron-k2-review/</guid><description>&lt;p>This is a follow-up post of &lt;a href="https://perrotta.dev/2021/12/keychron-k2-linux-setup/">Keychron K2: Linux Setup&lt;/a>. The previous post focused on the configuration of the keyboard, this one focuses on its user experience from the point of view of a Software Engineer.&lt;/p>
&lt;h2 id="previously">Previously&amp;hellip;&lt;/h2>
&lt;p>My first (and previous) mechanical keyboard was a &lt;a href="https://www.logitech.com/assets/64198/g610-orion-red.pdf">Logitech G610 Orion
Red&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. It&amp;rsquo;s a full wired keyboard with Cherry MX Red switches
(linear) and dedicated multimedia keys. In my opinion it is a solid choice for
beginners because its interface is quite familiar thanks to the wide range of
available keys. It is branded as a gaming keyboard but frankly it was a fine
office keyboard as well. However after using it for a while I wanted to
upgrade.&lt;/p>
&lt;p>The natural upgrade path would contain one or more of the following features, in order of importance:&lt;/p>
&lt;ol>
&lt;li>good support for both &lt;strong>Linux&lt;/strong> and macOS, especially Linux&lt;/li>
&lt;li>&lt;strong>compact&lt;/strong>: tenkeyless a.k.a. 80%, or 75%&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>&lt;strong>portable&lt;/strong>: wireless, either with a dongle or with bluetooth or both&lt;/li>
&lt;li>with decent battery life: should outlast at least a week of office work&lt;/li>
&lt;li>not overpriced: ~$200 CAD budget&lt;/li>
&lt;li>playful: with RGB backlight (instead of white LED)&lt;/li>
&lt;/ol>
&lt;p>Given those, a natural upgrade path would have been the &lt;a href="https://www.logitechg.com/en-ca/products/gaming-keyboards/g915-tkl-wireless.html">Logitech G915
TKL&lt;/a>. Its main caveat is that it is relatively overpriced,
~$300 CAD. Above that $300 CAD point one should arguably be looking for
ergonomic and/or fully programmable (QMK firmware) keyboards, like the Kinesis
Advantage and/or the Ergodox EZ&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. Even though the G915 TKL is rock solid, it
didn&amp;rsquo;t have any fancy features to justify that investment.&lt;/p>
&lt;h2 id="the-quest-for-the-_perfect_-keyboard">The quest for the &lt;em>perfect&lt;/em> keyboard&amp;hellip;&lt;/h2>
&lt;p>I then proceeded to outsource my luck to the wisdom of the crowds, by asking
for recommendations in a mailing list at $DAYJOB, giving them a subset of the
requirements above.&lt;/p>
&lt;p>The choice was then obvious: I&amp;rsquo;d get a &lt;strong>Keychron&lt;/strong>. It fit all of my
requirements perfectly. The &lt;a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">issue&lt;/a> was that Keychron had
&lt;a href="https://www.keychron.com/collections/all-products">so many choices&lt;/a> to pick from.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/1741/">&lt;img src="https://imgs.xkcd.com/comics/work.png"
 alt="Despite it being imaginary, I already have SUCH a strong opinion on the cord-switch firing incident.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>After some deliberation I had two options in mind: &lt;a href="https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard">Keychron K2&lt;/a>
and &lt;a href="https://www.keychron.com/products/keychron-k1-wireless-mechanical-keyboard">Keychron K1&lt;/a> TKL. The main difference between them is that
the K1 is a low-profile keyboard. I didn&amp;rsquo;t know what low-profile meant at the
time and had to do some research to figure it out&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>In the end I opted for the &lt;a href="https://www.keychron.com/products/keychron-k2-wireless-mechanical-keyboard">&lt;strong>Keychron K2&lt;/strong>&lt;/a>, red switches (linear),
with RGB backlight.&lt;/p>
&lt;h2 id="the-keyboard">The keyboard&lt;/h2>
&lt;p>The keyboard met all my expectations, even surpassing them, I am quite satisfied overall:&lt;/p>
&lt;dl>
&lt;dt>Linux support&lt;/dt>
&lt;dd>Great out-of-the-box support, it just works. Even though I &lt;a href="https://perrotta.dev/2021/12/keychron-k2-linux-setup/">tweaked&lt;/a> a few configs, it wasn&amp;rsquo;t strictly
necessary. In particular, there&amp;rsquo;s a physical toggle where you can choose between
macOS (=Linux) or Windows mode. Furthermore they provide both macOS-style (command, option, etc) and
Windows-style keycaps (super, alt, etc). For Linux I tend to stick with the Windows ones.&lt;/dd>
&lt;dt>Compact&lt;/dt>
&lt;dd>A 75% keyboard is compact by definition, what else could I add?
I wouldn&amp;rsquo;t go lower than that though, in my opinion removing the function keys
goes too far and makes the keyboard harder to use. A Tenkeyless / 80% option
would also be compact enough while maybe increasing comfort a little bit, but
I managed to adapt quickly to the 75% layout. Multimedia and OS keys are easily
available by the means of &lt;code>Fn + F1&lt;/code>, etc.&lt;/dd>
&lt;dt>Portable&lt;/dt>
&lt;dd>It has bluetooth, but can also be used while plugged in. There&amp;rsquo;s a toggle that
controls which mode (wireless or wired) to use. The bluetooth has 3 channels and
it&amp;rsquo;s very easy to switch between them: &lt;code>Fn + 1&lt;/code>, &lt;code>Fn + 2&lt;/code>, &lt;code>Fn + 3&lt;/code>. This makes it easy
to switch between laptops and/or workstation, work and/or personal. The cable connector
is USB-C which in my opinion is a must these days (2020s).&lt;/dd>
&lt;dt>Battery life&lt;/dt>
&lt;dd>Battery lasts more than enough, to the point that I don&amp;rsquo;t even need to care about it.
I tend to recharge it every 2 weeks or so. &lt;code>Fn + b&lt;/code> will let me have a visual indication
of how much juice is still left. The keyboard automatically sleeps after 10 minutes of inactivity
in order to save battery, which I think is a nice bonus, I don&amp;rsquo;t need to worry about turning it off.
This can be disabled if it ends up being annoying, though.&lt;/dd>
&lt;dt>Great value for money&lt;/dt>
&lt;dd>$90 USD at the time of this writing. Because I didn&amp;rsquo;t want to deal with international shipping, I ended up
simply buying it from one of their official local retailers in Canada, &lt;a href="https://oneofzero.net/">OneOfZero&lt;/a>. This
slightly increased what I paid for it (~$150 CAD with taxes), on the other hand the shipping was really fast. Just
beware, this particular retailer does not have a friendly return policy, if I recall correctly they charge a 25% fee
and end up throwing the keyboard away (landfill), which is very depressing.&lt;/dd>
&lt;dt>Playful&lt;/dt>
&lt;dd>The RGB lighting is fluff and completely irrelevant in terms of productivity, however it adds a playful touch to the keyboard.
I would say that white lighting is enough, but sometimes it&amp;rsquo;s just &lt;em>cool&lt;/em> to change to different color(s).
What can I say, we humans are visual creatures. You can easily adjust the light brightness and toggle it on/off (&lt;code>Fn + light&lt;/code>),
plus there are several patterns to choose from. I tend to use a still pattern because it isn&amp;rsquo;t distracting for programming or
other type of work that requires focus.&lt;/dd>
&lt;/dl>
&lt;p>&lt;strong>Finally&lt;/strong>: The keyboard keycaps are quite sturdy and stick well in place. I had some
issues with my previous keyboard where some of its keycaps would easily fall
off it when moving it within my backpack. I do not have this issue with the
Keychron.&lt;/p>
&lt;h2 id="future">Future&lt;/h2>
&lt;p>Mechanical keyboards are meant to last. I do not intend to upgrade it any time
soon. However, if/when I ever do it, I will be looking for the following features:&lt;/p>
&lt;ul>
&lt;li>QMK firmware / programmable: would unlock more workflow possibilities. The
Keychron Q1 would be a good candidate for this.&lt;/li>
&lt;li>With a dongle, in addition to bluetooth. Because sometimes bluetooth is just
annoying and/or unreliable. The Logitech G915 TKL has a dongle.&lt;/li>
&lt;li>Other switches? So far I&amp;rsquo;ve only used red ones (linear). More silent switches
could be useful.&lt;/li>
&lt;li>Ergonomic: Whether it&amp;rsquo;s a split, an ortholinear or just a curved keyboard,
I figure that at some point it will be a good investment for my wrists.
Adaptation is difficult but it may be necessary one day.&lt;/li>
&lt;/ul>
&lt;p>I am not particularly attracted to custom keycaps, they are cute but not my cup
of tea. And I also do not see the appeal of hot swappable keycaps. I can
understand why some folks appreciate those features, customizability is
powerful, but for me it&amp;rsquo;s less stressful to keep things simple.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Linked to the &lt;code>.pdf&lt;/code> because apparently the SKU isn&amp;rsquo;t listed in the Logitech product website anymore. At the time, it cost ~$120 CAD.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>This requirement indirectly excluded all those gaming keyboards with dedicated macro and/or multimedia keys, if they ended up increasing the overall keyboard surface area.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>In the past, I had the opportunity to borrow these from coworkers for a week but couldn&amp;rsquo;t quite adapt to them, their learning curve is quite steep. Maybe I&amp;rsquo;ll try that again in the future.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>It basically means the keys are thinner than usual, comparable to laptop keyboard keys.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>My First APKBUILD</title><link>https://perrotta.dev/2022/01/my-first-apkbuild/</link><pubDate>Fri, 07 Jan 2022 20:03:07 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/my-first-apkbuild/</guid><description>&lt;p>In the same spirit of my first PKGBUILD and &lt;a href="https://perrotta.dev/2014/09/my-first-ebuild/">&lt;code>Ebuild&lt;/code>&lt;/a>, herein I will describe my first &lt;code>APKBUILD&lt;/code>.&lt;/p>
&lt;h2 id="at-a-glance">At a glance&lt;/h2>
&lt;p>Alpine Linux package management is very similar to Arch Linux, with tiny differences:&lt;/p>
&lt;ul>
&lt;li>&lt;code>PKGBUILD&lt;/code> → &lt;code>APKBUILD&lt;/code>: The filename is obviously different. Their format are very similar though, both of them are bash scripts with variables and functions. In particular, there&amp;rsquo;s &lt;code>check&lt;/code>, &lt;code>patch&lt;/code>, &lt;code>build&lt;/code> and &lt;code>package&lt;/code>.&lt;/li>
&lt;li>&lt;code>cp /usr/share/pacman/PKGBUILD.proto&lt;/code> → &lt;code>newapkbuild&lt;/code>: Template versus scaffolding.&lt;/li>
&lt;li>&lt;code>pacman&lt;/code> → &lt;code>apk&lt;/code>: The package manager is different.&lt;/li>
&lt;li>&lt;code>makepkg -s&lt;/code> → &lt;code>abuild -r&lt;/code>: &lt;code>makepkg&lt;/code> drives all things package building for &lt;code>pacman&lt;/code>. &lt;code>abuild&lt;/code> drives package building for &lt;code>apk&lt;/code>.&lt;/li>
&lt;li>&lt;code>makepkg -i&lt;/code> → &lt;code>apk add &amp;lt;pkg&amp;gt;&lt;/code>: &lt;code>makepkg&lt;/code> can also drive package installations whereas &lt;code>abuild&lt;/code> cannot, &lt;code>apk&lt;/code> must be used.&lt;/li>
&lt;li>&lt;code>namcap&lt;/code> → &lt;code>apkbuild-lint&lt;/code> (from &lt;code>atools&lt;/code>) + &lt;code>abuild sanitycheck&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: Linters are different.&lt;/li>
&lt;li>&lt;code>updpkgsums&lt;/code> → &lt;code>abuild checksum&lt;/code>: Generate hashes for package sources.&lt;/li>
&lt;/ul>
&lt;figure>&lt;a href="https://xkcd.com/927/">&lt;img src="https://imgs.xkcd.com/comics/standards.png"
 alt="Fortunately, the charging one has been solved now that we&amp;#39;ve all standardized on mini-USB. Or is it micro-USB? Shit.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>Other than that, the process of writing an &lt;code>APKBUILD&lt;/code> is very similar to writing a &lt;code>PKGBUILD&lt;/code>. In fact, the Arch repositories (especially the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a>) tend to be much more comprehensive than Alpine&amp;rsquo;s in terms of number of packages, so chances are if you want to write a new package for Alpine, check in Arch&amp;rsquo;s repos first, it&amp;rsquo;s a good starting point.&lt;/p>
&lt;h2 id="my-first-package-fpp">My first package: &lt;code>fpp&lt;/code>&lt;/h2>
&lt;p>&lt;code>fpp&lt;/code> stands for &amp;lsquo;Facebook Path Picker&amp;rsquo;.&lt;/p>
&lt;p>As of the time of this post, I maintain &lt;a href="https://aur.archlinux.org/packages/fpp-git/">&lt;code>fpp-git&lt;/code>&lt;/a> in the AUR. It looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pkgname&lt;span style="color:#f92672">=&lt;/span>fpp-git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgver&lt;span style="color:#f92672">=&lt;/span>0.9.2.r130.ge0d5cfc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgrel&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgdesc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;TUI that lets you pick paths out of its stdin and run arbitrary commands on them&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://facebook.github.io/PathPicker&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;MIT&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">::git+https://github.com/facebook/PathPicker.git&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha256sums&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;SKIP&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arch&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;any&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>makedepends&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>depends&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;python&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conflicts&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>provides&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepare&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -r &lt;span style="color:#e6db74">&amp;#34;src/tests&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgver&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git describe --long --tags | sed &lt;span style="color:#e6db74">&amp;#39;s/\([^-]*-g\)/r\1/;s/-/./g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cd &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgname%-git&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># library&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install -Dm755 &lt;span style="color:#e6db74">&amp;#34;fpp&amp;#34;&lt;/span> -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/fpp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cp -a src &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/fpp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># entrypoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install -dm755 &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ln -s &lt;span style="color:#e6db74">&amp;#34;/usr/share/fpp/fpp&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># documentation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install -Dm644 LICENSE -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/licenses/&lt;/span>$pkgname&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install -Dm644 &lt;span style="color:#e6db74">&amp;#34;debian/usr/share/man/man1/fpp.1&amp;#34;&lt;/span> -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/man/man1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PKGBUILD&lt;/code> guidelines and instructions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/PKGBUILD">https://wiki.archlinux.org/title/PKGBUILD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Arch_package_guidelines">https://wiki.archlinux.org/title/Arch_package_guidelines&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The equivalent &lt;code>APKBUILD&lt;/code> I wrote looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pkgname&lt;span style="color:#f92672">=&lt;/span>fpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgver&lt;span style="color:#f92672">=&lt;/span>0.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgrel&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkgdesc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TUI that lets you pick paths out of its stdin and run arbitrary commands on them&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://facebook.github.io/PathPicker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arch&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;noarch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>license&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>depends&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;bash python3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subpackages&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgname&lt;span style="color:#e6db74">-doc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgname&lt;span style="color:#e6db74">-&lt;/span>$pkgver&lt;span style="color:#e6db74">.tar.gz::https://github.com/facebook/PathPicker/archive/&lt;/span>$pkgver&lt;span style="color:#e6db74">.tar.gz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builddir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$srcdir&lt;span style="color:#e6db74">/PathPicker-&lt;/span>$pkgver&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fpp --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prepare&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	default_prepare
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rm -r &lt;span style="color:#e6db74">&amp;#34;src/__tests__&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># library&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm755 &lt;span style="color:#e6db74">&amp;#34;fpp&amp;#34;&lt;/span> -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/fpp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cp -a src &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/fpp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># entrypoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -dm755 &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ln -s &lt;span style="color:#e6db74">&amp;#34;/usr/share/fpp/fpp&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># documentation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm644 LICENSE -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/licenses/&lt;/span>$pkgname&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	install -Dm644 &lt;span style="color:#e6db74">&amp;#34;debian/usr/share/man/man1/fpp.1&amp;#34;&lt;/span> -t &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgdir&lt;span style="color:#e6db74">/usr/share/man/man1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha512sums&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">65b6b077f437bd642ebf94c55be901aabc73f7b9c89e4522c4f51970c4d63d744ad8fa29cac06816851f63bcb81d0480e61d405231c582e9aca0f4e650949a97 fpp-0.9.2.tar.gz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>APKBUILD&lt;/code> guidelines and instructions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package">https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference">https://wiki.alpinelinux.org/wiki/APKBUILD_Reference&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="build-comparison">Build Comparison&lt;/h2>
&lt;p>Let&amp;rsquo;s highlight a few similarities and differences in them, excluding the fact that one is fetched from git and the other one fetches a point release directly&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>package metadata, by the means of bash variables, are almost equivalent
one-to-one
&lt;ul>
&lt;li>A notable difference is the architecture, Arch primarily supports
&lt;em>x86_64&lt;/em> whereas Alpine has support for multiple architectures. When
a package is architecture agnostic, Arch denotes it with &lt;code>any&lt;/code> whereas
alpine has both &lt;code>noarch&lt;/code> and &lt;code>all&lt;/code>, the latter is like &lt;code>any&lt;/code> (=all
architectures), the &lt;code>former&lt;/code> means it&amp;rsquo;s agnostic (=e.g. a pure bash script
or python package).&lt;/li>
&lt;li>&lt;code>APKBUILDs&lt;/code> use flat strings, whereas &lt;code>PKGBUILDs&lt;/code> use bash arrays&lt;/li>
&lt;li>Alpine encourages splitting larger packages into subpackages, as such
&lt;code>APKBUILD&lt;/code> has first-class support and syntactic sugar for that. &lt;code>-dev&lt;/code> and
&lt;code>-doc&lt;/code> subpackages are very common. On the other hand, Arch tends to have
monolithic packages in order to keep it simple, although it also supports
subpackages.&lt;/li>
&lt;li>Alpine supports setting &lt;code>$builddir&lt;/code> whereas Arch doesn&amp;rsquo;t. As a consequence, it&amp;rsquo;s often unneeded to &lt;code>cd&lt;/code> in &lt;code>build()&lt;/code> and &lt;code>package()&lt;/code> in Alpine, whereas in Arch one does need to manually change directories to &lt;code>$srcdir/$pkgname&lt;/code> before building.&lt;/li>
&lt;li>Alpine lacks optional dependencies, whereas Arch has &lt;code>optdepends&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alpine enforces the use of &lt;code>check&lt;/code> in test packages, otherwise it needs to be explicitly disabled and documented with &lt;code>!check&lt;/code> in &lt;code>options=&lt;/code>. That&amp;rsquo;s not the case in Arch.&lt;/li>
&lt;li>&lt;code>check()&lt;/code>, &lt;code>build()&lt;/code> and &lt;code>package()&lt;/code> are pretty much similar in both formats. &lt;code>$srcdir&lt;/code> and &lt;code>$pkgdir&lt;/code> are provided in both.&lt;/li>
&lt;li>The &lt;a href="https://wiki.archlinux.org/title/Main_page">ArchWiki&lt;/a> is way more documented in terms of packaging guidelines and examples than Alpine&amp;rsquo;s. If you use DuckDuckGo, you can query for &lt;code>!aw &amp;lt;foo&amp;gt;&lt;/code> as a bang shortcut to search directly in the ArchWiki.&lt;/li>
&lt;/ul>
&lt;p>Last but not least, in Arch one can install package tarballs&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> with &lt;code>makepkg -i&lt;/code> or &lt;code>pacman -U&lt;/code>. In Alpine that approach doesn&amp;rsquo;t seem to be directly supported. The workflow is to add a local repository directory in &lt;code>/etc/apk/repositories&lt;/code> (notice the last two lines):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/apk/repositories
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/v3.15/main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/v3.15/community&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/latest-stable/main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># http://dl-cdn.alpinelinux.org/alpine/latest-stable/community&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http://dl-cdn.alpinelinux.org/alpine/edge/main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http://dl-cdn.alpinelinux.org/alpine/edge/community
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http://dl-cdn.alpinelinux.org/alpine/edge/testing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/$USER/packages/community
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/$USER/packages/testing
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>abuild&lt;/code> will place the resulting package tarball in &lt;code>~/packages&lt;/code>, in this case:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ls ~/packages/testing/x86_64/fpp*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/$USER/packages/testing/x86_64/fpp-0.9.2-r0.apk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/$USER/packages/testing/x86_64/fpp-doc-0.9.2-r0.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;and then &lt;code>apk add fpp&lt;/code> will automagically recognize it&amp;rsquo;s in there and install it. The advantage of this approach is that it keeps a local package repository around and it&amp;rsquo;s well integrated with &lt;code>apk&lt;/code>, way differently from &lt;code>pacman&lt;/code> that has no integration with the AUR at all. One could also possibly set up a local repository in Arch, for example, with &lt;a href="https://github.com/graysky2/clean-chroot-manager">&lt;code>ccm&lt;/code>&lt;/a>, but it takes extra steps and it&amp;rsquo;s not officially supported.&lt;/p>
&lt;h2 id="upstream-contributions">Upstream Contributions&lt;/h2>
&lt;p>On Arch, to contribute a &lt;code>PKGBUILD&lt;/code> upstream one just needs to create an account in the &lt;a href="https://aur.archlinux.org/">AUR&lt;/a>. Armed with a git + ssh infrastructure, all you need to do is &lt;code>git push&lt;/code>. There are no ACLs involved, anyone can do that&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>On Alpine there&amp;rsquo;s a bit more of politics involved&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>: Anyone can send a &lt;code>patch(1)&lt;/code>, either via &lt;a href="mailto:alpine-aports@lists.alpinelinux.org">mailing list&lt;/a> or via a &lt;a href="https://gitlab.alpinelinux.org/alpine/aports">Gitlab MR&lt;/a> (merge request). Patch works well with &lt;code>git send-email -1&lt;/code>, being automatically cross-posted to a Gitlab MR. On the other hand the MR workflow is easier to be followed up on feedback from developers and other contributors (&lt;code>git push --force&lt;/code>), and it&amp;rsquo;s also cross-posted, to the mailing list. An Alpine developer with the appropriate permissions must approve your patch/MR before it becomes available to other Alpine users.&lt;/p>
&lt;p>Sadly at the time of this writing &lt;a href="https://lists.alpinelinux.org/~alpine/aports/patches/3799">my patch&lt;/a> hasn&amp;rsquo;t yet been approved (2 weeks later), however we&amp;rsquo;re in holiday season. This wouldn&amp;rsquo;t have been a problem in the AUR, where I could have just pushed it immediately, without any review. On the other hand the Alpine approach at least gives me some hope that the submitted packages have slightly higher quality than the average ones in the AUR, since they need to be manually reviewed/approved/vetted by at least one Alpine developer.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Install &lt;code>spdx-licenses-list&lt;/code> to lint the licenses, it&amp;rsquo;s used by &lt;code>abuild sanitycheck&lt;/code> as an optional dependency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>The AUR tends to have both non-vcs and vcs versions of a software, whereas Alpine is focused a bit more on stability and tends to have non-vcs only. This is not a hard rule though, exceptions may exist.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;code>.tar.xz&lt;/code> or, more recently, &lt;code>.tar.zstd&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>And this is one of the reasons why you should always inspect every &lt;code>PKGBUILD&lt;/code> you install from the Arch User Repository, as it could have been tampered with and/or contain malicious code.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>I&amp;rsquo;ll leave it open-ended whether that&amp;rsquo;s a bug or a feature. Depending on the lens you see through, it could be considered either gatekeeping (bureaucracy, control) or sanity (quality, stability). It has pros and cons, and even those are arguable.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Alpine Linux: apk command not found hook</title><link>https://perrotta.dev/2022/01/alpine-linux-apk-command-not-found-hook/</link><pubDate>Tue, 04 Jan 2022 16:25:51 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/alpine-linux-apk-command-not-found-hook/</guid><description>&lt;p>In this post we will learn how to define a command-not-found hook to the &lt;code>apk(8)&lt;/code> package manager in Alpine Linux.&lt;/p>
&lt;h2 id="sneak-peek">Sneak peek&lt;/h2>
&lt;p>Before:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: correct &lt;span style="color:#e6db74">&amp;#39;podman&amp;#39;&lt;/span> to &lt;span style="color:#e6db74">&amp;#39;pod2man&amp;#39;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>nyae&lt;span style="color:#f92672">]&lt;/span>? n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: command not found: podman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: correct &lt;span style="color:#e6db74">&amp;#39;podman&amp;#39;&lt;/span> to &lt;span style="color:#e6db74">&amp;#39;pod2man&amp;#39;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>nyae&lt;span style="color:#f92672">]&lt;/span>? n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman may be found in the following packages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;cmd:podman&amp;gt; podman-3.4.4-r1 x86_64 &lt;span style="color:#f92672">{&lt;/span>podman&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Apache-2.0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="preamble">Preamble&lt;/h2>
&lt;p>Whenever you type a command that is not in your &lt;code>$PATH&lt;/code>, usually your shell
will yell at you that it wasn&amp;rsquo;t found.&lt;/p>
&lt;p>The typical workflow in this scenario is to use the search functionality of your package manager in order to find which package provides the binary you&amp;rsquo;re interested in.&lt;/p>
&lt;p>In Alpine Linux, one would do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk search podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-doc-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-remote-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-docker-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openscap-1.3.5-r3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-compose-0.1.5-r4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-bash-completion-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-zsh-completion-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>py3-podman-3.2.1-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-docker-doc-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-openrc-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-fish-completion-3.4.4-r1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output is a bit noisy, but with a bit of experience you could easily figure out the package you&amp;rsquo;re looking for is simply called &lt;code>podman&lt;/code>, given the output above.&lt;/p>
&lt;p>Surely this was an easy example, what if we tried something less obvious?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ vidir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: correct &lt;span style="color:#e6db74">&amp;#39;vidir&amp;#39;&lt;/span> to &lt;span style="color:#e6db74">&amp;#39;vdir&amp;#39;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>nyae&lt;span style="color:#f92672">]&lt;/span>? n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh: command not found: vidir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s no &lt;code>vidir&lt;/code> binary, then surely there&amp;rsquo;s a &lt;code>vidir&lt;/code> package, right?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ doas apk add vidir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR: unable to &lt;span style="color:#66d9ef">select&lt;/span> packages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vidir &lt;span style="color:#f92672">(&lt;/span>no such package&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> required by: world&lt;span style="color:#f92672">[&lt;/span>vidir&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Er, no. You&amp;rsquo;ll need to use search again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk search vidir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67-r0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There it is, &lt;code>moreutils&lt;/code>. Great piece of software, by the way&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>What if we could automate this?&lt;/p>
&lt;h2 id="automating-command-not-found-1st-try">Automating command-not-found: 1st try&lt;/h2>
&lt;p>In bash, one can define a &lt;code>command_not_found_handle&lt;/code> function. In zsh, one can define a &lt;code>command_not_found_handler&lt;/code> function. I know, why can&amp;rsquo;t it be the same function, right? Just one &lt;code>r&lt;/code> in the way. Regardless of whichever shell you use, the point is that the function is invoked whenever you run a command that is not in the &lt;code>$PATH&lt;/code> (or that isn&amp;rsquo;t a shell built-in).&lt;/p>
&lt;p>In principle, you could do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>command_not_found_handle&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apk search &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$cmd&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s a good first try, and it surely works as expected, but it can be a bit noisy sometimes. Look at the podman output above, it outputs several unrelated packages, none of which provide the &lt;code>podman&lt;/code> binary other than its homonym.&lt;/p>
&lt;h2 id="automating-command-not-found-2nd-try">Automating command-not-found: 2nd try&lt;/h2>
&lt;p>In Alpine, we can do slightly better. &lt;code>apk(8)&lt;/code> has the concept of providers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk list -P | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span> | egrep &lt;span style="color:#e6db74">&amp;#39;&amp;lt;\w+:&amp;#39;&lt;/span> | cut -f &lt;span style="color:#ae81ff">1&lt;/span> -d &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> | cut -c 2- | sort -u
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-P&lt;/code> above stands for &lt;code>--providers&lt;/code>. This roughly means one can search for a package that provides a given shared library (&lt;code>so&lt;/code>), or a package that provides a given binary (&lt;code>cmd&lt;/code>), and so on. We&amp;rsquo;re interested in the &lt;code>cmd:&lt;/code> provider.&lt;/p>
&lt;p>If we tried it with &lt;code>podman&lt;/code>, we would get the following output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk list -P -- &lt;span style="color:#e6db74">&amp;#34;cmd:podman&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;cmd:podman&amp;gt; podman-3.4.4-r1 x86_64 &lt;span style="color:#f92672">{&lt;/span>podman&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Apache-2.0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Look at how much shorter and direct it is, compared to the 1st approach!&lt;/p>
&lt;p>Here&amp;rsquo;s what it looks like if we try it with a binary provided by multiple packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk list -P -- &lt;span style="color:#e6db74">&amp;#34;cmd:docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;cmd:docker&amp;gt; docker-cli-20.10.11-r0 x86_64 &lt;span style="color:#f92672">{&lt;/span>docker&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Apache-2.0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>installed&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;cmd:docker&amp;gt; podman-docker-3.4.4-r1 x86_64 &lt;span style="color:#f92672">{&lt;/span>podman&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Apache-2.0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s very easy to see that both &lt;code>docker-cli&lt;/code> and &lt;code>podman-docker&lt;/code> provide &lt;code>docker&lt;/code>. If you just did a simple search, you&amp;rsquo;d get a lot of noise:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk search docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-bash-completion-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-cli-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-machine-driver-kvm2-1.24.0-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x11docker-6.9.0-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-volume-local-persist-1.3.0-r5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-docker-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openvswitch-2.12.3-r4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-engine-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-openrc-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dockerize-0.6.1-r9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-fish-completion-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openscap-1.3.5-r3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-py-5.0.3-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openvswitch-ovn-2.12.3-r4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-registry-openrc-2.7.1-r5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-doc-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rsyslog-imdocker-8.2108.0-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lazydocker-0.12-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose-bash-completion-1.29.2-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose-1.29.2-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>py3-dockerpty-0.4.1-r4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose-zsh-completion-1.29.2-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-registry-2.7.1-r5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-credential-ecr-login-0.5.0-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dockerpy-creds-0.4.0-r3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-cli-compose-2.1.1-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-credential-ecr-login-doc-0.5.0-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>podman-docker-doc-3.4.4-r1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-compose-fish-completion-1.29.2-r2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flannel-contrib-cni-0.15.1-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-zsh-completion-20.10.11-r0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-volume-local-persist-openrc-1.3.0-r5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker-cli-buildx-0.7.1-r0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="packagingpackaging-it-all-together">Packaging&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> it all together&lt;/h2>
&lt;p>I wrote the following scripts, which I source in my respective interactive shells, to achieve this behavior out-of-the-box:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat apk-command-not-found.bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># apk(8) from Alpine Linux command not found hook for bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command_not_found_handle &lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> pkgs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapfile -t pkgs &amp;lt; &amp;lt;&lt;span style="color:#f92672">(&lt;/span>apk list -P -- &lt;span style="color:#e6db74">&amp;#34;cmd:&lt;/span>$cmd&lt;span style="color:#e6db74">&amp;#34;&lt;/span> 2&amp;gt;/dev/null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span> &lt;span style="color:#e6db74">${#&lt;/span>pkgs[*]&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">))&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$cmd&lt;span style="color:#e6db74"> may be found in the following packages:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#39; %s\n&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;bash: command not found: &lt;/span>$cmd&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span> 1&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat apk-command-not-found.zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/zsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># apk(8) from Alpine Linux command not found hook for zsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command_not_found_handler&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local pkgs&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>(f)&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>apk list -P -- &lt;span style="color:#e6db74">&amp;#34;cmd:&lt;/span>$cmd&lt;span style="color:#e6db74">&amp;#34;&lt;/span> 2&amp;gt;/dev/null&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$pkgs&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$cmd&lt;span style="color:#e6db74"> may be found in the following packages:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#39; %s\n&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;zsh: command not found: &lt;/span>$cmd&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span> 1&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The snippets above are snapshots intended for this post.
I keep up-to-date versions of these files in my dotfiles repository, &lt;a href="https://github.com/thiagowfx/.dotfiles/search?q=filename%3Aapk-command-not-found&amp;amp;type=code">try out this query&lt;/a> in case I ever move them elsewhere.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">https://joeyh.name/code/moreutils/&lt;/a>: moreutils is a collection of the unix tools that nobody thought to write long ago when unix was young.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>pun intended&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Direnv: Automate your Environment Variables</title><link>https://perrotta.dev/2022/01/direnv-automate-your-environment-variables/</link><pubDate>Tue, 04 Jan 2022 00:34:07 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/direnv-automate-your-environment-variables/</guid><description>&lt;p>&lt;a href="https://direnv.net/">Direnv&lt;/a> is a tool to automate your shell to automatically load and unload environment variables on-the-fly, on a per-project (per-directory) basis.&lt;/p>
&lt;h2 id="preliminaries-is-it-worth-it">Preliminaries: Is it worth it?&lt;/h2>
&lt;p>Questions I like to ask myself before deciding whether to invest my time into learning and potentially &lt;strong>adopting&lt;/strong> a foreign tool are the following:&lt;/p>
&lt;blockquote>
&lt;p>Is it &lt;strong>popular&lt;/strong> &lt;em>and&lt;/em> &lt;strong>stable&lt;/strong> enough?
Is it abandonware?&lt;/p>
&lt;/blockquote>
&lt;h3 id="popularity">Popularity&lt;/h3>
&lt;p>Popularity is relative, it doesn&amp;rsquo;t need to be worthy of the Hacker News frontpage nor Hotness on Reddit, but it needs to be widely available in popular Linux distributions and/or package managers, one install command away from my development environment.&lt;/p>
&lt;p>&lt;a href="https://repology.org/">Repology&lt;/a> is a good proxy for popularity. Looking at &lt;a href="https://repology.org/project/direnv/badges">direnv&lt;/a> therein, it&amp;rsquo;s available for Alpine, Arch, Debian, Fedora, FreeBSD, HomeBrew, Nix, OpenBSD, Ubuntu&amp;hellip;that&amp;rsquo;s more than enough, we can safely conclude &lt;code>direnv&lt;/code> is widely popular.&lt;/p>
&lt;p>The main takeaway we want to confirm is whether the project isn&amp;rsquo;t too niche and/or an one-man show. Seeing signs of a small-ish community and/or occasional contributions from external users/developers helps build confidence and give credibility to the project.&lt;/p>
&lt;h3 id="stability-and-abandonware">Stability and Abandonware&lt;/h3>
&lt;p>Stability is easier to define than popularity and can often be determined just by taking a quick glance at the github (or whichever other forge it&amp;rsquo;s hosted in) page of the project.&lt;/p>
&lt;p>At the time of this writing, the latest release of &lt;a href="https://github.com/direnv/direnv">direnv&lt;/a> was about a week ago (2.30.2, Dec 28th 2021). It&amp;rsquo;s definitely not abandonware and it&amp;rsquo;s well maintained. A few signs that help corroborate that:&lt;/p>
&lt;ul>
&lt;li>Several PRs were merged recently&lt;/li>
&lt;li>Its issue tracker is quite active, with a good mix of feature requests and bugs&lt;/li>
&lt;li>I don&amp;rsquo;t like to judge the project based on the number of issues it has, especially if it&amp;rsquo;s popular. Chromium has &lt;a href="https://bugs.chromium.org/p/chromium/issues/list">60k+&lt;/a> issues at the time of this writing, yet I wouldn&amp;rsquo;t call it &lt;em>bleeding edge&lt;/em>. Common sense applies. Since &lt;code>direnv&lt;/code> has been around for a while and it&amp;rsquo;s relatively popular, 150+ open issue seems acceptable to me.&lt;/li>
&lt;/ul>
&lt;p>Now that &lt;code>direnv&lt;/code> passed the Litmus test for adoption&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, let&amp;rsquo;s get our hands dirty.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>There&amp;rsquo;s nothing special here, as &lt;code>direnv&lt;/code> is widely packaged. Pick your poison:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -Syu direnv &lt;span style="color:#75715e"># Arch Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ doas apk add direnv &lt;span style="color:#75715e"># Alpine Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo apt install direnv &lt;span style="color:#75715e"># Debian-based distros&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Is it lightweight?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ apk info -L direnv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>direnv-2.30.1-r0 contains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usr/bin/direnv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hell yes! More lightweight than that? Impossible. It&amp;rsquo;s a single binary thanks to Golang. No tons of files or dependencies. I mean:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ du -sh /usr/bin/direnv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7.5M /usr/bin/direnv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;it&amp;rsquo;s a 7MB binary, let&amp;rsquo;s not get ahead of ourselves. But that&amp;rsquo;s fine, really, it&amp;rsquo;s just a dev tool, we don&amp;rsquo;t really deploy it to prod.&lt;/p>
&lt;h2 id="use-cases">Use Cases&lt;/h2>
&lt;p>Everything is controlled with a &lt;code>.envrc&lt;/code> file within a repository root. A typical file could look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>export HOUSE=&amp;#34;ATREIDES&amp;#34;
layout python3
&lt;/code>&lt;/pre>&lt;p>The &lt;a href="https://direnv.net/">upstream website&lt;/a> does a great job at summarizing use cases. I am not here to duplicate documentation, so please go ahead and read it. That said, here are some example use cases I found useful:&lt;/p>
&lt;h3 id="use-case-python">Use Case: Python&lt;/h3>
&lt;p>Python developers often need to create different virtual environments for different projects. For example, I was participating in &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a> last year and wrote my solutions in Python 3: &lt;a href="https://github.com/thiagowfx/adventofcode">https://github.com/thiagowfx/adventofcode&lt;/a>.&lt;/p>
&lt;p>Each day&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> I would &lt;code>cd ~/projects/adventofcode&lt;/code>, and then do &lt;code>source ~/.venv/bin/activate&lt;/code>. And guess what, that&amp;rsquo;s for the first terminal where I&amp;rsquo;d run &lt;code>make&lt;/code>, I&amp;rsquo;d also spawn a second one with &lt;code>vim&lt;/code>, thereby needing to activate the virtual environment twice.&lt;/p>
&lt;p>And this is assuming the virtual environment already exists. If it didn&amp;rsquo;t - for example, after a vanilla &lt;code>git clone&lt;/code>, I&amp;rsquo;d have to do &lt;code>python -m venv .venv&lt;/code> first.&lt;/p>
&lt;p>Quickly all of this became repetitive and annoying. I kinda &amp;ldquo;cheated&amp;rdquo; and stopped using the virtualenv for a few days, relying on my Linux distribution package manager instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% apk add py3-&lt;span style="color:#f92672">{&lt;/span>autopep8,pyflakes,numpy,pylint&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way, my&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>would correctly work and not yell that &lt;code>numpy&lt;/code> was nowhere to be found.&lt;/p>
&lt;p>It&amp;rsquo;s not very clean, but it worked. However eventually I wanted to become cleaner and leaner and automate my virtual environment setup. I uninstalled the aforementioned packages after a few days:&lt;/p>
&lt;pre tabindex="0">&lt;code>% apk del py3-{autopep8,pyflakes,numpy,pylint}
&lt;/code>&lt;/pre>&lt;p>&amp;hellip;therefore forcing me to come up with a better setup. I always had direnv in my TODO list, and this was the perfect moment to try it out.&lt;/p>
&lt;p>How does &lt;code>direnv&lt;/code> address this?&lt;/p>
&lt;ol>
&lt;li>Add the &lt;code>direnv&lt;/code> hook to your shell. I actively use two shells&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code>, so I did it twice and then added it to my &lt;a href="https://github.com/thiagowfx/.dotfiles">dotfiles&lt;/a>:&lt;/li>
&lt;/ol>
&lt;p>Bash:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat ~/.bashrc.d/direnv.bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://direnv.net/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> hash direnv &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eval &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>direnv hook bash&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Zsh:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="display:flex;">&lt;span>$ cat ~/.zshrc.d/direnv.zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/zsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># https://direnv.net/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">((&lt;/span> $+commands&lt;span style="color:#f92672">[&lt;/span>direnv&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">))&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eval &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>direnv hook zsh&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Set up direnv in the AOC repository:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat ~/projects/adventofcode/.envrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>layout python3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ direnv allow &lt;span style="color:#75715e"># Only needs to be done once&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it: It&amp;rsquo;s a single line of configuration. Now what does it do? All of the above. No magic: whenever you cd into the project directory or any of its subdirectories with one of the configured shells, if the venv doesn&amp;rsquo;t exist:&lt;/p>
&lt;ul>
&lt;li>it will be automatically created;&lt;/li>
&lt;li>then it will be sourced&lt;/li>
&lt;/ul>
&lt;p>Now you may ask yourself: Why go through all this trouble? Why not simply create a shell script to do exactly that for you automatically? That&amp;rsquo;s perfectly fine, it&amp;rsquo;s a matter of taste. But then you&amp;rsquo;ll have to maintain that script. The python ecosystem keeps changing - a few years ago I was using &lt;code>virtualenvwrapper&lt;/code> to manage virtual environments, these days it doesn&amp;rsquo;t exist anymore, people use either &lt;code>python -m env&lt;/code> or &lt;code>pyenv&lt;/code> or &lt;code>poetry&lt;/code> or&amp;hellip;it never ends. &lt;a href="https://drewdevault.com/2021/11/16/Python-stop-screwing-distros-over.html">Drew DeVault&lt;/a> wrote a good piece about that.&lt;/p>
&lt;figure>&lt;a href="https://xkcd.com/1987/">&lt;img src="https://imgs.xkcd.com/comics/python_environment.png"
 alt="The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages.">&lt;/a>&lt;figcaption>
 &lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>Maintenance is not the only burden, scalability is also one: If you use python in several repositories, you&amp;rsquo;ll now have to include your script in all of them.&lt;/p>
&lt;p>Considering that &lt;code>direnv&lt;/code> is flexible enough in other scenarios, I consider its adoption in this situation a good trade-off to make.&lt;/p>
&lt;h3 id="use-case-hugo">Use Case: Hugo&lt;/h3>
&lt;p>This blog is written in Hugo. I have a &lt;code>Makefile&lt;/code> with a bunch of environment variables to manage its setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ make dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whenever I am working in my VPS, for reasons outside of the scope of this post I need to use a different port other than the default one for Hugo (&lt;code>1313&lt;/code>). Since I am using variables, I could just do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ make PORT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1234&lt;/span> dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, to make this change permanent (&amp;ldquo;fire-and-forget&amp;rdquo;), I could also do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#39;export PORT=1234&amp;#39;&lt;/span> | tee -a .envrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ direnv allow &lt;span style="color:#75715e"># Only needs to be done once&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ make dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way, whenever I run &lt;code>make&lt;/code> I wouldn&amp;rsquo;t even need to think twice about which port to use.&lt;/p>
&lt;p>Of course, a small improvement that should be done in this scenario is to add &lt;code>direnv&lt;/code> related files to your &lt;code>.gitignore&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git ignore direnv &amp;gt;&amp;gt; .gitignore

# Created by https://www.toptal.com/developers/gitignore/api/direnv
# Edit at https://www.toptal.com/developers/gitignore?templates=direnv

### direnv ###
.direnv
.envrc

# End of https://www.toptal.com/developers/gitignore/api/direnv
&lt;/code>&lt;/pre>&lt;h3 id="other-use-cases">Other use cases?&lt;/h3>
&lt;p>I don&amp;rsquo;t have other real use cases to share because only recently I became familiarized with &lt;code>direnv&lt;/code>. That said, the &lt;a href="https://direnv.net/man/direnv-stdlib.1.html">direnv docs&lt;/a> are very comprehensive of its full potential usage.&lt;/p>
&lt;p>Some use cases that I like:&lt;/p>
&lt;dl>
&lt;dt>&lt;code>dotenv&lt;/code>&lt;/dt>
&lt;dd>Automatically sources &lt;code>.env&lt;/code> (note: not to confuse with &lt;code>.envrc&lt;/code>) files, which are widely common in projects managed with &lt;code>docker-compose&lt;/code>.&lt;/dd>
&lt;dt>&lt;code>source_env&lt;/code> + &lt;code>env_vars_required&lt;/code>&lt;/dt>
&lt;dd>Alongside &lt;code>.gitignore&lt;/code>, this is a great way to source secrets (e.g. API keys or tokens) and not accidentally check them into your repository.&lt;/dd>
&lt;dt>&lt;code>fetchurl&lt;/code>&lt;/dt>
&lt;dd>&lt;code>bash | curl&lt;/code> is a cancer&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> that should arguably be stopped due to its inherent security risks. That said, &lt;code>direnv&lt;/code> provides a safer way to work with it because you can specify a hash to ensure you&amp;rsquo;re downloading the same script - if an attacker or malicious actor modified it, direnv would throw an error.&lt;/dd>
&lt;dt>&lt;code>path_add&lt;/code>&lt;/dt>
&lt;dd>If your project outputs to e.g. &lt;code>build/&amp;lt;...&amp;gt;/bin&lt;/code> or similar (typical in &lt;code>cmake&lt;/code> projects and AFAIK in Rust ones too), you could add that directory to your &lt;code>PATH&lt;/code> so that you could easily execute your binaries, without having to write the full subdirectory path each time.&lt;/dd>
&lt;dt>&lt;code>layout&lt;/code>&lt;/dt>
&lt;dd>Besides python, &lt;code>direnv&lt;/code> supports several other programming languages out-of-the-box. Popular examples include &lt;code>go&lt;/code>, &lt;code>nix&lt;/code>, &lt;code>node&lt;/code>, &lt;code>perl&lt;/code> and &lt;code>ruby&lt;/code>.&lt;/dd>
&lt;/dl>
&lt;h2 id="downsides">Downsides?&lt;/h2>
&lt;p>One could call &lt;code>direnv&lt;/code> bloated because of all of the aforementioned capabilities. If it doesn&amp;rsquo;t spark joy for your taste, consider using &lt;a href="https://github.com/hyperupcall/autoenv">autoenv&lt;/a> which is basically a leaner version of &lt;code>direnv&lt;/code>, meant mostly for doing one thing and doing it well: setting and unsetting variables.&lt;/p>
&lt;p>Other than that, &lt;code>direnv&lt;/code> is pretty much a great piece of software.&lt;/p>
&lt;p>One thing I didn&amp;rsquo;t cover is how secure it is: You need to run &lt;code>direnv allow&lt;/code> explicitly in order to tell &lt;code>direnv&lt;/code> that you trust a given &lt;code>.envrc&lt;/code> file. If you don&amp;rsquo;t do it, &lt;code>direnv&lt;/code> will refuse to source it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ touch .envrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>direnv: error ~/projects/foo/.envrc is blocked. Run &lt;span style="color:#e6db74">`&lt;/span>direnv allow&lt;span style="color:#e6db74">`&lt;/span> to approve its content
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run &lt;code>direnv allow&lt;/code> but later on the file is modified (for example, after &lt;code>git pull&lt;/code>, whereby you retrieve a modification from a teammate), &lt;code>direnv&lt;/code> will once again refuse to operate. You&amp;rsquo;ll need to whitelist it again by re-running &lt;code>direnv allow&lt;/code>. Direnv will snapshot/hash the file contents of &lt;code>.envrc&lt;/code> remember it across sessions.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cuddly-octo-palm-tree.com/posts/2021-12-12-tyska-direnv/">Tools You Should Know About: direnv&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Obviously the aforementioned list was non-exhaustive. There are a few other questions that you may want to ask, out of scope of this article, such as: (i) does the project have an OSS or FLOSS license? (ii) does the project depend on Java?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Advent of code challenges are released one by one, thereby forcing you to wait until the next day in order to get the next challenge.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>more on this another day&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>c.f. &lt;a href="https://curlpipesh.tumblr.com/">https://curlpipesh.tumblr.com/&lt;/a>, &lt;a href="https://gnu.moe/wallofshame.md">https://gnu.moe/wallofshame.md&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Miniflux: Rolling my own RSS Reader</title><link>https://perrotta.dev/2022/01/miniflux-rolling-my-own-rss-reader/</link><pubDate>Mon, 03 Jan 2022 17:56:56 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/01/miniflux-rolling-my-own-rss-reader/</guid><description>&lt;p>This article describes my experience transitioning to, setting up and using the
&lt;a href="https://miniflux.app/">Miniflux&lt;/a> RSS reader for the first time.&lt;/p>
&lt;h2 id="preamble">Preamble&lt;/h2>
&lt;p>I always kind of enjoyed following people and blogs via RSS, even though it has never been a key part of my workflow (nor of the mainstream web). That said, I am not here to convince you why RSS is great, there are good existing resources&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> for that already.&lt;/p>
&lt;p>Initially I had used Commafeed, Feedly and Inoreader, which are hosted solutions. They are mostly OK, especially if you only have a handful of feeds. Their free offerings are quite decent, with a limit of a hundred or so feeds. They also have mobile clients (Android, iOS) which are a must these days. I was never fully converted to them though, and my workflow therein would only last for a few weeks or months. Some common barriers were:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>their recommendations and &amp;lsquo;machine learning&amp;rsquo; fluff were a consistent source of stress, with a fear of missing out (FOMO) akin to social media. I felt pressured to keep following new blogs just like I am pressured to constantly &amp;rsquo;like&amp;rsquo; and &amp;lsquo;follow&amp;rsquo; new pages in traditional American social media.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>there was a lot of context switching: many upstream RSS feeds aren&amp;rsquo;t great, for example, by providing excerpts (summaries) only I&amp;rsquo;d always have to visit the website directly if I wanted to read full articles. This doesn&amp;rsquo;t scale well long term, attention is a precious resource and our brains aren&amp;rsquo;t great at keeping steady and focused attention if we constantly context switch. A classical feed like this is &lt;a href="http://www.aaronsw.com/2002/feeds/pgessays.rss">Paul Graham&amp;rsquo;s&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>there was no ability to filter out (exclude) posts from feeds. For example, deleting posts with a certain title (Sponsor, Ad, some boring mainstream topic). A classical example is &lt;a href="https://daringfireball.net/">John Gruber&amp;rsquo;s Daring Fireball&lt;/a> sponsored posts which usually have &amp;lsquo;Sponsor&amp;rsquo; in their titles. Why do I have to manually skip these posts, why can&amp;rsquo;t I teach my RSS reader to do it automatically for me?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>lock-in: whenever I starred/saved posts that I liked for future reference, they would be stuck in the specific cloud provider I chose.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These were some of my gripes.&lt;/p>
&lt;p>During those years I had also tried to self-host &lt;a href="https://tt-rss.org/">TinyTinyRSS&lt;/a> but it didn&amp;rsquo;t really last for me:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>first, its stack is relatively bloated: hosting and maintaining a typical LAMP stack takes some considerable amount of effort — TinyTinyRSS requires a full PHP installation alongside a webserver (apache, nginx or similar) and a database. Suddenly there was a lot of complexity to maintain all that.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>second, I didn&amp;rsquo;t have any cloud resources (VPS), nor a local server in my home (e.g. a Raspberry Pi or a NUC or a NAS Appliance). An instance in my personal laptop wouldn&amp;rsquo;t really scale either as I would have needed it to be always on if I wanted to have continuous access to it (e.g. from my phone).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>third, I wasn&amp;rsquo;t a seasoned sysadmin at the time and wasn&amp;rsquo;t really looking forward to self-host.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Then 2020 and the COVID-19 pandemic came along with all of its imposed
government lockdowns worldwide. Suddenly many people had a lot of free time on
their hands.&lt;/p>
&lt;h2 id="self-hosting-at-home">Self-hosting at home&lt;/h2>
&lt;p>Having an &lt;a href="https://archlinux.org/">Arch Linux&lt;/a> workstation at home, it felt natural to try out Miniflux there first.&lt;/p>
&lt;p>Miniflux has great upstream &lt;a href="https://miniflux.app/docs/installation.html#debian">documentation&lt;/a> already, therefore it&amp;rsquo;s just a matter of following it. It&amp;rsquo;s out of scope of this post to duplicate the installation process here, however I will add a bit of color regarding my initial setup.&lt;/p>
&lt;p>&lt;strong>Disclaimer&lt;/strong>: Those instructions will probably get out-of-date at some point.&lt;/p>
&lt;p>Thankfully there&amp;rsquo;s already a miniflux &lt;a href="https://archlinux.org/packages/community/x86_64/miniflux/">package&lt;/a> for Arch, making my job much easier. Installing miniflux alone isn&amp;rsquo;t enough though, we will also need to install a database server (PostgreSQL):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo pacman -Syu miniflux postgresql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next step is to configure the PostgreSQL server. Refer to the upstream documentation for that, but the TL;DR is:&lt;/p>
&lt;ul>
&lt;li>create a &lt;code>miniflux&lt;/code> user&lt;/li>
&lt;li>create a &lt;code>miniflux&lt;/code> database owned by the &lt;code>miniflux&lt;/code> user&lt;/li>
&lt;li>perform a few tweaks (extension hstore)&lt;/li>
&lt;/ul>
&lt;p>Then configure miniflux:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cat /etc/miniflux.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Purge articles after a few days: These values are actually the default. Listed here just for reference.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CLEANUP_ARCHIVE_READ_DAYS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CLEANUP_ARCHIVE_UNREAD_DAYS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Database configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DATABASE_URL&lt;span style="color:#f92672">=&lt;/span>user&lt;span style="color:#f92672">=&lt;/span>miniflux password&lt;span style="color:#f92672">=&lt;/span>&amp;lt;password&amp;gt; dbname&lt;span style="color:#f92672">=&lt;/span>miniflux sslmode&lt;span style="color:#f92672">=&lt;/span>disable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN_MIGRATIONS&lt;span style="color:#f92672">=&lt;/span>yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will also need to create an admin user for miniflux with &lt;code>miniflux --create-admin&lt;/code>.&lt;/p>
&lt;p>Then we start the database server and miniflux:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo systemctl enable --now postgresql miniflux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Afterwards it&amp;rsquo;s just a matter of navigating to http://localhost:8080 and logging in with your newly created admin user.&lt;/p>
&lt;p>Miniflux is a pleasure to use, and it&amp;rsquo;s very easy to get acquainted with it.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to add custom CSS in its Settings. I added the following tweaks&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> for improved typography:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">root&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --system-font-family: system-ui, &lt;span style="color:#f92672">-&lt;/span>apple-system, BlinkMacSystemFont, &lt;span style="color:#e6db74">&amp;#34;Segoe UI&amp;#34;&lt;/span>, Roboto, Helvetica, Arial, &lt;span style="color:#e6db74">&amp;#34;Noto Sans&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sans-serif&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Apple Color Emoji&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Segoe UI Emoji&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Segoe UI Symbol&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Noto Color Emoji&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --font-family: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>system&lt;span style="color:#f92672">-&lt;/span>font&lt;span style="color:#f92672">-&lt;/span>family);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --entry-content-font-family: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>system&lt;span style="color:#f92672">-&lt;/span>font&lt;span style="color:#f92672">-&lt;/span>family);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">900&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">textarea&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;custom_css&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">min-height&lt;/span>: &lt;span style="color:#ae81ff">300&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#66d9ef">-webkit-&lt;/span>&lt;span style="color:#66d9ef">fill&lt;/span>&lt;span style="color:#f92672">-&lt;/span>available;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Update(2022-02-18)&lt;/strong>: It turns out the CSS above isn&amp;rsquo;t really needed as a system font stack is set out-of-the-box.&lt;/p>
&lt;p>The one main limitation of running Miniflux this way is that you&amp;rsquo;ll need your workstation to be always on if you want to have continuous access to it. This means if you want to read late at night you&amp;rsquo;ll need to leave your computer on. Not only this is impractical and inconvenient, it&amp;rsquo;s also not much environmentally friendly.&lt;/p>
&lt;p>Another limitation is that in principle you&amp;rsquo;ll only be able to access Miniflux from home, unless you take extra measures&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> to make your workstation accessible from outside your home network.&lt;/p>
&lt;h2 id="other-resources">Other resources&lt;/h2>
&lt;p>Miniflux clients:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Miniflux web app&lt;/strong> (PWA), works well enough&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/unread-an-rss-reader/id1363637349">Unread&lt;/a> (iOS) via Fever API, gesture based&lt;/li>
&lt;li>&lt;a href="https://reederapp.com/">Reeder&lt;/a> (iOS) via Fever API&lt;/li>
&lt;li>&lt;a href="https://newsboat.org/releases/2.21/docs/newsboat.html#_miniflux">newsboat&lt;/a> (CLI)&lt;/li>
&lt;/ul>
&lt;p>Common self-hosted alternatives to miniflux:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://freshrss.org/">FreshRSS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tt-rss.org/">TinyTinyRSS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://feedbin.com/">Feedbin&lt;/a> (harder to self-host)&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://kevq.uk/please-add-rss-support-to-your-site/">https://kevq.uk/please-add-rss-support-to-your-site/&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://laurakalbag.com/subscribe/">https://laurakalbag.com/subscribe/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/system-font-stack/">https://css-tricks.com/snippets/css/system-font-stack/&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>for example: a VPN like OpenVPN, &lt;a href="https://www.wireguard.com/">Wireguard&lt;/a> or &lt;a href="https://tailscale.com/">tailscale&lt;/a>; or a tool like &lt;a href="https://ngrok.com/">ngrok&lt;/a>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>FindBoost.cmake</title><link>https://perrotta.dev/2021/12/findboost.cmake/</link><pubDate>Sun, 12 Dec 2021 18:49:58 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2021/12/findboost.cmake/</guid><description>&lt;p>When I was in university I made heavy use of &lt;a href="https://cmake.org/">cmake&lt;/a> with
C++ projects.&lt;/p>
&lt;p>Occasionally I would also use &lt;a href="https://www.boost.org/">boost&lt;/a>.&lt;/p>
&lt;p>At the time there was no cmake module to integrate with boost libraries. So I
wrote my own.&lt;/p>
&lt;p>At some point I published it to a Stack Overflow
&lt;a href="https://stackoverflow.com/questions/28346530/cmake-automatic-boost-download-and-build-if-not-found/41130107#41130107">answer&lt;/a>,
linking to a
&lt;a href="https://gist.github.com/thiagowfx/970e3931387ed7db9a39709a8a130ee9">gist&lt;/a>.&lt;/p>
&lt;p>I figured to replicate it here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmake" data-lang="cmake">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># - Find Boost
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Copyright (c) 2016 Thiago Perrotta
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Permission is hereby granted, free of charge, to any person obtaining a copy of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># this software and associated documentation files (the &amp;#34;Software&amp;#34;), to deal in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># the Software without restriction, including without limitation the rights to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># the Software, and to permit persons to whom the Software is furnished to do so,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># subject to the following conditions:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># The above copyright notice and this permission notice shall be included in all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># copies or substantial portions of the Software.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># THE SOFTWARE IS PROVIDED &amp;#34;AS IS&amp;#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This module finds if Boost is installed and determines where the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># executables are. It sets the following variables:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_FOUND : boolean - system has Boost
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_LIBRARIES : list(filepath) - the libraries needed to use Boost
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_INCLUDE_DIRS : list(path) - the Boost include directories
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># If Boost is not found, this module downloads it according to the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># following variables:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_ROOT_DIR : path - the Path where Boost will be installed on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_REQUESTED_VERSION : string - the Boost version to be downloaded
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># You can also specify its components:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># find_package(Boost COMPONENTS program_options system)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># which are stored in Boost_FIND_COMPONENTS : list(string)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># You can also specify its behavior:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BOOST_USE_STATIC_LIBS : boolean (default: OFF)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">Boost_FIND_COMPONENTS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	message(&lt;span style="color:#e6db74">FATAL_ERROR&lt;/span> &lt;span style="color:#e6db74">&amp;#34;No COMPONENTS specified for Boost&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>set(&lt;span style="color:#e6db74">BOOST_USE_STATIC_LIBS&lt;/span> &lt;span style="color:#e6db74">false&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Set the library prefix and library suffix properly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>if(&lt;span style="color:#e6db74">BOOST_USE_STATIC_LIBS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">CMAKE_FIND_LIBRARY_PREFIXES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_STATIC_LIBRARY_PREFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">CMAKE_FIND_LIBRARY_SUFFIXES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_STATIC_LIBRARY_SUFFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">LIBRARY_PREFIX&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_STATIC_LIBRARY_PREFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">LIBRARY_SUFFIX&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_STATIC_LIBRARY_SUFFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>else()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">CMAKE_FIND_LIBRARY_PREFIXES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_SHARED_LIBRARY_PREFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">CMAKE_FIND_LIBRARY_SUFFIXES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_SHARED_LIBRARY_SUFFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">LIBRARY_PREFIX&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_SHARED_LIBRARY_PREFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">LIBRARY_SUFFIX&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CMAKE_SHARED_LIBRARY_SUFFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Create a list(string) for the build command (e.g. --with-program_options;--with-system)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># and assigns it to BOOST_COMPONENTS_FOR_BUILD
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>foreach(&lt;span style="color:#e6db74">component&lt;/span> &lt;span style="color:#f92672">${&lt;/span>Boost_FIND_COMPONENTS&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	list(&lt;span style="color:#e6db74">APPEND&lt;/span> &lt;span style="color:#e6db74">BOOST_COMPONENTS_FOR_BUILD&lt;/span> &lt;span style="color:#e6db74">--with-&lt;/span>&lt;span style="color:#f92672">${&lt;/span>component&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endforeach()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Create a string for the first component (e.g. boost_program_options)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># and assigns it to Boost_FIND_COMPONENTS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>list(&lt;span style="color:#e6db74">GET&lt;/span> &lt;span style="color:#e6db74">Boost_FIND_COMPONENTS&lt;/span> &lt;span style="color:#e6db74">0&lt;/span> &lt;span style="color:#e6db74">BOOST_FIRST_COMPONENT&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>set(&lt;span style="color:#e6db74">BOOST_FIRST_COMPONENT&lt;/span> &lt;span style="color:#e6db74">&amp;#34;boost_${BOOST_FIRST_COMPONENT}&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>include(&lt;span style="color:#e6db74">FindPackageHandleStandardArgs&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>macro(&lt;span style="color:#e6db74">DO_FIND_BOOST_SYSTEM&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	find_path(&lt;span style="color:#e6db74">BOOST_INCLUDE_DIR&lt;/span> &lt;span style="color:#e6db74">boost/config.hpp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">PATHS&lt;/span> &lt;span style="color:#e6db74">/usr/local/include&lt;/span> &lt;span style="color:#e6db74">/usr/include&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	find_library(&lt;span style="color:#e6db74">BOOST_LIBRARY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">NAMES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_FIRST_COMPONENT&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">PATHS&lt;/span> &lt;span style="color:#e6db74">/usr/local/lib&lt;/span> &lt;span style="color:#e6db74">/usr/lib&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	FIND_PACKAGE_HANDLE_STANDARD_ARGS(&lt;span style="color:#e6db74">Boost&lt;/span> &lt;span style="color:#e6db74">DEFAULT_MSG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">BOOST_INCLUDE_DIR&lt;/span> &lt;span style="color:#e6db74">BOOST_LIBRARY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_LIBRARY&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_INCLUDE_DIR&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	mark_as_advanced(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span> &lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endmacro()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>macro(&lt;span style="color:#e6db74">DO_FIND_BOOST_ROOT&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">BOOST_ROOT_DIR&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		message(&lt;span style="color:#e6db74">STATUS&lt;/span> &lt;span style="color:#e6db74">&amp;#34;BOOST_ROOT_DIR is not defined, using binary directory.&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		set(&lt;span style="color:#e6db74">BOOST_ROOT_DIR&lt;/span> &lt;span style="color:#f92672">${&lt;/span>CURRENT_CMAKE_BINARY_DIR&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#e6db74">CACHE&lt;/span> &lt;span style="color:#e6db74">PATH&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	find_path(&lt;span style="color:#e6db74">BOOST_INCLUDE_DIR&lt;/span> &lt;span style="color:#e6db74">boost/config.hpp&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">/include&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	find_library(&lt;span style="color:#e6db74">BOOST_LIBRARY&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_FIRST_COMPONENT&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#e6db74">HINTS&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">/lib&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	FIND_PACKAGE_HANDLE_STANDARD_ARGS(&lt;span style="color:#e6db74">Boost&lt;/span> &lt;span style="color:#e6db74">DEFAULT_MSG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">BOOST_INCLUDE_DIR&lt;/span> &lt;span style="color:#e6db74">BOOST_LIBRARY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_LIBRARY&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_INCLUDE_DIR&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	mark_as_advanced(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span> &lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endmacro()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>macro(&lt;span style="color:#e6db74">DO_FIND_BOOST_DOWNLOAD&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">BOOST_REQUESTED_VERSION&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		message(&lt;span style="color:#e6db74">FATAL_ERROR&lt;/span> &lt;span style="color:#e6db74">&amp;#34;BOOST_REQUESTED_VERSION is not defined.&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	string(&lt;span style="color:#e6db74">REPLACE&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#e6db74">BOOST_REQUESTED_VERSION_UNDERSCORE&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_REQUESTED_VERSION&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_MAYBE_STATIC&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	if(&lt;span style="color:#e6db74">BOOST_USE_STATIC_LIBS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		set(&lt;span style="color:#e6db74">BOOST_MAYBE_STATIC&lt;/span> &lt;span style="color:#e6db74">&amp;#34;link=static&amp;#34;&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	include(&lt;span style="color:#e6db74">ExternalProject&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	ExternalProject_Add(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">Boost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">URL&lt;/span> &lt;span style="color:#e6db74">https://downloads.sourceforge.net/project/boost/boost/&lt;/span>&lt;span style="color:#f92672">${&lt;/span>BOOST_REQUESTED_VERSION&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">/boost_&lt;/span>&lt;span style="color:#f92672">${&lt;/span>BOOST_REQUESTED_VERSION_UNDERSCORE&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">UPDATE_COMMAND&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">CONFIGURE_COMMAND&lt;/span> &lt;span style="color:#e6db74">./bootstrap.sh&lt;/span> &lt;span style="color:#e6db74">--prefix=&lt;/span>&lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">BUILD_COMMAND&lt;/span> &lt;span style="color:#e6db74">./b2&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_MAYBE_STATIC&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#e6db74">--prefix=&lt;/span>&lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_COMPONENTS_FOR_BUILD&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#e6db74">install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">BUILD_IN_SOURCE&lt;/span> &lt;span style="color:#e6db74">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">INSTALL_COMMAND&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">INSTALL_DIR&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	ExternalProject_Get_Property(&lt;span style="color:#e6db74">Boost&lt;/span> &lt;span style="color:#e6db74">install_dir&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	set(&lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span> &lt;span style="color:#f92672">${&lt;/span>install_dir&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">/include&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	macro(&lt;span style="color:#e6db74">libraries_to_fullpath&lt;/span> &lt;span style="color:#e6db74">varname&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		set(&lt;span style="color:#f92672">${&lt;/span>varname&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		foreach(&lt;span style="color:#e6db74">component&lt;/span> &lt;span style="color:#f92672">${&lt;/span>Boost_FIND_COMPONENTS&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>			list(&lt;span style="color:#e6db74">APPEND&lt;/span> &lt;span style="color:#f92672">${&lt;/span>varname&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">${&lt;/span>BOOST_ROOT_DIR&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">/lib/&lt;/span>&lt;span style="color:#f92672">${&lt;/span>LIBRARY_PREFIX&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#e6db74">boost_&lt;/span>&lt;span style="color:#f92672">${&lt;/span>component&lt;span style="color:#f92672">}${&lt;/span>LIBRARY_SUFFIX&lt;span style="color:#f92672">}&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>		endforeach()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	endmacro()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	libraries_to_fullpath(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	FIND_PACKAGE_HANDLE_STANDARD_ARGS(&lt;span style="color:#e6db74">Boost&lt;/span> &lt;span style="color:#e6db74">DEFAULT_MSG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span> &lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	mark_as_advanced(&lt;span style="color:#e6db74">BOOST_LIBRARIES&lt;/span> &lt;span style="color:#e6db74">BOOST_INCLUDE_DIRS&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endmacro()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">BOOST_FOUND&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	DO_FIND_BOOST_ROOT()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">BOOST_FOUND&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	DO_FIND_BOOST_SYSTEM()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>if(&lt;span style="color:#e6db74">NOT&lt;/span> &lt;span style="color:#e6db74">BOOST_FOUND&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>	DO_FIND_BOOST_DOWNLOAD()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>endif()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Usage&lt;/strong>: Like any other &lt;a href="https://cmake.org/cmake/help/book/mastering-cmake/chapter/Modules.html">cmake find
module&lt;/a>,
with &lt;code>find_package&lt;/code>.&lt;/p></description></item></channel></rss>