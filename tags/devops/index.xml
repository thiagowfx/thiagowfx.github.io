<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Devops on not just serendipity</title><link>https://www.perrotta.dev/tags/devops/</link><description>Recent content in Devops on not just serendipity</description><generator>Hugo -- 0.131.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 · RSS</copyright><lastBuildDate>Thu, 08 Aug 2024 10:42:49 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Self-documented Makefiles</title><link>https://www.perrotta.dev/2024/08/self-documented-makefiles/</link><pubDate>Thu, 08 Aug 2024 10:42:49 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/self-documented-makefiles/</guid><description>&lt;p>&lt;code>Makefile&lt;/code>s are often great &lt;code>bash&lt;/code> script replacements. Instead of creating a
&lt;code>bash&lt;/code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of &lt;code>Makefile&lt;/code> targets.&lt;/p></description><content:encoded><![CDATA[<p><code>Makefile</code>s are often great <code>bash</code> script replacements. Instead of creating a
<code>bash</code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of <code>Makefile</code> targets.</p>
<p>Recently I found myself writing the following <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># It is idempotent.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>ROOT <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell git rev-parse --show-toplevel<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>TERRAFORM_GITHUB_PATH <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/terraform/modules/global-github&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update helm dependencies.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">helm helm-dep-update</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/argocd&#34;</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/external-secrets&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Edit all files.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">edit</span><span style="color:#f92672">:</span> edit-webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Modify github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">edit-webhook webhook-edit</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">EDITOR&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">/main.tf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Apply github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">webhook</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> -chdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
</span></span></code></pre></div><p>As you can see, there are a bunch of comments on top of each target. The
question is: How to surface these comments to the user?</p>
<p>A <code>make help</code> command would be great.</p>
<p>With a bit of searching, I found:</p>
<ul>
<li><a href="https://gist.github.com/prwhite/8168133">https://gist.github.com/prwhite/8168133</a></li>
<li><a href="https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html">https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html</a></li>
</ul>
<p>These were good starting points. The technique was to transform the above
<code>Makefile</code> into the following one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># It is idempotent.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>ROOT <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell git rev-parse --show-toplevel<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>TERRAFORM_GITHUB_PATH <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/terraform/modules/global-github&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">helm helm-dep-update</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Update helm dependencies.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/argocd&#34;</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/external-secrets&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edit</span><span style="color:#f92672">:</span> edit-webhook  <span style="color:#75715e">## Edit all files.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edit-webhook webhook-edit</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Modify github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">EDITOR&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">/main.tf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">webhook</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Apply github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> -chdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
</span></span></code></pre></div><p>Then we would add a <code>help</code> target to parse the comments after the <code>##</code>.</p>
<p>The first source suggested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>           <span style="color:#75715e">## Show this help.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	@fgrep -h <span style="color:#e6db74">&#34;##&#34;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | fgrep -v fgrep | sed -e <span style="color:#e6db74">&#39;s/\\$$//&#39;</span> | sed -e <span style="color:#e6db74">&#39;s/##//&#39;</span>
</span></span></code></pre></div><p>It is simple and gets the job done, but the formatting was poor:</p>
<pre tabindex="0"><code>% make help
help:            Show this help.
helm helm-dep-update:   Update helm dependencies.
edit: edit-webhook   Edit all files.
edit-webhook webhook-edit:   Modify github webhooks to the deploy servers.
webhook:   Apply github webhooks to the deploy servers.
</code></pre><p>The second source suggested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	@grep -E <span style="color:#e6db74">&#39;^[a-zA-Z_-]+:.*?## .*$$&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | sort | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-30s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</span></span></code></pre></div><p>&hellip;which produces:</p>
<pre tabindex="0"><code>% make help
edit                           Edit all files.
webhook                        Apply github webhooks to the deploy servers.
</code></pre><p>The formatting is great, but alas it does not match multiple targets in a single
line.</p>
<p>I could have modified the targets to be like this:</p>
<pre tabindex="0"><code>edit-webhook: webhook-edit
webhook-edit:  ## Description here
</code></pre><p>However then I would have to duplicate their comments. I wanted to do better.</p>
<p>With a bit of LLM<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> magic from GPT-4o, we can have the best of both worlds,
supporting both single and multiple targets in the same line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Show this help.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	@grep -E <span style="color:#e6db74">&#39;^[a-zA-Z_-]+([ \t]+[a-zA-Z_-]+)*:[ \t]*## .*$$&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&lt;=n; i++) {if (targets[i] != &#34;&#34;) printf &#34;\033[36m%-30s\033[0m %s\n&#34;, targets[i], $$2}}&#39;</span> | sort
</span></span></code></pre></div><p>The output (amazing!):</p>
<pre tabindex="0"><code>% make help
edit-webhook                   Modify github webhooks to the deploy servers.
helm                           Update helm dependencies.
helm-dep-update                Update helm dependencies.
help                           Show this help.
webhook                        Apply github webhooks the deploy servers.
webhook-edit                   Modify github webhooks to the deploy servers.
</code></pre><p>The chat session: <a href="https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6">https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6</a>.</p>
<p>We could also add:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span>.DEFAULT_GOAL <span style="color:#f92672">:=</span> help
</span></span></code></pre></div><p>&hellip;to ensure that a plain <code>make</code> invokation behaves like <code>make help</code>.</p>
<p><strong>Edit(2024-08-08)</strong>: I had to make one small adaptation<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to make it work with
dependencies, which is the whole point of <code>make</code>:</p>
<pre tabindex="0"><code>help:  ## Show this help.
	@grep -E &#39;^[.a-zA-Z_-]+([ \t]+[.a-zA-Z_-]+)*:[ \t.a-zA-Z_-]*## .*$$&#39; $(MAKEFILE_LIST) | awk &#39;BEGIN {FS = &#34;:.*?## &#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&lt;=n; i++) {if (targets[i] != &#34;&#34;) printf &#34;\033[36m%-30s\033[0m %s\n&#34;, targets[i], $$2}}&#39; | sort
</code></pre><p>The previous version would not recognize the following entry:</p>
<pre tabindex="0"><code>all-in-dev: edit webhook  ## Run all necessary steps in the development environment.`
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If I&rsquo;ll start to talk about &ldquo;AI&rdquo; in this blog, the very least I can do is
to call them what they really are: <strong>LLMs</strong>. The &ldquo;AI&rdquo; acronym is currently <em>way</em>
too hyped.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Never fully trust LLMs. Well, drop the <em>fully</em>. Just <strong>never trust LLMs</strong>,
period.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Optimize PNG images</title><link>https://www.perrotta.dev/2024/08/optimize-png-images/</link><pubDate>Tue, 06 Aug 2024 14:39:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/optimize-png-images/</guid><description>&lt;p>Before checking &lt;code>.png&lt;/code> images into git repositories, you should optimize them –
mostly for their file size.&lt;/p></description><content:encoded><![CDATA[<p>Before checking <code>.png</code> images into git repositories, you should optimize them –
mostly for their file size.</p>
<p>The Chromium project provides <a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/tools/resources/optimize-png-files.sh">this
script</a>
to do so. It boils down to installing and running the following executables:</p>
<ul>
<li><code>optipng</code>: <a href="https://optipng.sourceforge.net/">https://optipng.sourceforge.net/</a></li>
<li><code>pngcrush</code>: <a href="https://pmt.sourceforge.io/pngcrush/">https://pmt.sourceforge.io/pngcrush/</a></li>
<li><code>pngout</code>: <a href="https://www.jonof.id.au/kenutils.html">https://www.jonof.id.au/kenutils.html</a></li>
</ul>
<p>The first two are available via homebrew.</p>]]></content:encoded></item><item><title>kubectl: print all secret values in plain text</title><link>https://www.perrotta.dev/2024/08/kubectl-print-all-secret-values-in-plain-text/</link><pubDate>Tue, 06 Aug 2024 13:37:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/kubectl-print-all-secret-values-in-plain-text/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/">kubernetes
secret&lt;/a> with more
than one key-value pair, print &lt;strong>all&lt;/strong> of them in plain text (i.e.
base64-decoded in this context).&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a <a href="https://kubernetes.io/docs/concepts/configuration/secret/">kubernetes
secret</a> with more
than one key-value pair, print <strong>all</strong> of them in plain text (i.e.
base64-decoded in this context).</p>
<p><strong>Edit(2024-08-08)</strong>: It turns out I made a mistake. The effect of the post
below is akin to <code>kubectl describe [...] -o yaml</code>. I&rsquo;ll keep the post for
bookkeeping purposes anyway.</p>
<p>Basically, something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl cat secret -n infra-services my-cool-secret
</span></span></code></pre></div><p>Except that there is no <code>kubectl cat</code>, what a shame. It would be really great if
we had it, for consistency with <code>systemctl cat</code>. Oh well.</p>
<p>There is <code>kubectl edit</code> though – amen, just like <code>systemctl edit</code>. This will
open your <code>$EDITOR</code>. It&rsquo;s often inconvenient to copy text to the clipboard from
your terminal-based editor though, due to intricacies of different terminals,
shells, terminal multiplexers, and OSC-52, therefore I don&rsquo;t deem this as an
acceptable solution.</p>
<p>There is a simple trick though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>EDITOR<span style="color:#f92672">=</span>cat kubectl edit secret -n infra-services my-cool-secret
</span></span></code></pre></div><p>&hellip;which works exactly as you would expect <code>kubectl cat</code> to behave. It displays
a warning at the end:</p>
<pre tabindex="0"><code>Edit cancelled, no changes made.
</code></pre><p>&hellip;however it can be duly ignored.</p>
<p>If we didn&rsquo;t have this trick, we could have:</p>
<ul>
<li>written a bloated tool in golang to pipe to e.g. <a href="https://github.com/ashleyschuett/kubernetes-secret-decode">https://github.com/ashleyschuett/kubernetes-secret-decode</a> (<a href="https://itnext.io/secrets-in-plain-text-13a98f54ef97">via</a>)</li>
<li>used the <code>kubectl edit</code> trick above, with a decent terminal and OSC-52 setup</li>
<li>used <code>jq</code> with its <code>map</code> and <code>base64d</code> constructs (c.f. <a href="https://stackoverflow.com/questions/50286066/kubernetes-kubectl-print-all-secrets">Stack
Overflow</a>)</li>
<li>used <code>kubectl describe</code> with <code>-o jsonpath</code>, specifying every single field, one
by one (super tedious) c.f. <a href="https://www.perrotta.dev/2024/07/kubectl-get-secret-with-jsonpath-and-add-a-newline/">this previous post</a></li>
</ul>]]></content:encoded></item><item><title>Direnv nested</title><link>https://www.perrotta.dev/2024/08/direnv-nested/</link><pubDate>Thu, 01 Aug 2024 01:02:10 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/direnv-nested/</guid><description>&lt;p>I covered &lt;a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/">&lt;code>direnv&lt;/code>&lt;/a> before.&lt;/p>
&lt;p>&lt;strong>New scenario&lt;/strong>: Given a directory structure with two nested &lt;code>.envrc&lt;/code>s:&lt;/p></description><content:encoded><![CDATA[<p>I covered <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a> before.</p>
<p><strong>New scenario</strong>: Given a directory structure with two nested <code>.envrc</code>s:</p>
<pre tabindex="0"><code>% tree -a top
top
├── .envrc
└── inner
    └── .envrc
</code></pre><p>It turns out that, surprisingly, <code>cd top/inner</code> will load <em>only</em>
<code>top/inner/.envrc</code>. The top-level <code>top/.envrc</code> will <em>not</em> be automatically
loaded.</p>
<p>This is intentional, meant for security reasons.</p>
<p>In order to source the parent <code>.envrc</code>, add <code>source_up</code> to the inner one.</p>
<p>Alternatively, <code>source_env ..</code> also works. I prefer <code>source_up</code>.</p>
<p>There&rsquo;s also <code>source_up_if_exists</code>, which works gracefully even if there&rsquo;s
no env file to source upwards.</p>
<p>The full list of built-in functions is available here:
<a href="https://direnv.net/man/direnv-stdlib.1.html">https://direnv.net/man/direnv-stdlib.1.html</a></p>
<p><strong>Reference</strong>: <a href="https://github.com/direnv/direnv/issues/757">https://github.com/direnv/direnv/issues/757</a></p>
<p><strong>Use Case</strong>: Add top-level environment variables to <code>top/.envrc</code>. Add <code>layout</code>
to <code>top/inner/.envrc</code>. For example, perhaps <code>inner</code> is a custom <code>git</code> repository
/ project.</p>]]></content:encoded></item><item><title>Docker on Alpine Linux</title><link>https://www.perrotta.dev/2024/07/docker-on-alpine-linux/</link><pubDate>Tue, 30 Jul 2024 22:56:58 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/docker-on-alpine-linux/</guid><description>&lt;p>In this post: how to properly start &lt;code>docker&lt;/code> on an Alpine Linux server.&lt;/p></description><content:encoded><![CDATA[<p>In this post: how to properly start <code>docker</code> on an Alpine Linux server.</p>
<p>First, install <code>docker</code> and friends:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas apk add docker docker-cli docker-compose
</span></span></code></pre></div><p>Then start the <code>docker</code> service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas service docker start
</span></span></code></pre></div><p>Check if it started successfully:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>service docker status
</span></span></code></pre></div><p>If not, then look at the logs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>less /var/log/docker.log
</span></span></code></pre></div><p>I got an error:</p>
<pre tabindex="0"><code>failed to start daemon: error initializing graphdriver: driver not supported
</code></pre><p>The suggestion was to change the driver to <code>overlay2</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% $EDITOR /etc/docker/daemon.json
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;storage-driver&#34;</span>: <span style="color:#e6db74">&#34;overlay2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Then restart <code>docker</code>.</p>
<p>I got another error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>level<span style="color:#f92672">=</span>error msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;failed to mount overlay: no such device&#34;</span> storage-driver<span style="color:#f92672">=</span>overlay2
</span></span></code></pre></div><p>The suggestion was to reboot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas reboot
</span></span></code></pre></div><p>Then start <code>docker</code> again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas service docker start
</span></span></code></pre></div><p>And now everything works!</p>]]></content:encoded></item><item><title>Parallel</title><link>https://www.perrotta.dev/2024/07/parallel/</link><pubDate>Wed, 24 Jul 2024 14:48:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/parallel/</guid><description>&lt;p>Apparently there are two Unix-y ways to run commands in parallel:&lt;/p>
&lt;ul>
&lt;li>GNU parallel: &lt;a href="https://www.gnu.org/software/parallel/">https://www.gnu.org/software/parallel/&lt;/a>&lt;/li>
&lt;li>moreutils parallel: &lt;a href="https://www.gnu.org/software/parallel/">https://www.gnu.org/software/parallel/&lt;/a>&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p>Apparently there are two Unix-y ways to run commands in parallel:</p>
<ul>
<li>GNU parallel: <a href="https://www.gnu.org/software/parallel/">https://www.gnu.org/software/parallel/</a></li>
<li>moreutils parallel: <a href="https://www.gnu.org/software/parallel/">https://www.gnu.org/software/parallel/</a></li>
</ul>
<p>A simple example with <code>wc -l</code>:</p>
<p>GNU receives input from stdin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>find . -type f | parallel wc -l
</span></span></code></pre></div><p>Moreutils receives input from command-line arguments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>parallel wc -l -- <span style="color:#66d9ef">$(</span>find . -type f<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Style aside, the annoyance is that they are not compatible in Debian, Ubuntu and
macOS (homebrew), due to both having the <code>parallel</code> executable:</p>
<ul>
<li><a href="https://superuser.com/questions/917577/how-can-i-install-gnu-parallel-alongside-moreutils-on-ubuntu-debian">https://superuser.com/questions/917577/how-can-i-install-gnu-parallel-alongside-moreutils-on-ubuntu-debian</a></li>
<li><a href="https://askubuntu.com/questions/1191516/what-happens-to-usr-bin-parallel-if-i-install-the-moreutils-on-top-of-the-paral">https://askubuntu.com/questions/1191516/what-happens-to-usr-bin-parallel-if-i-install-the-moreutils-on-top-of-the-paral</a></li>
</ul>
<p>Debian thread wherein no consensus is achieved:
<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=597050">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=597050</a></p>
<p>I will stick to <code>moreutils</code> due to its simplicity and richer suite.
Nonetheless, it would be better if we didn&rsquo;t have binary clashes like this. It
is really annoying and developer-unfriendly.</p>
<p>Of course, my favorite Linux distributions do not have this issue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% apk info -L moreutils | grep parallel
</span></span><span style="display:flex;"><span>usr/bin/parallel-moreutils
</span></span></code></pre></div><p>&hellip;Alpine just installs <code>parallel</code> from <code>moreutils</code> with another name.</p>
<p>Arch Linux <a href="https://gitlab.archlinux.org/archlinux/packaging/packages/moreutils/-/blob/main/PKGBUILD?ref_type=heads">does the
same</a>:</p>
<pre tabindex="0"><code>mv &#34;$pkgdir&#34;/usr/bin/parallel &#34;$pkgdir&#34;/usr/bin/parallel-moreutils
</code></pre><p>Moreover, GNU Parallel has an annoying citation notice, which the Arch Linux
package <a href="https://gitlab.archlinux.org/archlinux/packaging/packages/parallel/-/blob/main/0001-Remove-citation-things.patch?ref_type=heads">helpfully
removes</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://bugs.launchpad.net/ubuntu/+source/parallel/+bug/1779764">Some</a>
<a href="https://news.ycombinator.com/item?id=15319715">context</a>. Not everyone works
in academia. Also it&rsquo;s quite weird that the program is called &ldquo;GNU
parallel&rdquo;, is published under the GPL, and yet does not seemingly follow the
<a href="https://www.gnu.org/licenses/gpl-faq.en.html#RequireCitation">GPL
guidelines</a>.
<a href="https://git.savannah.gnu.org/cgit/parallel.git/tree/doc/citation-notice-faq.txt#n27">This</a>
is the official FAQ of the program.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>kubectl: get all logs from all pods</title><link>https://www.perrotta.dev/2024/07/kubectl-get-all-logs-from-all-pods/</link><pubDate>Mon, 15 Jul 2024 13:23:35 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/kubectl-get-all-logs-from-all-pods/</guid><description>&lt;p>Frequently:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl logs -n argocd argocd-repo-server-5d59975687-dxnh7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But how do you know what hash to use after &lt;code>server-&lt;/code>?&lt;/p></description><content:encoded><![CDATA[<p>Frequently:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl logs -n argocd argocd-repo-server-5d59975687-dxnh7
</span></span></code></pre></div><p>But how do you know what hash to use after <code>server-</code>?</p>
<p><strong>Option 1)</strong>: TAB auto-completion:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl logs -n argocd argocd-repo-server-&lt;TAB&gt;
</span></span></code></pre></div><p><strong>Caveats</strong>:</p>
<ul>
<li>tab completion for <code>kubectl</code> isn&rsquo;t always properly set up</li>
<li>if there is more than one pod, you would have to type in the first few letters
of the hash before hitting TAB again, that&rsquo;s annoying and non-ergonomic</li>
</ul>
<p><strong>Option 2)</strong>: subshell</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl logs -n argocd <span style="color:#66d9ef">$(</span>kubectl get pod -n argocd | grep argocd-repo-server | cut -f1 -d<span style="color:#e6db74">&#39; &#39;</span> | head -1<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p><strong>Caveats</strong>:</p>
<ul>
<li>a lot of typing</li>
<li><code>head -1</code> is necessary in case there are multiple pods<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<p><strong>Option 3)</strong>: get all logs from all pods that match a given label</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl logs -n argocd -l app<span style="color:#f92672">=</span>app.kubernetes.io/instance<span style="color:#f92672">=</span>argocd
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>--all-containers<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>--ignore-errors<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>This is much more ergonomic.</p>
<p>You still need to figure out what label to use though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ kubectl describe pod -n argocd argocd-repo-server-5d59975687-dxnh7 | grep -A7 -i labels:
</span></span><span style="display:flex;"><span>Labels:           app.kubernetes.io/component<span style="color:#f92672">=</span>repo-server
</span></span><span style="display:flex;"><span>                  app.kubernetes.io/instance<span style="color:#f92672">=</span>argocd
</span></span><span style="display:flex;"><span>                  app.kubernetes.io/managed-by<span style="color:#f92672">=</span>Helm
</span></span><span style="display:flex;"><span>                  app.kubernetes.io/name<span style="color:#f92672">=</span>argocd-repo-server
</span></span><span style="display:flex;"><span>                  app.kubernetes.io/part-of<span style="color:#f92672">=</span>argocd
</span></span><span style="display:flex;"><span>                  app.kubernetes.io/version<span style="color:#f92672">=</span>v2.11.4
</span></span><span style="display:flex;"><span>                  helm.sh/chart<span style="color:#f92672">=</span>argo-cd-7.3.4
</span></span><span style="display:flex;"><span>                  pod-template-hash<span style="color:#f92672">=</span>5d59975687
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://stackoverflow.com/questions/33069736/how-do-i-get-logs-from-all-pods-of-a-kubernetes-replication-controller">https://stackoverflow.com/questions/33069736/how-do-i-get-logs-from-all-pods-of-a-kubernetes-replication-controller</a></p>
<p>Happy logging!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or <code>tail -1</code>, for that matter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>kubectl: get secret with jsonpath and add a newline</title><link>https://www.perrotta.dev/2024/07/kubectl-get-secret-with-jsonpath-and-add-a-newline/</link><pubDate>Tue, 09 Jul 2024 11:36:34 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/kubectl-get-secret-with-jsonpath-and-add-a-newline/</guid><description>&lt;p>When retrieving opaque secrets with &lt;code>kubectl&lt;/code>, one will often invoke this
typical command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ubuntu@ubuntu:~ $ kubectl get secret -n argocd argocd-github-webhook-secret -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.data.value}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>eW91IGFyZSBjdXJpb3VzIGFyZW50IHlvdQ&lt;span style="color:#f92672">==&lt;/span>ubuntu@ubuntu:~ $
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But isn&amp;rsquo;t this ugly? The prompt is concatenated with the output.&lt;/p></description><content:encoded><![CDATA[<p>When retrieving opaque secrets with <code>kubectl</code>, one will often invoke this
typical command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ubuntu@ubuntu:~ $ kubectl get secret -n argocd argocd-github-webhook-secret -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.value}&#39;</span>
</span></span><span style="display:flex;"><span>eW91IGFyZSBjdXJpb3VzIGFyZW50IHlvdQ<span style="color:#f92672">==</span>ubuntu@ubuntu:~ $
</span></span></code></pre></div><p>But isn&rsquo;t this ugly? The prompt is concatenated with the output.</p>
<p>It turns out <code>jsonpath</code> can emit a newline for improved readability:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ubuntu@ubuntu:~ $ kubectl get secret -n argocd argocd-github-webhook-secret -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.value}{&#34;\n&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>eW91IGFyZSBjdXJpb3VzIGFyZW50IHlvdQ<span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>ubuntu@ubuntu:~ $
</span></span></code></pre></div><p>Note that the <code>{&quot;\n&quot;}</code> <strong>must</strong> be quoted.</p>
<p>And then you could pipe it to <code>base64 -d</code> afterwards, as usual, and it&rsquo;s a no-op:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ kubectl get secret -n argocd argocd-github-webhook-secret -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.value}{&#34;\n&#34;}&#39;</span> | base64 -d
</span></span><span style="display:flex;"><span>you are curious arent youubuntu@ubuntu:~ $
</span></span></code></pre></div><p>However, the <code>base64</code> output also swallows the newline. This can be resolved
with a simple <code>echo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ kubectl get secret -n argocd argocd-github-webhook-secret -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.value}{&#34;\n&#34;}&#39;</span> | base64 -d <span style="color:#f92672">&amp;&amp;</span> echo
</span></span><span style="display:flex;"><span>you are curious arent you
</span></span><span style="display:flex;"><span>ubuntu@ubuntu:~ $
</span></span></code></pre></div><p>Newlines are hard, eh?</p>]]></content:encoded></item><item><title>Terraform: perform a global update</title><link>https://www.perrotta.dev/2024/07/terraform-perform-a-global-update/</link><pubDate>Tue, 02 Jul 2024 12:33:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/terraform-perform-a-global-update/</guid><description>&lt;p>Given a &lt;code>terraform/modules&lt;/code> directory tree, we would like to globally update the
minimum required terraform version in all modules.&lt;/p></description><content:encoded><![CDATA[<p>Given a <code>terraform/modules</code> directory tree, we would like to globally update the
minimum required terraform version in all modules.</p>
<ul>
<li>Option 1: Use <code>ack</code> or <code>fd</code> + <code>sed</code>.</li>
<li>Option 2: Use <a href="https://github.com/minamijoyo/tfupdate"><code>tfupdate</code></a>, which can
be installed via <code>homebrew</code> or your favorite package manager (c.f.
<a href="https://repology.org/project/tfupdate/versions">repology</a>).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ tfupdate terraform -r terraform/modules -v <span style="color:#e6db74">&#39;~&gt; 1.6.6&#39;</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Explain a crontab expression</title><link>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p></description><content:encoded><![CDATA[<p>Given, for example, <code>0 0 * * *</code>, how do you figure out when it will run?</p>
<ul>
<li>Option 1: Read the docs! The <a href="https://wiki.archlinux.org/title/Cron">ArchWiki</a>
is frequently a great reference. Alternatively, use your favorite search
engine.</li>
<li>Option 2: Ask ChatGPT! A simple <code>cron: 0 0 * * *</code> prompt is enough. No need
to embezzle it with <code>explain what this does</code> or <code>what does this do?</code>.</li>
<li>Option 3: Paste it into <a href="https://crontab.guru/">https://crontab.guru/</a>.</li>
</ul>]]></content:encoded></item><item><title>Localhost domain</title><link>https://www.perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:</p>
<ul>
<li><a href="http://localdev.me:1313/">http://localdev.me:1313/</a></li>
<li><a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/</a></li>
</ul>
<blockquote>
<p>When I’m doing local development, I sometimes need a domain name that routes
back to localhost. I’ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I’ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.</p>
</blockquote>
<blockquote>
<p><code>localdev.me</code> DNS is served through amazon. The domain name and any subdomains
point to <code>127.0.0.1</code>.</p>
</blockquote>
<blockquote>
<p>The next time you need a custom domain or subdomain for local development,
instead of hancking your hosts file you might consider localdev.me.</p>
</blockquote>
<p>Source: <a href="https://codeengineered.com/blog/2022/localdev-me/">https://codeengineered.com/blog/2022/localdev-me/</a></p>]]></content:encoded></item><item><title>Bcrypt-hash a password</title><link>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure class="align-center ">&lt;a href="https://xkcd.com/936/">
&lt;img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> &lt;/a>&lt;figcaption>
&lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
&lt;/figcaption>
&lt;/figure></description><content:encoded><![CDATA[<p>Given the password <code>correct horse battery staple</code>, we would like to bcrypt-hash
it.</p>
<figure class="align-center "><a href="https://xkcd.com/936/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
         alt="Through 20 years of effort, we&#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Here&rsquo;s one way to do so via the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ htpasswd -nbBC <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#39;correct horse battery staple&#39;</span> | tr -d <span style="color:#e6db74">&#39;:\n&#39;</span> | sed <span style="color:#e6db74">&#39;s/$2y/$2a/&#39;</span>
</span></span></code></pre></div><p>&hellip;which yields:</p>
<pre tabindex="0"><code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
</code></pre><p>You could verify it matches e.g. via <a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/</a>.</p>
<p><strong>Context</strong>: <a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> expects a
bcrypt-hashed password in its config file.</p>]]></content:encoded></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description><content:encoded><![CDATA[<p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.</p>
<h2 id="assumptions">Assumptions</h2>
<ul>
<li>You have <code>git</code>, <code>jq</code> and the <a href="https://cli.github.com/"><code>gh</code></a> command-line tool
installed (<code>brew install gh</code>)</li>
<li>You have a github actions file in
<code>~/.github/workflows/package-release-dispatch.yml</code>.</li>
<li>The action has the following form:</li>
</ul>
<pre tabindex="0"><code>on:
  workflow_dispatch:
    inputs:
      ref:
        description: &#39;Ref to build from. This can either be a SHA or a branch/tag&#39;
        required: true
        type: string
  push:
    branches:
      - master
    paths:
      - &#39;.github/workflows/package-release-dispatch.yml&#39;
      - &#39;helm/**&#39;
</code></pre><p>The goal is to iterate on the <code>jobs:</code> section of the action.</p>
<h2 id="workflow">Workflow</h2>
<p>Trigger an action run from the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml <span style="color:#f92672">[</span>--ref master<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f ref<span style="color:#f92672">=</span>master<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><code>--ref</code> should be the git branch you&rsquo;re working on, for example,
<code>thiagowfx/my-cool-feature</code>.</p>
<p><code>-f</code> provides an input to the workflow. In this case, there&rsquo;s an input named
<code>ref</code>, which is meant to be the branch the action will act upon.</p>
<p>The action takes a little while to trigger, we can <code>sleep</code> to give it some time.
I found that <code>sleep 3</code> is a sensible value (3 seconds).</p>
<p>How to view the action?</p>
<p>First we need to get its ID. Here&rsquo;s one way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span>
</span></span></code></pre></div><h3 id="option-1-via-the-command-line">Option 1) Via the command-line</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run watch &lt;id&gt;
</span></span></code></pre></div><p>It&rsquo;s analogous to <code>watch</code>, continuously refreshing the action progress in the
background, step by step. Example:</p>
<pre tabindex="0"><code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
  ✓ Set up job
  ✓ Checkout source code
  ✓ Run azure/setup-helm@v4
  ✓ Install yq
  ✓ Install helm cm-push plugin
  ✓ Set up Helm repos
  * Helm package all charts sans blacklist
  * Publish all helm packages
  * Post Checkout source code
</code></pre><h3 id="option-2-via-the-web-browser">Option 2) Via the web browser</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run view &lt;id&gt; -w
</span></span></code></pre></div><p>It will open the system web browser in the right page, pertaining to the action
run.</p>
<h2 id="putting-everything-together">Putting everything together</h2>
<h3 id="option-1">Option 1)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run watch <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="option-2">Option 2)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run view <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span> -w
</span></span></code></pre></div>]]></content:encoded></item><item><title>Terraform: AWS deployment to random availability zones</title><link>https://www.perrotta.dev/2024/05/terraform-aws-deployment-to-random-availability-zones/</link><pubDate>Tue, 21 May 2024 14:31:03 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/terraform-aws-deployment-to-random-availability-zones/</guid><description>&lt;p>A common scenario: there&amp;rsquo;s a new deployment you would like to roll out to AWS.
Let&amp;rsquo;s say you pick &amp;ldquo;us-east-1&amp;rdquo; as your cloud region. There are multiple
availability zones within it:&lt;/p>
&lt;ul>
&lt;li>us-east-1a&lt;/li>
&lt;li>us-east-1b&lt;/li>
&lt;li>us-east-1c&lt;/li>
&lt;li>us-east-1d&lt;/li>
&lt;li>us-east-1e&lt;/li>
&lt;li>us-east-1f&lt;/li>
&lt;/ul>
&lt;p>Suppose you want to pick two of them for your service/app, and you don&amp;rsquo;t
particularly care about which one. How to proceed?&lt;/p></description><content:encoded><![CDATA[<p>A common scenario: there&rsquo;s a new deployment you would like to roll out to AWS.
Let&rsquo;s say you pick &ldquo;us-east-1&rdquo; as your cloud region. There are multiple
availability zones within it:</p>
<ul>
<li>us-east-1a</li>
<li>us-east-1b</li>
<li>us-east-1c</li>
<li>us-east-1d</li>
<li>us-east-1e</li>
<li>us-east-1f</li>
</ul>
<p>Suppose you want to pick two of them for your service/app, and you don&rsquo;t
particularly care about which one. How to proceed?</p>
<h2 id="option-1-hard-coding">Option #1: Hard-coding</h2>
<p>Pick two arbitrary zones and hard-code them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;availability_zones&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = list(<span style="color:#a6e22e">string</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = [<span style="color:#e6db74">&#34;us-east-1a&#34;</span>, <span style="color:#e6db74">&#34;us-east-1b&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(var.<span style="color:#a6e22e">availability_zones</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Caveat</strong>: <a href="https://www.goodreads.com/book/show/10639.The_Paradox_of_Choice">The paradox of
choice</a>,
unnecessary decision fatigue.</p>
<h2 id="option-2-pick-the-first-two">Option #2: Pick the first two</h2>
<p>Use the AWS data source to dynamically find all zones, and pick the first two.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;aws_availability_zones&#34;</span> <span style="color:#e6db74">&#34;available&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">state</span> = <span style="color:#e6db74">&#34;available&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(data.<span style="color:#a6e22e">aws_availability_zones</span>.<span style="color:#a6e22e">available</span>.<span style="color:#a6e22e">names</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that <code>terraform plan</code> should display the full zone list.</p>
<p><strong>Caveat</strong>: Heavily biased towards the first two zones.</p>
<h2 id="option-3-random-shuffling">Option #3: Random shuffling</h2>
<p>Pick two zones at random!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;aws_availability_zones&#34;</span> <span style="color:#e6db74">&#34;available&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">state</span> = <span style="color:#e6db74">&#34;available&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;random_shuffle&#34;</span> <span style="color:#e6db74">&#34;aws_availability_zone_names&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">input</span>        = data.<span style="color:#a6e22e">aws_availability_zones</span>.<span style="color:#a6e22e">available</span>.<span style="color:#a6e22e">names</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">result_count</span> = <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(<span style="color:#a6e22e">random_shuffle</span>.<span style="color:#a6e22e">aws_availability_zone_names</span>.<span style="color:#a6e22e">result</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Winner</strong>: In my opinion, this is the most elegant approach.</p>
<p><code>random_shuffle</code> will output the selected regions upon running <code>terraform apply</code>.</p>]]></content:encoded></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p></description><content:encoded><![CDATA[<p>Assume that you have a <a href="https://chartmuseum.com/">Chartmuseum</a> container running
in <a href="https://aws.amazon.com/fargate/">AWS Fargate</a>.</p>
<p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&ldquo;serverless&rdquo;), being part of ECS (Elastic Container Service).</p>
<p>Problem statement: Add a container <em>healthcheck</em> to the chartmuseum task
definition associated with the container.</p>
<p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs</a>
suggest using <code>curl</code>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/ || exit 1&#34;]
</code></pre><p>For Chartmuseum specifically we&rsquo;re interested in its <code>/health</code> endpoint, as per
<a href="https://github.com/helm/chartmuseum/issues/28">this reference</a>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/health || exit 1&#34;]
</code></pre><p>But we&rsquo;re using port 8080:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost:8080/health || exit 1&#34;]
</code></pre><p>If you use this healthcheck for the official chartmuseum image
(<code>ghcr.io/helm/chartmuseum</code>) it will fail, because the Alpine Linux environment
it uses does not contain <code>curl</code>.</p>
<p>A straightforward fix is to use <code>wget</code> instead:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;wget -q --spider http://localhost:8080/health || exit 1&#34;]
</code></pre><p><code>--spider</code> is needed because we do not want to download anything, <code>-q</code> is
optional and short for &ldquo;quiet&rdquo;.</p>
<p>The <code>/health</code> endpoint merely returns a simple JSON:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;healthy&#34;</span>:<span style="color:#66d9ef">true</span>}
</span></span></code></pre></div><p>References: <a href="https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl">https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl</a></p>]]></content:encoded></item></channel></rss>