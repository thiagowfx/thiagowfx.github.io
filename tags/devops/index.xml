<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Devops on not just serendipity</title><link>https://www.perrotta.dev/tags/devops/</link><description>Recent content in Devops on not just serendipity</description><generator>Hugo -- 0.135.0</generator><language>en-us</language><copyright>Copyright Â© 2021 - 2024 Thiago Perrotta Â· CC BY-NC-SA 4.0 Â· RSS Â· Made with â™¥ in ðŸ‡¨ðŸ‡¦</copyright><lastBuildDate>Fri, 11 Oct 2024 11:47:50 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert JSON to YAML</title><link>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</link><pubDate>Fri, 11 Oct 2024 11:47:50 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</guid><description>&lt;p>Given a YAML file that is effectively JSON, convert it to YAML format.&lt;/p></description><content:encoded><![CDATA[<p>Given a YAML file that is effectively JSON, convert it to YAML format.</p>
<h2 id="input">Input</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;The Big Bang Theory&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;characters&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Sheldon&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Leonard&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="output">Output</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -i -P file.yaml
</span></span><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span>title: The Big Bang Theory
</span></span><span style="display:flex;"><span>characters:
</span></span><span style="display:flex;"><span>  - name: Sheldon
</span></span><span style="display:flex;"><span>  - name: Leonard
</span></span></code></pre></div><p><a href="https://github.com/mikefarah/yq"><code>yq</code></a> is like <code>jq</code> for YAML.</p>
<p><code>-i</code> is for in-place modification<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, <code>-P</code> is for pretty-printing.</p>
<p>If you donâ€™t know about <code>-i</code>, you can always use <a href="https://joeyh.name/code/moreutils/"><code>sponge</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -P file.yaml | sponge file.yaml
</span></span></code></pre></div><p>Happy YAMLâ€™ing!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this context avoid using <code>&gt;</code> output redirection because it would mangle the input file. Unless you redirect to another file, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>git misspellings</title><link>https://www.perrotta.dev/2024/10/git-misspellings/</link><pubDate>Thu, 10 Oct 2024 13:26:57 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/git-misspellings/</guid><description>&lt;p>Buried into a &lt;code>~/.bashrc&lt;/code> far away&amp;hellip;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;pre tabindex="0">&lt;code># misspellings for git
alias t=git
alias it=git
alias gi=git
alias gt=git
alias gti=git
&lt;/code>&lt;/pre>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>History makes &lt;em>no mistake&lt;/em>: all these have occurred at least once.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><content:encoded><![CDATA[<p>Buried into a <code>~/.bashrc</code> far away&hellip;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<pre tabindex="0"><code># misspellings for git
alias t=git
alias it=git
alias gi=git
alias gt=git
alias gti=git
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>History makes <em>no mistake</em>: all these have occurred at least once.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>New APKBUILD: argocd</title><link>https://www.perrotta.dev/2024/10/new-apkbuild-argocd/</link><pubDate>Wed, 09 Oct 2024 23:03:32 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/new-apkbuild-argocd/</guid><description>&lt;p>&lt;a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD&lt;/a> is a widely used GitOps
software for Kubernetes Continuous Delivery (see
&lt;a href="https://github.com/argoproj/argo-cd/blob/master/USERS.md">USERS.md&lt;/a>).&lt;/p>
&lt;p>I am quite surprised no one bothered to create an Alpine Linux package for it.&lt;/p>
&lt;p>Until&amp;hellip;&lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/73305">now&lt;/a>,
by yours truly.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> is a widely used GitOps
software for Kubernetes Continuous Delivery (see
<a href="https://github.com/argoproj/argo-cd/blob/master/USERS.md">USERS.md</a>).</p>
<p>I am quite surprised no one bothered to create an Alpine Linux package for it.</p>
<p>Until&hellip;<a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/73305">now</a>,
by yours truly.</p>
<p>This <code>APKBUILD</code> took a bit longer to create than the usual.
There were a couple of issues with <code>-buildmode=pie</code>, addressed with
<code>export CGO_ENABLED=1</code> (via <code>make CGO_FLAG=1</code>).</p>
<p>Also, not every architecture is compatible with it. The following error message
appears in ARM builds:</p>
<pre tabindex="0"><code>cannot use math.MaxInt64 (untyped int constant 9223372036854775807) as int value in argument to env.ParseNumFromEnv (overflows)
</code></pre><p>Anyway, once it is merged upstream, enjoy!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% doas apk add argocd
</span></span></code></pre></div>]]></content:encoded></item><item><title>bash built-in date</title><link>https://www.perrotta.dev/2024/10/bash-built-in-date/</link><pubDate>Mon, 07 Oct 2024 15:12:20 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/bash-built-in-date/</guid><description>&lt;p>To format dates &lt;a href="https://www.gnu.org/software/coreutils/manual/html_node/Examples-of-date.html">GNU
date&lt;/a>
is often used:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ date &lt;span style="color:#e6db74">&amp;#39;+%Y-%m-%d&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2024-10-07
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out bash (&amp;gt;=4.2) has this feature built-in as part of &lt;code>printf&lt;/code>:&lt;/p></description><content:encoded><![CDATA[<p>To format dates <a href="https://www.gnu.org/software/coreutils/manual/html_node/Examples-of-date.html">GNU
date</a>
is often used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ date <span style="color:#e6db74">&#39;+%Y-%m-%d&#39;</span>
</span></span><span style="display:flex;"><span>2024-10-07
</span></span></code></pre></div><p>It turns out bash (&gt;=4.2) has this feature built-in as part of <code>printf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ printf <span style="color:#e6db74">&#39;%(%Y-%m-%d)T\n&#39;</span>
</span></span><span style="display:flex;"><span>2024-10-07
</span></span></code></pre></div><p>It does not work on <code>zsh</code> though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% printf <span style="color:#e6db74">&#39;%(%Y-%m-%d)T\n&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>printf: %<span style="color:#f92672">(</span>: invalid directive
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://blog.marco.ninja/notes/technology/linux/working-with-dates-in-bash-and-other-shells/">https://blog.marco.ninja/notes/technology/linux/working-with-dates-in-bash-and-other-shells/</a></p>]]></content:encoded></item><item><title>cdtmp</title><link>https://www.perrotta.dev/2024/10/cdtmp/</link><pubDate>Mon, 07 Oct 2024 10:40:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/cdtmp/</guid><description>&lt;p>Sometimes I need to do random experimentation in a throwaway directory.&lt;/p>
&lt;p>For that, I have the following &lt;code>cdtmp&lt;/code> function in my shell:&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I need to do random experimentation in a throwaway directory.</p>
<p>For that, I have the following <code>cdtmp</code> function in my shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cdtmp <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	builtin cd <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>mktemp -d <span style="color:#e6db74">&#34;/tmp/</span>$USER<span style="color:#e6db74">-</span><span style="color:#e6db74">${</span>1:+$1-<span style="color:#e6db74">}</span><span style="color:#66d9ef">$(</span>date +%Y-%m-%d<span style="color:#66d9ef">)</span><span style="color:#e6db74">-XXXXXX&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	builtin pwd
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Here are two example usages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cdtmp
</span></span><span style="display:flex;"><span>/tmp/thiago-2024-10-07-V3c3Na
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-V3c3Na
</span></span><span style="display:flex;"><span>% cdtmp devops
</span></span><span style="display:flex;"><span>/tmp/thiago-devops-2024-10-07-P4W1fh
</span></span></code></pre></div><p>This idea was built upon <a href="https://frantic.im/cdtmp/">Alex Kotliarskyi&rsquo;s</a>, which
he describes as:</p>
<blockquote>
<p>Itâ€™s a super simple alias that creates a temporary directory and then jumps
into it. Here are a few examples of what I use it for:</p>
<ul>
<li>Clone a random interesting git repo to experiment with</li>
</ul>
</blockquote>
<p>I also use it for testing one-off bash, C++, golang or python scripts, for
example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cdtmp
</span></span><span style="display:flex;"><span>/tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>% vim main.sh
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>% bash main.sh
</span></span><span style="display:flex;"><span>hello world
</span></span></code></pre></div><p><a href="https://github.com/thiagowfx/.dotfiles/blob/3645ea5811d07c9f4be3cea91c0ffaf43ba4071c/profile/.profile.d/functions.sh#L5">Here</a>
is the definition my dotfiles.</p>]]></content:encoded></item><item><title>â˜… Erratic: human-friendly google3 piper snapshots</title><link>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</link><pubDate>Wed, 02 Oct 2024 13:33:56 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</guid><description>&lt;p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called &lt;code>erratic&lt;/code> (abbrev: &lt;code>er&lt;/code>),
which was a 20% project of another Software Engineer&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description><content:encoded><![CDATA[<p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called <code>erratic</code> (abbrev: <code>er</code>),
which was a 20% project of another Software Engineer<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="google3-workflow">google3 workflow</h2>
<p>The workflow is as follows:</p>
<ul>
<li>Make some changes: <code>g4 open</code>, <code>g4 edit</code>, etc</li>
<li>Create a CL (ChangeList) <code>g4 change</code></li>
</ul>
<p>Now let&rsquo;s say you&rsquo;re anticipating some heavy refactoring, in the same CL<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
that you could potentially regret and want to revert.</p>
<p>This would be a great moment to use <code>erratic</code>. After installing it (or aliasing
it, if using it via X20), run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% er explain <span style="color:#e6db74">&#34;this is working perfectly before bob@ asked me to refactor it&#34;</span>
</span></span></code></pre></div><ul>
<li>Make additional changes</li>
<li>Feel free to make more snapshots (checkpoints), as you see fit</li>
</ul>
<p>If you ever want to roll back, run <code>er list</code>. It will list all explicit
snapshots you annotated so far. Locate the one you want to roll back to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% er list
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span> <span style="color:#e6db74">&#34;this is working perfectly before bob@ asked me to refactor it&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">78</span> <span style="color:#e6db74">&#34;second refactoring&#34;</span>
</span></span></code></pre></div><p>Now just roll back to it:</p>
<pre tabindex="0"><code>% er restore 42
</code></pre><p>Sometimes you&rsquo;ll need to run <code>g4 add</code> afterwards. And we&rsquo;re done!</p>
<p><strong>Colophon</strong>: Why use <code>erratic</code> at all, since CitC already does automatic
periodic snapshots out-of-the-box? Because these automatic snapshots are meant
for machines, not humans; they are not very developer-friendly. You could get
your way around <code>rsync</code> + finding the correct timestamps to copy from, but
that&rsquo;s not fun at all, and not a good use of time either.</p>
<h2 id="git-workflow">git workflow</h2>
<p>How to replicate a similar workflow in a non-Google world?</p>
<p>For most of us, non-Google necessarily means <code>git</code>. Let&rsquo;s ignore <code>hg</code>
(mercurial) in this context.</p>
<p>There is not much to do, actually: <a href="https://github.blog/open-source/git/commits-are-snapshots-not-diffs/">https://github.blog/open-source/git/commits-are-snapshots-not-diffs/</a></p>
<p><code>git</code> commits are already snapshots. The workflow is:</p>
<ul>
<li>Make some changes, then <code>git add</code></li>
<li>Create a branch (<code>git switch --create</code>), commit your changes</li>
<li>To make a snapshot, just make a new commit and annotate it (<code>git commit -m &quot;foo&quot;</code>)</li>
<li>To list your snapshots, run <code>git rev-list $(git show-branch --merge-base HEAD)^..HEAD --pretty</code>. This will list all commits since your branch diverted.
You could add an alias to it in your <code>~/.gitconfig</code>.</li>
<li>To roll back, run <code>git reset --hard {commit}</code>.</li>
</ul>
<p><strong>Caveat</strong>: You will lose track of all commits after <code>{commit}</code>. Although it
would still be possible to recover them with <code>git reflog</code> (in case of a
mistake), that is not a developer-friendly workflow.</p>
<p>Then the follow-up question is: how to roll back without losing track of
intermediate work?</p>
<p>One way is to create a new branch that points out to <code>{commit}</code> instead of
hard-resetting your entire worktree:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git checkout -b mynewbranch <span style="color:#f92672">{</span>commit<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Once you are satisfied, just delete the previous branch and then rename the
current one to it.</p>
<p>Another possibility is the use of <a href="https://git-scm.com/docs/git-worktree">git
worktrees</a> to divert (spin-off) branches.</p>
<p>This becomes a very natural workflow once you repeat it a couple of times.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I have gladly peer bonused him. You should <em>always</em> peer bonus those folks
who helped you become more productive.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Arguably you should create a separate CL for that (go/small-cls), but who
am I to judge? Unless I am your teammate&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>fd: match full path</title><link>https://www.perrotta.dev/2024/10/fd-match-full-path/</link><pubDate>Wed, 02 Oct 2024 13:30:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/fd-match-full-path/</guid><description>&lt;p>When using &lt;a href="https://github.com/sharkdp/fd">&lt;code>fd(1)&lt;/code>&lt;/a>, only the filename is
matched by default.&lt;/p>
&lt;p>To match the full path, use &lt;code>-p&lt;/code>. It is often useful to combine it with &lt;code>--type file&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>When using <a href="https://github.com/sharkdp/fd"><code>fd(1)</code></a>, only the filename is
matched by default.</p>
<p>To match the full path, use <code>-p</code>. It is often useful to combine it with <code>--type file</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -p clustermon --type file
</span></span><span style="display:flex;"><span>apps/base/clustermon/clustermon.yaml
</span></span><span style="display:flex;"><span>apps/base/clustermon/kustomization.yaml
</span></span><span style="display:flex;"><span>apps/overlays/g02/clustermon/patches.yaml
</span></span><span style="display:flex;"><span>apps/overlays/g02/clustermon/values.yaml
</span></span></code></pre></div><p>A natural extension is to pipe it to <code>| ifne xargs -n 1 gsed -i -e '{expression}'</code>. Changes in the entire codebase at your fingertips!</p>]]></content:encoded></item><item><title>ack: match and return only the matched string</title><link>https://www.perrotta.dev/2024/10/ack-match-and-return-only-the-matched-string/</link><pubDate>Tue, 01 Oct 2024 17:59:17 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/ack-match-and-return-only-the-matched-string/</guid><description>&lt;p>&lt;strong>Context&lt;/strong>: Helm charts use &lt;code>.Values.{foo}&lt;/code> in &lt;code>templates/&lt;/code> for templating from
&lt;code>values.yaml&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Goal&lt;/strong>: Return all unique values used in &lt;code>templates/&lt;/code>. The intention for it is
to add them all as defaults to &lt;code>values.yaml&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p><strong>Context</strong>: Helm charts use <code>.Values.{foo}</code> in <code>templates/</code> for templating from
<code>values.yaml</code>.</p>
<p><strong>Goal</strong>: Return all unique values used in <code>templates/</code>. The intention for it is
to add them all as defaults to <code>values.yaml</code>.</p>
<p>First attempt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack <span style="color:#e6db74">&#39;\.Values\.&#39;</span>
</span></span></code></pre></div><p>One could proceed manually from here, but this is not very ergonomic in big helm
charts.</p>
<p>A better (and more precise) attempt is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span></code></pre></div><p>This will match <code>.Values.config.foo</code>, in addition to <code>.Values.foo</code>.</p>
<p>To return only the matched strings, add <code>-o</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span></code></pre></div><p>Here is a real example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>values.yaml
</span></span><span style="display:flex;"><span>349:29:.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>863:29:.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>903:20:.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>To return only the values, add <code>-h</code> (it will hide the filenames):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o -h <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>Now all that is left to do is to pipe it to <code>sort -u</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o -h <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span> | sort -u
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>It turns out that <code>grep</code> also has a <code>-o</code> flag with a similar behavior.</p>]]></content:encoded></item><item><title>helm: list recent chart upgrades</title><link>https://www.perrotta.dev/2024/09/helm-list-recent-chart-upgrades/</link><pubDate>Tue, 24 Sep 2024 14:21:20 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/helm-list-recent-chart-upgrades/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a kubernetes cluster with many helm charts in
different namespaces, how to use &lt;code>helm&lt;/code> to query the list of the last recently
&amp;ldquo;touched&amp;rdquo; charts?&lt;/p>
&lt;p>By &amp;ldquo;touched&amp;rdquo; we mean either installed (via &lt;code>helm install&lt;/code>) or upgraded (via
&lt;code>helm upgrade&lt;/code>).&lt;/p>
&lt;p>Something like: &lt;code>helm ls --all --sort-by updated&lt;/code>. Using &lt;code>kubectl&lt;/code> directly
would also be OK.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a kubernetes cluster with many helm charts in
different namespaces, how to use <code>helm</code> to query the list of the last recently
&ldquo;touched&rdquo; charts?</p>
<p>By &ldquo;touched&rdquo; we mean either installed (via <code>helm install</code>) or upgraded (via
<code>helm upgrade</code>).</p>
<p>Something like: <code>helm ls --all --sort-by updated</code>. Using <code>kubectl</code> directly
would also be OK.</p>
<h2 id="solution">Solution</h2>
<p>The brute force way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm ls --max <span style="color:#ae81ff">99999</span> -A -o json | jq -r <span style="color:#e6db74">&#39;.[] | &#34;\(.updated)\t\(.name)&#34;&#39;</span> | sort | tail | column -t
</span></span></code></pre></div><ul>
<li><code>-A</code> for all namespaces</li>
<li><code>--max 99999</code> to &ldquo;disable&rdquo; <a href="https://github.com/helm/helm/issues/3322">paging</a> (there&rsquo;s no better way as of 2024-09-24)</li>
<li><code>jq</code> to filter out on the &ldquo;updated&rdquo; field</li>
</ul>
<p>Note that a sample json entry looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;hoth-cb7f8a327&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;namespace&#34;</span>: <span style="color:#e6db74">&#34;default&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;revision&#34;</span>: <span style="color:#e6db74">&#34;2&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;updated&#34;</span>: <span style="color:#e6db74">&#34;2024-06-14 15:02:16.775174131 +0000 UTC&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#e6db74">&#34;deployed&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;chart&#34;</span>: <span style="color:#e6db74">&#34;hoth-0.1.0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;app_version&#34;</span>: <span style="color:#e6db74">&#34;1.0.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Sample output of the aforementioned command:</p>
<pre tabindex="0"><code>2024-09-24  10:56:15.655674586  +0000  UTC  geonosis
2024-09-24  10:56:15.731630075  +0000  UTC  coruscant
2024-09-24  11:01:35.156973247  +0000  UTC  endor
2024-09-24  11:02:30.314014351  +0000  UTC  hoth
</code></pre>]]></content:encoded></item><item><title>Life without ack</title><link>https://www.perrotta.dev/2024/09/life-without-ack/</link><pubDate>Sun, 22 Sep 2024 14:30:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/life-without-ack/</guid><description>&lt;p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This time: the upgrade to macOS Sequoia (15.0) broke &lt;code>ack&lt;/code> (Perl).&lt;/p></description><content:encoded><![CDATA[<p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>This time: the upgrade to macOS Sequoia (15.0) broke <code>ack</code> (Perl).</p>
<pre tabindex="0"><code>% ack
zsh: /opt/homebrew/bin/ack: bad interpreter: /usr/bin/perl5.30: no such file or directory
</code></pre><p>I desperately needed to use <code>ack</code>, however there was no internet connection. And
I didn&rsquo;t have any of its alternatives installed (e.g. <code>ag</code>, <code>ripgrep</code> / <code>rg</code>).</p>
<p>Then the best way is to fall back to good ol&rsquo; <code>grep</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<pre tabindex="0"><code>% grep [-l] &#39;\bref\b&#39; **/*
</code></pre><p>Alternatively, within a git repository, there is <code>git grep</code>:</p>
<pre tabindex="0"><code>% git grep [-l] &#39;\bref\b&#39;
</code></pre><p>With <code>git grep</code> there is no need to specify which files to <code>grep</code>, as it entails
all files that belong to the repository&hellip;which happens to be a caveat for newly
created files that were not yet <code>git add</code>-ed.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Homebrew (<code>brew</code>) being <em>almost always</em> one of them.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If <code>grep</code> ever breaks, we are screwed.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>less(1): scroll back one page</title><link>https://www.perrotta.dev/2024/09/less1-scroll-back-one-page/</link><pubDate>Tue, 10 Sep 2024 12:02:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/less1-scroll-back-one-page/</guid><description>&lt;p>&lt;code>less(1)&lt;/code>: you use &lt;code>SPC&lt;/code> to scroll forward. How to scroll back?&lt;/p></description><content:encoded><![CDATA[<p><code>less(1)</code>: you use <code>SPC</code> to scroll forward. How to scroll back?</p>
<p>I would think <code>Shift + SPC</code> would be the sought shortcut, but it isn&rsquo;t.</p>
<p>Press <code>b</code> (short for &ldquo;backward(s)&rdquo;).</p>
<p>&hellip;which also implies: use <code>f</code> to scroll forward.</p>]]></content:encoded></item><item><title>Diceware passphrases</title><link>https://www.perrotta.dev/2024/09/diceware-passphrases/</link><pubDate>Mon, 09 Sep 2024 23:10:57 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/diceware-passphrases/</guid><description>&lt;p>I wanted to create a new secure passphrase for my WLAN (Wi-Fi).&lt;/p></description><content:encoded><![CDATA[<p>I wanted to create a new secure passphrase for my WLAN (Wi-Fi).</p>
<p>It&rsquo;s always an option to use the password generator built into my password
manager, however I wanted to take this opportunity to employ <em>Diceware</em>:</p>
<blockquote>
<p>Diceware Password Generator
Generate high-entropy passwords the easy way!</p>
</blockquote>
<p>The original source has the best explanation: <a href="https://diceware.dmuth.org/">https://diceware.dmuth.org/</a>.</p>
<p>Or you could read <a href="https://en.wikipedia.org/wiki/Diceware">Wikipedia</a> as well.</p>
<p>For example, for this post:</p>
<blockquote>
<p>ScratchObscureTrendHumiliate</p>
<p>Number of possible passwords:
3 quadrillion</p>
</blockquote>
<p>Good (and memorable!) enough for me.</p>]]></content:encoded></item><item><title>End of life package info</title><link>https://www.perrotta.dev/2024/09/end-of-life-package-info/</link><pubDate>Fri, 06 Sep 2024 17:41:30 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/end-of-life-package-info/</guid><description>&lt;p>&lt;a href="https://endoflife.date/">https://endoflife.date/&lt;/a> is like &lt;a href="https://repology.org/">Repology&lt;/a> but, instead
of package versions, it tracks the &lt;em>end of life&lt;/em> of various packages, linux
distributions, frameworks, etc.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://endoflife.date/">https://endoflife.date/</a> is like <a href="https://repology.org/">Repology</a> but, instead
of package versions, it tracks the <em>end of life</em> of various packages, linux
distributions, frameworks, etc.</p>
<p>For example, Alpine Linux: <a href="https://endoflife.date/alpine">https://endoflife.date/alpine</a></p>]]></content:encoded></item><item><title>AWS S3: search by suffix</title><link>https://www.perrotta.dev/2024/09/aws-s3-search-by-suffix/</link><pubDate>Thu, 05 Sep 2024 17:09:38 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/aws-s3-search-by-suffix/</guid><description>&lt;p>Given an AWS S3 bucket, how to recursively list all objects within it that match
a given suffix?&lt;/p></description><content:encoded><![CDATA[<p>Given an AWS S3 bucket, how to recursively list all objects within it that match
a given suffix?</p>
<p>The following example searches for all objects that end with <code>thiagowfx</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>aws s3 rm --profile <span style="color:#f92672">{</span>aws_profile<span style="color:#f92672">}</span> s3://example.com/my/path/ --recursive --dryrun --exclude <span style="color:#e6db74">&#39;*&#39;</span> --include <span style="color:#e6db74">&#34;*thiagowfx&#34;</span>
</span></span></code></pre></div><p>This is a hack with a dry-run deletion operation.</p>
<p>Alternatively, use <code>aws s3 ls</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> plus <code>grep</code> / <code>awk</code> / <code>sed</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>aws s3 ls --profile <span style="color:#f92672">{</span>aws_profile<span style="color:#f92672">}</span> s3://example.com/my/path | awk -F <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;{print $4}&#39;</span> | grep <span style="color:#e6db74">&#39;thiagowfx$&#39;</span>
</span></span></code></pre></div><p>Why would you use <code>rm</code> in lieu of <code>ls</code>? Mostly because of the built-in
<code>--include</code> / <code>--exclude</code> options. If you happen to have millions of objects in
your S3 bucket, then you do not need to list them all.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html">https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>git: create a throwaway branch</title><link>https://www.perrotta.dev/2024/09/git-create-a-throwaway-branch/</link><pubDate>Wed, 04 Sep 2024 22:01:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/git-create-a-throwaway-branch/</guid><description>&lt;p>Let&amp;rsquo;s say you want to submit a quick, perhaps even trivial, one-off pull request
(PR).&lt;/p>
&lt;p>One step you can do to minimize the number of decisions&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to make is to have
a git alias that creates a branch with an arbitrary name.&lt;/p>
&lt;pre tabindex="0">&lt;code>% cat ~/.gitconfig
# ...
[alias]
nbt = !git nb \&amp;#34;thiagowfx/$(shuf -n1 /usr/share/dict/words | tr \&amp;#34;[:upper:]\&amp;#34; \&amp;#34;[:lower:]\&amp;#34;)\&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Running &lt;code>git nbt&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> will create a branch such as &lt;code>thiagowfx/foo&lt;/code>.&lt;/p>
&lt;p>The &lt;code>{username}/&lt;/code> prefix is to make it easier to attribute your branches to
yourself, which can be handy when working collaboratively with other engineers
in a team.&lt;/p>
&lt;p>The word after the slash is sourced from dictionary words on your system.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s say you want to submit a quick, perhaps even trivial, one-off pull request
(PR).</p>
<p>One step you can do to minimize the number of decisions<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to make is to have
a git alias that creates a branch with an arbitrary name.</p>
<pre tabindex="0"><code>% cat ~/.gitconfig
# ...
[alias]
nbt = !git nb \&#34;thiagowfx/$(shuf -n1 /usr/share/dict/words | tr \&#34;[:upper:]\&#34; \&#34;[:lower:]\&#34;)\&#34;
</code></pre><p>Running <code>git nbt</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> will create a branch such as <code>thiagowfx/foo</code>.</p>
<p>The <code>{username}/</code> prefix is to make it easier to attribute your branches to
yourself, which can be handy when working collaboratively with other engineers
in a team.</p>
<p>The word after the slash is sourced from dictionary words on your system.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>See <a href="https://en.wikipedia.org/wiki/Decision_fatigue">https://en.wikipedia.org/wiki/Decision_fatigue</a>, <a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">https://en.wikipedia.org/wiki/The_Paradox_of_Choice</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>nbt</code> stands for &ldquo;new branch throwaway&rdquo;.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>YAML multiline strings</title><link>https://www.perrotta.dev/2024/09/yaml-multiline-strings/</link><pubDate>Tue, 03 Sep 2024 11:55:53 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/yaml-multiline-strings/</guid><description>&lt;p>I keep forgetting what the correct syntax is.&lt;/p>
&lt;p>This reference is the best: &lt;a href="https://yaml-multiline.info/">https://yaml-multiline.info/&lt;/a>&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting what the correct syntax is.</p>
<p>This reference is the best: <a href="https://yaml-multiline.info/">https://yaml-multiline.info/</a></p>
<p>Summary:</p>
<ul>
<li><code>&gt;</code> eats newlines, <code>|</code> keeps them.</li>
<li>Appending a <code>-</code> to either of these eats the newline(s) at the end. Omitting it
keeps one. Appending a <code>+</code> preserves all newlines at the end.</li>
</ul>]]></content:encoded></item><item><title>Helm: list all installed charts in the cluster</title><link>https://www.perrotta.dev/2024/08/helm-list-all-installed-charts-in-the-cluster/</link><pubDate>Mon, 26 Aug 2024 17:57:07 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/helm-list-all-installed-charts-in-the-cluster/</guid><description>&lt;p>In theory this ought to be really easy:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ helm ls -h
[...]
-a, --all show all releases without any filter applied
-A, --all-namespaces list releases across all namespaces
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>In theory this ought to be really easy:</p>
<pre tabindex="0"><code>$ helm ls -h
[...]
  -a, --all                  show all releases without any filter applied
  -A, --all-namespaces       list releases across all namespaces
</code></pre><p>So&hellip;one of these should work, right?</p>
<pre tabindex="0"><code>helm ls -a
helm ls -A
</code></pre><p>I have a <code>sms-service</code> running in the cluster in the <code>default</code> namespace. If I
<code>grep</code> any of the previous commands to <code>sms</code>, it does not show up though.</p>
<p>Then&hellip;maybe <code>helm ls -a -A</code>? Nope.</p>
<p>Here&rsquo;s what works:</p>
<pre tabindex="0"><code>$ helm ls -a --max 9999 | grep sms
sms-service                  	default  	356     	2024-08-26 14:09:50.705277885 +0000 UTC	deployed	sms-v0.1.0
</code></pre><p>Kinda ridiculous, eh?</p>
<pre tabindex="0"><code> -m, --max int              maximum number of releases to fetch (default 256)
</code></pre><p>From <a href="https://helm.sh/docs/helm/helm_list/">https://helm.sh/docs/helm/helm_list/</a>:</p>
<blockquote>
<p>By default, up to 256 items may be returned. To limit this, use the &lsquo;&ndash;max&rsquo;
flag. Setting &lsquo;&ndash;max&rsquo; to 0 will not return all results. Rather, it will return
the server&rsquo;s default, which may be much higher than 256. Pairing the &lsquo;&ndash;max&rsquo;
flag with the &lsquo;&ndash;offset&rsquo; flag allows you to page through results.</p>
</blockquote>
<p>Therefore I settle with this form:</p>
<pre tabindex="0"><code>$ helm ls -a -A --max 9999 | grep sms
</code></pre><p>Happy helming.</p>]]></content:encoded></item><item><title>Diffoscope: recursive diffs</title><link>https://www.perrotta.dev/2024/08/diffoscope-recursive-diffs/</link><pubDate>Sat, 24 Aug 2024 01:09:42 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/diffoscope-recursive-diffs/</guid><description>&lt;p>There are many ways to &lt;code>diff&lt;/code> two individual files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>diff&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://www.colordiff.org/">&lt;code>colordiff&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jeffkaufman/icdiff">&lt;code>icdiff&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dandavison/delta">&lt;code>delta&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>But how can you &lt;code>diff&lt;/code> two individual directories?&lt;/p></description><content:encoded><![CDATA[<p>There are many ways to <code>diff</code> two individual files:</p>
<ul>
<li><code>diff</code></li>
<li><a href="https://www.colordiff.org/"><code>colordiff</code></a></li>
<li><a href="https://github.com/jeffkaufman/icdiff"><code>icdiff</code></a></li>
<li><a href="https://github.com/dandavison/delta"><code>delta</code></a></li>
</ul>
<p>But how can you <code>diff</code> two individual directories?</p>
<p>Enter <a href="https://diffoscope.org/"><code>diffoscope</code></a>.</p>
<p>Install it with your favorite package manager. Usage is as simple as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>diffoscope /path/to/dir1 /path/to/dir2
</span></span></code></pre></div><p>There&rsquo;s also a webapp: <a href="https://try.diffoscope.org/">https://try.diffoscope.org/</a></p>
<p>It is particularly handy in the context of <a href="https://reproducible-builds.org/">Reproducible
Builds</a>.</p>]]></content:encoded></item><item><title>apk autoupdate on alpine linux</title><link>https://www.perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</link><pubDate>Sun, 18 Aug 2024 17:32:48 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Upon running &lt;code>doas apk upgrade&lt;/code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Upon running <code>doas apk upgrade</code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.</p>
<p>Deb-based systems have
<a href="https://manpages.debian.org/bookworm/debian-goodies/checkrestart.8.en.html"><code>checkrestart(8)</code></a>.</p>
<p>On Alpine, the best available approach as of today is <a href="https://github.com/jirutka/apk-autoupdate/">https://github.com/jirutka/apk-autoupdate/</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas apk add apk-autoupdate
</span></span><span style="display:flex;"><span>$EDITOR /etc/apk/autoupdate.conf
</span></span></code></pre></div><p>Then make the two following changes<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre tabindex="0"><code># Because the default is &#39;*&#39;, which will prevent all services from restarting.
services_blacklist=&#34;&#34;

# List of services that should be restarted upon package upgrades.
services_whitelist=&#34;miniflux tailscale&#34;
</code></pre><p>From this point on, whenever there are system upgrades for the aforementioned
services (<code>doas apk upgrade</code>), they will be automatically restarted. There&rsquo;s no
need for <code>doas /etc/init.d/miniflux restart</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>h/t to @fossdd for replying to my
<a href="https://github.com/jirutka/apk-autoupdate/issues/8">https://github.com/jirutka/apk-autoupdate/issues/8</a> thread.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>JSON schema negation</title><link>https://www.perrotta.dev/2024/08/json-schema-negation/</link><pubDate>Tue, 13 Aug 2024 11:27:17 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/json-schema-negation/</guid><description>&lt;p>&lt;a href="https://json-schema.org/">JSON Schema&lt;/a> is a powerful validation tool to enforce
a given structure and/or data type in JSON and YAML files.&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: Disallow &lt;code>aws.iam_role&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, with the implicit goal of
allowing &lt;code>aws.iamRole&lt;/code>. Because naming and sticking to conventions is hard.&lt;/p>
&lt;p>Illustration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">aws&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">iamRole&lt;/span>: &lt;span style="color:#ae81ff">fooArn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">iam_role&lt;/span>: &lt;span style="color:#ae81ff">barArn &lt;/span> &lt;span style="color:#75715e"># &amp;lt;-- disallow&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p><a href="https://json-schema.org/">JSON Schema</a> is a powerful validation tool to enforce
a given structure and/or data type in JSON and YAML files.</p>
<p><strong>Problem statement</strong>: Disallow <code>aws.iam_role</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, with the implicit goal of
allowing <code>aws.iamRole</code>. Because naming and sticking to conventions is hard.</p>
<p>Illustration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">aws</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">iamRole</span>: <span style="color:#ae81ff">fooArn</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">iam_role</span>: <span style="color:#ae81ff">barArn </span> <span style="color:#75715e"># &lt;-- disallow</span>
</span></span></code></pre></div><p>We can accomplish this with the following schema (<code>% cat values.schema.json</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;$schema&#34;</span>: <span style="color:#e6db74">&#34;http://json-schema.org/draft-07/schema#&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Schema that disallows aws.iam_role&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;additionalProperties&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;properties&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;additionalProperties&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;not&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;required&#34;</span>: [<span style="color:#e6db74">&#34;iam_role&#34;</span>]
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Test</strong>: <code>helm lint</code> should fail that schema validation with the aforementioned
input.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is for a <a href="https://helm.sh/docs/topics/charts/#schema-files">helm
chart</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>