<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macos on ¬ just serendipity 🍀</title><link>https://perrotta.dev/tags/macos/</link><description>Recent content in Macos on ¬ just serendipity 🍀</description><generator>Hugo</generator><language>en-us</language><managingEditor>serendipity@perrotta.dev (Thiago Perrotta)</managingEditor><webMaster>serendipity@perrotta.dev (Thiago Perrotta)</webMaster><copyright>© 2021 - 2025 Thiago Perrotta ·
[some rights reserved](https://creativecommons.org/licenses/by-nc-sa/4.0/) ·
a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Wed, 09 Apr 2025 17:56:05 +0200</lastBuildDate><atom:link href="https://perrotta.dev/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>Pipe to claude</title><link>https://perrotta.dev/2025/04/pipe-to-claude/</link><pubDate>Wed, 09 Apr 2025 17:56:05 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/pipe-to-claude/</guid><description>&lt;p>One of the most effective ways to resolve random software development problems
in 2025:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">{&lt;/span>&lt;span style="color:#e5c07b">command&lt;/span> that emits warnings or errors&lt;span style="color:#56b6c2">}&lt;/span> | claude
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>[&lt;code>claude&lt;/code>] is Anthropic&amp;rsquo;s &lt;a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview">Claude
Code&lt;/a>
CLI tool.&lt;/p>
&lt;p>There is a series of little / simple tasks I&amp;rsquo;ve been procrastinating (e.g.
linter issues) that can be quickly resolved with the assistance of a LLM tool.&lt;/p>
&lt;p>There&amp;rsquo;s no silver bullet here: all changes need to be properly reviewed and
tested. Nonetheless, even if the tool is wrong 50% of the time, it&amp;rsquo;s still
faster for me to use the LLM tool as an initial suggestion than having to
do the research myself from scratch.&lt;/p></description></item><item><title>AppleScript discoverability: more Amphetamine</title><link>https://perrotta.dev/2025/04/applescript-discoverability-more-amphetamine/</link><pubDate>Tue, 01 Apr 2025 13:32:26 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/04/applescript-discoverability-more-amphetamine/</guid><description>&lt;p>Previously: &lt;a href="https://perrotta.dev/2025/03/amphetamine-keep-awake/">Amphetamine: Keep awake&lt;/a>.&lt;/p>
&lt;p>The previous setup would turn my external monitor off upon:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-applescript" data-lang="applescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">tell&lt;/span> &lt;span style="color:#e5c07b">application&lt;/span> &lt;span style="color:#98c379">&amp;#34;Amphetamine&amp;#34;&lt;/span> &lt;span style="color:#c678dd">to&lt;/span> &lt;span style="color:#e5c07b">start&lt;/span> &lt;span style="color:#e5c07b">new&lt;/span> &lt;span style="color:#e06c75">session&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I needed to modify it to issue that command only when the session is not yet
active.&lt;/p>
&lt;p>Via &lt;a href="https://apple.stackexchange.com/questions/46521/how-do-i-find-out-the-applescript-commands-available-for-a-particular-app">Apple Stack
Exchange&lt;/a>
I noticed I could open the &lt;code>Script Editor.app&lt;/code>, then &lt;code>File &amp;gt; Open Dictionary...&lt;/code>, then select &lt;code>Amphetamine.app&lt;/code>.&lt;/p>
&lt;p>This would open a new window with a list of all available AppleScript commands
to my disposal.&lt;/p>
&lt;p>I quickly spotted one called &lt;code>session is active&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;p>Returns boolean - true or false - indicating whether there is an active session&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;that&amp;rsquo;s exactly what I needed!&lt;/p>
&lt;p>Now I just needed to combine &lt;code>if&lt;/code> + &lt;code>session is active&lt;/code> + &lt;code>start a new session&lt;/code>.&lt;/p>
&lt;p>I don&amp;rsquo;t know AppleScript, and I didn&amp;rsquo;t intend to specialize on it now. In the
old days, I would have used a search engine and/or consulted a Stack Exchange
website to figure out what is the &lt;code>if&lt;/code> syntax. Or maybe even have introspected
the AppleScript documentation / manual.&lt;/p>
&lt;p>But we&amp;rsquo;re in 2025.&lt;/p>
&lt;p>I write &lt;code>llm applescript if &amp;quot;session is active&amp;quot; tell application to start new session&lt;/code> in Chrome. &lt;code>llm&lt;/code> is aliased to
&lt;code>https://chatgpt.com/?hints=search&amp;amp;ref=ext&amp;amp;q=%s&lt;/code>. ChatGPT Search happily tells
me what the correct syntax is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-applescript" data-lang="applescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">tell&lt;/span> &lt;span style="color:#e5c07b">application&lt;/span> &lt;span style="color:#98c379">&amp;#34;Amphetamine&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">if&lt;/span> &lt;span style="color:#56b6c2">not&lt;/span> (&lt;span style="color:#e06c75">session&lt;/span> &lt;span style="color:#56b6c2">is&lt;/span> &lt;span style="color:#e06c75">active&lt;/span>) &lt;span style="color:#c678dd">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">start&lt;/span> &lt;span style="color:#e5c07b">new&lt;/span> &lt;span style="color:#e06c75">session&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">end&lt;/span> &lt;span style="color:#c678dd">if&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">end&lt;/span> &lt;span style="color:#c678dd">tell&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I follow up with &lt;code>inline in osascript&lt;/code>, which results in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>osascript -e &lt;span style="color:#98c379">&amp;#39;tell application &amp;#34;Amphetamine&amp;#34; to if not (session is active) then start new session&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Exactly what I was looking for.&lt;/p>
&lt;p>Moments later there&amp;rsquo;s a new commit in my corp dotfiles:&lt;/p>
&lt;pre tabindex="0">&lt;code>% git show b306e31597b63007bb8c3aadb56340cdb6f52703
commit b306e31597b63007bb8c3aadb56340cdb6f52703
Author: Thiago Perrotta &amp;lt;tbperrotta@gmail.com&amp;gt;
Date: Tue Apr 1 13:31:33 2025 +0200

 better amphetamine

diff --git profile/.profile.d/functions_corp.sh profile/.profile.d/functions_corp.sh
index e58333a..365c176 100644
--- profile/.profile.d/functions_corp.sh
+++ profile/.profile.d/functions_corp.sh
@@ -19,7 +19,7 @@ redacted_login() {
 # Run at the start of the work day
 prodaccess() {
 echo &amp;#34;--&amp;gt; Amphetamine&amp;#34;
- osascript -e &amp;#39;tell application &amp;#34;Amphetamine&amp;#34; to start new session&amp;#39;
+ osascript -e &amp;#39;tell application &amp;#34;Amphetamine&amp;#34; to if not (session is active) then start new session&amp;#39;
&lt;/code>&lt;/pre></description></item><item><title>Amphetamine: Keep awake</title><link>https://perrotta.dev/2025/03/amphetamine-keep-awake/</link><pubDate>Fri, 28 Mar 2025 00:14:32 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/amphetamine-keep-awake/</guid><description>&lt;p>&lt;a href="https://apps.apple.com/us/app/amphetamine/id937984704?mt=12">Amphetamine&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The most awesome keep-awake app ever created for macOS. Amphetamine can keep
your Mac, and optionally its display(s), awake through a super simple on/off
switch, or automatically through easy-to-configure Triggers. Amphetamine is
extremely powerful and includes advanced features for those who need them, yet
remains intuitive and easy-to-use for those who don&amp;rsquo;t need all of the bells
and whistles.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s like &lt;a href="https://www.caffeine-app.net/">Caffeine&lt;/a> (or one of its dozen
clones), but better.&lt;/p>
&lt;p>Here&amp;rsquo;s how I use it:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>on my personal laptop, whenever I am streaming a movie or a TV show (e.g. via
&lt;a href="https://jellyfin.org/">jellyfin&lt;/a>, so that it doesn&amp;rsquo;t cut off the streaming in
the middle&lt;/p>
&lt;/li>
&lt;li>
&lt;p>on my work computer, as soon as I start the work day, so that the VPN stays
connected for the whole day, as well as my SSH sessions&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Upon launching it a system tray icon appears. A left-click opens up its
contextual menu, exposing lots of knobs and details. A right-click toggles it on
/ off.&lt;/p>
&lt;p>I configure the toggle so that it stays awake for a default of 4 hours for my
personal laptop, and 8-10 hours for my work computer (=the duration of an usual
work day).&lt;/p>
&lt;p>If you don&amp;rsquo;t specify a limit then it stays awake indefinitely, which is
counterproductive: (i) spending more energy and battery than necessary and (ii)
from an operational security perspective, it &lt;em>should&lt;/em> ideally self-lock at some
point, in case you forget to do so.&lt;/p>
&lt;p>I just care about keeping internet and sessions connectivity alive, but it&amp;rsquo;s
also possible to configure it to keep the display on.&lt;/p>
&lt;p>For bonus productivity, configure it to always launch at login, so that
activating it is just one (right) click away.&lt;/p>
&lt;p>Apparently I activated it more than 180 times in my personal laptop, effectively
keeping it awake for more than 24 days. At work, more than 250 sessions for more
than 8 days&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>When writing this post, I just learned that I can activate it via
&lt;a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html">AppleScript&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% osascript -e &lt;span style="color:#98c379">&amp;#39;tell application &amp;#34;Amphetamine&amp;#34; to start new session&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now I can augment my &lt;a href="https://perrotta.dev/2024/10/prodaccess/">&lt;code>prodaccess&lt;/code>&lt;/a> script
with that.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>There is definitely something odd with these numbers.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>maccy: pin items</title><link>https://perrotta.dev/2025/03/maccy-pin-items/</link><pubDate>Mon, 24 Mar 2025 13:21:46 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/maccy-pin-items/</guid><description>&lt;p>&lt;a href="https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/">Previously&lt;/a>.&lt;/p>
&lt;p>Sometimes it&amp;rsquo;s useful to have certain code snippets be easily accessible from
the clipboard manager.&lt;/p>
&lt;p>As I use &lt;a href="https://github.com/p0deje/Maccy">Maccy&lt;/a>, I figured I should leverage
its built-in pinning feature to do so.&lt;/p>
&lt;p>It&amp;rsquo;s not intuitive &lt;a href="https://github.com/p0deje/Maccy?tab=readme-ov-file#usage">how to do
it&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>first, focus an existing clipboard entry&lt;/li>
&lt;li>then press &lt;code>OPTION (⌥) + P&lt;/code> (&amp;ldquo;p&amp;rdquo; for &amp;ldquo;pinning&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The item will be moved to the top with a random but permanent keyboard
shortcut. To unpin it, press &lt;code>OPTION (⌥) + P&lt;/code> again.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Pros&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>no need to keep a text editor (or notes app) opened with temporary clipboard
contents to keep copying from (=less overhead)&lt;/li>
&lt;li>no need to keep digging the clipboard manager history to find the same entry
over and over again&lt;/li>
&lt;/ul>
&lt;p>This workflow is decent for temporary entries.
For semi-permanent ones, I should
look into &lt;a href="https://espanso.org/">Espanso&lt;/a> at some point. For now, &lt;a href="https://perrotta.dev/2025/01/raycast-snippets/">Raycast
Snippets&lt;/a> fills in this role.&lt;/p></description></item><item><title>yaml: wrong new line character: expected \n</title><link>https://perrotta.dev/2025/03/yaml-wrong-new-line-character-expected-%5Cn/</link><pubDate>Fri, 14 Mar 2025 15:09:47 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/03/yaml-wrong-new-line-character-expected-%5Cn/</guid><description>&lt;p>Example upstream issue: &lt;a href="https://github.com/sbaudoin/sonar-yaml/issues/24">https://github.com/sbaudoin/sonar-yaml/issues/24&lt;/a>&lt;/p>
&lt;p>How to reproduce:&lt;/p>
&lt;ul>
&lt;li>start with a helm chart in a git repository: &lt;code>helm create foo&lt;/code>&lt;/li>
&lt;li>delete &lt;code>values.yaml&lt;/code>&lt;/li>
&lt;li>commit it, create a github PR&lt;/li>
&lt;li>realize that later on you need to create an empty &lt;code>values.yaml&lt;/code> file: &lt;code>touch values.yaml&lt;/code>&lt;/li>
&lt;li>commit it, push it&lt;/li>
&lt;li>realize that you need to add a comment to the YAML file&lt;/li>
&lt;li>use the github web UI to add a comment. Click edit, and add this comment:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Purposely empty for `ct lint`.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>commit it&lt;/li>
&lt;li>wait for CI checks to run&lt;/li>
&lt;li>&lt;a href="https://github.com/adrienverge/yamllint">&lt;code>yamllint&lt;/code>&lt;/a> will fail:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>yaml: wrong new line character: expected \n
&lt;/code>&lt;/pre>&lt;p>This error can also be observed in &lt;code>vim&lt;/code> (with certain plug-ins).&lt;/p>
&lt;p>&lt;strong>What&amp;rsquo;s the issue?&lt;/strong> It&amp;rsquo;s a line ending problem: CR LF et al being different in
Windows vs Linux / macOS.&lt;/p>
&lt;p>&lt;strong>How to fix it?&lt;/strong> Run &lt;code>dos2unix values.yaml&lt;/code>, commit, profit.&lt;/p>
&lt;p>You can get &lt;code>dos2unix&lt;/code> e.g. via &lt;a href="https://brew.sh/">homebrew&lt;/a>.&lt;/p>
&lt;p>&lt;strong>What&amp;rsquo;s the lesson?&lt;/strong> Avoid the github web UI to edit files, even when in a
rush. ■&lt;/p></description></item><item><title>gh pr view</title><link>https://perrotta.dev/2025/02/gh-pr-view/</link><pubDate>Tue, 25 Feb 2025 11:46:06 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/gh-pr-view/</guid><description>&lt;p>When working on a local git branch that has a github PR associated to it, at
some point you&amp;rsquo;ll want to open its pull request page.&lt;/p>
&lt;p>If you have the &lt;a href="https://cli.github.com/">github CLI&lt;/a> installed (&lt;code>gh&lt;/code>), you can do so with &lt;code>gh pr view --web&lt;/code>.&lt;/p>
&lt;p>If you don&amp;rsquo;t pass &lt;code>--web&lt;/code>, then it will simply output markdown.&lt;/p></description></item><item><title>zsh: setopt magic_equal_subst</title><link>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</link><pubDate>Tue, 18 Feb 2025 13:52:57 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/zsh-setopt-magic_equal_subst/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Write the following command line in &lt;code>zsh&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#56b6c2">=&lt;/span>../../../config/global-dns-changer-
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now press &lt;code>&amp;lt;TAB&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Expected&lt;/strong>: Filename expansion.&lt;/p>
&lt;p>&lt;strong>Observed&lt;/strong>:&lt;/p>
&lt;pre tabindex="0">&lt;code>No matches for: `filename&amp;#39; or `file&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Ugh. How about some magic 🪄?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>setopt magic_equal_subst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file&lt;span style="color:#56b6c2">=&lt;/span>../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>foo&lt;span style="color:#56b6c2">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>bar&lt;span style="color:#56b6c2">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay!&lt;/p>
&lt;p>There&amp;rsquo;s a workaround if you don&amp;rsquo;t want to set the aforementioned option. Just
remove the &lt;code>=&lt;/code> character:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% terraform plan -var-file ../../../config/global-dns-changer-&amp;lt;TAB&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>completing file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>foo&lt;span style="color:#56b6c2">}&lt;/span>.tfvars global-dns-changer-&lt;span style="color:#56b6c2">{&lt;/span>bar&lt;span style="color:#56b6c2">}&lt;/span>.tfvars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I find it&amp;rsquo;s more convenient to have this option work in both situations though.&lt;/p>
&lt;p>(via &lt;a href="https://www.reddit.com/r/zsh/comments/10o018l/glob_expansion_and_tab_completion_after_the_sign/">Reddit&lt;/a>)&lt;/p></description></item><item><title>Quick look preview YAML files on macOS</title><link>https://perrotta.dev/2025/02/quick-look-preview-yaml-files-on-macos/</link><pubDate>Tue, 18 Feb 2025 13:18:33 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/quick-look-preview-yaml-files-on-macos/</guid><description>&lt;p>You may be familiar with &lt;a href="https://support.apple.com/en-gb/guide/mac-help/mh14119/mac">Quick
Look&lt;/a> on macOS.&lt;/p>
&lt;p>On Finder, select a file, then press the space bar. A preview pop-up appears,
wherein you can take a quick glance at the file contents.&lt;/p>
&lt;p>Out-of-the-box many file formats are supported, even for images.&lt;/p>
&lt;p>For developers, two popular formats are not supported:&lt;/p>
&lt;ul>
&lt;li>markdown&lt;/li>
&lt;li>yaml&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve been using &lt;a href="https://github.com/sbarex/QLMarkdown">qlmarkdown&lt;/a> for markdown,
and it works well. There&amp;rsquo;s a homebrew package for it: &lt;code>brew install --cask qlmarkdown&lt;/code>.&lt;/p>
&lt;p>Lately I wanted to add YAML as well. I found
&lt;a href="https://github.com/smittytone/PreviewYaml">PreviewYaml&lt;/a>. It&amp;rsquo;s MIT-Licensed and
open source, but there&amp;rsquo;s no pre-built package for it, and it is not on homebrew
either. The author provides an app in the macOS App Store, but it&amp;rsquo;s not free.&lt;/p>
&lt;p>Upon digging deeper, I found
&lt;a href="https://github.com/sbarex/SourceCodeSyntaxHighlight">https://github.com/sbarex/SourceCodeSyntaxHighlight&lt;/a>. It supports pretty much
every popular extension you&amp;rsquo;ll need as a developer (including &lt;code>.yaml&lt;/code>!). There&amp;rsquo;s
a package for it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% brew install --no-quarantine syntax-highlight
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is simple and works as advertised.&lt;/p>
&lt;p>Should I uninstall &lt;code>qlmarkdown&lt;/code> then? Not really:&lt;/p>
&lt;blockquote>
&lt;p>Markdown files (.md, .rmd): please use QLMarkdown which allows you to choose
whether to display formatted output or the highlighted source code.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Markdown files are not supported&lt;/p>
&lt;p>This is a deliberate choice. Most users want to see the formatted output and
not the source code of their markdown files. If you need to view the markdown
files (also with the possibility of choosing whether to show the formatting or
the source code) I have developed QLMarkdown.&lt;/p>
&lt;/blockquote>
&lt;p>How nice! It turns out both extensions were developed by the same author. Thank
you, @sbarex!&lt;/p></description></item><item><title>Upcoming calendar meeting in macOS menu bar with Raycast</title><link>https://perrotta.dev/2025/02/upcoming-calendar-meeting-in-macos-menu-bar-with-raycast/</link><pubDate>Sat, 08 Feb 2025 13:56:42 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/02/upcoming-calendar-meeting-in-macos-menu-bar-with-raycast/</guid><description>&lt;p>Previously: &lt;a href="https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/">itsycal&lt;/a>.&lt;/p>
&lt;p>The same functionality is built into Raycast:&lt;/p>
&lt;ul>
&lt;li>Open Raycast settings&lt;/li>
&lt;li>Go to the Extensions tab&lt;/li>
&lt;li>Expand Calendar &amp;gt; My Schedule&lt;/li>
&lt;li>Under &amp;ldquo;Menu bar options &amp;gt; Show Events in menu bar&amp;rdquo;, select &amp;ldquo;1 hour before&amp;rdquo; (or
maybe &amp;ldquo;As long as they are upcoming&amp;rdquo;).&lt;/li>
&lt;li>Profit&lt;/li>
&lt;/ul>
&lt;p>It integrates out-of-the-box with the calendar accounts added to the system.&lt;/p>
&lt;p>Clicking the menu bar item displays an agenda overview of other events scheduled
later today.&lt;/p>
&lt;p>Neat and simple! Discovery credits to &lt;a href="https://www.youtube.com/watch?v=bDj7gNfLhog">Daniel
Miessler&lt;/a> – via his &lt;a href="https://newsletter.danielmiessler.com/">Unsupervised
Learning&lt;/a> podcast, which I strongly
recommend.&lt;/p></description></item><item><title>Raycast snippets</title><link>https://perrotta.dev/2025/01/raycast-snippets/</link><pubDate>Wed, 29 Jan 2025 13:52:23 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/raycast-snippets/</guid><description>&lt;p>&lt;a href="https://www.raycast.com/">Raycast&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Your shortcut to everything.&lt;/p>
&lt;p>A collection of powerful productivity tools all within an extendable launcher.
Fast, ergonomic and reliable.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s for macOS only.
I originally heard of it via &lt;a href="https://world.hey.com/dhh">DHH&lt;/a>.&lt;/p>
&lt;p>One of its features I like is &lt;a href="https://manual.raycast.com/snippets">snippets&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Write faster by using snippets to store and insert frequently used text.
Expand them automatically with a keyword.&lt;/p>
&lt;p>Use the Create Snippet command to store a new snippet. If you specify a
keyword, you can simply type it in any application to have it auto-expand
in-place.&lt;/p>
&lt;p>Snippets are handy for frequently used text such as canned email responses,
code or emojis.&lt;/p>
&lt;/blockquote>
&lt;p>For example, I can assign a &lt;code>@@fzf&lt;/code> shortcut so that it expands to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">[[&lt;/span> -f /usr/share/doc/fzf/examples/key-bindings.bash &lt;span style="color:#56b6c2">]]&lt;/span> &lt;span style="color:#56b6c2">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e5c07b">source&lt;/span> /usr/share/doc/fzf/examples/key-bindings.bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;which is quicker than (i) typing it out, (ii) retrieving it from a wiki
and/or second brain app.&lt;/p>
&lt;p>Having text macros like these is handy whenever you do not have full control
over the environment.
If you happen to have control, you could always create a shell alias
and/or a &lt;code>Makefile&lt;/code> target for ergonomics and discoverability.&lt;/p>
&lt;p>These expansions can happen anywhere: terminal emulator, web browser, email
client, LLM prompt.&lt;/p>
&lt;p>A follow-up feature I am interested in exploring is the ability to export
snippets from Raycast to a location within version control, such as
&lt;a href="https://github.com/thiagowfx/.dotfiles">dotfiles&lt;/a>. It would be perfect if I
could manage them all via text in an easy to edit format such as YAML.&lt;/p>
&lt;p>Another snippet example: &lt;code>@@gca&lt;/code> expands to:&lt;/p>
&lt;pre tabindex="0">&lt;code>EDITOR=vim git commit --author=&amp;#34;Thiago Perrotta &amp;lt;{my-corp-email}&amp;gt;&amp;#34;
&lt;/code>&lt;/pre>&lt;p>I chose &lt;code>@@&lt;/code> because that&amp;rsquo;s a chord I am unlikely to type.&lt;/p></description></item><item><title>itsycal: system tray calendar on macOS</title><link>https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/</link><pubDate>Wed, 22 Jan 2025 00:24:51 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2025/01/itsycal-system-tray-calendar-on-macos/</guid><description>&lt;p>Title says it all.&lt;/p>
&lt;p>&lt;a href="https://www.mowglii.com/itsycal/">Itsycal&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Itsycal is a tiny menu bar calendar.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s free, it&amp;rsquo;s available via homebrew, it&amp;rsquo;s discrete and elegant.&lt;/p>
&lt;p>The only caveat is not the app&amp;rsquo;s fault: iCloud calendar synchronization takes
forever&amp;hellip;that&amp;rsquo;s something I should investigate some other day.&lt;/p></description></item><item><title>macOS app shortcuts</title><link>https://perrotta.dev/2024/12/macos-app-shortcuts/</link><pubDate>Tue, 31 Dec 2024 22:26:00 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/macos-app-shortcuts/</guid><description>&lt;p>Let&amp;rsquo;s say you want to assign a keyboard shortcut within a given app to invoke a
menu item.&lt;/p>
&lt;p>To illustrate: Assume that you want to map &lt;code>Cmd + Shift + X&lt;/code> within &lt;code>Logseq.app&lt;/code>
to &amp;ldquo;paste and match style&amp;rdquo;.&lt;/p>
&lt;p>&lt;a href="https://support.apple.com/en-ca/guide/mac-help/mchlp2271/mac">Apple Docs&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>On your Mac, choose Apple menu &amp;gt; System Settings, click Keyboard in the
sidebar (you may need to scroll down), then click Keyboard Shortcuts.&lt;/p>
&lt;p>Select App Shortcuts on the left, click the Add button, click the Application
pop-up menu, then choose a specific app or All Applications.&lt;/p>
&lt;/blockquote>
&lt;p>Choose &lt;code>Logseq.App&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>In the &amp;ldquo;Menu title&amp;rdquo; field, type the menu command for which you want to create
a shortcut, exactly as the command appears in the app, including the &amp;gt;
character (type -&amp;gt;), ellipses (type three periods without spaces), or other
punctuation.&lt;/p>
&lt;p>For example, to set a shortcut for the default ligature command in TextEdit
(Format &amp;gt; Font &amp;gt; Ligatures &amp;gt; Use Default), type Format-&amp;gt;Font-&amp;gt;Ligatures-&amp;gt;Use
Default in the &amp;ldquo;Menu title&amp;rdquo; field. To set a shortcut for the Export as PDF
command (File &amp;gt; Export as PDF…), type File-&amp;gt;Export as PDF… in the field.&lt;/p>
&lt;/blockquote>
&lt;p>Type in &lt;code>Edit-&amp;gt;Paste and Match Style&lt;/code>, case sensitive, no spaces around the &lt;code>-&amp;gt;&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Click in the &amp;ldquo;Keyboard shortcut&amp;rdquo; field, press the key combination that you
want to use as the keyboard shortcut, then click Done.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: This method doesn&amp;rsquo;t work if the keyboard shortcut is already mapped within the
app.&lt;/p>
&lt;p>Credits to &lt;a href="https://til.codeinthehole.com/posts/how-to-bind-custom-keyboard-shortcuts-to-nested-macos-menu-options/">David Winterbottom&lt;/a> for the idea.&lt;/p></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p>
&lt;ol start="2">
&lt;li>force stdout to write to a TTY (or to pretend that it will write to a TTY):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% unbuffer ls --color&lt;span style="color:#56b6c2">=&lt;/span>auto | less -R
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;code>less&lt;/code> will properly recognize and display color output from
&lt;code>ls&lt;/code>.&lt;/p></description></item><item><title>Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p>
&lt;ul>
&lt;li>Browser: Google Chrome on macOS, Chromium on Linux, Safari on iOS.&lt;/li>
&lt;li>Search: A combination of Google and DuckDuckGo (mostly for their &lt;a href="https://duckduckgo.com/bangs">!bangs&lt;/a>).&lt;/li>
&lt;li>Writing: A combination of VSCode, &lt;code>vim&lt;/code> and &lt;a href="https://github.com/MarkEdit-app/MarkEdit">MarkEdit&lt;/a> (macOS markdown editor app). I never got around to long-form writing in Obsidian or Logseq, however it&amp;rsquo;s something I strive to.&lt;/li>
&lt;li>Cloud File Storage: There&amp;rsquo;s no need to share this. Basic OpSec. Why would people share it?&lt;/li>
&lt;li>Chat: WhatsApp remains king in terms of popularity, despite Telegram being superior from an architectural and usability perspective for power users. Facebook Messenger is officially dead at this point. And I&amp;rsquo;m too much of a millennial for all other apps (Discord, Matrix, etc). Disappearing messages exist in all of these, except Instagram.&lt;/li>
&lt;li>Scheduling: There&amp;rsquo;s no real choice here. You use the platform your employer uses. Otherwise, Google Calendar is the most sensible choice other than self-hosting.&lt;/li>
&lt;li>Video Calls: Ditto. I am way too used to Google Meet to justify switching to an alternative at this point.&lt;/li>
&lt;li>Music: Spotify, hands down. YouTube Music is a good fallback. There&amp;rsquo;s no need to pay for YouTube Premium for music, do your research.&lt;/li>
&lt;li>Podcasts: Overcast on iOS.&lt;/li>
&lt;li>Password Management: Once again, why would you share this?&lt;/li>
&lt;li>Code Editor: VScode and &lt;code>vim&lt;/code>. Maybe I&amp;rsquo;ll switch to &lt;code>neovim&lt;/code> at some point. I refrain from using IDEs in general but, when I need to, JetBrains is the answer. I tried &lt;a href="https://zed.dev/">&lt;code>zed&lt;/code>&lt;/a> this year but wasn&amp;rsquo;t convinced, and their core team is quite small. The flurry of &amp;ldquo;AI&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> editors should be ignored, as none of them are likely to stick long-term. Instead, it&amp;rsquo;s better to invest in &amp;ldquo;AI&amp;rdquo; tooling that is editor agnostic; for example, Simon Willison&amp;rsquo;s &lt;a href="https://github.com/simonw/llm">&lt;code>llm&lt;/code>&lt;/a>, or GitHub Copilot.&lt;/li>
&lt;li>Terminal: iTerm2 on macOS. I haven&amp;rsquo;t used desktop linux in a while (:sad:), but I&amp;rsquo;d probably still stick to Tilix and/or Alacritty there. I no longer use hterm (ChromeOS).&lt;/li>
&lt;li>VPN: Unless you&amp;rsquo;re rolling your own, it doesn&amp;rsquo;t matter too much. Avoid the big players if you can afford to.&lt;/li>
&lt;li>Bookmarks: None. &lt;a href="https://www.goodreads.com/book/show/25614984-spark-joy">Absolutely none&lt;/a>. When I need to store &lt;em>transient&lt;/em> link lists, I use my Second Brain app to do so.&lt;/li>
&lt;li>Read It Later: Ditto as above. Otherwise: starring articles on Miniflux, or keeping Safari tabs open until I get to them, or parking a handful of items in an &amp;ldquo;inbox&amp;rdquo; browser bookmarks folder.&lt;/li>
&lt;li>Mail Client: The official clients of my email providers. No agnostic app at this time. It&amp;rsquo;s especially inconvenient to do so on iOS.&lt;/li>
&lt;li>Mail Server: N/A.&lt;/li>
&lt;li>Launcher: &lt;code>Cmd-Space&lt;/code> on macOS a.k.a. Spotlight. I keep Raycast around but I rarely use it. On Linux &lt;code>i3-dmenu-desktop&lt;/code> is still my favorite.&lt;/li>
&lt;li>Screenshots: &lt;code>Cmd-Shift-4&lt;/code> on macOS, or &lt;code>scrot&lt;/code> on Linux.&lt;/li>
&lt;li>Menu Bar: &lt;a href="https://github.com/dwarvesf/hidden">Hidden Bar&lt;/a>. It&amp;rsquo;s free, and available as a cask on homebrew.&lt;/li>
&lt;li>Containers: Rancher Desktop.&lt;/li>
&lt;li>Automation: None. I tried Hammerspoon this year but found no use for it.&lt;/li>
&lt;li>Second Brain: A mixture of Obsidian and Logseq. Which I&amp;rsquo;d really like to end, it would be easier to have a single app to rule them all, as they both support multiple vaults / graphs anyway (e.g. to partition personal vs work notes).&lt;/li>
&lt;li>Operating System: &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a> is my current favorite for servers, and I&amp;rsquo;m biased anyway because I maintain a couple of aports (packages) there. For desktop, it&amp;rsquo;s awfully hard to use anything other than macOS ever since M1 processors got released. I miss Linux desktop from time to time but realistically it&amp;rsquo;s no longer an intrinsic goal of mine; that said, I&amp;rsquo;d likely go back to my beloved Arch Linux should that ever reoccur.&lt;/li>
&lt;li>Shell: &lt;code>zsh&lt;/code> + &lt;a href="https://grml.org/zsh/">&lt;code>grml-zsh-config&lt;/code>&lt;/a>, no change here. Sometimes I think of migrating to &lt;code>fish&lt;/code>, but the POSIX incompability always discourages me to do so.&lt;/li>
&lt;li>Terminal Multiplexer: &lt;code>tmux&lt;/code>, but only for remote sessions (&lt;code>ssh&lt;/code>). Locally I tend to just open new terminal tabs on VSCode and/or iTerm2. Alas, &lt;code>tmux&lt;/code> + &lt;code>VSCode&lt;/code> do not play well together anyway (citation needed, for another day).&lt;/li>
&lt;/ul>
&lt;p>This post was inspired by &lt;a href="https://micro.webology.dev/2024/12/19/default-apps.html">https://micro.webology.dev/2024/12/19/default-apps.html&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>For the correct way to refer to them, pick one of: LLMs, Gen AI, or &amp;ldquo;AI&amp;rdquo;. &lt;em>Never&lt;/em> drop the quotes when using the plain term! Otherwise you fall into the same trap for using the term &amp;ldquo;crypto&amp;rdquo; to distinguish between cryptography and cryptocurrency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pritunl log in via CLI</title><link>https://perrotta.dev/2024/05/pritunl-log-in-via-cli/</link><pubDate>Tue, 07 May 2024 16:03:27 +0200</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/pritunl-log-in-via-cli/</guid><description>&lt;p>&lt;a href="https://pritunl.com/">Pritunl&lt;/a> is an Enterprise Distributed OpenVPN server.&lt;/p>
&lt;p>In order to run its client on macOS, an &lt;code>.app&lt;/code> is provided. However, using it to
log in every day is quite tedious.&lt;/p>
&lt;p>Let&amp;rsquo;s automate it so that we can connect to the VPN with a single command.&lt;/p>
&lt;p>In order to fetch the credentials in this example in a secure manner, we&amp;rsquo;ll be
using 1password. &lt;a href="https://www.passwordstore.org/">&lt;code>pass&lt;/code>&lt;/a> would have worked just
as fine.&lt;/p>
&lt;p>First, configure Pritunl via its app UI, creating a profile for your corp
credentials.&lt;/p>
&lt;p>Then figure out what the profile ID you just created is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">profile_id&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r &lt;span style="color:#98c379">&amp;#39;.[0].id&amp;#39;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, create an entry in 1Password for your Pritunl credentials associated with
the profile above.&lt;/p>
&lt;p>Let&amp;rsquo;s use the &lt;code>op&lt;/code> official CLI tool from 1Password to fetch the password and
the OTP (one-time password) for the &amp;ldquo;Pritunl (VPN)&amp;rdquo; entry (change it
accordingly).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">op_id&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op item get &lt;span style="color:#98c379">&amp;#39;Pritunl (VPN)&amp;#39;&lt;/span> --format json | jq -r &lt;span style="color:#98c379">&amp;#39;.id&amp;#39;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">password&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op &lt;span style="color:#e5c07b">read&lt;/span> &lt;span style="color:#98c379">&amp;#34;op://private/&lt;/span>&lt;span style="color:#e06c75">$op_id&lt;/span>&lt;span style="color:#98c379">/password&amp;#34;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">otp&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op item get &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$op_id&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> --totp&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can use the &lt;code>pritunl-client&lt;/code> to log in programmatically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pritunl-client start &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$profile_id&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> --password &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$password$otp&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then verify it has indeed connected:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pritunl-client list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The trick is that it accepts the concatenation of the password with the OTP as
the password. There&amp;rsquo;s not a separate &lt;code>--otp&lt;/code> flag.&lt;/p>
&lt;p>Putting everything together, we can create a function for our favorite shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Log into corp VPN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pritunl_login&lt;span style="color:#56b6c2">()&lt;/span> &lt;span style="color:#56b6c2">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">local&lt;/span> &lt;span style="color:#e06c75">profile_id&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>/Applications/Pritunl.app/Contents/Resources/pritunl-client list --json | jq -r &lt;span style="color:#98c379">&amp;#39;.[0].id&amp;#39;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">local&lt;/span> &lt;span style="color:#e06c75">op_id&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op item get &lt;span style="color:#98c379">&amp;#39;Pritunl (VPN)&amp;#39;&lt;/span> --format json | jq -r &lt;span style="color:#98c379">&amp;#39;.id&amp;#39;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">local&lt;/span> &lt;span style="color:#e06c75">password&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op &lt;span style="color:#e5c07b">read&lt;/span> &lt;span style="color:#98c379">&amp;#34;op://private/&lt;/span>&lt;span style="color:#e06c75">$op_id&lt;/span>&lt;span style="color:#98c379">/password&amp;#34;&lt;/span>&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e5c07b">local&lt;/span> &lt;span style="color:#e06c75">otp&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#c678dd">$(&lt;/span>op item get &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$op_id&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> --totp&lt;span style="color:#c678dd">)&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	pritunl-client start &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$profile_id&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span> --password &lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#e06c75">$password$otp&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	pritunl-client list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Force captive portal to open</title><link>https://perrotta.dev/2024/02/force-captive-portal-to-open/</link><pubDate>Thu, 22 Feb 2024 09:33:57 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/02/force-captive-portal-to-open/</guid><description>&lt;p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.&lt;/p>
&lt;p>The simplest way to force it to do so is to &lt;a href="https://www.youtube.com/watch?v=DPqdyoTpyEs">turn the Wi-Fi off and on
again&lt;/a>.&lt;/p>
&lt;p>Should it not work, the second way is to open your favorite browser and navigate
to &lt;a href="https://captive.apple.com">captive.apple.com&lt;/a> (macOS, iOS).&lt;/p></description></item><item><title>macOS: remove all empty directories</title><link>https://perrotta.dev/2023/12/macos-remove-all-empty-directories/</link><pubDate>Fri, 29 Dec 2023 02:02:19 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/macos-remove-all-empty-directories/</guid><description>&lt;p>For some odd reason my &lt;a href="https://calibre-ebook.com">Calibre&lt;/a> backup to cloud
storage had a bunch of empty directories. I&amp;rsquo;ve been meaning to remove them, but
it&amp;rsquo;s cumbersome to do so from the web client.&lt;/p>
&lt;p>Instead, let&amp;rsquo;s do it from a local client.&lt;/p>
&lt;p>Upon installing the cloud storage software, a local directory is exposed under
&lt;code>/Users/$USER/Library/CloudStorage&lt;/code> (macOS).&lt;/p>
&lt;p>My first instinct is to use &lt;a href="https://man.archlinux.org/man/find.1.en">&lt;code>find(1)&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find -empty -type d -delete
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However that does not work on macOS:&lt;/p>
&lt;pre tabindex="0">&lt;code>find: illegal option -- e
usage: find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
 find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]
&lt;/code>&lt;/pre>&lt;p>My second go to choice is &lt;a href="https://man.archlinux.org/man/fd.1.en">&lt;code>fd(1)&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ fd -t e -x rmdir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;this lists all empty directories and invokes &lt;code>rmdir&lt;/code> on each of them.&lt;/p></description></item><item><title>macOS: sudo with touch ID: survive upgrades</title><link>https://perrotta.dev/2023/12/macos-sudo-with-touch-id-survive-upgrades/</link><pubDate>Mon, 04 Dec 2023 22:40:21 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/macos-sudo-with-touch-id-survive-upgrades/</guid><description>&lt;p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.&lt;/p>
&lt;p>It is also possible to use it for &lt;code>sudo&lt;/code> authentication via &lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>.&lt;/p>
&lt;p>This was previously covered &lt;a href="https://perrotta.dev/2022/03/macos-sudo-with-touch-id/">here&lt;/a>.&lt;/p>
&lt;p>Now, with macOS Sonoma, it&amp;rsquo;s also possible to make this setting survive OS upgrades.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% sudo cp /etc/pam.d/sudo_local&lt;span style="color:#56b6c2">{&lt;/span>.template,&lt;span style="color:#56b6c2">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sudo &lt;span style="color:#e06c75">$EDITOR&lt;/span> /etc/pam.d/sudo_local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then uncomment (or add, if not existing) the following line:&lt;/p>
&lt;pre tabindex="0">&lt;code>auth sufficient pam_tid.so
&lt;/code>&lt;/pre>&lt;p>You can test it out by opening a new terminal and executing &lt;code>sudo echo&lt;/code>.&lt;/p>
&lt;p>Credits: &lt;a href="https://sixcolors.com/post/2023/08/in-macos-sonoma-touch-id-for-sudo-can-survive-updates/">https://sixcolors.com/post/2023/08/in-macos-sonoma-touch-id-for-sudo-can-survive-updates/&lt;/a>&lt;/p></description></item><item><title>Maccy macOS clipboard manager</title><link>https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/</link><pubDate>Sat, 02 Dec 2023 15:27:06 +0100</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/</guid><description>&lt;p>&lt;strong>Strongly recommended&lt;/strong> to all software developers who use macOS: &lt;a href="https://maccy.app/">Maccy&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Clipboard manager for macOS which does one job - keep your copy history at hand. Period.&lt;/p>
&lt;p>Lightweight. Open source. No fluff.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Shortcut&lt;/strong>: &lt;code>Cmd + Shift + C&lt;/code> to open a clipboard menu with all your recently
copied items, plus a search bar for quick grepping.&lt;/p>
&lt;p>Hands down this is the best piece of software I added to my workflow in 2023,
competing with &lt;a href="https://obsidian.md/">Obsidian&lt;/a> and
&lt;a href="https://culturedcode.com/things/">Things&lt;/a> in terms of productivity.&lt;/p></description></item><item><title>Keychron K2 on macOS: fix Home and End keys</title><link>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://perrotta.dev/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p>
&lt;h2 id="expectations-vs-reality">Expectations vs Reality&lt;/h2>
&lt;p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&amp;rsquo;d expect:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Home&lt;/code> to position the text cursor in the beginning of the line (à la &lt;code>C-a&lt;/code> in emacs)&lt;/li>
&lt;li>&lt;code>End&lt;/code> to position the text cursor in the end of the line (à la &lt;code>C-e&lt;/code> in emacs)&lt;/li>
&lt;/ul>
&lt;p>The only way to provoke these effects &lt;em>out-of-the-box&lt;/em> is by pressing, respectively, the &lt;code>Cmd + Left&lt;/code> and &lt;code>Cmd + Right&lt;/code> shortcuts, as you would normally do in a Macbook laptop native keyboard.&lt;/p>
&lt;p>This is very annoying because it only happens in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys work just fine in both Linux and Windows. &lt;a href="https://www.reddit.com/r/Keychron/comments/ooice5/home_and_end_keys_not_working_on_monterrey/">A reddit user&lt;/a> reported the same issue in &lt;code>/r/keychron&lt;/code>, but the existing thread has no proposed solutions.&lt;/p>
&lt;h2 id="enter-karabiner-elements">Enter Karabiner Elements&lt;/h2>
&lt;p>I&amp;rsquo;ve always heard good things about &lt;a href="http://karabiner-elements.pqrs.org">Karabiner Elements&lt;/a> as a praised one-size-fits-all application for keyboards and macros in macOS, thus decided to give it a try. &lt;strong>Bonus points&lt;/strong>: it is &lt;a href="https://github.com/pqrs-org/Karabiner-Elements">open source&lt;/a>, released into the public domain.&lt;/p>
&lt;p>Upon installing it with &lt;a href="https://formulae.brew.sh/cask/karabiner-elements">Homebrew Cask&lt;/a> (&lt;code>brew install karabiner-elements&lt;/code>), I executed it. Then I needed to give a bunch of permissions to the application via &lt;code>macOS Settings &amp;gt; Security &amp;amp; Privacy &amp;gt; Privacy &amp;gt; Input Monitoring&lt;/code>. The following apps were whitelisted accordingly:&lt;/p>
&lt;ul>
&lt;li>&lt;code>karabiner_grabber&lt;/code>&lt;/li>
&lt;li>&lt;code>karabiner_observer&lt;/code>&lt;/li>
&lt;li>&lt;code>Karabiner-EventViewer.app&lt;/code>: this one is optional, but useful for debugging&lt;/li>
&lt;/ul>
&lt;p>The app is straightforward to use. It allows you to do all sorts of reactions to key codes input events.&lt;/p>
&lt;p>I had a simple idea: I wanted to map &lt;code>Home&lt;/code> to &lt;code>Cmd + Left&lt;/code>, and &lt;code>End&lt;/code> to &lt;code>Cmd + Right&lt;/code>.&lt;/p>
&lt;p>Unfortunately these are considered &amp;ldquo;Complex modifications&amp;rdquo; because they map one origin key to two destination keys. &amp;ldquo;Simple modifications&amp;rdquo; are &lt;em>one-to-one&lt;/em> key mappings. Why is it unfortunate? Because it doesn&amp;rsquo;t seem to be possible to do such mappings via the app UI. Apparently one needs to express those mappings in a &lt;code>.json&lt;/code> file instead.&lt;/p>
&lt;h2 id="ah-communities">Ah, communities&lt;/h2>
&lt;p>Sure, no problem, I was about to do it but then I realized there&amp;rsquo;s an &lt;a href="https://ke-complex-modifications.pqrs.org">official website&lt;/a> for community-maintained mappings. The website is well organized and curated. Why create something fully from scratch when I could just reuse an existing one?&lt;/p>
&lt;p>I found a &amp;ldquo;Keychron K2&amp;rdquo; category which made me instantly happy but it turned out not to be useful, as there were only two defined mappings therein:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard&lt;/li>
&lt;li>Remap some Keychrom K2(US) keys to make it less painful to switch from Macbook(RU) keyboard&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>None of these mattered to me. Then I searched for &lt;code>home to cmd&lt;/code> which led me to &lt;a href="https://ke-complex-modifications.pqrs.org/#HomeEnd">this entry&lt;/a>, which had exactly the mappings I wanted:&lt;/p>
&lt;blockquote>
&lt;p>Home and End&lt;/p>
&lt;ul>
&lt;li>Home to Command Left&lt;/li>
&lt;li>End to Command Right&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://ke-complex-modifications.pqrs.org/json/HomeEnd.json">Its resulting JSON&lt;/a> looks roughly like this (irrelevant bits stripped for the sake of brevity):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;Home and End&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;rules&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;Home to Command Left&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;manipulators&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;basic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;from&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;to&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;left_arrow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;modifiers&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;command&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;End to Command Right&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;manipulators&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;basic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;from&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;end&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;to&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;key_code&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;right_arrow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">&amp;#34;modifiers&amp;#34;&lt;/span>: &lt;span style="color:#98c379">&amp;#34;command&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s conveniently an &lt;strong>Import&lt;/strong> button in the website though, which automatically opens the mappings in Karabiner Elements, so I didn&amp;rsquo;t even need to copy and paste the JSON.&lt;/p>
&lt;h2 id="verdict">Verdict&lt;/h2>
&lt;p>&lt;strong>End Result&lt;/strong>: It worked flawlessly! The only caveat is that from now on I need to keep the Karabiner Elements application running as a daemon, but it is well justified. Plus, if I ever need&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to map additional keys in the future, now I already have a workflow in place to do so.&lt;/p>
&lt;p>Karabiner is like having &lt;a href="https://qmk.fm">QMK&lt;/a> purely at the software layer, which works for any keyboard whatsoever.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>As of this writing: macOS Monterey: 12.3.1.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it&lt;/a>&amp;hellip;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>macOS terminal app gripes</title><link>https://perrotta.dev/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p>
&lt;h2 id="1-no-osc-52-support">1. No OSC-52 support&lt;/h2>
&lt;p>&lt;a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Although &lt;code>Terminal.app&lt;/code> does NOT support OSC 52, here [osc52pty] is the workaround for it.&lt;/p>
&lt;/blockquote>
&lt;p>I dislike this workaround because it requires an external binary. Even though it is a single binary because it is a Golang executable, I still dislike the external dependency.&lt;/p>
&lt;h2 id="2-no-true-color-256-colors">2. No true color (256 colors)&lt;/h2>
&lt;p>What is true color? See &lt;a href="https://stackoverflow.com/questions/6403744/are-there-terminals-that-support-true-color">stack overflow&lt;/a> for context.&lt;/p>
&lt;p>Run the &lt;a href="https://gist.github.com/XVilka/8346728">following&lt;/a> to print a color band, a smooth (gradient) output indicates true color support:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>awk &lt;span style="color:#98c379">&amp;#39;BEGIN{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> s=&amp;#34;/\\/\\/\\/\\/\\&amp;#34;; s=s s s s s s s s;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> for (colnum = 0; colnum&amp;lt;77; colnum++) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> r = 255-(colnum*255/76);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> g = (colnum*510/76);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> b = (colnum*255/76);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> if (g&amp;gt;255) g = 510-g;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> printf &amp;#34;\033[48;2;%d;%d;%dm&amp;#34;, r,g,b;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> printf &amp;#34;\033[38;2;%d;%d;%dm&amp;#34;, 255-r,255-g,255-b;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> printf &amp;#34;%s\033[0m&amp;#34;, substr(s,colnum+1,1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> printf &amp;#34;\n&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379">}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Terminal.app&lt;/code> will not print a gradient.&lt;/p>
&lt;h2 id="3-no-gpu-acceleration">3. No GPU acceleration&lt;/h2>
&lt;p>&lt;a href="https://unix.stackexchange.com/q/658709">https://unix.stackexchange.com/q/658709&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Q: What are the advantages of hardware-accelerated terminal emulators?&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>A: They can potentially be faster at outputting and refreshing vast amounts of information. It could also allow for smooth(er) scrolling. Human beings however are quite slow at reading this information, [&amp;hellip;] the average person is unlikely to be able to comprehend it anyways. CPU usage could be lower but it needs to be tested.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Terminal.app&lt;/code> isn&amp;rsquo;t GPU accelerated.&lt;/p>
&lt;h2 id="recommendations">Recommendations&lt;/h2>
&lt;p>Both &lt;a href="https://alacritty.org">alacritty&lt;/a> and &lt;a href="https://sw.kovidgoyal.net/kitty/">kitty&lt;/a> are decent replacements (or complements) for &lt;code>Terminal.app&lt;/code> that work out-of-the-box, with sensible defaults including all the aforementioned points.&lt;/p></description></item><item><title>macOS: sudo with touch ID</title><link>https://perrotta.dev/2022/03/macos-sudo-with-touch-id/</link><pubDate>Mon, 21 Mar 2022 02:13:27 -0300</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/03/macos-sudo-with-touch-id/</guid><description>&lt;p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.&lt;/p>
&lt;p>It is also possible to use it for &lt;code>sudo&lt;/code> authentication via &lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% &lt;span style="color:#e06c75">$EDITOR&lt;/span> /etc/pam.d/sudo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># sudo: auth account password session&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_tid.so &lt;span style="color:#7f848e"># &amp;lt;== add this line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_smartcard.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_opendirectory.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account required pam_permit.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session required pam_permit.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the file is saved with the added line, a command with &lt;code>sudo&lt;/code> will spawn the touch ID prompt. I confirmed it works on both Terminal.app and Kitty.&lt;/p>
&lt;p>This solution &lt;a href="https://apple.stackexchange.com/a/392407">does not&lt;/a> work within &lt;code>tmux&lt;/code> (confirmed), and apparently within iTerm2 as well (not confirmed). A separate PAM module is needed to do so (&lt;a href="https://github.com/fabianishere/pam_reattach">&lt;code>pam_reattach.so&lt;/code>&lt;/a>). I&amp;rsquo;d rather keep my core dependencies surface small though and not include a third party, so for now I am satisfied with the native touch ID module.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://sixcolors.com/post/2020/11/quick-tip-enable-touch-id-for-sudo/">https://sixcolors.com/post/2020/11/quick-tip-enable-touch-id-for-sudo/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apple.stackexchange.com/a/306324">https://apple.stackexchange.com/a/306324&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p>
&lt;p>For now, I am only adopting &lt;code>nix-env&lt;/code> and &lt;code>nix-shell&lt;/code>, with no &lt;code>*.nix&lt;/code> config
files. This post covers &lt;code>nix-env&lt;/code>.&lt;/p>
&lt;p>For simplicity, think of &lt;code>nix-env&lt;/code> as a package manager, akin to &lt;code>apk&lt;/code>,
&lt;code>pacman&lt;/code>, &lt;code>brew&lt;/code>, &lt;code>apt&lt;/code>, &lt;code>pkg&lt;/code>, etc.&lt;/p>
&lt;h2 id="install-a-package">Install a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#98c379">&amp;#39;/nix/store/jsp0l5ny3kx8p9lx9w9r0x159i9jjnn6-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I see some guides using &lt;code>nix-env -iA&lt;/code> but &lt;code>-i&lt;/code> seems to suffice. We could
optionally specify the &lt;code>nixpkgs.&lt;/code> prefix:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -i nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#98c379">&amp;#39;nixpkgs.moreutils&amp;#39;&lt;/span> matches no derivations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh no! Maybe that&amp;rsquo;s what the &lt;code>-A&lt;/code> is for?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -iA nixpkgs.moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replacing old &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installing &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Indeed! Apparently that &lt;code>-A&lt;/code> thing stands for attribute. The only thing I know
is that there are both &lt;code>nixpkgs.*&lt;/code> and &lt;code>nixos.*&lt;/code>. But I don&amp;rsquo;t care about NixOS
at this point. I&amp;rsquo;ll just ignore &lt;code>-A&lt;/code> from now on, for the time being.&lt;/p>
&lt;h2 id="list-installed-packages">List installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! This actually gets displayed in my &lt;code>less&lt;/code> pager.&lt;/p>
&lt;h2 id="upgrade-installed-packages">Upgrade installed packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy! At this point, I am not super confident whether that works as intended
though. We will find out in a few days when there&amp;rsquo;s some update to one of my
installed CLI applications. I&amp;rsquo;ve heard there&amp;rsquo;s something called nix channel to
control that. Leaving it for another day though.&lt;/p>
&lt;p>&lt;strong>Update(2022-02-18)&lt;/strong>: I learned that &lt;code>nix-env -u&lt;/code> is akin to &lt;code>apt upgrade&lt;/code> or
&lt;code>apk upgrade&lt;/code>. It upgrades installed packages to newer versions but only if it
is aware there are newer versions. To actually refresh the repositories à la
&lt;code>apt update&lt;/code> or &lt;code>apk update&lt;/code>, use &lt;code>nix-channel --update&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: On macOS this needs to be &lt;code>sudo -i nix-channel --update&lt;/code>. See
&lt;a href="https://github.com/NixOS/nix/issues/3595">issue&lt;/a>.&lt;/p>
&lt;h2 id="uninstall-a-package">Uninstall a package&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env --uninstall moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uninstalling &lt;span style="color:#98c379">&amp;#39;moreutils-0.67&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>building &lt;span style="color:#98c379">&amp;#39;/nix/store/5k8rsf4cxg4iz7cqnqirpww6r97bwnqr-user-environment.drv&amp;#39;&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easy!&lt;/p>
&lt;h2 id="search-for-packages">Search for packages&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP &lt;span style="color:#98c379">&amp;#39;.*moreutils.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.*&lt;/code> seems to be needed. It works if I omit them, but only if I write the exact package name (apparently called &amp;lsquo;derivation&amp;rsquo; in Nix):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nixpkgs.moreutils moreutils-0.67
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I write the wrong package name, the following happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -qaP moreutil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: selector &lt;span style="color:#98c379">&amp;#39;moreutil&amp;#39;&lt;/span> matches no derivations, maybe you meant:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moreutils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It was helpful in this case, but I wouldn&amp;rsquo;t always count on that. It is a bit
annoying that there&amp;rsquo;s no &lt;code>nix search moreutils&lt;/code> command, but it seems that
&lt;code>nix-env&lt;/code> is very heavily tailored to use short flags, just like &lt;code>pacman&lt;/code> in
Arch Linux. I got used to &lt;code>pacman&lt;/code>, hopefully I can get used to the &lt;code>nix-env&lt;/code>
short flags at some point.&lt;/p>
&lt;p>Actually I tried it out and there is a &lt;code>nix search&lt;/code> command!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix search moreutils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: experimental Nix feature &lt;span style="color:#98c379">&amp;#39;nix-command&amp;#39;&lt;/span> is disabled; use &lt;span style="color:#98c379">&amp;#39;--extra-experimental-features nix-command&amp;#39;&lt;/span> to override
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This isn&amp;rsquo;t very promising though. How come searching is experimental?! Anyway, I can live with the &lt;code>nix-env&lt;/code> form for now.&lt;/p>
&lt;p>These are the 5 basic package management operations that I needed to bootstrap
my dev environment. Without putting much effort on it, my initial list of package
looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-env -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>atool-0.39.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-interactive-5.1-p12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coreutils-9.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exa-0.10.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fpp-0.9.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fzf-0.29.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git-2.34.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>htop-3.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo-0.92.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jq-1.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>less-600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moreutils-0.67
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ncdu-1.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perl5.34.0-ack-3.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranger-1.9.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stow-2.3.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmux-3.2a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree-1.8.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim-8.2.4186
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>watch-procps-3.3.16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget-1.21.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zoxide-0.8.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Those were very intuitive to find, with the exception of &lt;code>ack&lt;/code> and &lt;code>bash-interactive&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bash&lt;/code> is a bit odd because Nix splits it into two packages:
a non-interactive version and an interactive version. I have no idea why. My
&lt;code>~/.bashrc&lt;/code> wrecked havoc with the non-interactive version.&lt;/li>
&lt;li>&lt;code>ack&lt;/code> is very oddly named. Really. Also: &lt;code>nix-env -i ack&lt;/code> doesn&amp;rsquo;t work, but
&lt;code>nix-env -iA nixpkgs.ack&lt;/code> does. I suspect it will be hard to ignore &lt;code>-A&lt;/code> in
the future.&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Strictly speaking there&amp;rsquo;s nothing special about macOS in this context.
The same setup can also be used in Linux distributions, for example, &lt;a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">Debian
or Ubuntu&lt;/a>.
In fact, this is what I did at $DAYJOB, because relying solely on Debian for
package management is a very big limitation. I find that Nix complements the
Debian repositories very well, the same way that it does for macOS.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>nix-shell in a nutshell</title><link>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</link><pubDate>Thu, 10 Feb 2022 20:48:02 -0500</pubDate><author>serendipity@perrotta.dev (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</guid><description>&lt;p>As soon as we finish installing &lt;a href="https://nixos.org/download.html">&lt;code>Nix&lt;/code>&lt;/a> on
Darwin, we&amp;rsquo;re greeted with a call to action:&lt;/p>
&lt;pre tabindex="0">&lt;code>Alright! We&amp;#39;re done!
Try it! Open a new terminal, and type:

 $ nix-shell -p nix-info --run &amp;#34;nix-info -m&amp;#34;

Thank you for using this installer. If you have any feedback or need
help, don&amp;#39;t hesitate:

You can open an issue at https://github.com/nixos/nix/issues
&lt;/code>&lt;/pre>&lt;h2 id="hello-world-bloated">Hello world (bloated)&lt;/h2>
&lt;p>All right then, let&amp;rsquo;s do it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p nix-info --run &lt;span style="color:#98c379">&amp;#34;nix-info -m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - system: &lt;span style="color:#98c379">`&lt;/span>&lt;span style="color:#98c379">&amp;#34;aarch64-darwin&amp;#34;&lt;/span>&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - host os: &lt;span style="color:#98c379">`&lt;/span>Darwin 21.3.0, macOS 12.2&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - multi-user?: &lt;span style="color:#98c379">`&lt;/span>yes&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sandbox: &lt;span style="color:#98c379">`&lt;/span>no&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: &lt;span style="color:#98c379">`&lt;/span>nix-env &lt;span style="color:#56b6c2">(&lt;/span>Nix&lt;span style="color:#56b6c2">)&lt;/span> 2.6.0&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - channels&lt;span style="color:#56b6c2">(&lt;/span>root&lt;span style="color:#56b6c2">)&lt;/span>: &lt;span style="color:#98c379">`&lt;/span>&lt;span style="color:#98c379">&amp;#34;nixpkgs&amp;#34;&lt;/span>&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - nixpkgs: &lt;span style="color:#98c379">`&lt;/span>/nix/var/nix/profiles/per-user/root/channels/nixpkgs&lt;span style="color:#98c379">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cool, it works. Let&amp;rsquo;s break it down a bit.&lt;/p>
&lt;h2 id="hello-world-classic">Hello world (classic)&lt;/h2>
&lt;p>Nix shell creates an ephemeral shell environment with the customizations you
want. The most basic customization is to make a given set of packages
available. There&amp;rsquo;s a &lt;code>hello&lt;/code> package:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In case you&amp;rsquo;re curious, this is a GNU binary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ hello --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hello &lt;span style="color:#56b6c2">(&lt;/span>GNU Hello&lt;span style="color:#56b6c2">)&lt;/span> 2.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#56b6c2">(&lt;/span>C&lt;span style="color:#56b6c2">)&lt;/span> &lt;span style="color:#d19a66">2014&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>License GPLv3+: GNU GPL version &lt;span style="color:#d19a66">3&lt;/span> or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software: you are free to change and redistribute it.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>There is NO WARRANTY, to the extent permitted by law.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have no idea why they are in version 2.10 and what their changelog is. It&amp;rsquo;s
such a simple binary&amp;hellip;&lt;/p>
&lt;p>If you exit the shell, &lt;code>hello&lt;/code> seemingly vanishes:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ exit
exit
$ hello
zsh: command not found: hello
&lt;/code>&lt;/pre>&lt;p>An easy way to think of &lt;code>nix-shell&lt;/code> is like an ephemeral sandbox where all your
desired packages are made available when you enter it. It&amp;rsquo;s possible to provide
more than one package, naturally. It&amp;rsquo;s also possible to provide a &lt;code>shell.nix&lt;/code>
file with the package declarations, so that when you can &lt;code>nix-shell&lt;/code> without
any arguments.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat shell.nix
{ pkgs ? import &amp;lt;nixpkgs&amp;gt; {} }:
 pkgs.mkShell {
 # nativeBuildInputs is usually what you want -- tools you need to run
 nativeBuildInputs = [ pkgs.buildPackages.hello ];
}
$ nix-shell
$ hello
Hello, world!
&lt;/code>&lt;/pre>&lt;h2 id="hello-world-oneshot">Hello world (oneshot)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p hello --run hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello, world!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This oneshot style doesn&amp;rsquo;t enter the shell, it just runs the given &lt;code>--run&lt;/code>
command and then exits.&lt;/p>
&lt;p>This post just scratched the surface of what &lt;code>nix-shell&lt;/code> can do. See the
references below for more in-depth guides about it.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cuddly-octo-palm-tree.com/posts/2021-12-19-tyska-nix-shell/">Tools You Should Know About: nix-shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ghedam.at/15978/an-introduction-to-nix-shell">An introduction to nix-shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nixos.org/manual/nix/stable/command-ref/nix-shell.html">NixOS manual: &lt;code>nix-shell&lt;/code>&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>