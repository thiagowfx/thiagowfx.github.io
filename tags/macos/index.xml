<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macos on not just serendipity</title><link>https://perrotta.dev/tags/macos/</link><description>Recent content in Macos on not just serendipity</description><generator>Hugo</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><lastBuildDate>Mon, 23 Dec 2024 21:41:38 -0300</lastBuildDate><atom:link href="https://perrotta.dev/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p></description></item><item><title>Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p></description></item><item><title>Pritunl log in via CLI</title><link>https://perrotta.dev/2024/05/pritunl-log-in-via-cli/</link><pubDate>Tue, 07 May 2024 16:03:27 +0200</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/05/pritunl-log-in-via-cli/</guid><description>&lt;p>&lt;a href="https://pritunl.com/">Pritunl&lt;/a> is an Enterprise Distributed OpenVPN server.&lt;/p>
&lt;p>In order to run its client on macOS, an &lt;code>.app&lt;/code> is provided. However, using it to
log in every day is quite tedious.&lt;/p>
&lt;p>Let&amp;rsquo;s automate it so that we can connect to the VPN with a single command.&lt;/p>
&lt;p>In order to fetch the credentials in this example in a secure manner, we&amp;rsquo;ll be
using 1password. &lt;a href="https://www.passwordstore.org/">&lt;code>pass&lt;/code>&lt;/a> would have worked just
as fine.&lt;/p>
&lt;p>First, configure Pritunl via its app UI, creating a profile for your corp
credentials.&lt;/p></description></item><item><title>Force captive portal to open</title><link>https://perrotta.dev/2024/02/force-captive-portal-to-open/</link><pubDate>Thu, 22 Feb 2024 09:33:57 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/02/force-captive-portal-to-open/</guid><description>&lt;p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.&lt;/p>
&lt;p>The simplest way to force it to do so is to &lt;a href="https://www.youtube.com/watch?v=DPqdyoTpyEs">turn the Wi-Fi off and on
again&lt;/a>.&lt;/p>
&lt;p>Should it not work, the second way is to open your favorite browser and navigate
to &lt;a href="https://captive.apple.com">captive.apple.com&lt;/a> (macOS, iOS).&lt;/p></description></item><item><title>macOS: remove all empty directories</title><link>https://perrotta.dev/2023/12/macos-remove-all-empty-directories/</link><pubDate>Fri, 29 Dec 2023 02:02:19 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/macos-remove-all-empty-directories/</guid><description>&lt;p>For some odd reason my &lt;a href="https://calibre-ebook.com">Calibre&lt;/a> backup to cloud
storage had a bunch of empty directories. I&amp;rsquo;ve been meaning to remove them, but
it&amp;rsquo;s cumbersome to do so from the web client.&lt;/p>
&lt;p>Instead, let&amp;rsquo;s do it from a local client.&lt;/p>
&lt;p>Upon installing the cloud storage software, a local directory is exposed under
&lt;code>/Users/$USER/Library/CloudStorage&lt;/code> (macOS).&lt;/p>
&lt;p>My first instinct is to use &lt;a href="https://man.archlinux.org/man/find.1.en">&lt;code>find(1)&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ find -empty -type d -delete
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However that does not work on macOS:&lt;/p></description></item><item><title>macOS: sudo with touch ID: survive upgrades</title><link>https://perrotta.dev/2023/12/macos-sudo-with-touch-id-survive-upgrades/</link><pubDate>Mon, 04 Dec 2023 22:40:21 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/macos-sudo-with-touch-id-survive-upgrades/</guid><description>&lt;p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.&lt;/p>
&lt;p>It is also possible to use it for &lt;code>sudo&lt;/code> authentication via &lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>.&lt;/p>
&lt;p>This was previously covered &lt;a href="https://perrotta.dev/2022/03/macos-sudo-with-touch-id/">here&lt;/a>.&lt;/p>
&lt;p>Now, with macOS Sonoma, it&amp;rsquo;s also possible to make this setting survive OS upgrades.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% sudo cp /etc/pam.d/sudo_local&lt;span style="color:#f92672">{&lt;/span>.template,&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sudo $EDITOR /etc/pam.d/sudo_local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then uncomment (or add, if not existing) the following line:&lt;/p>
&lt;pre tabindex="0">&lt;code>auth sufficient pam_tid.so
&lt;/code>&lt;/pre>&lt;p>You can test it out by opening a new terminal and executing &lt;code>sudo echo&lt;/code>.&lt;/p></description></item><item><title>Maccy macOS clipboard manager</title><link>https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/</link><pubDate>Sat, 02 Dec 2023 15:27:06 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2023/12/maccy-macos-clipboard-manager/</guid><description>&lt;p>&lt;strong>Strongly recommended&lt;/strong> to all software developers who use macOS: &lt;a href="https://maccy.app/">Maccy&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Clipboard manager for macOS which does one job - keep your copy history at hand. Period.&lt;/p>
&lt;p>Lightweight. Open source. No fluff.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Shortcut&lt;/strong>: &lt;code>Cmd + Shift + C&lt;/code> to open a clipboard menu with all your recently
copied items, plus a search bar for quick grepping.&lt;/p>
&lt;p>Hands down this is the best piece of software I added to my workflow in 2023,
competing with &lt;a href="https://obsidian.md/">Obsidian&lt;/a> and
&lt;a href="https://culturedcode.com/things/">Things&lt;/a> in terms of productivity.&lt;/p></description></item><item><title>Keychron K2 on macOS: fix Home and End keys</title><link>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://perrotta.dev/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p>
&lt;h2 id="expectations-vs-reality">Expectations vs Reality&lt;/h2>
&lt;p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&amp;rsquo;d expect:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Home&lt;/code> to position the text cursor in the beginning of the line (à la &lt;code>C-a&lt;/code> in emacs)&lt;/li>
&lt;li>&lt;code>End&lt;/code> to position the text cursor in the end of the line (à la &lt;code>C-e&lt;/code> in emacs)&lt;/li>
&lt;/ul>
&lt;p>The only way to provoke these effects &lt;em>out-of-the-box&lt;/em> is by pressing, respectively, the &lt;code>Cmd + Left&lt;/code> and &lt;code>Cmd + Right&lt;/code> shortcuts, as you would normally do in a Macbook laptop native keyboard.&lt;/p></description></item><item><title>macOS terminal app gripes</title><link>https://perrotta.dev/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p>
&lt;h2 id="1-no-osc-52-support">1. No OSC-52 support&lt;/h2>
&lt;p>&lt;a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.&lt;/p></description></item><item><title>macOS: sudo with touch ID</title><link>https://perrotta.dev/2022/03/macos-sudo-with-touch-id/</link><pubDate>Mon, 21 Mar 2022 02:13:27 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/03/macos-sudo-with-touch-id/</guid><description>&lt;p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.&lt;/p>
&lt;p>It is also possible to use it for &lt;code>sudo&lt;/code> authentication via &lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% $EDITOR /etc/pam.d/sudo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sudo: auth account password session&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_tid.so &lt;span style="color:#75715e"># &amp;lt;== add this line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_smartcard.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_opendirectory.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>account required pam_permit.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>password required pam_deny.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>session required pam_permit.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the file is saved with the added line, a command with &lt;code>sudo&lt;/code> will spawn the touch ID prompt. I confirmed it works on both Terminal.app and Kitty.&lt;/p></description></item><item><title>nix-env in a nutshell for basic usage in macOS</title><link>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</link><pubDate>Wed, 16 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-env-in-a-nutshell-for-basic-usage-in-macos/</guid><description>&lt;p>I am currently evaluating &lt;a href="https://nixos.org/download.html">Nix&lt;/a> as a
replacement for &lt;a href="https://brew.sh">Homebrew&lt;/a> CLI apps in macOS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
&lt;a href="https://wickedchicken.github.io/post/macos-nix-setup/">Others&lt;/a>
&lt;a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">have&lt;/a>
&lt;a href="https://ghedam.at/15490/so-tell-me-about-nix">previously&lt;/a> written about this.&lt;/p>
&lt;p>My goal is to keep a sane learning curve and learn things on-the-fly, only as
needed. Nix is a massive ecosystem and has so many batteries included and
components (NixOS, NixPkgs, NixOps, Nix programming language, nix-shell,
nix-env, nix-darwin, home-manager, &amp;hellip;). The good news is that those components
are for the most part modular, there&amp;rsquo;s no need to adopt them all in order to
reap the benefits that Nix provides.&lt;/p></description></item><item><title>nix-shell in a nutshell</title><link>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</link><pubDate>Thu, 10 Feb 2022 20:48:02 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2022/02/nix-shell-in-a-nutshell/</guid><description>&lt;p>As soon as we finish installing &lt;a href="https://nixos.org/download.html">&lt;code>Nix&lt;/code>&lt;/a> on
Darwin, we&amp;rsquo;re greeted with a call to action:&lt;/p>
&lt;pre tabindex="0">&lt;code>Alright! We&amp;#39;re done!
Try it! Open a new terminal, and type:

 $ nix-shell -p nix-info --run &amp;#34;nix-info -m&amp;#34;

Thank you for using this installer. If you have any feedback or need
help, don&amp;#39;t hesitate:

You can open an issue at https://github.com/nixos/nix/issues
&lt;/code>&lt;/pre>&lt;h2 id="hello-world-bloated">Hello world (bloated)&lt;/h2>
&lt;p>All right then, let&amp;rsquo;s do it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ nix-shell -p nix-info --run &lt;span style="color:#e6db74">&amp;#34;nix-info -m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - system: &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">&amp;#34;aarch64-darwin&amp;#34;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - host os: &lt;span style="color:#e6db74">`&lt;/span>Darwin 21.3.0, macOS 12.2&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - multi-user?: &lt;span style="color:#e6db74">`&lt;/span>yes&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sandbox: &lt;span style="color:#e6db74">`&lt;/span>no&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: &lt;span style="color:#e6db74">`&lt;/span>nix-env &lt;span style="color:#f92672">(&lt;/span>Nix&lt;span style="color:#f92672">)&lt;/span> 2.6.0&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - channels&lt;span style="color:#f92672">(&lt;/span>root&lt;span style="color:#f92672">)&lt;/span>: &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nixpkgs&amp;#34;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - nixpkgs: &lt;span style="color:#e6db74">`&lt;/span>/nix/var/nix/profiles/per-user/root/channels/nixpkgs&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cool, it works. Let&amp;rsquo;s break it down a bit.&lt;/p></description></item></channel></rss>