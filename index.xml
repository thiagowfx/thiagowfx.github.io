<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>not just serendipity</title><link>https://www.perrotta.dev/</link><description>Recent content on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright Â© 2021 - 2024 Thiago Perrotta Â· CC BY-NC-SA 4.0 Â· RSS Â· Made with â™¥ in ðŸ‡¨ðŸ‡¦</copyright><lastBuildDate>Thu, 05 Dec 2024 13:05:44 +0100</lastBuildDate><atom:link href="https://www.perrotta.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker image size</title><link>https://www.perrotta.dev/2024/12/docker-image-size/</link><pubDate>Thu, 05 Dec 2024 13:05:44 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/docker-image-size/</guid><description>&lt;p>When trying to optimize docker images in terms of size, the workflow is as
follows:&lt;/p></description><content:encoded><![CDATA[<p>When trying to optimize docker images in terms of size, the workflow is as
follows:</p>
<h2 id="terminal-1">Terminal 1</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker build -f Dockerfile . -t argocd-download-tools
</span></span></code></pre></div><p>&hellip;possibly paired up with <code>entr</code> or <code>fswatch</code> depending on your eagerness for
automatic builds.</p>
<h2 id="terminal-2">Terminal 2</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker image inspect argocd-download-tools | jq -r <span style="color:#e6db74">&#39;.[0].Size&#39;</span> | numfmt --to<span style="color:#f92672">=</span>iec
</span></span><span style="display:flex;"><span>134M
</span></span></code></pre></div><p>&hellip;possibly prepended with <code>watch</code>.</p>
<p>I wasn&rsquo;t aware of <a href="https://man.archlinux.org/man/numfmt.1"><code>numfmt</code></a>:</p>
<blockquote>
<p>numfmt - Convert numbers from/to human-readable strings</p>
</blockquote>
<p>&hellip;instead of displaying plain bytes, it converts numbers to human-readable
strings (Ã  la <code>df -h</code> or <code>free -h</code>).</p>
<p>Regarding the units: they don&rsquo;t matter much, because we are only interested in
an approximation, no need to shave bytes off here. <code>SI</code> has 1k = 1000, whereas
<code>IEC</code> has 1Ki = 1024.</p>]]></content:encoded></item><item><title>atools: unpack file archives agnostically</title><link>https://www.perrotta.dev/2024/12/atools-unpack-file-archives-agnostically/</link><pubDate>Wed, 04 Dec 2024 13:07:28 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/atools-unpack-file-archives-agnostically/</guid><description>&lt;p>When downloading software from the interwebs, it can come in many popular
archive formats: &lt;code>.zip&lt;/code>, &lt;code>.tar.gz&lt;/code>, &lt;code>.tar.xz&lt;/code>, &lt;code>.rar&lt;/code>, &lt;code>.7z&lt;/code>, etc.&lt;/p>
&lt;p>If you extract them via the CLI, normally you have to remember the right command
and flags to pass for each different format, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% unzip foo.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% tar xzvf foo.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not too bad but it&amp;rsquo;s unnecessary overhead that can be abstracted away. And
there are several ways to do so.&lt;/p></description><content:encoded><![CDATA[<p>When downloading software from the interwebs, it can come in many popular
archive formats: <code>.zip</code>, <code>.tar.gz</code>, <code>.tar.xz</code>, <code>.rar</code>, <code>.7z</code>, etc.</p>
<p>If you extract them via the CLI, normally you have to remember the right command
and flags to pass for each different format, e.g.:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% unzip foo.zip
</span></span><span style="display:flex;"><span>% tar xzvf foo.tar.gz
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>It&rsquo;s not too bad but it&rsquo;s unnecessary overhead that can be abstracted away. And
there are several ways to do so.</p>
<p>At some point I used <a href="https://github.com/dtrx-py/dtrx"><code>dtrx</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% dtrx vault_1.7.2_linux_amd64.zip
</span></span></code></pre></div><p>&hellip;but it used to be Python 2 only. These days there is a Python 3 version but
it was too late, at some point I switched to <code>atool</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% brew ls atool
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/acat
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/adiff
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/als
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/apack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/arepack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/atool
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/bin/aunpack
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/atool/0.39.0/share/man/ <span style="color:#f92672">(</span><span style="color:#ae81ff">7</span> files<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>The only command I use from the package is <code>aunpack</code>, which behaves similarly to
<code>dtrx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% aunpack vault_1.7.2_linux_amd64.zip
</span></span></code></pre></div><p><code>atool</code> is <a href="https://repology.org/project/atool/versions">globally available</a> in
all software repositories I care about.</p>
<p>And then I can free up my mind.
With that said, it&rsquo;s still useful to remember the unpacking commands for at the very least <code>.zip</code> and <code>.tar.gz</code>.</p>]]></content:encoded></item><item><title>Advent of Code: Day 3</title><link>https://www.perrotta.dev/2024/12/advent-of-code-day-3/</link><pubDate>Tue, 03 Dec 2024 16:41:23 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-day-3/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/3">Day #3&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/3">Day #3</a> puzzle.</p>
<p>It&rsquo;s a pretty typical regex problem.
To choose not to use regex is to endeavour in pain.</p>
<p>The regex for part one to extract all occurrences of <code>mul</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;mul\(\d+,\d+\)&#39;</span>
</span></span></code></pre></div><p>Note that with <code>r</code> there is no need to escape the backslashes in Python.</p>
<p>Later on I extract the numbers with <code>r'\d+'</code>.</p>
<p>If we really wanted we could do everything with a single regex by using
capturing groups, however it would become less readable.</p>
<p>Once the numbers are captured, it&rsquo;s just a matter of accumulating their product.</p>
<p>I craft and test my regex with the support of <a href="https://regex101.com/">https://regex101.com/</a> and then
follow up with the Python interpreter in my laptop.</p>
<p>Part two adds two more operators, which we can easily account for with an or
(<code>|</code>).</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    prod <span style="color:#f92672">=</span> prod_two <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> memory <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        ops <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;mul\(\d+,\d+\)&#39;</span>, memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> op <span style="color:#f92672">in</span> ops:
</span></span><span style="display:flex;"><span>            (f1, f2) <span style="color:#f92672">=</span> map(int, re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\d+&#39;</span>, op))
</span></span><span style="display:flex;"><span>            prod <span style="color:#f92672">+=</span> f1 <span style="color:#f92672">*</span> f2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(prod)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> memory <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        ops <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;mul\(\d+,\d+\)|do\(\)|don&#39;t\(\)&#34;</span>, memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> op <span style="color:#f92672">in</span> ops:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;don&#39;t&#34;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#34;do&#34;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#39;mul&#39;</span> <span style="color:#f92672">in</span> op:
</span></span><span style="display:flex;"><span>                (f1, f2) <span style="color:#f92672">=</span> map(int, re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\d+&#39;</span>, op))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> enabled:
</span></span><span style="display:flex;"><span>                    prod_two <span style="color:#f92672">+=</span> f1 <span style="color:#f92672">*</span> f2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(prod_two)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>I intended to use <a href="https://docs.python.org/3/whatsnew/3.10.html"><code>match</code></a> merely
for style points however it&rsquo;s only available from Python 3.10+, thus I sticked
with a mere <code>if-elif</code> construct.</p>]]></content:encoded></item><item><title>IaC</title><link>https://www.perrotta.dev/2024/12/iac/</link><pubDate>Tue, 03 Dec 2024 14:29:58 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/iac/</guid><description>Me: So where is the Dockerfile source for that image? I can&amp;rsquo;t seem to find it in our git repos.
Coworker 1: links to an internal page on Confluence, which has the Dockerfile definition1
Coworker 2: In this case IaC = Infrastructure as Confluence ðŸ˜„
to be fair, it&amp;rsquo;s a pretty old image&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description><content:encoded><![CDATA[<blockquote>
<p><strong>Me</strong>: So where is the <code>Dockerfile</code> source for that image? I can&rsquo;t seem to
find it in our git repos.</p>
<p><strong>Coworker 1</strong>: <em>links to an internal page on Confluence, which has the
<code>Dockerfile</code> definition</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><strong>Coworker 2</strong>: In this case IaC = Infrastructure as Confluence ðŸ˜„</p>
</blockquote>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>to be fair, it&rsquo;s a pretty old image&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Advent of Code 2024: Day 2</title><link>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-2/</link><pubDate>Tue, 03 Dec 2024 01:15:00 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-2/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/2">Day #2&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Link to <a href="https://adventofcode.com/2024/day/2">Day #2</a> puzzle.</p>
<p>The first part is straightforward. It felt right to use <a href="https://docs.python.org/3/library/itertools.html#itertools.pairwise"><code>pairwise</code></a> to compute the differences between each adjacent pair:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>diffs <span style="color:#f92672">=</span> [(b <span style="color:#f92672">-</span> a) <span style="color:#66d9ef">for</span> (a,b) <span style="color:#f92672">in</span> pairwise(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)))]
</span></span></code></pre></div><p>Then we combine it with <code>all</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_safe</span>(diffs):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs) <span style="color:#f92672">or</span> all(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span></code></pre></div><p>Note that it is necessary to use two <code>all</code> expressions. It feels tempting to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">or</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span></code></pre></div><p>&hellip;however that&rsquo;s incorrect. For example: <code>diffs = [1, -1, 1, -1]</code> with an input
such as <code>[1, 2, 1, 2]</code> would pass the test even though it shouldn&rsquo;t.</p>
<p>It also feels tempting to use <code>abs()</code> but then an additional check would be
necessary to ensure the diffs are either all positive or all negative.</p>
<p>The second part was trickier.</p>
<p>Initially I was doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>list(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)<span style="color:#f92672">.</span>count(<span style="color:#66d9ef">False</span>) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">or</span> list(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)<span style="color:#f92672">.</span>count(<span style="color:#66d9ef">False</span>) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>&hellip;but then I realized I misunderstood the problem.</p>
<p>The <code>1 2 7 8 9</code> line, whose diff is <code>[1, 5, 1, 1]</code>, illustrates it well: in
principle it would pass the test by dropping &ldquo;5&rdquo; from the diff. However, that
cannot be correct, because <code>2 -&gt; 8</code> is too big of a jump.</p>
<p>The brute force way is to drop elements one by one, splitting the original list
into two, and then checking <code>is_safe</code> in the merged sublists. That would
require computing <code>diffs</code> every time, which would yield an <code>O(n^2)</code> solution.</p>
<p>We can do better by pre-computing <code>diffs</code> only once, and then adding a bit of
manipulation to reconstruct what the merged diffs would be. The end goal is to
compute this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>is_safe(diffs[:i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> [l[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> l[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">+</span> diffs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]):
</span></span></code></pre></div><p>&hellip;i.e. the left part of <code>diffs</code>, the right part of <code>diffs</code>, and a rolling diff
element in the middle.</p>
<p>The full solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> pairwise
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    safe <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    safe_damp <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_safe</span>(diffs):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> all(<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs) <span style="color:#f92672">or</span> all(<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">&lt;=</span> n <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> diffs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        l <span style="color:#f92672">=</span> list(map(int, line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)))
</span></span><span style="display:flex;"><span>        diffs <span style="color:#f92672">=</span> [(b <span style="color:#f92672">-</span> a) <span style="color:#66d9ef">for</span> (a,b) <span style="color:#f92672">in</span> pairwise(l)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        is_this_safe <span style="color:#f92672">=</span> is_safe(diffs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> is_this_safe:
</span></span><span style="display:flex;"><span>            safe <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(l)):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[<span style="color:#ae81ff">1</span>:]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">==</span> len(l) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> is_safe(diffs[:i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> [l[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> l[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]] <span style="color:#f92672">+</span> diffs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]):
</span></span><span style="display:flex;"><span>                    safe_damp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(safe)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(safe_damp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>A few notes:</p>
<ul>
<li>there&rsquo;s no need for <code>pairwise</code>; a plain <code>for-range</code> loop would have done the
job just fine; <code>pairwise</code> is stylish though</li>
<li><code>1 &lt;= n &lt;= 3</code> is syntactic sugar for <code>1 &lt;= n and n &lt;= 3</code>. Python is sweet.</li>
<li>part two could become a bit more elegant by introducing another helper
function</li>
<li>naming is hard</li>
<li><code>pairwise</code> is only available from Python 3.10+. macOS 15 (Sequoia) ships with
Python 3.9. Oh well&hellip;I needed to use the Python binary from homebrew.</li>
</ul>]]></content:encoded></item><item><title>Advent of Code 2024: Day 1</title><link>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-1/</link><pubDate>Sun, 01 Dec 2024 22:29:19 +0100</pubDate><guid>https://www.perrotta.dev/2024/12/advent-of-code-2024-day-1/</guid><description>&lt;p>Refer to the &lt;a href="https://www.perrotta.dev/2022/01/advent-of-code/">previous post&lt;/a> about AoC,
and to the &lt;a href="https://github.com/thiagowfx/adventofcode">git repository&lt;/a> with my
solutions in Python 3.&lt;/p>
&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/1">Day #1&lt;/a> puzzle.&lt;/p></description><content:encoded><![CDATA[<p>Refer to the <a href="https://www.perrotta.dev/2022/01/advent-of-code/">previous post</a> about AoC,
and to the <a href="https://github.com/thiagowfx/adventofcode">git repository</a> with my
solutions in Python 3.</p>
<p>Link to <a href="https://adventofcode.com/2024/day/1">Day #1</a> puzzle.</p>
<p>This is just a warm-up.</p>
<p>Given two lists of integers, iterate over them and sum the absolute difference
between each pair. <code>zip</code> + <code>sum</code> is the perfect pair<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> for the job.</p>
<p>Part two: iterate over the left list whilst accumulating how often the element
appears in the right list. &ldquo;How often&rdquo; has, almost always, the smell of a
<a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>Counter</code></a>.</p>
<p>The full solution<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]) <span style="color:#66d9ef">as</span> input:
</span></span><span style="display:flex;"><span>        lines <span style="color:#f92672">=</span> input<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>splitlines()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    left <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    right <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        l, r <span style="color:#f92672">=</span> map(int, line<span style="color:#f92672">.</span>split())
</span></span><span style="display:flex;"><span>        left<span style="color:#f92672">.</span>append(l)
</span></span><span style="display:flex;"><span>        right<span style="color:#f92672">.</span>append(r)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    left<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>    right<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part one</span>
</span></span><span style="display:flex;"><span>    print(sum(abs(l <span style="color:#f92672">-</span> r) <span style="color:#66d9ef">for</span> (l, r) <span style="color:#f92672">in</span> zip(left, right)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    freqs <span style="color:#f92672">=</span> Counter(right)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># part two</span>
</span></span><span style="display:flex;"><span>    print(sum(l <span style="color:#f92672">*</span> freqs[l] <span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> left))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.youtube.com/watch?v=3WpdCZC9q6w">I&rsquo;m not sure I like it, And Iâ€˜m so tired of
fighting</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The git repository is ever-evolving and the source of truth, whereas the
blog post is a snapshot. I&rsquo;ll experiment with cross-posting solutions here
even though it duplicates the repository ones.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Compress a .pdf in macOS with Preview.app</title><link>https://www.perrotta.dev/2024/11/compress-a-.pdf-in-macos-with-preview.app/</link><pubDate>Sat, 30 Nov 2024 00:22:38 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/compress-a-.pdf-in-macos-with-preview.app/</guid><description>&lt;p>All hail to &lt;a href="https://support.apple.com/en-ca/guide/preview/prvw1509/mac">Apple
Documentation&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>All hail to <a href="https://support.apple.com/en-ca/guide/preview/prvw1509/mac">Apple
Documentation</a>.</p>
<p>The instructions are very simple:</p>
<ul>
<li>open the <code>.pdf</code> file in Preview.app</li>
<li>export it (<code>File &gt; Export</code>)</li>
<li>in &ldquo;quartz filter&rdquo;, select the &ldquo;reduce file size&rdquo; option</li>
<li>save</li>
</ul>
<p>I observed a scanned document with ~3.3MiB of file size be compressed to
~350KiB. Not bad! And although not very customizable, it&rsquo;s very user-friendly
and easy to remember.</p>
<p>The alternative would have been to use GhostScript (<code>gs</code>). For example, ChatGPT
suggests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% gs -sDEVICE<span style="color:#f92672">=</span>pdfwrite -dCompatibilityLevel<span style="color:#f92672">=</span>1.4 -dPDFSETTINGS<span style="color:#f92672">=</span>/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile<span style="color:#f92672">=</span>output.pdf input.pdf
</span></span></code></pre></div>]]></content:encoded></item><item><title>LKV mit ABS</title><link>https://www.perrotta.dev/2024/11/lkv-mit-abs/</link><pubDate>Sat, 30 Nov 2024 00:17:55 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/lkv-mit-abs/</guid><description>&lt;p>Today I learned: what is a LKV mit ABS?&lt;/p></description><content:encoded><![CDATA[<p>Today I learned: what is a LKV mit ABS?</p>
<p>Depending on where you are in Germany, it means exactly one of these:</p>
<ul>
<li>a truck with ABS brakes (anti-lock braking system)</li>
<li>a LeberkÃ¤sesemmel mit ein bisschen Senf<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> â€“ or, if you will, &ldquo;LeberKÃ¤sWecken
mit ABissleSenf&rdquo;</li>
</ul>
<p>And, of course, there&rsquo;s <a href="https://www.chefkoch.de/forum/2,22,678383/Bestellung-LKW-mit-ABS-in-einer-Gaststaete-bzw-Kiosk.html">lore</a>.</p>
<p><strong>Edit</strong>: And, of course, there&rsquo;s a typo. Because it&rsquo;s much easier to write LKV
instead of LKW.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>a liver cheese roll with a bit of mustard&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>bash: disable pipefail</title><link>https://www.perrotta.dev/2024/11/bash-disable-pipefail/</link><pubDate>Wed, 27 Nov 2024 11:50:58 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/bash-disable-pipefail/</guid><description>&lt;p>We often do &lt;code>set -euo pipefail&lt;/code> in shell scripts&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
It&amp;rsquo;s an overall good habit in defensive programming.&lt;/p>
&lt;p>Nonetheless, sometimes the default behavior for &lt;code>pipefail&lt;/code> is desired.&lt;/p></description><content:encoded><![CDATA[<p>We often do <code>set -euo pipefail</code> in shell scripts<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
It&rsquo;s an overall good habit in defensive programming.</p>
<p>Nonetheless, sometimes the default behavior for <code>pipefail</code> is desired.</p>
<p>Recently we had an example involving <a href="https://pre-commit.com/">pre-commit.com</a>
and <a href="https://github.com/zimbatm/mdsh"><code>mdsh</code></a>, consider this <code>README.md</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span><span style="color:#e6db74">`&gt; files=$(grep -rl &#39;/spec/sources/0/targetRevision&#39; --include=&#34;*.yaml&#34; apps/overlays | sort -d -u) &amp;&amp; if [ -z &#34;$files&#34; ]; then echo &#34;None&#34;; else echo &#34;$files&#34; | sed -e &#39;s/^/- /&#39;; fi`</span>
</span></span></code></pre></div><p>The intention is to find all <code>.yaml</code> files that match the given string within
the <code>apps/overlays</code> directory.</p>
<p>The result is added to the <code>README.md</code> file with a git pre-commit hook, which
runs <code>mdsh</code> underneath, proudly showcasing a glimpse of literate programming.</p>
<p>What happens when there are no matches, and <code>grep</code> returns with exit code 1?</p>
<pre tabindex="0"><code>`&gt; files=$(grep -rl &#39;/spec/sources/0/targetRevision&#39; --include=&#34;*.yaml&#34; apps/overlays | sort -d -u) &amp;&amp; if [ -z &#34;$files&#34; ]; then echo &#34;None&#34;; else echo &#34;$files&#34; | sed -e &#39;s/^/- /&#39;; fi`

ERROR: some commands failed:

`&gt; files=$(grep -rl &#39;/spec/syncPolicy/automated&#39; --include=&#34;*.yaml&#34; apps/overlays | sort -d -u) &amp;&amp; if [ -z &#34;$files&#34; ]; then echo &#34;None&#34;; else echo &#34;$files&#34; | sed -e &#39;s/^/- /&#39;; fi`
failed with exit status: 1.
</code></pre><p>Of course it fails, because <code>mdsh</code> sets <a href="https://github.com/zimbatm/mdsh/pull/63/files"><code>-o pipefail</code></a>.</p>
<p>The desired behavior is to disable it: <code>set +o pipefail</code>. Then it works
properly:</p>
<pre tabindex="0"><code>&gt; set +o pipefail &amp;&amp; files=$(grep -rl &#39;/spec/syncPolicy/automated&#39; --include=&#34;*.yaml&#34; apps/overlays | sort -d -u) &amp;&amp; if [ -z &#34;$files&#34; ]; then echo &#34;None&#34;; else echo &#34;$files&#34; | sed -e &#39;s/^/- /&#39;; fi
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>A
<a href="https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425">gist</a>
with an explanation.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>logseq: backlog</title><link>https://www.perrotta.dev/2024/11/logseq-backlog/</link><pubDate>Tue, 26 Nov 2024 18:53:22 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/logseq-backlog/</guid><description>&lt;p>Assume you use &lt;code>TODO&lt;/code> and &lt;code>DOING&lt;/code> for workflow tracking in
&lt;a href="https://logseq.com/">Logseq&lt;/a>.&lt;/p>
&lt;p>Assume you use an &lt;code>#instrospect&lt;/code> tag.&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: how to define a single page / live query that aggregates
all of the above?&lt;/p></description><content:encoded><![CDATA[<p>Assume you use <code>TODO</code> and <code>DOING</code> for workflow tracking in
<a href="https://logseq.com/">Logseq</a>.</p>
<p>Assume you use an <code>#instrospect</code> tag.</p>
<p><strong>Problem statement</strong>: how to define a single page / live query that aggregates
all of the above?</p>
<pre tabindex="0"><code class="language-logseq" data-lang="logseq">{{query (OR (task TODO DOING) [[introspect]])}}
</code></pre><p>Unraveling:</p>
<ul>
<li><code>[[introspect]]</code> refers to the <code>#introspect</code> tag</li>
<li>A live query can be added with <code>/query</code>, which is represented as <code>{{query }}</code>
under the hood.</li>
</ul>
<p>More information: check out the <a href="https://hub.logseq.com/features/av5LyiLi5xS7EFQXy4h4K8/getting-started-with-advanced-queries/8xwSRJNVKFJhGSvJUxs5B2">logseq
hub</a>.</p>]]></content:encoded></item><item><title>pre-commit: try-repo</title><link>https://www.perrotta.dev/2024/11/pre-commit-try-repo/</link><pubDate>Tue, 26 Nov 2024 12:26:24 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/pre-commit-try-repo/</guid><description>&lt;p>A productivity booster whenever trying out new
&lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a> hooks from the wild:&lt;/p></description><content:encoded><![CDATA[<p>A productivity booster whenever trying out new
<a href="https://pre-commit.com/">pre-commit.com</a> hooks from the wild:</p>
<p><strong>Usage</strong>: <code>pre-commit try-repo {git-repo} [--all-files]</code></p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>% pre-commit try-repo https://github.com/mrtazz/checkmake
</span></span><span style="display:flex;"><span>[INFO] Initializing environment for https://github.com/mrtazz/checkmake.
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>Using config:
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>repos:
</span></span><span style="display:flex;"><span>-   repo: https://github.com/mrtazz/checkmake
</span></span><span style="display:flex;"><span>    rev: bd26d7905e47713ff0bf3b0e5e7b9c55f0d24e53
</span></span><span style="display:flex;"><span>    hooks:
</span></span><span style="display:flex;"><span>    -   id: checkmake
</span></span><span style="display:flex;"><span>    -   id: checkmake-system
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>[WARNING] Unstaged files detected.
</span></span><span style="display:flex;"><span>[INFO] Stashing unstaged files to /var/folders/yr/6sw3yylx6gjcy5jr38d6j6000000gn/T/tmpakaoxt10/patch1732620344-2186.
</span></span><span style="display:flex;"><span>[INFO] Installing environment for https://github.com/mrtazz/checkmake.
</span></span><span style="display:flex;"><span>[INFO] Once installed this environment will be reused.
</span></span><span style="display:flex;"><span>[INFO] This may take a few minutes...
</span></span><span style="display:flex;"><span>Makefile linter/analyzer.............................(no files to check)Skipped
</span></span><span style="display:flex;"><span>Makefile linter/analyzer.............................(no files to check)Skipped
</span></span><span style="display:flex;"><span>[INFO] Restored changes from /var/folders/yr/6sw3yylx6gjcy5jr38d6j6000000gn/T/tmpakaoxt10/patch1732620344-2186.
</span></span></code></pre></div><p>Previously I would manually add the <code>repo:</code> entry with <code>rev: HEAD</code> and then run
<code>pre-commit run --all-files {hook-id}</code>, one by one, adjusting as needed.</p>
<p>This new workflow is much faster though, and it is a native pre-commit command!</p>
<p>Inspiration to adopt more pre-commit hooks: <a href="https://github.com/pre-commit/pre-commit.com/blob/master/all-repos.yaml">all-repos.yaml</a></p>]]></content:encoded></item><item><title>Rename files in bulk (cont)</title><link>https://www.perrotta.dev/2024/11/rename-files-in-bulk-cont/</link><pubDate>Tue, 26 Nov 2024 11:50:06 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/rename-files-in-bulk-cont/</guid><description>&lt;p>Deeper into the &lt;a href="https://www.perrotta.dev/2024/06/rename-files-in-bulk/">rabbit hole&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% fd Dockerfile.dockerignore | xargs -n &lt;span style="color:#ae81ff">1&lt;/span> rename &lt;span style="color:#e6db74">&amp;#39;s/Dockerfile\.dockerignore/.dockerignore/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The pre-commit &lt;a href="https://github.com/pre-commit/identify">identify&lt;/a> library
currently mistags these files as Dockerfiles, even though they are not&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
which creates all sorts of issues.&lt;/p></description><content:encoded><![CDATA[<p>Deeper into the <a href="https://www.perrotta.dev/2024/06/rename-files-in-bulk/">rabbit hole</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd Dockerfile.dockerignore | xargs -n <span style="color:#ae81ff">1</span> rename <span style="color:#e6db74">&#39;s/Dockerfile\.dockerignore/.dockerignore/&#39;</span>
</span></span></code></pre></div><p>The pre-commit <a href="https://github.com/pre-commit/identify">identify</a> library
currently mistags these files as Dockerfiles, even though they are not<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
which creates all sorts of issues.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>They are akin to <code>.gitignore</code> files in terms of structure.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Remove the executable bit from all files with a given extension</title><link>https://www.perrotta.dev/2024/11/remove-the-executable-bit-from-all-files-with-a-given-extension/</link><pubDate>Mon, 25 Nov 2024 11:43:20 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/remove-the-executable-bit-from-all-files-with-a-given-extension/</guid><description>To illustrate, consider TypeScript files (*.ts).
Run:
% fd -e .ts -x chmod -x References:
fd: find on steroids: https://github.com/sharkdp/fd -x: execute the given command on all matched files You could also use classic find:
% find . -type f -name &amp;#39;*.ts&amp;#39; -exec chmod -x {} \; Or:
% find . -type f -name &amp;#39;*.ts&amp;#39; | xargs chmod -x Or, with more style safety:
% find . -type f -name &amp;#39;*.</description><content:encoded><![CDATA[<p>To illustrate, consider TypeScript files (<code>*.ts</code>).</p>
<p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -e .ts -x chmod -x
</span></span></code></pre></div><p>References:</p>
<ul>
<li><code>fd</code>: <code>find</code> on steroids: <a href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a></li>
<li><code>-x</code>: execute the given command on all matched files</li>
</ul>
<p>You could also use classic <code>find</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> -exec chmod -x <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span>
</span></span></code></pre></div><p>Or:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> | xargs chmod -x
</span></span></code></pre></div><p>Or, with more <del>style</del> safety:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> -print0 | xargs -0 -n <span style="color:#ae81ff">1</span> chmod -x
</span></span></code></pre></div>]]></content:encoded></item><item><title>git: recover a snowflake commit</title><link>https://www.perrotta.dev/2024/11/git-recover-a-snowflake-commit/</link><pubDate>Fri, 22 Nov 2024 11:51:26 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/git-recover-a-snowflake-commit/</guid><description>&lt;p>When working with &lt;code>git&lt;/code>, sometimes we make
&lt;a href="https://en.wikipedia.org/wiki/User_error">PEBKAC&lt;/a> mistakes and end up losing a
given checkout or commit or worktree.&lt;/p></description><content:encoded><![CDATA[<p>When working with <code>git</code>, sometimes we make
<a href="https://en.wikipedia.org/wiki/User_error">PEBKAC</a> mistakes and end up losing a
given checkout or commit or worktree.</p>
<p><code>git reflog</code> can often help recover from these mistakes. It is a bit difficult
to understand, but quite straightforward to use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep <span style="color:#f92672">{</span>branch_name<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep -i <span style="color:#e6db74">&#39;thiagowfx/global-services&#39;</span>
</span></span></code></pre></div><p>Enjoy a real example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep -i <span style="color:#e6db74">&#39;thiagowfx/global-services&#39;</span>
</span></span><span style="display:flex;"><span>7ca9ac6de77 HEAD@<span style="color:#f92672">{</span>0<span style="color:#f92672">}</span>: checkout: moving from 8882c1a128dd2cf35aa2188def3d176c7c15d2f1 to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>8882c1a128d HEAD@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to 8882c1a12
</span></span><span style="display:flex;"><span>7fcc128d2ea HEAD@<span style="color:#f92672">{</span>15<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>16fcb83d888 HEAD@<span style="color:#f92672">{</span>20<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>431509d9d0a HEAD@<span style="color:#f92672">{</span>24<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>abort<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>30<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>3babf6588f3 HEAD@<span style="color:#f92672">{</span>55<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/base-global-services-image-tag
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>57<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>abort<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>60<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>3ef5b7c3844 HEAD@<span style="color:#f92672">{</span>77<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/check-executables-have-shebangs
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>78<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>87f6bb2d95d HEAD@<span style="color:#f92672">{</span>86<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/actionlint
</span></span><span style="display:flex;"><span>8d07b53fd47 HEAD@<span style="color:#f92672">{</span>89<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>c21089ab78c HEAD@<span style="color:#f92672">{</span>95<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>70941a98ad0 HEAD@<span style="color:#f92672">{</span>104<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>2dd03ecdd09 HEAD@<span style="color:#f92672">{</span>149<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to lts13.1
</span></span><span style="display:flex;"><span>1d62e88a8e2 HEAD@<span style="color:#f92672">{</span>151<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>c9c2b36b058 HEAD@<span style="color:#f92672">{</span>166<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>0faa6f637b6 HEAD@<span style="color:#f92672">{</span>281<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/pre-commit-trailing-4
</span></span><span style="display:flex;"><span>c9c2b36b058 HEAD@<span style="color:#f92672">{</span>282<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>b0521a1a0f7 HEAD@<span style="color:#f92672">{</span>284<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to master
</span></span><span style="display:flex;"><span>72b137aa4c7 HEAD@<span style="color:#f92672">{</span>286<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>81ac79b0c90 HEAD@<span style="color:#f92672">{</span>316<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to master
</span></span><span style="display:flex;"><span>baef8a5eda1 HEAD@<span style="color:#f92672">{</span>319<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>81ac79b0c90 HEAD@<span style="color:#f92672">{</span>343<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span></code></pre></div><p>How to find the correct checkout?</p>
<p>The easiest (albeit tedious) way is by brute-forcing your search in the output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git show 7ca9ac6de77
</span></span><span style="display:flex;"><span>% git show 8882c1a128d
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>&hellip;until you find the diff you are looking for<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>From there, either <code>git checkout</code> (perhaps with the aid of <code>git worktree</code>) or
copy-and-paste (maybe with <code>git apply</code>).</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I am using the term &ldquo;snowflake commit&rdquo; in the title but it&rsquo;s not really
idiomatic. The meaning is roughly <em>a sand grain in the beach</em>, or <em>a
snowflake in the snow</em>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>pre-commit: additional dependencies in golang</title><link>https://www.perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/</link><pubDate>Thu, 21 Nov 2024 12:36:35 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/</guid><description>&lt;p>When working with &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a> and specifying
&lt;code>language: golang&lt;/code> for a given hook, you may want to install dependencies as
part of the hook bootstrapping process.&lt;/p></description><content:encoded><![CDATA[<p>When working with <a href="https://pre-commit.com/">pre-commit.com</a> and specifying
<code>language: golang</code> for a given hook, you may want to install dependencies as
part of the hook bootstrapping process.</p>
<p>Recently I needed to do so for <a href="https://github.com/mikefarah/yq">yq</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<p>The <code>.pre-commit-config.yaml</code> looked like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">https://github.com/mikefarah/yq</span>
</span></span></code></pre></div><p>Context for the hook and the script: <a href="https://stackoverflow.com/q/79166730/1745064">https://stackoverflow.com/q/79166730/1745064</a>.</p>
<p>It didn&rsquo;t work. It&rsquo;s necessary to drop the <code>https://</code> prefix.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq</span>
</span></span></code></pre></div><p>That didn&rsquo;t work either. Then I realized I needed to specify an exact
version<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq@v4.44.3</span>
</span></span></code></pre></div><p>It also didn&rsquo;t work! There was an error message about the need to specify <code>/v4</code>
in the path for whatever reason:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq/v4@v4.44.3</span>
</span></span></code></pre></div><p>That worked! Test it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pre-commit run --all-files helm-dirname-must-match-chart-name <span style="color:#f92672">[</span>--verbose<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><code>yq</code> is like <code>jq</code> for YAML instead of JSON.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>@latest</code> would also work. However, for the sake of reproducibility,
pinning is more reliable.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>zoxide: cd within the same directory</title><link>https://www.perrotta.dev/2024/11/zoxide-cd-within-the-same-directory/</link><pubDate>Fri, 15 Nov 2024 16:03:29 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/zoxide-cd-within-the-same-directory/</guid><description>&lt;p>I am a big fan of &lt;a href="https://github.com/ajeetdsouza/zoxide">&lt;code>zoxide&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A smarter cd command. Supports all major shells.&lt;/p>
&lt;/blockquote>
&lt;p>The idea is simple: as you keep &lt;code>cd&lt;/code>ing during the day, it builds up a local
database of your most frequently accessed directories.&lt;/p></description><content:encoded><![CDATA[<p>I am a big fan of <a href="https://github.com/ajeetdsouza/zoxide"><code>zoxide</code></a>:</p>
<blockquote>
<p>A smarter cd command. Supports all major shells.</p>
</blockquote>
<p>The idea is simple: as you keep <code>cd</code>ing during the day, it builds up a local
database of your most frequently accessed directories.</p>
<p>Perhaps you <code>cd</code> often to <code>~/projects/company/major/area/foo</code>.</p>
<p>Next time, run <code>z foo</code>, and it will magically <code>cd</code> into it.</p>
<p>What if you have <code>~/Downloads/foo</code> as well? Then it will <code>cd</code> to the one you
access more frequently.</p>
<p>It does so transparently and dynamically, out-of-the-box, without any extra
intervention.</p>
<p>Sometimes though it <code>cd</code>s to a directory you didn&rsquo;t intend.</p>
<p>To instruct it to <code>cd</code> to a subdirectory within <code>$PWD</code> (the current working
directory), just pass a slash (<code>/</code>) as its second argument:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>~/projects/company$ z foo /
</span></span></code></pre></div><p>In the previous example, it would <em>not</em> <code>cd</code> to <code>~/Downloads</code>.</p>
<p>There are many similar projects to <code>zoxide</code>. In the past, I used
<a href="https://github.com/wting/autojump"><code>autojump</code></a>.</p>]]></content:encoded></item><item><title>Helm: JSON schema generation</title><link>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</link><pubDate>Thu, 14 Nov 2024 15:05:49 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</guid><description>&lt;p>Helm charts support the inclusion of a &lt;code>values.schema.json&lt;/code> file to validate
&lt;code>values.yaml&lt;/code>. Documentation: &lt;a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files&lt;/a>&lt;/p>
&lt;p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &amp;ldquo;shift left&amp;rdquo; the lifecycle of your helm releases.&lt;/p>
&lt;p>For a pre-existing &lt;code>values.yaml&lt;/code> file, it may be quite tedious to generate the
schema from scratch, by hand.&lt;/p>
&lt;p>&lt;strong>Can we automate this process?&lt;/strong>&lt;/p></description><content:encoded><![CDATA[<p>Helm charts support the inclusion of a <code>values.schema.json</code> file to validate
<code>values.yaml</code>. Documentation: <a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files</a></p>
<p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &ldquo;shift left&rdquo; the lifecycle of your helm releases.</p>
<p>For a pre-existing <code>values.yaml</code> file, it may be quite tedious to generate the
schema from scratch, by hand.</p>
<p><strong>Can we automate this process?</strong></p>
<p>Of course we can.</p>
<p>One possibility is to use GenAI / LLMs. This is out of scope of this post.</p>
<p>Another possibility is to leverage a helm plug-in to do so.</p>
<p>I had a good experience with <a href="https://github.com/karuppiah7890/helm-schema-gen">https://github.com/karuppiah7890/helm-schema-gen</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm plugin install https://github.com/karuppiah7890/helm-schema-gen.git
</span></span><span style="display:flex;"><span>cd path/to/helm/chart
</span></span><span style="display:flex;"><span>helm schema-gen values.yaml | tee values.schema.json
</span></span></code></pre></div><p>Afterwards, test the generated schema with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm lint path/to/helm/chart
</span></span></code></pre></div><p>Usually I need to do some follow-up edits to the generated file, including:</p>
<ul>
<li>add string enum types for a tighter validation of strings</li>
<li>mark certain fields as required</li>
<li>mark certain fields with <code>additionalProperties: &quot;false&quot;</code></li>
<li>augment <code>[&quot;null&quot;]</code> to <code>[&quot;null&quot;, &quot;string&quot;]</code> for keys that do not have a
default value</li>
</ul>
<p>It&rsquo;s worth to observe that, at the time of this publication, the following
notice is present in the repository of the plug-in:</p>
<blockquote>
<p>This repository has been archived by the owner on Aug 31, 2021. It is now
read-only.</p>
</blockquote>
<p>Nonetheless, it still works well.</p>]]></content:encoded></item><item><title>sort deterministically</title><link>https://www.perrotta.dev/2024/11/sort-deterministically/</link><pubDate>Tue, 12 Nov 2024 11:25:12 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/sort-deterministically/</guid><description>&lt;p>We had the following code in a CI pipeline:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find apps/base/ -type d -exec basename &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\;&lt;/span> | sort | sed -e &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s/^/- /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It lists all directories in &lt;code>apps/base&lt;/code>.
We add &lt;code>sort&lt;/code> to make the output canonical.
The &lt;code>sed&lt;/code> part is just to make an unordered list out of it.&lt;/p>
&lt;p>There was an issue though.&lt;/p></description><content:encoded><![CDATA[<p>We had the following code in a CI pipeline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>find apps/base/ -type d -exec basename <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> | sort | sed -e <span style="color:#960050;background-color:#1e0010">&#39;</span>s/^/- /
</span></span></code></pre></div><p>It lists all directories in <code>apps/base</code>.
We add <code>sort</code> to make the output canonical.
The <code>sed</code> part is just to make an unordered list out of it.</p>
<p>There was an issue though.</p>
<p>In my machine, and in CI (GitHub Actions), the following output was produced:</p>
<pre tabindex="0"><code>garden-info-export
gardenia
</code></pre><p>I use macOS + <code>sort</code> from GNU <code>coreutils</code> via homebrew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% which sort
</span></span><span style="display:flex;"><span>/opt/homebrew/opt/coreutils/libexec/gnubin/sort
</span></span><span style="display:flex;"><span>% sort --version
</span></span><span style="display:flex;"><span>sort <span style="color:#f92672">(</span>GNU coreutils<span style="color:#f92672">)</span> 9.5
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2024</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;.
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Written by Mike Haertel and Paul Eggert.
</span></span></code></pre></div><p>In a coworkerâ€™s machine (Ubuntu Linux), it produced the following instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gardenia
</span></span><span style="display:flex;"><span>garden-info-export
</span></span></code></pre></div><p>We had the same <code>locale</code> (<code>en_US.UTF-8</code>), and the coworker was also using <code>sort</code> from GNU <code>coreutils</code>. Puzzling.</p>
<p>In order to force a deterministic output, I proposed to use <code>-d</code>. From <code>sort(1)</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>-d, --dictionary-order
</span></span><span style="display:flex;"><span>	Consider only blank spaces and alphanumeric characters in comparisons.
</span></span></code></pre></div><p>And therein reproducibility was achieved<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I do not really know why the outputs were different even with the same <code>locale</code> (<code>LANG</code>, <code>LC_COLLATE</code>, <code>LC_ALL</code>, etc). For future reference, my current locale:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><p>And my coworkerâ€™s:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LANGUAGE<span style="color:#f92672">=</span>en_US
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_PAPER<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_NAME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ADDRESS<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TELEPHONE<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MEASUREMENT<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_IDENTIFICATION<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this case, the coworkerâ€™s version became the canonical one.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Helm: enforce the directory name matches the chart name</title><link>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</link><pubDate>Tue, 12 Nov 2024 11:13:06 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a helm chart called &lt;code>foo&lt;/code>, enforce that its &lt;code>Chart.yaml&lt;/code> file lives in a directory called &lt;code>foo&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a helm chart called <code>foo</code>, enforce that its <code>Chart.yaml</code> file lives in a directory called <code>foo</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="background">Background</h2>
<p>In 2016, this <a href="https://github.com/helm/helm/pull/818/">used to be</a> the default behavior in Helm:</p>
<blockquote>
<p>fix(helm): produce error if package name is inconsistent</p>
</blockquote>
<p>In 2018, this enforcement was <a href="https://github.com/helm/helm/pull/4141">removed</a>:</p>
<blockquote>
<p>remove dirname constraint on helm package</p>
</blockquote>
<p>We would like to reintroduce this requirement in our Helm charts codebase, as a best practice, to prevent chart name collisions.</p>
<p>What would be the most native way to accomplish that?</p>
<p>I would probably write a git pre-commit hook if there is no native way (e.g. via some <code>helm lint</code> flag).</p>
<h2 id="solution">Solution</h2>
<p>Use the following script with <a href="https://pre-commit.com/">pre-commit</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check that the directory name matches the chart name in Chart.yaml.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Examples:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: hey-foo&#34; fails the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: foo&#34; passes the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage: $0 [path/to/chart/Chart.yaml ...]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> chart in <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>basename <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Remove trailing slash.</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dirname%/<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Fetch chart name from Chart.yaml.</span>
</span></span><span style="display:flex;"><span>	chart_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>yq e <span style="color:#e6db74">&#39;.name&#39;</span> <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $dirname !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$chart_name<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		echo <span style="color:#e6db74">&#34;error: directory name &#39;</span><span style="color:#e6db74">${</span>dirname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; does not match chart name &#39;</span><span style="color:#e6db74">${</span>chart_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>		exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="reference">Reference</h2>
<p>I asked and self-answered this question on <a href="https://stackoverflow.com/questions/79166730/how-to-enforce-that-the-directory-name-must-match-the-chart-name/79180650#79180650">Stack Overflow</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Why</em>? For ease of management, simplicity, consistency &amp; uniformity.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>jq: remove quotes from output</title><link>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</link><pubDate>Thu, 07 Nov 2024 14:13:17 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</guid><description>Given:
% aws eks --profile global --region us-east-1 list-clusters { &amp;#34;clusters&amp;#34;: [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] } Query:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters&amp;#39; [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] Further:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters[0]&amp;#39; &amp;#34;aws-us-east-1-global-0&amp;#34; What if we wanted to remove the quotes? Add -r (--raw-output):
% aws eks --profile global --region us-east-1 list-clusters | jq -r &amp;#39;.clusters[0]&amp;#39; aws-us-east-1-global-0</description><content:encoded><![CDATA[<p>Given:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters
{
    &#34;clusters&#34;: [
        &#34;aws-us-east-1-global-0&#34;
    ]
}
</code></pre><p>Query:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters&#39;
[
  &#34;aws-us-east-1-global-0&#34;
]
</code></pre><p>Further:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters[0]&#39;
&#34;aws-us-east-1-global-0&#34;
</code></pre><p>What if we wanted to remove the quotes? Add <code>-r</code> (<code>--raw-output</code>):</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq -r &#39;.clusters[0]&#39;
aws-us-east-1-global-0
</code></pre>]]></content:encoded></item></channel></rss>