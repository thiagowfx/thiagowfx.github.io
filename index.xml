<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>not just serendipity</title><link>https://perrotta.dev/</link><description>Recent content on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 [Thiago Perrotta](mailto:tbperrotta@gmail.com) · [RSS](/index.xml) · a fork of [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Wed, 25 Dec 2024 16:13:30 -0300</lastBuildDate><atom:link href="https://perrotta.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code: Day 17</title><link>https://perrotta.dev/2024/12/advent-of-code-day-17/</link><pubDate>Wed, 25 Dec 2024 16:13:30 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-17/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/17">Day #17&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a simulation problem, a quite delightful one to implement.&lt;/p>
&lt;p>Using python data classes would have been natural, but I went full imperative in
this one.&lt;/p>
&lt;p>Part 2 would require clever backwards computation, and I wasn&amp;rsquo;t interested in
doing so. I liked the approach from &lt;a href="https://todd.ginsberg.com/post/advent-of-code/2024/day17/">Todd
Ginsberg&lt;/a>.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a, b, c &lt;span style="color:#f92672">=&lt;/span> [int(line&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">2&lt;/span>]) &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">3&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> program &lt;span style="color:#f92672">=&lt;/span> [int(op) &lt;span style="color:#66d9ef">for&lt;/span> op &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">combo&lt;/span>(operand):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ip &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(program) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#f92672">=&lt;/span> program[ip]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operand &lt;span style="color:#f92672">=&lt;/span> program[ip &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># adv, division&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxl, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bst, modulo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># jnz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxc, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout&lt;span style="color:#f92672">.&lt;/span>append(combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># cdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, stdout)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code: Day 9</title><link>https://perrotta.dev/2024/12/advent-of-code-day-9/</link><pubDate>Wed, 25 Dec 2024 16:09:53 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-9/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/9">Day #9&lt;/a> puzzle.&lt;/p>
&lt;p>A disk fragmentation problem.&lt;/p>
&lt;p>It&amp;rsquo;s mostly an ad-hoc problem, there isn&amp;rsquo;t much commentary to make.&lt;/p>
&lt;p>Part two was quite annoying so I simply skipped it.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">expand&lt;/span>(disk: list[int]) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> disk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> fill:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> [str(s) &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> [d]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">not&lt;/span> fill
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">defrag&lt;/span>(disk: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> expand(disk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">=&lt;/span> len(p) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> p[left] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p[left], p[right] &lt;span style="color:#f92672">=&lt;/span> p[right], p[left]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p[right] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">checksum&lt;/span>(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, d &lt;span style="color:#f92672">in&lt;/span> enumerate(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> d &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">+=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> int(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> disk &lt;span style="color:#f92672">=&lt;/span> [int(x) &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(checksum(defrag(disk)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Picking a monospaced code font</title><link>https://perrotta.dev/2024/12/picking-a-monospaced-code-font/</link><pubDate>Wed, 25 Dec 2024 02:32:55 -0300</pubDate><guid>https://perrotta.dev/2024/12/picking-a-monospaced-code-font/</guid><description>&lt;p>Surely you can afford to be picky&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with your code fonts these days.&lt;/p>
&lt;p>Don&amp;rsquo;t know where to start? &lt;a href="https://www.codingfont.com/">https://www.codingfont.com/&lt;/a> (&lt;a href="https://www.codingfont.com/">via John
Gruber&lt;/a>) is a good start:&lt;/p>
&lt;blockquote>
&lt;p>[&amp;hellip;] fun &amp;ldquo;tournament&amp;rdquo; from Typogram that lets you pick your favorite
monospaced coding font from 32 choices. One limitation is that the only
options are free fonts&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>I highly recommend you disable showing the font names while you play, to avoid
any bias toward fonts you already think you have an opinion about.&lt;/p></description></item><item><title>Switching from Google to ChatGPT search</title><link>https://perrotta.dev/2024/12/switching-from-google-to-chatgpt-search/</link><pubDate>Tue, 24 Dec 2024 21:14:04 -0300</pubDate><guid>https://perrotta.dev/2024/12/switching-from-google-to-chatgpt-search/</guid><description>&lt;p>Following the footsteps of &lt;a href="https://www.linkedin.com/posts/danielmiessler_ive-not-used-google-to-search-since-searchgpt-activity-7258159059944538113-dxZG">Daniel
Miessler&lt;/a>,
I have changed my default search engine in Chrome from Google to ChatGPT
Search&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
by installing their official &lt;a href="https://chromewebstore.google.com/detail/chatgpt-search/ejcfepkfckglbgocfkanmcdngdijcgld">chrome
extension&lt;/a>.&lt;/p>
&lt;p>This is effectively possible because, after
&lt;a href="https://openai.com/index/introducing-chatgpt-search/?utm_source=chatgpt.com">launching&lt;/a>
it for a few months, this month they made it free for everyone.&lt;/p>
&lt;p>So far the results are impressive and almost always what I am looking for.&lt;/p>
&lt;p>When they are not, I can easily fall back to Google by starting my search query
in Chrome with &amp;lsquo;g&amp;rsquo;, or to DuckDuckGo with &amp;rsquo;d&amp;rsquo;.&lt;/p></description></item><item><title>Just: make Justfile self-contained</title><link>https://perrotta.dev/2024/12/just-make-justfile-self-contained/</link><pubDate>Mon, 23 Dec 2024 23:23:13 -0300</pubDate><guid>https://perrotta.dev/2024/12/just-make-justfile-self-contained/</guid><description>&lt;p>A commit is worth a thousand words, following up on my previous &lt;a href="https://perrotta.dev/2024/12/just/">just&lt;/a> post:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>diff --git Justfile Justfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>old mode 100644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>new mode 100755
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index 1e1e33c7..cb0cd5e2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- Justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ Justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -1,10 +1,16 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">+#!/usr/bin/env just --justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> # https://github.com/casey/just
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set dotenv-load
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+_default:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ @just --list
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Add a shebang to invoke your &lt;code>Justfile&lt;/code>&lt;/li>
&lt;li>Make your &lt;code>Justfile&lt;/code> executable (with &lt;code>chmod +x&lt;/code>)&lt;/li>
&lt;li>Add a default target that invokes &lt;code>just --list&lt;/code>. It should be the first one.
The underscore makes it private, effectively hiding it from the list output.&lt;/li>
&lt;/ul>
&lt;p>The diff above is for the &lt;code>Justfile&lt;/code> used for this blog. The above change
yields:&lt;/p></description></item><item><title>Running multiple servers in a single bash script</title><link>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</link><pubDate>Mon, 23 Dec 2024 22:52:40 -0300</pubDate><guid>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</guid><description>&lt;p>Inspired by &lt;a href="https://github.com/simonw/til/blob/main/bash/multiple-servers.md">Simon
Willison&lt;/a>&amp;rsquo;s
TIL.&lt;/p>
&lt;p>When I was working on the &lt;a href="https://stadia.com/">Stadia&lt;/a> Partner Portal as a
full-stack tech lead, I wrote and maintained a &lt;code>run.sh&lt;/code> script that would start
up our two (front-end and back-end) Boq&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> server instances.&lt;/p>
&lt;p>It resembled the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kill $pid_fe $pid_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trap cleanup SIGINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal/ui &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_fe&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_be&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wait
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This version is heavily simplified, but that was its gist. It worked perfectly.
Back in ~2018, it took quite a bit of trial-and-error to get it right. Now it
seems so easy to just ask GenAI to generate it for you! Yikes. Our profession
might get obsoleted in just a few more years to come&amp;hellip;&lt;/p></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p></description></item><item><title>Reply to: Introduce yourself to your remote team</title><link>https://perrotta.dev/2024/12/reply-to-introduce-yourself-to-your-remote-team/</link><pubDate>Mon, 23 Dec 2024 20:47:55 -0300</pubDate><guid>https://perrotta.dev/2024/12/reply-to-introduce-yourself-to-your-remote-team/</guid><description>&lt;p>(&lt;a href="https://cassidoo.co/post/remote-intros/">via&lt;/a>) Cassidy Williams:&lt;/p>
&lt;blockquote>
&lt;p>Something that that a few of my teams have done well is introducing themselves
asynchronously. It can be a hard thing to do! When you&amp;rsquo;re on a fully remote
team and you&amp;rsquo;re seeing everyone&amp;rsquo;s face on Zoom for the first time, it&amp;rsquo;s a
little nerve-wracking to figure out how to present yourself, how to &amp;ldquo;bring
your whole self to work,&amp;rdquo; and not be a total weirdo.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What my team at GitHub does (and what I&amp;rsquo;ve seen at a few other orgs now, it&amp;rsquo;s
catching on!) is we have a repository of &amp;ldquo;Human User Guides&amp;rdquo; full of details
about each other.&lt;/p></description></item><item><title>★ Anki workflow</title><link>https://perrotta.dev/2024/12/anki-workflow/</link><pubDate>Mon, 23 Dec 2024 00:12:52 -0300</pubDate><guid>https://perrotta.dev/2024/12/anki-workflow/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> since 2-3 years ago to keep up
with German vocabulary and grammar. I had originally started with Duolingo.&lt;/p>
&lt;p>In the beginning my workflow was quite basic.
Then I created &lt;a href="https://perrotta.dev/2024/02/anki-custom-language-card/">custom language&lt;/a> &lt;a href="https://perrotta.dev/2024/09/anki-custom-language-card-cont./">cards&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>After you install Anki, you need to set up a Note Type to keep your flashcards
formatted as you like. Anki comes with a few basic Note Types, but they aren&amp;rsquo;t
suited for learning Japanese.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://tatsumoto.neocities.org/blog/setting-up-anki">via&lt;/a>). The advantage of
creating a custom note type (language card) is that I can format it the way I
want.&lt;/p></description></item><item><title>★ Online diff tool</title><link>https://perrotta.dev/2024/12/online-diff-tool/</link><pubDate>Sun, 22 Dec 2024 23:39:25 -0300</pubDate><guid>https://perrotta.dev/2024/12/online-diff-tool/</guid><description>&lt;p>Sometimes I have two snippets of text in my clipboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that I need to diff.&lt;/p>
&lt;p>The quickest way to do so is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR a &lt;span style="color:#75715e"># then paste&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR b &lt;span style="color:#75715e"># then paste the other one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% diff -uN a b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/">&lt;code>cdtmp&lt;/code>&lt;/a> was previously covered, it &lt;code>cd&lt;/code>s to a
temporary directory.&lt;/p>
&lt;p>The &lt;code>diff&lt;/code> tool in the CLI is not very important, you could pick any one between
&lt;code>diff -uN&lt;/code>, &lt;code>colordiff -uN&lt;/code> or &lt;a href="https://perrotta.dev/2024/07/icdiff-side-by-side-diff/">&lt;code>icdiff&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Stylometry</title><link>https://perrotta.dev/2024/12/stylometry/</link><pubDate>Sun, 22 Dec 2024 22:57:26 -0300</pubDate><guid>https://perrotta.dev/2024/12/stylometry/</guid><description>&lt;p>Jeff Kaufman&amp;rsquo;s &lt;a href="https://www.jefftk.com/p/good-reasons-for-alts">&amp;ldquo;Good Reasons for
Alts&amp;rdquo;&lt;/a> is a very insightful
read.&lt;/p>
&lt;p>Alt in this context stands for &amp;ldquo;alternate account&amp;rdquo;.&lt;/p>
&lt;p>Apparently there&amp;rsquo;s a whole ordeal dedicated to studying linguistic styles from
people in order to uniquely cluster / identify them, this is what
&lt;a href="https://en.wikipedia.org/wiki/Stylometry">stylometry&lt;/a> is.&lt;/p>
&lt;p>Like &lt;a href="https://www.jefftk.com/p/linking-alt-accounts">Jeff&lt;/a>, I agree that:&lt;/p>
&lt;blockquote>
&lt;p>(If you do want somewhat more protection now, however, I think best practice
is running your alt comments through an LLM to change the style.)&lt;/p></description></item><item><title>Digital mending circle</title><link>https://perrotta.dev/2024/12/digital-mending-circle/</link><pubDate>Sun, 22 Dec 2024 22:50:50 -0300</pubDate><guid>https://perrotta.dev/2024/12/digital-mending-circle/</guid><description>&lt;blockquote>
&lt;p>TIL what a digital mending circle is.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://cdevroe.com/2024/12/17/8285/">via&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>What, you ask, is a digital mending circle? A virtual co-working session for
the kinds of oft-neglected maintenance tasks that accrue around our digital
lives. Instead of darning socks and patching jeans, we update personal
websites, delete unused accounts, work on side projects, or even just catch up
on email.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve been doing this ever since forever. December is always a great month to do
so, as it&amp;rsquo;s quiet and uneventful&amp;hellip;&lt;/p></description></item><item><title>New post workflow</title><link>https://perrotta.dev/2024/12/new-post-workflow/</link><pubDate>Sun, 22 Dec 2024 22:26:46 -0300</pubDate><guid>https://perrotta.dev/2024/12/new-post-workflow/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% just new &lt;span style="color:#e6db74">&amp;#34;post title&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% vim content/posts/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hit &amp;lsquo;G&amp;rsquo;, open up the post, it looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;New post workflow&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2024-12-22T22:26:46-03:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> bestof★
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> macos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> meta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> portuguese
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> privacy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> selfhosted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> serenity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Delete tags that are not applicable from the exhaustive list above. Most of the
time I&amp;rsquo;ll use &lt;code>dev&lt;/code>.&lt;/p>
&lt;p>Once it&amp;rsquo;s done, save the file with &lt;code>:Gwq&lt;/code> (&lt;a href="https://github.com/tpope/vim-fugitive">vim-fugitive&lt;/a>).&lt;/p></description></item><item><title>Link blogs</title><link>https://perrotta.dev/2024/12/link-blogs/</link><pubDate>Sun, 22 Dec 2024 22:16:59 -0300</pubDate><guid>https://perrotta.dev/2024/12/link-blogs/</guid><description>&lt;p>Simon Willison&amp;rsquo;s &amp;ldquo;My approach to running a link blog&amp;rdquo;
(&lt;a href="https://simonwillison.net/2024/Dec/22/link-blog/">via&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>The point of that article was to emphasize that blogging doesn&amp;rsquo;t have to be
about unique insights. The value is in writing frequently and having something
to show for it over time—worthwhile even if you don&amp;rsquo;t attract much of an
audience (or any audience at all).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In that article I proposed two categories of content that are low stakes and
high value: things I learned and descriptions of my projects.&lt;/p></description></item><item><title>MBTI</title><link>https://perrotta.dev/2024/12/mbti/</link><pubDate>Sun, 22 Dec 2024 02:45:11 -0300</pubDate><guid>https://perrotta.dev/2024/12/mbti/</guid><description>&lt;p>&lt;a href="https://dynomight.net/mbti/">https://dynomight.net/mbti/&lt;/a> has the &amp;ldquo;fastest mbti test&amp;rdquo;.&lt;/p>
&lt;p>Indeed, it&amp;rsquo;s quite concise and minimalist.&lt;/p>
&lt;p>In case you are not familiar with it:&lt;/p>
&lt;blockquote>
&lt;p>Tendencies&lt;/p>
&lt;p>Introverts (I) direct their energy inwards, to ideas and thoughts. Extroverts (E) direct their energy outwards, towards people, things, and situations.
Sensing people (S) prefer tangible facts. Intuitive people (N) prefer abstractions and theories.
Feelers (F) look at situations through empathy for the people involved. Thinkers (T) look at situations from a more detached, logical viewpoint.
Judging people (J) prefer a planned and structured approach to life. Perceiving people (P) prefer to be more spontaneous.&lt;/p></description></item><item><title>★ Pre-commit</title><link>https://perrotta.dev/2024/12/pre-commit/</link><pubDate>Sat, 21 Dec 2024 23:24:23 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit/</guid><description>&lt;p>&lt;a href="https://pre-commit.com/">pre-commit&lt;/a> is a CI framework for &lt;code>git&lt;/code>.
For those who are used to google3 tooling: it&amp;rsquo;s akin to the configuration part of &lt;code>TAP Presubmit&lt;/code>.&lt;/p>
&lt;p>You can plug in linters, formatters, code analyzers&amp;hellip;pretty much any tool or binary that analyzes files, potentially emitting errors whenever style or policy violations occur, is a potential good fit for a pre-commit hook.&lt;/p>
&lt;p>Once properly configured the whole pipeline can be run locally with &lt;code>pre-commit run&lt;/code>. By default, only the stashed files are inspected. In order to consider every file in the repository, pass &lt;code>--all-files&lt;/code>. Modified files that were not yet &lt;code>git add&lt;/code>ed are not included.&lt;/p></description></item><item><title>★ Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p></description></item><item><title>Reply to: I Hate the News</title><link>https://perrotta.dev/2024/12/reply-to-i-hate-the-news/</link><pubDate>Sat, 21 Dec 2024 01:44:16 -0300</pubDate><guid>https://perrotta.dev/2024/12/reply-to-i-hate-the-news/</guid><description>&lt;p>Link to the &lt;a href="http://www.aaronsw.com/weblog/hatethenews">original article&lt;/a> from
2006 from the late Aaron Swartz:&lt;/p>
&lt;blockquote>
&lt;p>Some people start their day by reading The New York Times. Others end it by
watching the nightly news. Some get it from The Daily Show. Others download it
from a variety weblogs. Some keep up-to-the-minute by following CNN. Others
have instant news updates automatically text messaged to their phone. But
everybody seems to agree: it&amp;rsquo;s a citizen&amp;rsquo;s responsibility to keep up with the
news. Everybody except me.&lt;/p></description></item><item><title>New theme: BearBlog</title><link>https://perrotta.dev/2024/12/new-theme-bearblog/</link><pubDate>Sat, 21 Dec 2024 01:30:10 -0300</pubDate><guid>https://perrotta.dev/2024/12/new-theme-bearblog/</guid><description>&lt;p>Inspired by &lt;a href="https://bearblog.dev/">Bear Blog&lt;/a>, via &lt;a href="https://sive.rs/now2">Derek
Sivers&lt;/a>, I updated my Hugo theme to resemble its looks and
simplicity.&lt;/p>
&lt;p>The base theme is &lt;a href="https://github.com/janraasch/hugo-bearblog/">hugo-bearblog&lt;/a>,
but I&amp;rsquo;ve overridden most of its files. I should probably fork it at some point.&lt;/p>
&lt;p>Side effect: no JS is served anymore. And it still scores
&lt;a href="https://pagespeed.web.dev/analysis/https-perrotta-dev/eyfna507jk?form_factor=desktop">100&lt;/a>
on lighthouse.&lt;/p></description></item><item><title>Advent of Code: Day 8</title><link>https://perrotta.dev/2024/12/advent-of-code-day-8/</link><pubDate>Fri, 20 Dec 2024 22:47:51 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-8/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/8">Day #8&lt;/a> puzzle.&lt;/p>
&lt;p>This is a problem in a 2D grid. I like to start by making a frequency map
(dictionary) from the frequencies to the coordinates where they occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python3" data-lang="python3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># {&amp;#39;0&amp;#39;: ((1,8), ...)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>freq_map &lt;span style="color:#f92672">=&lt;/span> defaultdict(tuple)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x, line &lt;span style="color:#f92672">in&lt;/span> enumerate(lines):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> y, field &lt;span style="color:#f92672">in&lt;/span> enumerate(line):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> field&lt;span style="color:#f92672">.&lt;/span>isalnum():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_map[field] &lt;span style="color:#f92672">+=&lt;/span> ((x, y),)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then it&amp;rsquo;s just a matter of going through every coordinate pair for a given
frequency. &lt;code>combinations()&lt;/code> from &lt;code>itertools&lt;/code> is great for that:&lt;/p></description></item></channel></rss>