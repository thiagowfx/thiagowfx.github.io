<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Not Just Serendipity</title><link>https://thiagowfx.github.io/</link><description>Recent content on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2023 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Tue, 27 Dec 2022 16:16:36 +0100</lastBuildDate><atom:link href="https://thiagowfx.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>AIs galore</title><link>https://thiagowfx.github.io/2022/12/ais-galore/</link><pubDate>Tue, 27 Dec 2022 16:16:36 +0100</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/12/ais-galore/</guid><description>&lt;p>2022 was an amazing year for AIs.&lt;/p></description><content:encoded><![CDATA[<p>2022 was an amazing year for AIs.</p>
<h2 id="chatgptchatgpt"><a href="https://chat.openai.com/chat/">ChatGPT</a></h2>
<ul>
<li>
<p><a href="https://chat.openai.com/chat/"><code>ChatGPT</code></a> can effectively replace Stack
Overflow to a large extent, if you learn how to ask questions to it. Example queries that work amazingly, returning exactly what you would expect, with detailed explanation and/or context:</p>
<ul>
<li>PKGBUILD how to specify git version</li>
<li>python how to sort list reverse</li>
<li>systemd create unit file that forks</li>
<li>xorg start i3wm with startx</li>
<li>git update all submodules to latest tip</li>
<li>typescript make simple post request</li>
<li>chromium difference between args and declare_args</li>
<li>sekiro versus elden ring</li>
<li>generate random number between 10 and 20
<ul>
<li>I cannot run the code. Please generate a random number for me</li>
<li>between 10 and 20 though</li>
</ul>
</li>
<li>add pasta before or after boiling water?</li>
<li>what is the difference between auszahlen and Bargeld abheben?</li>
<li>write a trip packing checklist for me</li>
</ul>
<p>Someone even wrote a Chrome extension to query <code>ChatGPT</code> alongside a Google search: <a href="https://github.com/wong2/chat-gpt-google-extension">https://github.com/wong2/chat-gpt-google-extension</a> (chatgpt4google.com). I couldn&rsquo;t get it to work for some reason though.</p>
</li>
</ul>
<h2 id="stable-diffusionstable-diffusion"><a href="https://stablediffusionweb.com/#demo">Stable Diffusion</a></h2>
<p>Given a query (text), it generates an image for you. It pairs up quite nicely with Slides (when looking for inspiration) and can effectively replace Google Images to some extent.</p>]]></content:encoded></item><item><title>Do I still remember how to blog?</title><link>https://thiagowfx.github.io/2022/10/do-i-still-remember-how-to-blog/</link><pubDate>Sun, 09 Oct 2022 18:31:07 +0200</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/10/do-i-still-remember-how-to-blog/</guid><description>&lt;p>I haven&amp;rsquo;t written a blog post for a couple of months now, which is a good indicator I should probably document my workflow before I forget how to do it&amp;hellip;&lt;/p></description><content:encoded><![CDATA[<p>I haven&rsquo;t written a blog post for a couple of months now, which is a good indicator I should probably document my workflow before I forget how to do it&hellip;</p>
<p>First, <code>git clone --recurse https://github.com/thiagowfx/thiagowfx.github.io/</code>.
I like to store it in <code>~/Projects/thiagowfx.github.io</code>.</p>
<p>To create a new post, <code>hugo new content/posts/2022-10-09-title-comes-here.md</code>.</p>
<p>Use either <code>vim</code> or <code>textmate</code> to draft the post. Choose one or more tags,
trying to reuse existing ones whenever possible. When using <code>vim</code>, use <code>Q</code> to
reformat paragraphs.</p>
<p>To preview the post locally, run <code>make run</code> and then open http://localhost:1313/.</p>
<p>If everything looks good, <code>git commit</code> and <code>git push</code>. GitHub CI will then
publish the post to <a href="https://pages.github.com/">GitHub Pages</a> in a couple of
seconds.</p>
<p>To blog on the go, use <a href="https://github.dev/">https://github.dev/</a>. I documented this setup earlier,
<a href="https://thiagowfx.github.io/2022/02/hugo-compose-or-edit-blog-posts-from-the-web/">here</a>.</p>]]></content:encoded></item><item><title>★ Tools you should know about: moreutils</title><link>https://thiagowfx.github.io/2022/05/tools-you-should-know-about-moreutils/</link><pubDate>Sun, 01 May 2022 13:02:51 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/05/tools-you-should-know-about-moreutils/</guid><description>&lt;p>&lt;a href="https://joeyh.name/code/moreutils/">&lt;code>moreutils&lt;/code>&lt;/a> has previously been covered &lt;a href="https://news.ycombinator.com/item?id=31043655">elsewhere&lt;/a>, multiple times. It&amp;rsquo;s a collection of small unix tools that follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> very strongly.&lt;/p>
&lt;p>Here are some of my favorites with example usages. Obviously this post isn&amp;rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://joeyh.name/code/moreutils/"><code>moreutils</code></a> has previously been covered <a href="https://news.ycombinator.com/item?id=31043655">elsewhere</a>, multiple times. It&rsquo;s a collection of small unix tools that follow the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">unix philosophy</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> very strongly.</p>
<p>Here are some of my favorites with example usages. Obviously this post isn&rsquo;t a manual which would have been a disservice to the community; refer to the upstream man pages for detailed instructions.</p>
<h2 id="sponge">sponge</h2>
<blockquote>
<p>sponge(1) - soak up standard input and write to a file</p>
</blockquote>
<p>Here&rsquo;s a typical workflow <code>sponge(1)</code> is great at:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Given a file</span>
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Imagine that for whatever reason we want to replace &#39;a&#39; with &#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Naively, we could try this:</span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> &gt; myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># However the file becomes empty!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It got clobbered when we tried to simultenaously read from and write to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sponge comes to the rescue!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ cat myfile | tr <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#e6db74">&#39;b&#39;</span> | sponge myfile
</span></span><span style="display:flex;"><span>$ cat myfile
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>b
</span></span><span style="display:flex;"><span>c
</span></span></code></pre></div><p>It is great to use <code>sponge</code> in lieu of <code>&gt;</code> (shell output redirection) in shell pipelines when trying to both read from and write to the same file.</p>
<h2 id="vidir">vidir</h2>
<blockquote>
<p>vidir(1) - edit directories and filenames</p>
</blockquote>
<p><code>vidir(1)</code> is great to bulk rename files/directories within a given directory, one level at a time. For example, if I open <code>vidir</code> at the top-level directory of this blog repository, it opens up <code>vim</code> (although it doesn&rsquo;t need to be <code>vim</code>, your <code>$EDITOR</code> is honoured) with the following content:</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./Makefile
8	./README.md
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>If I make, say, the following modifications (lines 7 and 8):</p>
<pre tabindex="0"><code>1	./.git
2	./.github
3	./.gitignore
4	./.gitmodules
5	./.hugo_build.lock
6	./LICENSE
7	./GNUMakefile
8	./README.rst
9	./archetypes
10	./config.yml
11	./content
12	./layouts
13	./public
14	./resources
15	./static
16	./themes
</code></pre><p>And then save and quit <code>vim</code> (<code>:wq</code>), then the effect would have been the same as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ mv Makefile GNUMakefile
</span></span><span style="display:flex;"><span>$ mv README.md README.rst
</span></span></code></pre></div><p>If I changed my mind and decided not to save the modifications, I could just do <code>:cq</code>.</p>
<p>It&rsquo;s possible to leverage vim features such as <code>.</code> (repeat command) and <code>:%s/</code> (find and replace) to perform those mass file renames quickly and effectively. <code>vidir</code> is a breeze to use!</p>
<h2 id="ifne">ifne</h2>
<blockquote>
<p>ifne(1) - Run command if the standard input is not empty</p>
</blockquote>
<p><code>ifne(1)</code> is effective when used with <code>find</code> or <code>fd</code> to keep shell pipes &ldquo;happy&rdquo;. Here&rsquo;s one simple example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | xargs clang-format
</span></span></code></pre></div><p>This should work as expected, but it&rsquo;s cleaner to do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ find . -name <span style="color:#e6db74">&#39;*.cpp&#39;</span> | ifne xargs clang-format
</span></span></code></pre></div><p>The added <code>ifne</code> ensures the <code>xargs</code> command is only executed if and only if <code>find</code> yields at least one result in its output.</p>
<p>This wasn&rsquo;t a very practical example though: a more realistic way to use <code>ifne</code> is with prototypical on-the-fly manipulation of shell pipes wherein initially you just do whatever, but then whenever you notice some command in the middle of the pipe has failed because its input was empty (=the previous pipe command output was empty) you just prepend <code>ifne</code> to it:</p>
<pre tabindex="0"><code>$ this | is | a | complicated | pipe
# assume &#34;complicated&#34; fails because it has no input
# so we iterate and do:
$ this | is | a | ifne complicated | pipe
</code></pre><h2 id="combine">combine</h2>
<blockquote>
<p>combine(1) - combine sets of lines from two files using boolean operations</p>
</blockquote>
<p><code>combine(1)</code> is pretty much <code>comm(1)</code>, but much more user-friendly. Given two files <code>file1</code> and <code>file2</code> it makes it easy to query which lines are {unique, common} to {each, both} files, using boolean operations (or, and, not, xor). Here&rsquo;s one example to find the <em>common lines</em> in <em>both</em> files, compare <code>combine</code> and <code>comm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ combine file1 and file2
</span></span><span style="display:flex;"><span>$ comm -12 file1 file2     <span style="color:#75715e"># flags are harder to remember</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The Unix philosophy emphasizes building simple, short, clear, modular, and extensible code that can be easily maintained and repurposed by developers other than its creators. The Unix philosophy favors composability as opposed to monolithic design.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Large prints</title><link>https://thiagowfx.github.io/2022/04/large-prints/</link><pubDate>Sun, 24 Apr 2022 17:58:03 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/04/large-prints/</guid><description>&lt;p>It occurred to me the &lt;strong>Large Prints&lt;/strong> section of our local public library is a decent way to sample popular books.&lt;/p></description><content:encoded><![CDATA[<p>It occurred to me the <strong>Large Prints</strong> section of our local public library is a decent way to sample popular books.</p>
<p><a href="https://en.m.wikipedia.org/wiki/Large-print">Wikipedia</a>:</p>
<blockquote>
<p>Large-print (also large-type or large-font) refers to the formatting of a book or other text document in which the typeface (or font) are considerably larger than usual to accommodate people who have low vision. Frequently the medium is also increased in size to accommodate the larger text. Special-needs libraries and many public libraries will stock large-print versions of books, along with versions written in Braille.</p>
</blockquote>
<p>Instead of browsing the entire library catalogue to try to find an interesting book to read<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, it’s often more effective to browse the Large Print ones.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>a.k.a. <strong>serendipity</strong>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Tracking packages automatically in a single place</title><link>https://thiagowfx.github.io/2022/04/tracking-packages-automatically-in-a-single-place/</link><pubDate>Sat, 23 Apr 2022 18:03:52 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/04/tracking-packages-automatically-in-a-single-place/</guid><description>&lt;p>I was looking for a way to &lt;strong>track packages and parcels&lt;/strong> (mail) for the most popular post and courier services e.g. DHL, UPS, Fedex, Canada Post, USPS, Correios, etc.&lt;/p></description><content:encoded><![CDATA[<p>I was looking for a way to <strong>track packages and parcels</strong> (mail) for the most popular post and courier services e.g. DHL, UPS, Fedex, Canada Post, USPS, Correios, etc.</p>
<p>There were only two requeriments:</p>
<ol>
<li><em>one place to rule them all</em>: whether an app, chatbot, self-hosted software, or website, all services should be available from a single UI endpoint, for <strong>ease of management</strong></li>
<li>automatic / periodic updates: whether by polling, subscription or webhook, the service should autonomously retrieve parcel statuses; accessing each individual provider website should be a no-go</li>
</ol>
<p>Ultimately I found two solutions that pleased me, both of which free:</p>
<ol>
<li>
<p><a href="https://shop.app">Shopify&rsquo;s Shop app</a>: <strong>Pro</strong>: Great and <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a> design, <strong>Con</strong>: Tracking; Fortune 500 company gathering analytics and data from my purchases. Although I do have a great amount of respect for Shopify generally, the less amount of tracking by Big Tech the better.</p>
</li>
<li>
<p><a href="https://trackbot.eu/en">Telegram&rsquo;s @Trackbot</a>:</p>
</li>
</ol>
<blockquote>
<p>TrackBot is a Telegram bot for tracking all your shipments. Free, forever. Automatic courier recognition. TrackBot automatically detects the courier of the shipment by using machine learning techniques, with an accuracy higher than 97%.</p>
</blockquote>
<p>After using both of them for a while, <strong>my preferred solution nowadays is the Telegram bot</strong>. Its basic operations are (i) List all shipments and (ii) Add a new shipment. It is smart enough to detect the carrier by itself in most cases from the tracking code alone, however whenever it doesn&rsquo;t one can simply specify it manually. Whenever new updates to your existing shipments are detected, it sends you a message (notification) on Telegram.</p>]]></content:encoded></item><item><title>★ Keychron K2 on macOS: fix Home and End keys</title><link>https://thiagowfx.github.io/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</link><pubDate>Fri, 22 Apr 2022 19:04:17 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/04/keychron-k2-on-macos-fix-home-and-end-keys/</guid><description>&lt;p>&lt;strong>Issue&lt;/strong>: For whatever reason, the &lt;code>Home&lt;/code> and &lt;code>End&lt;/code> keys on my &lt;a href="https://thiagowfx.github.io/2022/01/keychron-k2-review/">Keychron K2&lt;/a> do not work as intended on macOS.&lt;/p></description><content:encoded><![CDATA[<p><strong>Issue</strong>: For whatever reason, the <code>Home</code> and <code>End</code> keys on my <a href="https://thiagowfx.github.io/2022/01/keychron-k2-review/">Keychron K2</a> do not work as intended on macOS.</p>
<h2 id="expectations-vs-reality">Expectations vs Reality</h2>
<p>For example, when using a text editor such as TextMate or a web browser like Chrome, I&rsquo;d expect:</p>
<ul>
<li><code>Home</code> to position the text cursor in the beginning of the line (à la <code>C-a</code> in emacs)</li>
<li><code>End</code> to position the text cursor in the end of the line (à la <code>C-e</code> in emacs)</li>
</ul>
<p>The only way to provoke these effects <em>out-of-the-box</em> is by pressing, respectively, the <code>Cmd + Left</code> and <code>Cmd + Right</code> shortcuts, as you would normally do in a Macbook laptop native keyboard.</p>
<p>This is very annoying because it only happens in macOS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: the <code>Home</code> and <code>End</code> keys work just fine in both Linux and Windows. <a href="https://www.reddit.com/r/Keychron/comments/ooice5/home_and_end_keys_not_working_on_monterrey/">A reddit user</a> reported the same issue in <code>/r/keychron</code>, but the existing thread has no proposed solutions.</p>
<h2 id="enter-karabiner-elements">Enter Karabiner Elements</h2>
<p>I&rsquo;ve always heard good things about <a href="http://karabiner-elements.pqrs.org">Karabiner Elements</a> as a praised one-size-fits-all application for keyboards and macros in macOS, thus decided to give it a try. <strong>Bonus points</strong>: it is <a href="https://github.com/pqrs-org/Karabiner-Elements">open source</a>, released into the public domain.</p>
<p>Upon installing it with <a href="https://formulae.brew.sh/cask/karabiner-elements">Homebrew Cask</a> (<code>brew install karabiner-elements</code>), I executed it. Then I needed to give a bunch of permissions to the application via <code>macOS Settings &gt; Security &amp; Privacy &gt; Privacy &gt; Input Monitoring</code>. The following apps were whitelisted accordingly:</p>
<ul>
<li><code>karabiner_grabber</code></li>
<li><code>karabiner_observer</code></li>
<li><code>Karabiner-EventViewer.app</code>: this one is optional, but useful for debugging</li>
</ul>
<p>The app is straightforward to use. It allows you to do all sorts of reactions to key codes input events.</p>
<p>I had a simple idea: I wanted to map <code>Home</code> to <code>Cmd + Left</code>, and <code>End</code> to <code>Cmd + Right</code>.</p>
<p>Unfortunately these are considered &ldquo;Complex modifications&rdquo; because they map one origin key to two destination keys. &ldquo;Simple modifications&rdquo; are <em>one-to-one</em> key mappings. Why is it unfortunate? Because it doesn&rsquo;t seem to be possible to do such mappings via the app UI. Apparently one needs to express those mappings in a <code>.json</code> file instead.</p>
<h2 id="ah-communities">Ah, communities</h2>
<p>Sure, no problem, I was about to do it but then I realized there&rsquo;s an <a href="https://ke-complex-modifications.pqrs.org">official website</a> for community-maintained mappings. The website is well organized and curated. Why create something fully from scratch when I could just reuse an existing one?</p>
<p>I found a &ldquo;Keychron K2&rdquo; category which made me instantly happy but it turned out not to be useful, as there were only two defined mappings therein:</p>
<blockquote>
<ul>
<li>Change Keychron K2 keyboard layout to more closely resemble an Apple keyboard</li>
<li>Remap some Keychrom K2(US) keys to make it less painful to switch from Macbook(RU) keyboard</li>
</ul>
</blockquote>
<p>None of these mattered to me. Then I searched for <code>home to cmd</code> which led me to <a href="https://ke-complex-modifications.pqrs.org/#HomeEnd">this entry</a>, which had exactly the mappings I wanted:</p>
<blockquote>
<p>Home and End</p>
<ul>
<li>Home to Command Left</li>
<li>End to Command Right</li>
</ul>
</blockquote>
<p><a href="https://ke-complex-modifications.pqrs.org/json/HomeEnd.json">Its resulting JSON</a> looks roughly like this (irrelevant bits stripped for the sake of brevity):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Home and End&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;rules&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Home to Command Left&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;home&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;left_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;End to Command Right&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;manipulators&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;basic&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;from&#34;</span>: {
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;end&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;to&#34;</span>: [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;key_code&#34;</span>: <span style="color:#e6db74">&#34;right_arrow&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;modifiers&#34;</span>: <span style="color:#e6db74">&#34;command&#34;</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There&rsquo;s conveniently an <strong>Import</strong> button in the website though, which automatically opens the mappings in Karabiner Elements, so I didn&rsquo;t even need to copy and paste the JSON.</p>
<h2 id="verdict">Verdict</h2>
<p><strong>End Result</strong>: It worked flawlessly! The only caveat is that from now on I need to keep the Karabiner Elements application running as a daemon, but it is well justified. Plus, if I ever need<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to map additional keys in the future, now I already have a workflow in place to do so.</p>
<p>Karabiner is like having <a href="https://qmk.fm">QMK</a> purely at the software layer, which works for any keyboard whatsoever.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As of this writing: macOS Monterey: 12.3.1.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it</a>&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Translating German to English</title><link>https://thiagowfx.github.io/2022/04/translating-german-to-english/</link><pubDate>Sun, 03 Apr 2022 01:02:16 -0400</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/04/translating-german-to-english/</guid><description>&lt;p>I&amp;rsquo;ve been trying to learn German on my own, without taking formal classes. I should write a post about this sometime.&lt;/p>
&lt;p>For now, in this post I will briefly list the resources I use to translate German to English and/or to look up the definition of German words in German.&lt;/p></description><content:encoded><![CDATA[<p>I&rsquo;ve been trying to learn German on my own, without taking formal classes. I should write a post about this sometime.</p>
<p>For now, in this post I will briefly list the resources I use to translate German to English and/or to look up the definition of German words in German.</p>
<h2 id="google-translatehttpstranslategooglecom"><a href="https://translate.google.com/">Google Translate</a></h2>
<p>Everyone knows Google Translate, right? Direct link for <code>DE-&gt;EN</code> translations: <a href="https://translate.google.com/?sl=de&amp;tl=en/">https://translate.google.com/?sl=de&amp;tl=en/</a></p>
<p>Google Translate is my to go swiss-army knife one-size-fits-all application whenever I need to translate something without thinking too much. It is decent for <strong>words</strong> and for <strong>phrases, sentences and expressions</strong>, giving you: (i) translation, (ii) synonyms / alternate translations, (iii) dictionary definition and (iv) pronounciation.</p>
<p>A quicker shortcut to use on the go is <a href="https://www.google.com/">Google</a> itself: A query like <a href="https://www.google.com/search?q=translate+strasse+from+german"><code>translate strasse from german</code></a> works as you would expect, and it even displays an <code>Open in Google Translate</code> button for further tweaking.</p>
<h2 id="dictcchttpswwwdictcc"><a href="https://www.dict.cc/">dict.cc</a></h2>
<p>Dict.cc is great to look up <strong>detailed</strong> definitions of German words and idioms. It&rsquo;s a superb dictionary (<em>Wörterbuch</em>). Example query: <a href="https://www.dict.cc/?s=strasse">strasse</a>. It has apps for Android and iOS, both of which support offline lookups.</p>
<h2 id="deeplhttpswwwdeeplcomtranslator"><a href="https://www.deepl.com/translator">DeepL</a></h2>
<p>DeepL Translate is the new kid in town (released on 2017), &ldquo;The world&rsquo;s most accurate translator&rdquo; as they describe themselves. It&rsquo;s free, but with some limitations. Apparently they use some heavy machine learning machinery different than Google&rsquo;s that may yield better (&ldquo;more natural&rdquo;) results in some situations. I like to keep it around as an alternative to Google Translate when its translations aren&rsquo;t satisfactory, but I don&rsquo;t use it much.</p>
<h2 id="google-dictionaryhttpschromegooglecomwebstoredetailgoogle-dictionary-by-googmgijmajocgfcbeboacabfgobmjgjcojahlen"><a href="https://chrome.google.com/webstore/detail/google-dictionary-by-goog/mgijmajocgfcbeboacabfgobmjgjcoja?hl=en">Google Dictionary</a></h2>
<p>When using Google Chrome the <strong>Google Dictionary</strong> extension is handy to quickly look up word definitions without leaving the current page. A double click in a word triggers a pop-up balloon with a concise definition.</p>
<p>As a bonus it doubles down as an English dictionary.</p>
<h2 id="apple-dictionaryhttpsapplecom"><a href="https://apple.com/">Apple Dictionary</a></h2>
<p>On Apple operating systems, including <a href="https://support.apple.com/en-ca/guide/pages-ipad/tan9ef3ea9f8/ipados">iOS</a> and <a href="https://support.apple.com/en-ca/guide/mac-help/mchl3983326c/mac">macOS</a>, one can out-of-the-box force touch a word which yields a behavior very similar to Google Dictionary (&ldquo;Look Up&rdquo;).</p>]]></content:encoded></item><item><title>macOS terminal app gripes</title><link>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</link><pubDate>Sat, 26 Mar 2022 02:28:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/macos-terminal-app-gripes/</guid><description>&lt;p>&lt;code>Terminal.app&lt;/code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.&lt;/p></description><content:encoded><![CDATA[<p><code>Terminal.app</code> is a pretty decent terminal emulator for macOS, with sensible
defaults. That said, I have my own gripes about it, but the list is
surprisingly small.</p>
<h2 id="1-no-osc-52-support">1. No OSC-52 support</h2>
<p><a href="https://github.com/roy2220/osc52pty">https://github.com/roy2220/osc52pty</a>:</p>
<blockquote>
<p>OSC 52 is one of Xterm Control Sequences, which is designated for clipboard setting. Once a terminal supporting OSC 52 catches a text in the form of OSC 52 from the output, instead of printing the text onto the screen, it decodes the text first and then sends the content to the system clipboard.</p>
</blockquote>
<blockquote>
<p>Although <code>Terminal.app</code> does NOT support OSC 52, here [osc52pty] is the workaround for it.</p>
</blockquote>
<p>I dislike this workaround because it requires an external binary. Even though it is a single binary because it is a Golang executable, I still dislike the external dependency.</p>
<h2 id="2-no-true-color-256-colors">2. No true color (256 colors)</h2>
<p>What is true color? See <a href="https://stackoverflow.com/questions/6403744/are-there-terminals-that-support-true-color">stack overflow</a> for context.</p>
<p>Run the <a href="https://gist.github.com/XVilka/8346728">following</a> to print a color band, a smooth (gradient) output indicates true color support:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;BEGIN{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    s=&#34;/\\/\\/\\/\\/\\&#34;; s=s s s s s s s s;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    for (colnum = 0; colnum&lt;77; colnum++) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r = 255-(colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        g = (colnum*510/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b = (colnum*255/76);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if (g&gt;255) g = 510-g;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[48;2;%d;%d;%dm&#34;, r,g,b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;\033[38;2;%d;%d;%dm&#34;, 255-r,255-g,255-b;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        printf &#34;%s\033[0m&#34;, substr(s,colnum+1,1);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    printf &#34;\n&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span></code></pre></div><p><code>Terminal.app</code> will not print a gradient.</p>
<h2 id="3-no-gpu-acceleration">3. No GPU acceleration</h2>
<p><a href="https://unix.stackexchange.com/q/658709">https://unix.stackexchange.com/q/658709</a>:</p>
<blockquote>
<p>Q: What are the advantages of hardware-accelerated terminal emulators?</p>
</blockquote>
<blockquote>
<p>A: They can potentially be faster at outputting and refreshing vast amounts of information. It could also allow for smooth(er) scrolling. Human beings however are quite slow at reading this information, [&hellip;] the average person is unlikely to be able to comprehend it anyways. CPU usage could be lower but it needs to be tested.</p>
</blockquote>
<p><code>Terminal.app</code> isn&rsquo;t GPU accelerated.</p>
<h2 id="recommendations">Recommendations</h2>
<p>Both <a href="https://alacritty.org">alacritty</a> and <a href="https://sw.kovidgoyal.net/kitty/">kitty</a> are decent replacements (or complements) for <code>Terminal.app</code> that work out-of-the-box, with sensible defaults including all the aforementioned points.</p>]]></content:encoded></item><item><title>Send emails straight to spam</title><link>https://thiagowfx.github.io/2022/03/send-emails-straight-to-spam/</link><pubDate>Fri, 25 Mar 2022 23:26:37 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/send-emails-straight-to-spam/</guid><description>Just tested straight to spam today:
Love emails but hate people? Don’t want someone 🤡 at your party 🥳 but have to invite them 🤢 cause your mom 💁‍♀️ made you? Trust Straight 2 Spam to send your v important email 📧 straight to their spam 🗑
Click the button below👇 to copy a nasty ❌ ooey ❌ gooey ❌ spam-keyword filled invisible message 🔤 for your email that you totally sent on time ⏰ but the 🐦 dodo-brain 🧠 won&amp;rsquo;t see it because they didn’t check their spam folder 📂 (Just make sure you&amp;rsquo;re not in the recipient&amp;rsquo;s address book 📇, or all bets are off 🙅‍♀️)</description><content:encoded><![CDATA[<p>Just tested <a href="https://straight2spam.xyz">straight to spam</a> today:</p>
<blockquote>
<p>Love emails but hate people? Don’t want someone 🤡 at your party 🥳 but have to invite them 🤢 cause your mom 💁‍♀️ made you? Trust Straight 2 Spam to send your v important email 📧 straight to their spam 🗑</p>
<p>Click the button below👇 to copy a nasty ❌ ooey ❌ gooey ❌ spam-keyword filled invisible message 🔤 for your email that you totally sent on time ⏰ but the 🐦 dodo-brain 🧠 won&rsquo;t see it because they didn’t check their spam folder 📂 (Just make sure you&rsquo;re not in the recipient&rsquo;s address book 📇, or all bets are off 🙅‍♀️)</p>
</blockquote>
<p>It works exactly as advertised:</p>
<ul>
<li>Send an email to someone whose address book contains your email address, and it will <em>not</em> go to spam.</li>
<li>Send an email to someone whose address book does <em>not</em> contain your email address, and it goes straight to the spam folder.</li>
</ul>
<p>The email body is indeed invisible, at least in the Gmail web UI. Even <code>Ctrl+A</code> won&rsquo;t reveal it. If you click &ldquo;Show original&rdquo; to inspect the full message body and headers though, you&rsquo;ll see some junk like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello#1 $$$ 100% Act now Action Additional income Affordable All
</span></span><span style="display:flex;"><span>natural/new Amazed Apply now Avoid Be amazed/your own Bitcoin boss
</span></span><span style="display:flex;"><span>Beneficiary Billing Billion Bonus Boss Buy Call!!!!!! free/now Cancel
</span></span><span style="display:flex;"><span>Crypto Cash Casino
</span></span></code></pre></div><p>There&rsquo;s actually more, but I don&rsquo;t want to make this post too spammy for search engines.</p>
<p>The aforementioned text is wrapped in this HTML:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">dir</span><span style="color:#f92672">=</span><span style="color:#e6db74">3D&#34;ltr&#34;</span>&gt;Hello&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">3D&#34;color:rgb(255,255,255);font-family:&amp;qu=</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ot</span><span style="color:#960050;background-color:#1e0010">;</span><span style="color:#a6e22e">Comic</span> <span style="color:#a6e22e">Sans</span> <span style="color:#a6e22e">MS</span><span style="color:#960050;background-color:#1e0010">&amp;</span><span style="color:#a6e22e">quot</span><span style="color:#960050;background-color:#1e0010">;;</span><span style="color:#a6e22e">font-size:1px</span><span style="color:#960050;background-color:#1e0010">&#34;</span>&gt;
</span></span></code></pre></div><p>Which explains why it is &lsquo;invisible&rsquo; (note the white color).</p>
]]></content:encoded></item><item><title>HTTPS Everywhere: So long and thanks for all the fish</title><link>https://thiagowfx.github.io/2022/03/https-everywhere-so-long-and-thanks-for-all-the-fish/</link><pubDate>Tue, 22 Mar 2022 01:09:13 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/https-everywhere-so-long-and-thanks-for-all-the-fish/</guid><description>&lt;p>EFF&amp;rsquo;s&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;a href="https://chrome.google.com/webstore/detail/https-everywhere/gcbommkclmclpchllfjekcdonpmejbdp">HTTPS Everywhere&lt;/a> is a browser extension available for all major browsers that automatically upgrades HTTP to HTTPS on supported websites.&lt;/p></description><content:encoded><![CDATA[<p>EFF&rsquo;s<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <a href="https://chrome.google.com/webstore/detail/https-everywhere/gcbommkclmclpchllfjekcdonpmejbdp">HTTPS Everywhere</a> is a browser extension available for all major browsers that automatically upgrades HTTP to HTTPS on supported websites.</p>
<p>Other than adblocking, it&rsquo;s one of the first extensions I add to a fresh browser installation.</p>
<p>Today I learned it is apparently not needed anymore. Both Google Chrome and Firefox have settings these days to perform exactly the same functionality of the extension.</p>
<p>In Google Chrome do: <a href="chrome://settings">chrome://settings</a> -&gt; Security and Privacy -&gt; Advanced -&gt; Toggle &lsquo;Always use secure connections&rsquo; on.</p>
<p>In Firefox the option is located on Settings -&gt; Privacy &amp; Security -&gt; HTTPs only mode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>EFF is a big proponent and advocate for a secure web, being one of the core responsible actors for <a href="http://certbot.eff.org">certbot</a> and <a href="https://letsencrypt.org">Let&rsquo;s Encrypt</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>macOS: sudo with touch ID</title><link>https://thiagowfx.github.io/2022/03/macos-sudo-with-touch-id/</link><pubDate>Mon, 21 Mar 2022 02:13:27 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/macos-sudo-with-touch-id/</guid><description>&lt;p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.&lt;/p>
&lt;p>It is also possible to use it for &lt;code>sudo&lt;/code> authentication via &lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>:&lt;/p></description><content:encoded><![CDATA[<p>Recent macbooks have a fingerprint reader, which is typically used to unlock the computer and log in.</p>
<p>It is also possible to use it for <code>sudo</code> authentication via <a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% $EDITOR /etc/pam.d/sudo       
</span></span><span style="display:flex;"><span><span style="color:#75715e"># sudo: auth account password session</span>
</span></span><span style="display:flex;"><span>auth       sufficient     pam_tid.so             <span style="color:#75715e"># &lt;== add this line</span>
</span></span><span style="display:flex;"><span>auth       sufficient     pam_smartcard.so
</span></span><span style="display:flex;"><span>auth       required       pam_opendirectory.so
</span></span><span style="display:flex;"><span>account    required       pam_permit.so
</span></span><span style="display:flex;"><span>password   required       pam_deny.so
</span></span><span style="display:flex;"><span>session    required       pam_permit.so
</span></span></code></pre></div><p>Once the file is saved with the added line, a command with <code>sudo</code> will spawn the touch ID prompt. I confirmed it works on both Terminal.app and Kitty.</p>
<p>This solution <a href="https://apple.stackexchange.com/a/392407">does not</a> work within <code>tmux</code> (confirmed), and apparently within iTerm2 as well (not confirmed). A separate PAM module is needed to do so (<a href="https://github.com/fabianishere/pam_reattach"><code>pam_reattach.so</code></a>). I&rsquo;d rather keep my core dependencies surface small though and not include a third party, so for now I am satisfied with the native touch ID module.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://sixcolors.com/post/2020/11/quick-tip-enable-touch-id-for-sudo/">https://sixcolors.com/post/2020/11/quick-tip-enable-touch-id-for-sudo/</a></li>
<li><a href="https://apple.stackexchange.com/a/306324">https://apple.stackexchange.com/a/306324</a></li>
</ul>]]></content:encoded></item><item><title>Computers are fast</title><link>https://thiagowfx.github.io/2022/03/computers-are-fast/</link><pubDate>Sun, 20 Mar 2022 15:55:24 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/computers-are-fast/</guid><description>&lt;p>&lt;a href="https://computers-are-fast.github.io">Computers are fast&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://computers-are-fast.github.io">Computers are fast</a>.</p>
<blockquote>
<p>Let&rsquo;s find out how well you know computers! All of these programs have a variable NUMBER in them. Your mission: guess how big NUMBER needs to get before the program takes 1 second to run.</p>
<p>You don&rsquo;t need to guess exactly: they&rsquo;re all between 1 and a billion. Just try to guess the right order of magnitude!</p>
</blockquote>
<p>This is basically an interactive version of <a href="https://gist.github.com/jboner/2841832">Latency Numbers Every Programmer Should Know</a>, originally coined by Jeff Dean.</p>]]></content:encoded></item><item><title>Ninite: Bootstrap a Windows installation</title><link>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</link><pubDate>Thu, 17 Mar 2022 14:37:15 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/ninite-bootstrap-a-windows-installation/</guid><description>&lt;p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.&lt;/p>
&lt;p>In my opinion, &lt;a href="https://ninite.com">Ninite&lt;/a> is the best way to do so.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I need to fully reinstall a Windows Desktop system, there are certain applications that need to be bootstrapped: image viewer, image editor, office suite, PDF viewer, video player, web browsers, etc.</p>
<p>In my opinion, <a href="https://ninite.com">Ninite</a> is the best way to do so.</p>
<p>All you need to do is to select a few checkboxes. The Ninite installer will then automatically download and install all selected applications and software, one-by-one, with sensible defaults<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and a decent progress report:</p>
<pre tabindex="0"><code>App1	OK
App2	Installing
App3	Waiting to install
App4	Downloading
App5	Waiting to download
</code></pre><p>I dunno why they do it one-by-one, but it&rsquo;s in principle reasonable, probably intended to avoid potential conflicts of multiple installers trying to fiddle with each other at the same time.</p>
<p>The Ninite installer also has an interesting reuse<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> property: You could save it to run it again in the future: it will end up updating the existing applications – and maybe reinstalling them, in case some of them were uninstalled in the meantime.</p>
<p>If you bookmark the URL generated by the webapp, which looks like <a href="https://ninite.com/7zip-chrome-irfanview-steam/">https://ninite.com/7zip-chrome-irfanview-steam/</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the same set of applications could be bootstrapped once again in the future, which is useful to do batch installations in multiple computers, or to reinstall everything after a factory reset.</p>
<p>This is the URL I used to install sensible applications for my parents:</p>
<p><a href="https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/">https://ninite.com/7zip-chrome-classicstart-dropbox-firefox-gimp-googledrivefordesktop-inkscape-irfanview-klitecodecs-libreoffice-qbittorrent-steam-sumatrapdf-teamviewer15-thunderbird-vlc/</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For example, by saying &lsquo;No&rsquo; to junk like browser toolbars, add-ons and &ldquo;extras&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I wanted to say &lsquo;reproducibility&rsquo;, but it&rsquo;s not quite what it means.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>You can add more pieces of software as needed.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Miniflux v2.0.36 is out</title><link>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</link><pubDate>Fri, 11 Mar 2022 10:30:18 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/miniflux-v2.0.36-is-out/</guid><description>&lt;p>Miniflux &lt;a href="https://miniflux.app/releases/2.0.36.html">2.0.36&lt;/a> has been released this week. This is a dear release to me because I was responsible for many of its changes:&lt;/p></description><content:encoded><![CDATA[<p>Miniflux <a href="https://miniflux.app/releases/2.0.36.html">2.0.36</a> has been released this week. This is a dear release to me because I was responsible for many of its changes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ PAGER<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cat&#34;</span> git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> 2.0.35..2.0.36
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Add pagination on top of all entries. Closes <span style="color:#75715e">#1305.</span>
</span></span><span style="display:flex;"><span>      Add links to scraper/rewrite/filtering docs when editing feeds
</span></span><span style="display:flex;"><span>      Add several icons to menus according to their roles
</span></span><span style="display:flex;"><span>      Add new keyboard shortcut: <span style="color:#e6db74">&#39;M&#39;</span> - toggle read/unread, go to prev item
</span></span><span style="display:flex;"><span>      refactor handleEntryStatus / goToNextListItem / goToPrevListItem
</span></span><span style="display:flex;"><span>      Add <span style="color:#f92672">(</span>+<span style="color:#f92672">)</span> action next to Feeds to quickly add new feeds
</span></span><span style="display:flex;"><span>      Add <span style="color:#e6db74">&#39;+&#39;</span> shortcut <span style="color:#66d9ef">for</span> new subscription page
</span></span><span style="display:flex;"><span>      Gray out pagination buttons when they are not applicable
</span></span></code></pre></div><p>This is the first open source project I self-host in a serious manner that I am contributing back to. It is very exciting and fulfilling, and it sparks a lot of joy in my heart.</p>
<p>I have a few other ideas for improving the miniflux user experience and functionality, while still keeping it simple and elegant. As everything else in life, time is the only constraint&hellip;</p>]]></content:encoded></item><item><title>Bypass news article paywalls</title><link>https://thiagowfx.github.io/2022/03/bypass-news-article-paywalls/</link><pubDate>Sun, 06 Mar 2022 21:49:53 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/03/bypass-news-article-paywalls/</guid><description>&lt;p>I try to avoid websites with paywalls. If I really like the website and it
deserves my attention, I will throw in a monthly subscription for it.
High-quality content deserves to be supported. The fragmentation isn&amp;rsquo;t always
great and it&amp;rsquo;s often hard to keep track of multiple distinct news sources and
portals / subscriptions, but that&amp;rsquo;s a topic for another day.&lt;/p>
&lt;p>Sometimes people will link to news articles or websites with paywalls from
various sources (blogs, social media, other news articles, etc). I&amp;rsquo;d rather
know in advance that those articles are paywalled, but that&amp;rsquo;s not always
possible. After clicking them, curiosity already killed the cat.&lt;/p>
&lt;p>There are several ways to access those as one-offs. I will add a disclaimer
that I do not publicly endorse any of those methods, they are just mentioned
for educational purposes.&lt;/p></description><content:encoded><![CDATA[<p>I try to avoid websites with paywalls. If I really like the website and it
deserves my attention, I will throw in a monthly subscription for it.
High-quality content deserves to be supported. The fragmentation isn&rsquo;t always
great and it&rsquo;s often hard to keep track of multiple distinct news sources and
portals / subscriptions, but that&rsquo;s a topic for another day.</p>
<p>Sometimes people will link to news articles or websites with paywalls from
various sources (blogs, social media, other news articles, etc). I&rsquo;d rather
know in advance that those articles are paywalled, but that&rsquo;s not always
possible. After clicking them, curiosity already killed the cat.</p>
<p>There are several ways to access those as one-offs. I will add a disclaimer
that I do not publicly endorse any of those methods, they are just mentioned
for educational purposes.</p>
<p>The most typical way is to open an incognito tab or window in your browser with
the desired URL. This works because many paywalls are often implemented with
browser cookies.</p>
<p>The second most typical way is to use a VPN to appear that you&rsquo;re accessing the
URL from another IP address. This works for websites that add rolling article
limits per IP address.</p>
<p>Occasionally some large news websites will implement paywalls poorly:</p>
<blockquote>
<p>The idea is pretty simple, news sites want Google to index their content so
it shows up in search results. So they don&rsquo;t show a paywall to the Google
crawler. We benefit from this because the Google crawler will cache a copy of
the site every time it crawls it.</p>
<p>All we do is show you that cached, unpaywalled version of the page.</p>
</blockquote>
<p><a href="https://12ft.io/">12ft</a> automatically uses this mechanism to display cached
versions of news articles. If you&rsquo;re in <code>&lt;url&gt;</code>, just prepend <code>12ft.io</code> to it:
<code>https://12ft.io/&lt;url&gt;</code>.</p>
<p>Alternatively, <a href="https://outline.com/">Outline</a> used to be another
website/service to do so, but apparently it is
<a href="https://news.ycombinator.com/item?id=30564665">unavailable</a> since last week.
Outline displays a <em>pretty printed</em> version of text from an article, looking a
lot like a markdown-rendered version of a web page.</p>
<p>Someone on Hacker News suggested <a href="https://txtify.it/">txtify.it</a> as a
replacement to it. Indeed, Txtify is very similar to Outline, however it
displays plain text instead (i.e. no formatting at all).</p>
<p>Apparently some people even go further by installing <a href="https://github.com/iamadamdev/bypass-paywalls-chrome">browser
extensions</a> to do so.</p>
<p>Ultimately, whenever possible, prefer to access news sources from news portals
that aren&rsquo;t paywalled and/or that you are a subscriber of.</p>]]></content:encoded></item><item><title>Linux: US International keyboard layout</title><link>https://thiagowfx.github.io/2022/02/linux-us-international-keyboard-layout/</link><pubDate>Sun, 27 Feb 2022 22:47:09 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/linux-us-international-keyboard-layout/</guid><description>&lt;p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.&lt;/p></description><content:encoded><![CDATA[<p>I use QWERTY keyboards with a US layout. Sometimes I need to type accents or
cedillas, and I keep forgetting how to do so, this post summarizes how to do it.</p>
<h2 id="intro">Intro</h2>
<p>There are basically two layouts:</p>
<ol>
<li>US (<em>&lsquo;vanilla&rsquo;</em>): type accents like <code>'^`~</code> and they will be emitted immediately</li>
<li>US International (INTL): accents are the so called <a href="https://en.wikipedia.org/wiki/Dead_key">&lsquo;dead keys&rsquo;</a>:</li>
</ol>
<blockquote>
<p>A dead key is a special kind of a modifier key on a mechanical typewriter, or
computer keyboard, that is typically used to attach a specific diacritic to a
base letter.</p>
</blockquote>
<p>We can switch between keyboard layouts with <code>setxkbmap</code>. It&rsquo;s also possible to
use <code>localectl</code> in systemd-based distros, but its syntax is harder to remember
so I won&rsquo;t even include it here.</p>
<h2 id="set-us-vanilla-keyboard-layout">Set US &lsquo;vanilla&rsquo; keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap us
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard should use to type in English.</p>
<h2 id="set-us-international-intl-keyboard-layout">Set US International (INTL) keyboard layout</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ setxkbmap -layout us -variant intl
</span></span></code></pre></div><p>This is what a standard QWERTY keyboard<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> should use to type, for example, in Portuguese or in German.</p>
<h3 id="portuguese">Portuguese</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- á é í ó ú     :   &#39; + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- â ê î ô û     :   ^ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ã õ           :   ~ + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- à             :   ` + &lt;vowel&gt;
</span></span><span style="display:flex;"><span>- ç (cedilla)   :   Alt Gr + , (Option + c on macOS)
</span></span></code></pre></div><h3 id="german">German</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>- ß (ss)  :   Alt Gr + s (Option + s on macOS)
</span></span><span style="display:flex;"><span>- ä ö ü   :   &#34; + &lt;vowel&gt;
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alt Gr is typically the Right Alt key.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>HTTP: a few acronyms</title><link>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</link><pubDate>Sun, 27 Feb 2022 21:48:03 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/http-a-few-acronyms/</guid><description>&lt;p>I keep forgetting these, so I wrote a small summary for my own reference.&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting these, so I wrote a small summary for my own reference.</p>
<h2 id="hsts">HSTS</h2>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">Wikipedia — HSTS</a>:</p>
<blockquote>
<p>HTTP Strict Transport Security (HSTS) is a policy mechanism that helps to
protect websites against man-in-the-middle attacks such as protocol downgrade
attacks and cookie hijacking. It allows web servers to declare that web
browsers (or other complying user agents) should automatically interact with
it using only HTTPS connections.</p>
</blockquote>
<p>In layman&rsquo;s terms: <em>Force HTTPS on a given domain</em>.</p>
<p><a href="https://hstspreload.org/">HSTS Preload List</a>:</p>
<blockquote>
<p>This form is used to submit domains for inclusion in Chrome&rsquo;s HTTP Strict
Transport Security (HSTS) preload list. This is a list of sites that are
hardcoded into Chrome as being HTTPS only.</p>
<p>Most major browsers (Chrome, Firefox, Opera, Safari, IE 11 and Edge) also
have HSTS preload lists based on the Chrome list. (See the HSTS compatibility
matrix.)</p>
</blockquote>
<p>If you add your website to that list, major browsers will honor it and only use
HTTPS for your domain.</p>
<p>Some <a href="https://en.wikipedia.org/wiki/Top-level_domain">TLDs</a> enforce HTTPS
through HSTS, some popular ones are <code>.app</code> and <code>.dev</code>.
<a href="https://serverfault.com/q/1067229/180092">Here</a> is a more comprehensive list.</p>
<p><code>HSTS</code> is fire-and-forget, you&rsquo;ll usually only need to worry about it once,
when configuring a SSL certificate (HTTPS) for your domain or subdomains.</p>
<h2 id="csp">CSP</h2>
<p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Wikipedia — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is a computer security standard introduced to
prevent cross-site scripting (XSS), clickjacking and other code injection
attacks resulting from execution of malicious content in the trusted web page
context.</p>
</blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">MDN — CSP</a>:</p>
<blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to
detect and mitigate certain types of attacks, including Cross-Site Scripting
(XSS) and data injection attacks. These attacks are used for everything from
data theft, to site defacement, to malware distribution.</p>
</blockquote>
<p>CSP can be configured in at least two distinct ways:</p>
<ol>
<li>Web server: return the <code>Content-Security-Policy</code> HTTP header:</li>
</ol>
<pre tabindex="0"><code>Content-Security-Policy: default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;
</code></pre><ol start="2">
<li>HTML <code>&lt;meta&gt;</code> tag:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">http-equiv</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content-Security-Policy&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&#34;</span>&gt;
</span></span></code></pre></div><p><code>CSP</code> is something to worry about at the application level. For example,
<a href="https://github.com/miniflux/v2/issues/748">miniflux</a> to fetch resources
(fonts) from another domain (Google Fonts).</p>
<h2 id="cors">CORS</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Wikipedia — CORS</a>:</p>
<blockquote>
<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted
resources on a web page to be requested from another domain outside the
domain from which the first resource was served.</p>
</blockquote>
<p>CORS can be configured via web server: return the <code>Access-Control-Allow-Origin</code> HTTP header:</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: *
Access-Control-Allow-Origin: http://example.com:8080
</code></pre><p><code>CORS</code> is something to worry about at the application level. For example,
<a href="https://keep.google.com/">https://keep.google.com/</a> ⟷ <a href="https://google.com/">https://google.com/</a> cookies.</p>
<h2 id="csrf">CSRF</h2>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Wikipedia — CSRF</a>:</p>
<blockquote>
<p>Cross-site request forgery, also known as one-click attack or session riding
and abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of
malicious exploit of a website where unauthorized commands are submitted from
a user that the web application trusts.</p>
</blockquote>
<p><code>CSRF</code> is something to be aware of and to watch out for.
<a href="https://owasp.org/www-community/attacks/csrf">OWASP</a> has some additional
resources on it.</p>]]></content:encoded></item><item><title>What is my IP?</title><link>https://thiagowfx.github.io/2022/02/what-is-my-ip/</link><pubDate>Sat, 26 Feb 2022 17:55:38 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/what-is-my-ip/</guid><description>&lt;p>This post contains a small handful of distinct services to query your machine
external IP address.&lt;/p></description><content:encoded><![CDATA[<p>This post contains a small handful of distinct services to query your machine
external IP address.</p>
<h2 id="googlehttpswwwgooglecomsearchqwhatismyip"><a href="https://www.google.com/search?q=what+is+my+ip">Google</a></h2>
<p>URL: <a href="https://www.google.com/search?q=what+is+my+ip">https://www.google.com/search?q=what+is+my+ip</a></p>
<p>As of this writing, this doesn&rsquo;t work on duckduckgo:
<a href="https://duckduckgo.com/?q=what+is+my+ip">https://duckduckgo.com/?q=what+is+my+ip</a>. I suppose this is related to their
philosophy of not tracking their users.</p>
<p>This is the easiest method when you have a web browser as you do not need to
memorize any URL.</p>
<h2 id="i-can-haz-iphttpsicanhazipcom"><a href="https://icanhazip.com/">I can haz ip</a></h2>
<p>URL: <a href="https://icanhazip.com/">https://icanhazip.com/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl icanhazip.com
</span></span><span style="display:flex;"><span>NNN.NNN.NNN.NNN
</span></span></code></pre></div><p>I love the simplicity of <em>I can haz ip</em>. It just returns your IP address in
plain text, nothing else. It also works from the web browser. You can find
details about it <a href="https://major.io/icanhazip-com-faq/">here</a>. <strong>TL;DR</strong>: It was
an <a href="https://github.com/major/icanhaz">open source</a> pet project of a single
person (<a href="https://major.io/">Major Hayden</a>), then it was eventually bought by
Cloudflare as it immensely grew.</p>
<p>It&rsquo;s also possible to query your IPv6 address <a href="https://apenwarr.ca/log/20170810">in case you have
one</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ curl -6 icanhazip.com
</span></span></code></pre></div><h2 id="ipinfohttpsipinfoio"><a href="https://ipinfo.io/">IPInfo</a></h2>
<p>URL: <a href="https://ipinfo.io/">https://ipinfo.io/</a></p>
<p>IPInfo returns structured data beyond just your IP address. There are several
similar services that do this, for example, <a href="https://www.whatismyip.com/">What is my
IP?</a>, however IPInfo is the cleanest one I have
seen.</p>
<h2 id="pingeuhttpspingeu"><a href="https://ping.eu/">ping.eu</a></h2>
<p>URL: <a href="https://ping.eu/">https://ping.eu/</a></p>
<p>I&rsquo;ll also give an honourable mention to ping.eu as it contains a small handful
of utilities to check for things like Traceroute, DNS, whois, port check, etc.</p>]]></content:encoded></item><item><title>Website fonts: just use the system font stack</title><link>https://thiagowfx.github.io/2022/02/website-fonts-just-use-the-system-font-stack/</link><pubDate>Sat, 26 Feb 2022 12:19:37 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/website-fonts-just-use-the-system-font-stack/</guid><description>&lt;p>When I created this blog, I pondered a lot about which typography to use. I
kept experimenting with several fonts available in &lt;a href="https://fonts.google.com/">Google
Fonts&lt;/a>, and settled on a few favorites for websites:&lt;/p></description><content:encoded><![CDATA[<p>When I created this blog, I pondered a lot about which typography to use. I
kept experimenting with several fonts available in <a href="https://fonts.google.com/">Google
Fonts</a>, and settled on a few favorites for websites:</p>
<ul>
<li>
<p>Header fonts (sans-serif): Inter, Fira Sans, Lato</p>
</li>
<li>
<p>Body fonts (serif): Crimson Pro, Vollkorn, Alegreya</p>
</li>
<li>
<p>Code fonts (mono): Fira Code, PT Mono, IBM Plex Mono</p>
</li>
</ul>
<p>Ultimately though, none of them mattered. I was motivated and
influenced by Kev Quirk&rsquo;s <a href="https://kevq.uk/how-local-fonts-can-save-the-environment/">Trying To Go Green With Local
Fonts</a>
and Steve&rsquo;s <a href="https://visitmy.website/2020/07/13/this-website-is-killing-the-planet/">This website is killing the
planet</a>,
which basically boils down to the same spirit of
<a href="https://motherfuckingwebsite.com/">https://motherfuckingwebsite.com/</a>: The web is too bloated
nowadays, most websites have a ton of unnecessary CSS and
JavaScript junk to fetch over and over again.</p>
<p>This is not a big deal if you have access to fast internet and
powerful computers, but that&rsquo;s not the case for many people in
the planet.</p>
<p>With the intent of not unnecessarily fetching fonts from the web, that&rsquo;s why my
current font stack just uses the existing fonts in your system, with a few
opinionated bits in case you have some of my favorite fonts already installed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Crimson Pro, Vollkorn, Alegreya, Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Noto Serif, Droid Serif, Times, Source Serif Pro, <span style="color:#66d9ef">serif</span>, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h1</span><span style="color:#f92672">,</span> <span style="color:#f92672">h2</span><span style="color:#f92672">,</span> <span style="color:#f92672">h3</span><span style="color:#f92672">,</span> <span style="color:#f92672">h4</span><span style="color:#f92672">,</span> <span style="color:#f92672">h5</span><span style="color:#f92672">,</span> <span style="color:#f92672">h6</span><span style="color:#f92672">,</span> <span style="color:#f92672">footer</span><span style="color:#f92672">,</span> <span style="color:#f92672">nav</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">toc</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">post-meta</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Inter, Fira Sans, Lato, system-ui, <span style="color:#f92672">-</span>apple-system, BlinkMacSystemFont, Avenir Next, Avenir, Segoe UI, Helvetica Neue, Helvetica, Ubuntu, Roboto, Noto, Cantarell, Arial, <span style="color:#66d9ef">sans-serif</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">code</span><span style="color:#f92672">,</span> <span style="color:#f92672">pre</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>: Fira Code, PT Mono, IBM Plex Mono, Menlo, Consolas, Monaco, Liberation Mono, Ubuntu Mono, Lucida Console, <span style="color:#66d9ef">monospace</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The system font stack reference comes from <a href="https://systemfontstack.com/">https://systemfontstack.com/</a> and <a href="https://css-tricks.com/snippets/css/system-font-stack/">CSS Tricks</a>.</p>]]></content:encoded></item><item><title>Screenshot a web page from within chrome devtools</title><link>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</link><pubDate>Sat, 19 Feb 2022 22:43:59 -0500</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2022/02/screenshot-a-web-page-from-within-chrome-devtools/</guid><description>&lt;p>Suppose you want to take a screenshot from a web page, maybe to add to a &lt;a href="https://github.com/miniflux/v2/pull/1341">pull
request&lt;/a> of a project you&amp;rsquo;re working
on.&lt;/p>
&lt;p>(i) The straightforward way to do so is to use your OS tool:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Windows&lt;/strong>: &lt;a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool&lt;/a>
or hit the &lt;em>PrintScreen&lt;/em> key&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>: &lt;a href="">&lt;code>scrot&lt;/code>&lt;/a> or something from your Desktop Environment (DE) such as
&lt;code>xfce4-screenshooter&lt;/code>. For a full-featured one, I&amp;rsquo;d recommend
&lt;a href="https://flameshot.org/">&lt;code>flameshot&lt;/code>&lt;/a> (first) or
&lt;a href="https://shutter-project.org/">&lt;code>shutter&lt;/code>&lt;/a> (second). For Wayland people seem
to like &lt;a href="https://wayland.emersion.fr/grim/">&lt;code>grim&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;strong>macOS&lt;/strong>: Hit &lt;code>Cmd + Shift + 4&lt;/code> or one of its
&lt;a href="https://support.apple.com/en-ca/HT201361">variations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Even &lt;a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks&lt;/a>
have a way to do so these days.&lt;/p>
&lt;p>However, maybe you didn&amp;rsquo;t know you can also use &lt;a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome&lt;/a> to take screenshots! Here&amp;rsquo;s how:&lt;/p>
&lt;ul>
&lt;li>Go to the page you want to screenshot.&lt;/li>
&lt;li>Open DevTools (&lt;code>Ctrl + Shift + J&lt;/code> on Linux).&lt;/li>
&lt;li>Hit &lt;code>Ctrl + Shift + P&lt;/code> à la VSCode to pop up a command bar, type &amp;lsquo;screenshot&amp;rsquo;.&lt;/li>
&lt;li>Choose one option. I like the &amp;lsquo;Capture area screenshot&amp;rsquo; one which allows me to drag a square for the area I want to capture.&lt;/li>
&lt;li>Hit &lt;code>Enter&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>You will then be prompted where you want to save your screenshot. Profit!&lt;/p></description><content:encoded><![CDATA[<p>Suppose you want to take a screenshot from a web page, maybe to add to a <a href="https://github.com/miniflux/v2/pull/1341">pull
request</a> of a project you&rsquo;re working
on.</p>
<p>(i) The straightforward way to do so is to use your OS tool:</p>
<ul>
<li><strong>Windows</strong>: <a href="https://support.microsoft.com/en-us/windows/use-snipping-tool-to-capture-screenshots-00246869-1843-655f-f220-97299b865f6b">Snipping
tool</a>
or hit the <em>PrintScreen</em> key</li>
<li><strong>Linux</strong>: <a href=""><code>scrot</code></a> or something from your Desktop Environment (DE) such as
<code>xfce4-screenshooter</code>. For a full-featured one, I&rsquo;d recommend
<a href="https://flameshot.org/"><code>flameshot</code></a> (first) or
<a href="https://shutter-project.org/"><code>shutter</code></a> (second). For Wayland people seem
to like <a href="https://wayland.emersion.fr/grim/"><code>grim</code></a>.</li>
<li><strong>macOS</strong>: Hit <code>Cmd + Shift + 4</code> or one of its
<a href="https://support.apple.com/en-ca/HT201361">variations</a>.</li>
</ul>
<p>Even <a href="https://support.google.com/chromebook/answer/10474268?hl=en">Chromebooks</a>
have a way to do so these days.</p>
<p>However, maybe you didn&rsquo;t know you can also use <a href="https://www.google.com/intl/en_ca/chrome/">Google Chrome</a> to take screenshots! Here&rsquo;s how:</p>
<ul>
<li>Go to the page you want to screenshot.</li>
<li>Open DevTools (<code>Ctrl + Shift + J</code> on Linux).</li>
<li>Hit <code>Ctrl + Shift + P</code> à la VSCode to pop up a command bar, type &lsquo;screenshot&rsquo;.</li>
<li>Choose one option. I like the &lsquo;Capture area screenshot&rsquo; one which allows me to drag a square for the area I want to capture.</li>
<li>Hit <code>Enter</code>.</li>
</ul>
<p>You will then be prompted where you want to save your screenshot. Profit!</p>]]></content:encoded></item></channel></rss>