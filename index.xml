<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>not just serendipity</title><link>https://www.perrotta.dev/</link><description>Recent content on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright Â© 2021 - 2024 Thiago Perrotta Â· CC BY-NC-SA 4.0 Â· RSS Â· Made with â™¥ in ðŸ‡¨ðŸ‡¦</copyright><lastBuildDate>Tue, 26 Nov 2024 12:26:24 +0100</lastBuildDate><atom:link href="https://www.perrotta.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>pre-commit: try-repo</title><link>https://www.perrotta.dev/2024/11/pre-commit-try-repo/</link><pubDate>Tue, 26 Nov 2024 12:26:24 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/pre-commit-try-repo/</guid><description>&lt;p>A productivity booster whenever trying out new
&lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a> hooks from the wild:&lt;/p></description><content:encoded><![CDATA[<p>A productivity booster whenever trying out new
<a href="https://pre-commit.com/">pre-commit.com</a> hooks from the wild:</p>
<p><strong>Usage</strong>: <code>pre-commit try-repo {git-repo}</code>.</p>
<p><strong>Example</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>% pre-commit try-repo https://github.com/mrtazz/checkmake
</span></span><span style="display:flex;"><span>[INFO] Initializing environment for https://github.com/mrtazz/checkmake.
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>Using config:
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>repos:
</span></span><span style="display:flex;"><span>-   repo: https://github.com/mrtazz/checkmake
</span></span><span style="display:flex;"><span>    rev: bd26d7905e47713ff0bf3b0e5e7b9c55f0d24e53
</span></span><span style="display:flex;"><span>    hooks:
</span></span><span style="display:flex;"><span>    -   id: checkmake
</span></span><span style="display:flex;"><span>    -   id: checkmake-system
</span></span><span style="display:flex;"><span>===============================================================================
</span></span><span style="display:flex;"><span>[WARNING] Unstaged files detected.
</span></span><span style="display:flex;"><span>[INFO] Stashing unstaged files to /var/folders/yr/6sw3yylx6gjcy5jr38d6j6000000gn/T/tmpakaoxt10/patch1732620344-2186.
</span></span><span style="display:flex;"><span>[INFO] Installing environment for https://github.com/mrtazz/checkmake.
</span></span><span style="display:flex;"><span>[INFO] Once installed this environment will be reused.
</span></span><span style="display:flex;"><span>[INFO] This may take a few minutes...
</span></span><span style="display:flex;"><span>Makefile linter/analyzer.............................(no files to check)Skipped
</span></span><span style="display:flex;"><span>Makefile linter/analyzer.............................(no files to check)Skipped
</span></span><span style="display:flex;"><span>[INFO] Restored changes from /var/folders/yr/6sw3yylx6gjcy5jr38d6j6000000gn/T/tmpakaoxt10/patch1732620344-2186.
</span></span></code></pre></div><p>Previously I would manually add the <code>repo:</code> entry with <code>rev: HEAD</code> and then run
<code>pre-commit run --all-files {hook-id}</code>, one by one, adjusting as needed.</p>
<p>This new workflow is much faster though, and it is a native pre-commit command!</p>]]></content:encoded></item><item><title>Rename files in bulk (cont)</title><link>https://www.perrotta.dev/2024/11/rename-files-in-bulk-cont/</link><pubDate>Tue, 26 Nov 2024 11:50:06 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/rename-files-in-bulk-cont/</guid><description>&lt;p>Deeper into the &lt;a href="https://www.perrotta.dev/2024/06/rename-files-in-bulk/">rabbit hole&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% fd Dockerfile.dockerignore | xargs -n &lt;span style="color:#ae81ff">1&lt;/span> rename &lt;span style="color:#e6db74">&amp;#39;s/Dockerfile\.dockerignore/.dockerignore/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The pre-commit &lt;a href="https://github.com/pre-commit/identify">identify&lt;/a> library
currently mistags these files as Dockerfiles, even though they are not&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
which creates all sorts of issues.&lt;/p></description><content:encoded><![CDATA[<p>Deeper into the <a href="https://www.perrotta.dev/2024/06/rename-files-in-bulk/">rabbit hole</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd Dockerfile.dockerignore | xargs -n <span style="color:#ae81ff">1</span> rename <span style="color:#e6db74">&#39;s/Dockerfile\.dockerignore/.dockerignore/&#39;</span>
</span></span></code></pre></div><p>The pre-commit <a href="https://github.com/pre-commit/identify">identify</a> library
currently mistags these files as Dockerfiles, even though they are not<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,
which creates all sorts of issues.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>They are akin to <code>.gitignore</code> files in terms of structure.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Remove the executable bit from all files with a given extension</title><link>https://www.perrotta.dev/2024/11/remove-the-executable-bit-from-all-files-with-a-given-extension/</link><pubDate>Mon, 25 Nov 2024 11:43:20 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/remove-the-executable-bit-from-all-files-with-a-given-extension/</guid><description>To illustrate, consider TypeScript files (*.ts).
Run:
% fd -e .ts -x chmod -x References:
fd: find on steroids: https://github.com/sharkdp/fd -x: execute the given command on all matched files You could also use classic find:
% find . -type f -name &amp;#39;*.ts&amp;#39; -exec chmod -x {} \; Or:
% find . -type f -name &amp;#39;*.ts&amp;#39; | xargs chmod -x Or, with more style safety:
% find . -type f -name &amp;#39;*.</description><content:encoded><![CDATA[<p>To illustrate, consider TypeScript files (<code>*.ts</code>).</p>
<p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -e .ts -x chmod -x
</span></span></code></pre></div><p>References:</p>
<ul>
<li><code>fd</code>: <code>find</code> on steroids: <a href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a></li>
<li><code>-x</code>: execute the given command on all matched files</li>
</ul>
<p>You could also use classic <code>find</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> -exec chmod -x <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span>
</span></span></code></pre></div><p>Or:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> | xargs chmod -x
</span></span></code></pre></div><p>Or, with more <del>style</del> safety:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% find . -type f -name <span style="color:#e6db74">&#39;*.ts&#39;</span> -print0 | xargs -0 -n <span style="color:#ae81ff">1</span> chmod -x
</span></span></code></pre></div>]]></content:encoded></item><item><title>git: recover a snowflake commit</title><link>https://www.perrotta.dev/2024/11/git-recover-a-snowflake-commit/</link><pubDate>Fri, 22 Nov 2024 11:51:26 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/git-recover-a-snowflake-commit/</guid><description>&lt;p>When working with &lt;code>git&lt;/code>, sometimes we make
&lt;a href="https://en.wikipedia.org/wiki/User_error">PEBKAC&lt;/a> mistakes and end up losing a
given checkout or commit or worktree.&lt;/p></description><content:encoded><![CDATA[<p>When working with <code>git</code>, sometimes we make
<a href="https://en.wikipedia.org/wiki/User_error">PEBKAC</a> mistakes and end up losing a
given checkout or commit or worktree.</p>
<p><code>git reflog</code> can often help recover from these mistakes. It is a bit difficult
to understand, but quite straightforward to use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep <span style="color:#f92672">{</span>branch_name<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep -i <span style="color:#e6db74">&#39;thiagowfx/global-services&#39;</span>
</span></span></code></pre></div><p>Enjoy a real example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git reflog | grep -i <span style="color:#e6db74">&#39;thiagowfx/global-services&#39;</span>
</span></span><span style="display:flex;"><span>7ca9ac6de77 HEAD@<span style="color:#f92672">{</span>0<span style="color:#f92672">}</span>: checkout: moving from 8882c1a128dd2cf35aa2188def3d176c7c15d2f1 to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>8882c1a128d HEAD@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to 8882c1a12
</span></span><span style="display:flex;"><span>7fcc128d2ea HEAD@<span style="color:#f92672">{</span>15<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>16fcb83d888 HEAD@<span style="color:#f92672">{</span>20<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>431509d9d0a HEAD@<span style="color:#f92672">{</span>24<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>abort<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>30<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>3babf6588f3 HEAD@<span style="color:#f92672">{</span>55<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/base-global-services-image-tag
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>57<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>abort<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>60<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>3ef5b7c3844 HEAD@<span style="color:#f92672">{</span>77<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/check-executables-have-shebangs
</span></span><span style="display:flex;"><span>ee408b6e38c HEAD@<span style="color:#f92672">{</span>78<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>87f6bb2d95d HEAD@<span style="color:#f92672">{</span>86<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/actionlint
</span></span><span style="display:flex;"><span>8d07b53fd47 HEAD@<span style="color:#f92672">{</span>89<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>c21089ab78c HEAD@<span style="color:#f92672">{</span>95<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>70941a98ad0 HEAD@<span style="color:#f92672">{</span>104<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>2dd03ecdd09 HEAD@<span style="color:#f92672">{</span>149<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to lts13.1
</span></span><span style="display:flex;"><span>1d62e88a8e2 HEAD@<span style="color:#f92672">{</span>151<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>c9c2b36b058 HEAD@<span style="color:#f92672">{</span>166<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>0faa6f637b6 HEAD@<span style="color:#f92672">{</span>281<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to thiagowfx/pre-commit-trailing-4
</span></span><span style="display:flex;"><span>c9c2b36b058 HEAD@<span style="color:#f92672">{</span>282<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>b0521a1a0f7 HEAD@<span style="color:#f92672">{</span>284<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to master
</span></span><span style="display:flex;"><span>72b137aa4c7 HEAD@<span style="color:#f92672">{</span>286<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>81ac79b0c90 HEAD@<span style="color:#f92672">{</span>316<span style="color:#f92672">}</span>: checkout: moving from thiagowfx/global-services-docker to master
</span></span><span style="display:flex;"><span>baef8a5eda1 HEAD@<span style="color:#f92672">{</span>319<span style="color:#f92672">}</span>: rebase <span style="color:#f92672">(</span>finish<span style="color:#f92672">)</span>: returning to refs/heads/thiagowfx/global-services-docker
</span></span><span style="display:flex;"><span>81ac79b0c90 HEAD@<span style="color:#f92672">{</span>343<span style="color:#f92672">}</span>: checkout: moving from master to thiagowfx/global-services-docker
</span></span></code></pre></div><p>How to find the correct checkout?</p>
<p>The easiest (albeit tedious) way is by brute-forcing your search in the output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git show 7ca9ac6de77
</span></span><span style="display:flex;"><span>% git show 8882c1a128d
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>&hellip;until you find the diff you are looking for<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>From there, either <code>git checkout</code> (perhaps with the aid of <code>git worktree</code>) or
copy-and-paste (maybe with <code>git apply</code>).</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I am using the term &ldquo;snowflake commit&rdquo; in the title but it&rsquo;s not really
idiomatic. The meaning is roughly <em>a sand grain in the beach</em>, or <em>a
snowflake in the snow</em>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>pre-commit: additional dependencies in golang</title><link>https://www.perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/</link><pubDate>Thu, 21 Nov 2024 12:36:35 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/pre-commit-additional-dependencies-in-golang/</guid><description>&lt;p>When working with &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a> and specifying
&lt;code>language: golang&lt;/code> for a given hook, you may want to install dependencies as
part of the hook bootstrapping process.&lt;/p></description><content:encoded><![CDATA[<p>When working with <a href="https://pre-commit.com/">pre-commit.com</a> and specifying
<code>language: golang</code> for a given hook, you may want to install dependencies as
part of the hook bootstrapping process.</p>
<p>Recently I needed to do so for <a href="https://github.com/mikefarah/yq">yq</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<p>The <code>.pre-commit-config.yaml</code> looked like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">https://github.com/mikefarah/yq</span>
</span></span></code></pre></div><p>Context for the hook and the script: <a href="https://stackoverflow.com/q/79166730/1745064">https://stackoverflow.com/q/79166730/1745064</a>.</p>
<p>It didn&rsquo;t work. It&rsquo;s necessary to drop the <code>https://</code> prefix.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq</span>
</span></span></code></pre></div><p>That didn&rsquo;t work either. Then I realized I needed to specify an exact
version<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq@v4.44.3</span>
</span></span></code></pre></div><p>It also didn&rsquo;t work! There was an error message about the need to specify <code>/v4</code>
in the path for whatever reason:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">helm-dirname-must-match-chart-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Helm chart directory name must match the chart name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">files</span>: <span style="color:#ae81ff">/Chart\.(yml|yaml)$</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">ci/helm_check_match_dirname_chart_name.sh</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">github.com/mikefarah/yq/v4@v4.44.3</span>
</span></span></code></pre></div><p>That worked! Test it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pre-commit run --all-files helm-dirname-must-match-chart-name <span style="color:#f92672">[</span>--verbose<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><code>yq</code> is like <code>jq</code> for YAML instead of JSON.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>@latest</code> would also work. However, for the sake of reproducibility,
pinning is more reliable.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>zoxide: cd within the same directory</title><link>https://www.perrotta.dev/2024/11/zoxide-cd-within-the-same-directory/</link><pubDate>Fri, 15 Nov 2024 16:03:29 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/zoxide-cd-within-the-same-directory/</guid><description>&lt;p>I am a big fan of &lt;a href="https://github.com/ajeetdsouza/zoxide">&lt;code>zoxide&lt;/code>&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A smarter cd command. Supports all major shells.&lt;/p>
&lt;/blockquote>
&lt;p>The idea is simple: as you keep &lt;code>cd&lt;/code>ing during the day, it builds up a local
database of your most frequently accessed directories.&lt;/p></description><content:encoded><![CDATA[<p>I am a big fan of <a href="https://github.com/ajeetdsouza/zoxide"><code>zoxide</code></a>:</p>
<blockquote>
<p>A smarter cd command. Supports all major shells.</p>
</blockquote>
<p>The idea is simple: as you keep <code>cd</code>ing during the day, it builds up a local
database of your most frequently accessed directories.</p>
<p>Perhaps you <code>cd</code> often to <code>~/projects/company/major/area/foo</code>.</p>
<p>Next time, run <code>z foo</code>, and it will magically <code>cd</code> into it.</p>
<p>What if you have <code>~/Downloads/foo</code> as well? Then it will <code>cd</code> to the one you
access more frequently.</p>
<p>It does so transparently and dynamically, out-of-the-box, without any extra
intervention.</p>
<p>Sometimes though it <code>cd</code>s to a directory you didn&rsquo;t intend.</p>
<p>To instruct it to <code>cd</code> to a subdirectory within <code>$PWD</code> (the current working
directory), just pass a slash (<code>/</code>) as its second argument:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>~/projects/company$ z foo /
</span></span></code></pre></div><p>In the previous example, it would <em>not</em> <code>cd</code> to <code>~/Downloads</code>.</p>
<p>There are many similar projects to <code>zoxide</code>. In the past, I used
<a href="https://github.com/wting/autojump"><code>autojump</code></a>.</p>]]></content:encoded></item><item><title>Helm: JSON schema generation</title><link>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</link><pubDate>Thu, 14 Nov 2024 15:05:49 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</guid><description>&lt;p>Helm charts support the inclusion of a &lt;code>values.schema.json&lt;/code> file to validate
&lt;code>values.yaml&lt;/code>. Documentation: &lt;a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files&lt;/a>&lt;/p>
&lt;p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &amp;ldquo;shift left&amp;rdquo; the lifecycle of your helm releases.&lt;/p>
&lt;p>For a pre-existing &lt;code>values.yaml&lt;/code> file, it may be quite tedious to generate the
schema from scratch, by hand.&lt;/p>
&lt;p>&lt;strong>Can we automate this process?&lt;/strong>&lt;/p></description><content:encoded><![CDATA[<p>Helm charts support the inclusion of a <code>values.schema.json</code> file to validate
<code>values.yaml</code>. Documentation: <a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files</a></p>
<p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &ldquo;shift left&rdquo; the lifecycle of your helm releases.</p>
<p>For a pre-existing <code>values.yaml</code> file, it may be quite tedious to generate the
schema from scratch, by hand.</p>
<p><strong>Can we automate this process?</strong></p>
<p>Of course we can.</p>
<p>One possibility is to use GenAI / LLMs. This is out of scope of this post.</p>
<p>Another possibility is to leverage a helm plug-in to do so.</p>
<p>I had a good experience with <a href="https://github.com/karuppiah7890/helm-schema-gen">https://github.com/karuppiah7890/helm-schema-gen</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm plugin install https://github.com/karuppiah7890/helm-schema-gen.git
</span></span><span style="display:flex;"><span>cd path/to/helm/chart
</span></span><span style="display:flex;"><span>helm schema-gen values.yaml | tee values.schema.json
</span></span></code></pre></div><p>Afterwards, test the generated schema with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm lint path/to/helm/chart
</span></span></code></pre></div><p>Usually I need to do some follow-up edits to the generated file, including:</p>
<ul>
<li>add string enum types for a tighter validation of strings</li>
<li>mark certain fields as required</li>
<li>mark certain fields with <code>additionalProperties: &quot;false&quot;</code></li>
<li>augment <code>[&quot;null&quot;]</code> to <code>[&quot;null&quot;, &quot;string&quot;]</code> for keys that do not have a
default value</li>
</ul>
<p>It&rsquo;s worth to observe that, at the time of this publication, the following
notice is present in the repository of the plug-in:</p>
<blockquote>
<p>This repository has been archived by the owner on Aug 31, 2021. It is now
read-only.</p>
</blockquote>
<p>Nonetheless, it still works well.</p>]]></content:encoded></item><item><title>sort deterministically</title><link>https://www.perrotta.dev/2024/11/sort-deterministically/</link><pubDate>Tue, 12 Nov 2024 11:25:12 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/sort-deterministically/</guid><description>&lt;p>We had the following code in a CI pipeline:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find apps/base/ -type d -exec basename &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\;&lt;/span> | sort | sed -e &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s/^/- /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It lists all directories in &lt;code>apps/base&lt;/code>.
We add &lt;code>sort&lt;/code> to make the output canonical.
The &lt;code>sed&lt;/code> part is just to make an unordered list out of it.&lt;/p>
&lt;p>There was an issue though.&lt;/p></description><content:encoded><![CDATA[<p>We had the following code in a CI pipeline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>find apps/base/ -type d -exec basename <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> | sort | sed -e <span style="color:#960050;background-color:#1e0010">&#39;</span>s/^/- /
</span></span></code></pre></div><p>It lists all directories in <code>apps/base</code>.
We add <code>sort</code> to make the output canonical.
The <code>sed</code> part is just to make an unordered list out of it.</p>
<p>There was an issue though.</p>
<p>In my machine, and in CI (GitHub Actions), the following output was produced:</p>
<pre tabindex="0"><code>garden-info-export
gardenia
</code></pre><p>I use macOS + <code>sort</code> from GNU <code>coreutils</code> via homebrew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% which sort
</span></span><span style="display:flex;"><span>/opt/homebrew/opt/coreutils/libexec/gnubin/sort
</span></span><span style="display:flex;"><span>% sort --version
</span></span><span style="display:flex;"><span>sort <span style="color:#f92672">(</span>GNU coreutils<span style="color:#f92672">)</span> 9.5
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2024</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;.
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Written by Mike Haertel and Paul Eggert.
</span></span></code></pre></div><p>In a coworkerâ€™s machine (Ubuntu Linux), it produced the following instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gardenia
</span></span><span style="display:flex;"><span>garden-info-export
</span></span></code></pre></div><p>We had the same <code>locale</code> (<code>en_US.UTF-8</code>), and the coworker was also using <code>sort</code> from GNU <code>coreutils</code>. Puzzling.</p>
<p>In order to force a deterministic output, I proposed to use <code>-d</code>. From <code>sort(1)</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>-d, --dictionary-order
</span></span><span style="display:flex;"><span>	Consider only blank spaces and alphanumeric characters in comparisons.
</span></span></code></pre></div><p>And therein reproducibility was achieved<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I do not really know why the outputs were different even with the same <code>locale</code> (<code>LANG</code>, <code>LC_COLLATE</code>, <code>LC_ALL</code>, etc). For future reference, my current locale:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><p>And my coworkerâ€™s:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LANGUAGE<span style="color:#f92672">=</span>en_US
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_PAPER<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_NAME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ADDRESS<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TELEPHONE<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MEASUREMENT<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_IDENTIFICATION<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this case, the coworkerâ€™s version became the canonical one.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Helm: enforce the directory name matches the chart name</title><link>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</link><pubDate>Tue, 12 Nov 2024 11:13:06 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a helm chart called &lt;code>foo&lt;/code>, enforce that its &lt;code>Chart.yaml&lt;/code> file lives in a directory called &lt;code>foo&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a helm chart called <code>foo</code>, enforce that its <code>Chart.yaml</code> file lives in a directory called <code>foo</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="background">Background</h2>
<p>In 2016, this <a href="https://github.com/helm/helm/pull/818/">used to be</a> the default behavior in Helm:</p>
<blockquote>
<p>fix(helm): produce error if package name is inconsistent</p>
</blockquote>
<p>In 2018, this enforcement was <a href="https://github.com/helm/helm/pull/4141">removed</a>:</p>
<blockquote>
<p>remove dirname constraint on helm package</p>
</blockquote>
<p>We would like to reintroduce this requirement in our Helm charts codebase, as a best practice, to prevent chart name collisions.</p>
<p>What would be the most native way to accomplish that?</p>
<p>I would probably write a git pre-commit hook if there is no native way (e.g. via some <code>helm lint</code> flag).</p>
<h2 id="solution">Solution</h2>
<p>Use the following script with <a href="https://pre-commit.com/">pre-commit</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check that the directory name matches the chart name in Chart.yaml.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Examples:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: hey-foo&#34; fails the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: foo&#34; passes the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage: $0 [path/to/chart/Chart.yaml ...]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> chart in <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>basename <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Remove trailing slash.</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dirname%/<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Fetch chart name from Chart.yaml.</span>
</span></span><span style="display:flex;"><span>	chart_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>yq e <span style="color:#e6db74">&#39;.name&#39;</span> <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $dirname !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$chart_name<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		echo <span style="color:#e6db74">&#34;error: directory name &#39;</span><span style="color:#e6db74">${</span>dirname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; does not match chart name &#39;</span><span style="color:#e6db74">${</span>chart_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>		exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="reference">Reference</h2>
<p>I asked and self-answered this question on <a href="https://stackoverflow.com/questions/79166730/how-to-enforce-that-the-directory-name-must-match-the-chart-name/79180650#79180650">Stack Overflow</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Why</em>? For ease of management, simplicity, consistency &amp; uniformity.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>jq: remove quotes from output</title><link>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</link><pubDate>Thu, 07 Nov 2024 14:13:17 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</guid><description>Given:
% aws eks --profile global --region us-east-1 list-clusters { &amp;#34;clusters&amp;#34;: [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] } Query:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters&amp;#39; [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] Further:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters[0]&amp;#39; &amp;#34;aws-us-east-1-global-0&amp;#34; What if we wanted to remove the quotes? Add -r (--raw-output):
% aws eks --profile global --region us-east-1 list-clusters | jq -r &amp;#39;.clusters[0]&amp;#39; aws-us-east-1-global-0</description><content:encoded><![CDATA[<p>Given:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters
{
    &#34;clusters&#34;: [
        &#34;aws-us-east-1-global-0&#34;
    ]
}
</code></pre><p>Query:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters&#39;
[
  &#34;aws-us-east-1-global-0&#34;
]
</code></pre><p>Further:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters[0]&#39;
&#34;aws-us-east-1-global-0&#34;
</code></pre><p>What if we wanted to remove the quotes? Add <code>-r</code> (<code>--raw-output</code>):</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq -r &#39;.clusters[0]&#39;
aws-us-east-1-global-0
</code></pre>]]></content:encoded></item><item><title>Ruby: update Gemfile dependencies</title><link>https://www.perrotta.dev/2024/11/ruby-update-gemfile-dependencies/</link><pubDate>Wed, 06 Nov 2024 13:16:21 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/ruby-update-gemfile-dependencies/</guid><description>Oneshot:
% gem update rubocop That won&amp;rsquo;t update the .gemspec file though. To do so:
bundler update rubocop Tip: Omitting the gem name has the effect of updating all gems.</description><content:encoded><![CDATA[<p>Oneshot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% gem update rubocop
</span></span></code></pre></div><p>That won&rsquo;t update the <code>.gemspec</code> file though. To do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>bundler update rubocop
</span></span></code></pre></div><p><strong>Tip</strong>: Omitting the gem name has the effect of updating all gems.</p>
]]></content:encoded></item><item><title>Github Actions: multiple docker images</title><link>https://www.perrotta.dev/2024/11/github-actions-multiple-docker-images/</link><pubDate>Tue, 05 Nov 2024 17:05:22 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/github-actions-multiple-docker-images/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a monorepo on Github with multiple docker images in
it, write a github workflow to build and push all of them.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a monorepo on Github with multiple docker images in
it, write a github workflow to build and push all of them.</p>
<p>Here is an abridged version of the resulting workflow. The images are listed one
by one for fine-grained control purposes, but it would also be possible to glob
them with a single command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Global services</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">permissions</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">id-token</span>: <span style="color:#ae81ff">write</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">contents</span>: <span style="color:#ae81ff">read</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Replace with workflow trigger conditions.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>: {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">global-services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">${{ matrix.image }}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">fail-fast</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">include</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted start</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">path/to/one/Dockerfile</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">image</span>: <span style="color:#ae81ff">org/one</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">path/to/two/Dockerfile</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">image</span>: <span style="color:#ae81ff">org/two</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Check out source code</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Get git SHA</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">git-sha</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ./scripts/get-versions.sh
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;sha=$(grep &#39;^services_sha&#39; versions.yaml | cut -d&#39; &#39; -f 2)&#34; &gt;&gt; &#34;$GITHUB_OUTPUT&#34;</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">./.github/actions/setup-ecr-buildx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">setup-ecr-buildx</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build and push global service images</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/build-push-action@6.9.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cache-from</span>: <span style="color:#ae81ff">type=gha</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cache-to</span>: <span style="color:#ae81ff">type=gha,mode=max</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">context</span>: <span style="color:#ae81ff">path/to</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">file</span>: <span style="color:#ae81ff">${{ matrix.dockerfile }}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">provenance</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">push</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">tags</span>: <span style="color:#ae81ff">${{ steps.setup-ecr-buildx.outputs.ecr_registry }}/${{ matrix.image }}:${{ steps.git-sha.outputs.sha }}</span>
</span></span></code></pre></div><p>A matrix strategy kicks off independent multiple build jobs all at once.</p>
<p>Docs: <a href="https://github.com/docker/build-push-action">https://github.com/docker/build-push-action</a></p>]]></content:encoded></item><item><title>VSCode: auto restart extensions</title><link>https://www.perrotta.dev/2024/11/vscode-auto-restart-extensions/</link><pubDate>Mon, 04 Nov 2024 11:34:36 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/vscode-auto-restart-extensions/</guid><description>&lt;p>Whenever I open VSCode, there are some extension updates. Every time, I need to
manually click &amp;ldquo;Extensions&amp;rdquo; in the left-side navigation bar and then &amp;ldquo;Restart&amp;rdquo;
so that the upgrades take effect.&lt;/p>
&lt;p>This should be automated.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I open VSCode, there are some extension updates. Every time, I need to
manually click &ldquo;Extensions&rdquo; in the left-side navigation bar and then &ldquo;Restart&rdquo;
so that the upgrades take effect.</p>
<p>This should be automated.</p>
<p>There is a solution: add the following to your <code>settings.json</code> (<code>Cmd + ,</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;extensions.autoRestart&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Documentation:</p>
<blockquote>
<p>// If activated, extensions will automatically restart following an update if
the window is not in focus.</p>
</blockquote>
<p><strong>Source</strong>: <a href="https://code.visualstudio.com/docs/getstarted/settings">https://code.visualstudio.com/docs/getstarted/settings</a></p>]]></content:encoded></item><item><title>Jellyfin Trakt plug-in</title><link>https://www.perrotta.dev/2024/11/jellyfin-trakt-plug-in/</link><pubDate>Fri, 01 Nov 2024 20:38:19 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/jellyfin-trakt-plug-in/</guid><description>&lt;p>&lt;a href="https://github.com/jellyfin/jellyfin-plugin-trakt">Trakt for Jellyfin Plugin&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Available for install through the plugin catalog, Trakt for Jellyfin allows you to synchronize your watch states with ease.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p><a href="https://github.com/jellyfin/jellyfin-plugin-trakt">Trakt for Jellyfin Plugin</a>:</p>
<blockquote>
<p>Available for install through the plugin catalog, Trakt for Jellyfin allows you to synchronize your watch states with ease.</p>
</blockquote>
<p>Iâ€™ve been enjoying this free plug-in.
When watching content in Jellyfin (e.g. via Android TV, or via your laptop), it automatically scrobbles<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> TV shows and movies to your Jellyfin account.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Perhaps only we millennials peruse this term, which comes from <a href="https://last.fm/">LastFM</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Mermaid: rich diagrams in markdown</title><link>https://www.perrotta.dev/2024/10/mermaid-rich-diagrams-in-markdown/</link><pubDate>Mon, 28 Oct 2024 15:58:39 +0100</pubDate><guid>https://www.perrotta.dev/2024/10/mermaid-rich-diagrams-in-markdown/</guid><description>&lt;p>When writing documentation in markdown e.g. for projects stored in git, adding
a system architecture or design diagram is a great way to boost its readability,
especially to unfamiliar readers.&lt;/p>
&lt;p>My favorite way to generate diagrams is with &lt;a href="https://graphviz.org/">GraphViz&lt;/a>.
It is widely available and easy to use.&lt;/p>
&lt;p>That said, &lt;a href="https://mermaid.js.org/">MermaidJS&lt;/a> has native integration with
&lt;a href="https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/">GitHub&lt;/a>
and &lt;a href="https://docs.gitlab.com/ee/user/markdown.html#mermaid">GitLab&lt;/a> circa &lt;a href="https://github.com/github/roadmap/issues/372">2
years ago&lt;/a>, and that&amp;rsquo;s hard to
beat. Graphviz, sadly, &lt;a href="https://forum.graphviz.org/t/github-adding-support-for-mermaid-diagrams/998">does
not&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>When writing documentation in markdown e.g. for projects stored in git, adding
a system architecture or design diagram is a great way to boost its readability,
especially to unfamiliar readers.</p>
<p>My favorite way to generate diagrams is with <a href="https://graphviz.org/">GraphViz</a>.
It is widely available and easy to use.</p>
<p>That said, <a href="https://mermaid.js.org/">MermaidJS</a> has native integration with
<a href="https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/">GitHub</a>
and <a href="https://docs.gitlab.com/ee/user/markdown.html#mermaid">GitLab</a> circa <a href="https://github.com/github/roadmap/issues/372">2
years ago</a>, and that&rsquo;s hard to
beat. Graphviz, sadly, <a href="https://forum.graphviz.org/t/github-adding-support-for-mermaid-diagrams/998">does
not</a>.</p>
<p>There is a live editor for quick prototyping and iteration: <a href="https://mermaid.live/">https://mermaid.live/</a></p>
<p>Once you are happy with the result, you can easily embed it in markdown<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre><code>```mermaid
flowchart TD
A[Christmas] --&gt;|Get money| B(Go shopping)
B --&gt; C{Let me think}
C --&gt;|One| D[Laptop]
C --&gt;|Two| E[iPhone]
C --&gt;|Three| F[fa:fa-car Car]
```
</code></pre>
<p>&hellip;and it will get automatically rendered in the aforementioned git forges.</p>
<p>MermaidJS is quite intuitive to use. There is plenty of documentation for it<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
e.g. for graphs / flowcharts: <a href="https://mermaid.js.org/syntax/flowchart.html">https://mermaid.js.org/syntax/flowchart.html</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is one of the examples in the official documentation.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>And, as increasingly common these days, you can always resort to GenAI for
an extra push.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Board games</title><link>https://www.perrotta.dev/2024/10/board-games/</link><pubDate>Fri, 25 Oct 2024 15:02:46 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/board-games/</guid><description>Me: Would you like to play board games next week?
Acquaintance 1: What kind of board games?
Acquaintance 2: Which board games?
Acquaintance 3: What games are you playing?
People, have some room for serendipity and spontaneity, come on. Just say yes!</description><content:encoded><![CDATA[<blockquote>
<p><strong>Me</strong>: Would you like to play board games next week?</p>
<p><strong>Acquaintance 1</strong>: What kind of board games?</p>
<p><strong>Acquaintance 2</strong>: Which board games?</p>
<p><strong>Acquaintance 3</strong>: What games are you playing?</p>
</blockquote>
<p>People, have some room for serendipity and spontaneity, <em>come on</em>. <a href="https://www.youtube.com/watch?v=8xg3vE8Ie_E"><strong>Just say
yes</strong></a>!</p>
]]></content:encoded></item><item><title>Conventional commits</title><link>https://www.perrotta.dev/2024/10/conventional-commits/</link><pubDate>Fri, 25 Oct 2024 14:43:55 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/conventional-commits/</guid><description>&lt;p>Conventional commits: &lt;a href="https://www.conventionalcommits.org/">https://www.conventionalcommits.org/&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A specification for adding human and machine readable meaning to commit
messages&lt;/p>
&lt;p>[&amp;hellip;] a lightweight convention on top of commit messages. It provides an easy
set of rules for creating an explicit commit history; which makes it easier to
write automated tools on top of. This convention dovetails with SemVer, by
describing the features, fixes, and breaking changes made in commit messages.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p>Conventional commits: <a href="https://www.conventionalcommits.org/">https://www.conventionalcommits.org/</a>:</p>
<blockquote>
<p>A specification for adding human and machine readable meaning to commit
messages</p>
<p>[&hellip;] a lightweight convention on top of commit messages. It provides an easy
set of rules for creating an explicit commit history; which makes it easier to
write automated tools on top of. This convention dovetails with SemVer, by
describing the features, fixes, and breaking changes made in commit messages.</p>
</blockquote>
<p>It looks like the following:</p>
<pre tabindex="0"><code>&lt;type&gt;[optional scope]: &lt;description&gt;

[optional body]

[optional footer(s)]
</code></pre><p>In practice, it looks like the following:</p>
<pre tabindex="0"><code>feat(sessions): add integration with github sso

So that developers no longer need to log in with the shared admin account.

Follow-up-of: #4242
Tested: `make test`
</code></pre><p>One way to enforce it in a <code>git</code> project is with its <a href="https://pre-commit.com/">pre-commit.com</a> integration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/compilerla/conventional-pre-commit</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rev</span>: <span style="color:#ae81ff">v3.4.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># https://conventionalcommits.org</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">conventional-pre-commit</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">stages</span>: [<span style="color:#ae81ff">commit-msg]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted start</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">base</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">chore</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">ci</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">docs</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">feat</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">fix</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">meta</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">refactor</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted end</span>
</span></span></code></pre></div><p>The above hook only runs in the <code>commit-msg</code> stage, which is not installed by
default via <code>pre-commit install</code>. You&rsquo;ll need to pass <code>-t commit-msg</code> to it.</p>
<p>I have mixed experiences and opinions with conventional commits in a team
setting.</p>
<p>In a <a href="https://github.com/GoogleChromeLabs/chromium-bidi">previous team</a>, it was
successfully
<a href="https://github.com/GoogleChromeLabs/chromium-bidi/pull/900">adopted</a>. It was
very easy to generate changelogs this way.</p>
<p>In other teams, only a handful of members adopted it. In this setting there
isn&rsquo;t much value in enforcing a half-adopted convention, it must be all or
nothing.</p>
<p>In repositories that I own, I tend to adopt something in-between, writing a
prefix in the commit message title.</p>]]></content:encoded></item><item><title>Check if docker image exists in registry</title><link>https://www.perrotta.dev/2024/10/check-if-docker-image-exists-in-registry/</link><pubDate>Fri, 25 Oct 2024 14:11:14 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/check-if-docker-image-exists-in-registry/</guid><description>&lt;p>Given a docker registry, image and tag, run the following command:&lt;/p></description><content:encoded><![CDATA[<p>Given a docker registry, image and tag, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker manifest inspect 9876543210.foo.ecr.us-east-1.amazonaws.com/org/image:123456789
</span></span></code></pre></div><p>If it does not exist, you&rsquo;ll see:</p>
<pre tabindex="0"><code>no such manifest: 9876543210.foo.ecr.us-east-1.amazonaws.com/org/image:123456789
</code></pre><p>Ensure you are authenticated and/or connected to the VPN in case of a private registry.</p>
<p>When using ECR (AWS&rsquo;s registry), you can authenticate this way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% which docker_login
</span></span><span style="display:flex;"><span>docker_login <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 9876543210.foo.ecr.us-east-1.amazonaws.com
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Performance reviews</title><link>https://www.perrotta.dev/2024/10/performance-reviews/</link><pubDate>Sun, 20 Oct 2024 12:15:14 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/performance-reviews/</guid><description>&lt;p>During performance reviews&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, it&amp;rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.&lt;/p></description><content:encoded><![CDATA[<p>During performance reviews<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, it&rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.</p>
<p>Usually accomplishments for a software engineer span more than just code: design
documents, documentation, bug triage and fixes, product health initiatives,
tackling of technical debt, processes&hellip;the list is endless.</p>
<p>Nonetheless in this post I&rsquo;ll focus only in contributions in the form of code.</p>
<p>99.999% of the time this means <code>git</code> commits (and/or pull requests, if you will).</p>
<p>Other than <code>git</code>, and the <em>very very very</em> occasional mercurial (<code>hg</code>), the only
other VCS I used significantly was Google&rsquo;s Perforce / Piper.</p>
<h2 id="piper">Piper</h2>
<p>Although there are command-line tools to summarize your accomplishments, I
find the easiest way to do so is via Critique.</p>
<h3 id="your-cl-submissions">Your CL submissions</h3>
<p>Use a query like:</p>
<pre tabindex="0"><code>(author:me OR pair:me) is:submitted since:2024-01-03 to:2024-01-09
</code></pre><p>Update <code>since</code> and <code>to</code> according to the current PERF / GRAD cycle.</p>
<p>If you are a high-performer and/or send lots of LSCs (large-scale changes), the
output can be noisy. Filter it out with <code>d:{description}</code> as needed.</p>
<p>For example, to call out LSC changes in a separate section in your packet, you
may want to exclude them from your overall contributions with <code>-d:LSC</code> or
<code>-d:Rosie</code> or similar.</p>
<p><code>pair</code> is for crediting pair programming.</p>
<p><strong>Disclaimer</strong>: There is a possibility the syntax is incorrect, as I am not able
to test it at the moment.</p>
<h3 id="your-cl-reviews">Your CL reviews</h3>
<pre tabindex="0"><code>r:me is:submitted since:2024-01-03 to:2024-01-09
</code></pre><p>You&rsquo;ll likely want to call out readability reviews separately. Use something
like <code>-cc:typescript-readability-approvers</code>.</p>
<h2 id="git"><code>git</code></h2>
<p>One option is to use the web UI of your forge (GitHub, GitLab, etc).</p>
<p>I strive for a forge-agnostic solution though.</p>
<h3 id="your-pull-requests--commits">Your pull requests / commits</h3>
<p><a href="https://git-scm.com/docs/git-shortlog"><code>git shortlog</code></a> is your friend!</p>
<p>Example for this blog:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> --since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;6 months ago&#34;</span>  <span style="color:#75715e"># alt: --since=&#34;2024-03-01&#34;</span>
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>499<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Initial commit
</span></span><span style="display:flex;"><span>      add gitignore: go,hugo,vim
</span></span><span style="display:flex;"><span>      hugo: add config.toml and default archetype
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>If there are multiple repositories, combine the command with <a href="https://myrepos.branchable.com/"><code>myrepos</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% mr run git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span>
</span></span></code></pre></div><p>To filter out irrelevant commits, use <code>grep -v</code>. Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> | grep -Ev <span style="color:#e6db74">&#39;^\s*ci|^.*pre-commit&#39;</span>
</span></span></code></pre></div><p>&hellip;filters out commits that contain &ldquo;ci&rdquo; or &ldquo;pre-commit&rdquo; in the message summary.</p>
<h3 id="your-pr-reviews">Your PR reviews</h3>
<p>PR reviews are a concept from forges. From a <code>git</code> CLI perspective it would only
be possible to do so when automation adds git tags to commits e.g. <code>Reviewed-by: Thiago Perrotta &lt;thiago@example.com&gt;</code>.</p>
<p><a href="https://www.gerritcodereview.com/">Gerrit</a> does that.
<a href="https://chromium-review.googlesource.com/c/chromium/src/+/5012895">Here</a> is an
example in Chromium. In this case, one could just <code>grep</code> for <code>Reviewed-by</code> in
<code>git log</code>.</p>
<p>Otherwise: on GitHub, use a query such as <code>is:pr reviewed-by:@me</code> in the Pull
Request search tab.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>PERF, GRAD, TPG: there are all sorts of naming schemes for them.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>â˜… prodaccess</title><link>https://www.perrotta.dev/2024/10/prodaccess/</link><pubDate>Fri, 18 Oct 2024 14:57:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/prodaccess/</guid><description>&lt;p>At Google we had a &lt;code>prodaccess&lt;/code> command used to log in and authenticate in all
sorts of internal corp systems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for 20 hours. It became a daily ritual to run
&lt;code>prodaccess&lt;/code> first thing in the morning when logging in upon unlocking our
physical workstations&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>During the pandemic, when heavily using our virtual workstations (dubbed
&lt;em>cloudtops&lt;/em>, think of an EC2 instance or a VPS) it was common to hook
&lt;code>prodaccess&lt;/code> into &lt;code>ssh&lt;/code>. There was a &lt;code>prodcertstatus&lt;/code> command that would tell
you when &lt;code>prodaccess&lt;/code> would expire. A common pattern was to modify your &lt;code>ssh&lt;/code>
startup command to automatically run &lt;code>prodaccess&lt;/code> whenever &lt;code>prodcertstatus&lt;/code>
indicated that access would expire within 2-4 hours, depending on the user&amp;rsquo;s
preference.&lt;/p>
&lt;p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:&lt;/p></description><content:encoded><![CDATA[<p>At Google we had a <code>prodaccess</code> command used to log in and authenticate in all
sorts of internal corp systems<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> for 20 hours. It became a daily ritual to run
<code>prodaccess</code> first thing in the morning when logging in upon unlocking our
physical workstations<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>During the pandemic, when heavily using our virtual workstations (dubbed
<em>cloudtops</em>, think of an EC2 instance or a VPS) it was common to hook
<code>prodaccess</code> into <code>ssh</code>. There was a <code>prodcertstatus</code> command that would tell
you when <code>prodaccess</code> would expire. A common pattern was to modify your <code>ssh</code>
startup command to automatically run <code>prodaccess</code> whenever <code>prodcertstatus</code>
indicated that access would expire within 2-4 hours, depending on the user&rsquo;s
preference.</p>
<p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat ~/.profile.d/functions_corp.sh
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>prodaccess<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; VPN&#34;</span>
</span></span><span style="display:flex;"><span>	vpn_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; Teleport&#34;</span>
</span></span><span style="display:flex;"><span>	teleport_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; AWS&#34;</span>
</span></span><span style="display:flex;"><span>	aws_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;--&gt; Azure&#34;</span>
</span></span><span style="display:flex;"><span>    azure_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>		-u|--update<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; mr&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Update all well-known corp repositories</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">(</span>cd ~/Corp <span style="color:#f92672">&amp;&amp;</span> mr update <span style="color:#f92672">&amp;&amp;</span> mr run git world<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Package manager upgrade</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; sd-world&#34;</span>
</span></span><span style="display:flex;"><span>			sd-world
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		-a|--all<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; Atlas Mongo&#34;</span>
</span></span><span style="display:flex;"><span>			atlas_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Notes:</p>
<ul>
<li><code>mr</code> is <a href="https://myrepos.branchable.com/">https://myrepos.branchable.com/</a> (&ldquo;a tool to manage all your version
control repositories&rdquo;)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li><code>sd-world</code> was introduced in a <a href="https://www.perrotta.dev/2024/01/sd-world-perform-a-full-system-upgrade/">previous post</a>: it performs a full system upgrade</li>
<li><code>--all</code> holds services I only need / use from time to time.</li>
<li><code>shift</code> is not really needed, but IMHO it&rsquo;s a good practice (and another
ingrained habit of mine), especially when inside <code>for</code> loops</li>
<li><code>git world</code> is an alias in my <code>~/.gitconfig</code> that runs <code>git fetch --all &amp;&amp; git remote prune origin</code></li>
</ul>
<p>Every morning I invoke <code>prodaccess -u</code> when starting my work day. A few password
prompts and touch IDs later and I do not need to worry about logging in anymore
during the middle of the day, which reduces overall context switching and
stress.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Until someone in CorpEng decided it was a good idea to
<a href="https://killedbygoogle.com/">deprecate</a> it in favour of a new <code>gcert</code>
command, destroying many SWE-years of developed muscle memory.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Ah, the <em>good ol&rsquo; times</em>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I should write a post about it sometime.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>