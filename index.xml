<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Not Just Serendipity</title><link>https://thiagowfx.github.io/</link><description>Recent content on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Mon, 29 Jan 2024 00:20:31 -0300</lastBuildDate><atom:link href="https://thiagowfx.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo: rename a tag</title><link>https://thiagowfx.github.io/2024/01/hugo-rename-a-tag/</link><pubDate>Mon, 29 Jan 2024 00:20:31 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/hugo-rename-a-tag/</guid><description>&lt;p>This blog is rendered by the means of a static site generator (SSG) called
&lt;a href="https://gohugo.io/">Hugo&lt;/a>. Each blog post has a set of one or more tags
associated to it. The more posts I create, the more consolidated the tags become.&lt;/p>
&lt;p>Sometimes I need to rename tags after-the-fact to better reflect the underlying
posts they represent.&lt;/p></description><content:encoded><![CDATA[<p>This blog is rendered by the means of a static site generator (SSG) called
<a href="https://gohugo.io/">Hugo</a>. Each blog post has a set of one or more tags
associated to it. The more posts I create, the more consolidated the tags become.</p>
<p>Sometimes I need to rename tags after-the-fact to better reflect the underlying
posts they represent.</p>
<p>This is how I typically do it. Start from the root of the git repository, then do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% <span style="color:#66d9ef">for</span> file in content/posts/**/*.md; <span style="color:#66d9ef">do</span> gsed -i -e <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span> <span style="color:#e6db74">&#34;</span>$file<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>The example above renames <code>german</code> -&gt; <code>deutsch</code>.</p>
<p>This isn&rsquo;t the most robust way to do so, but it&rsquo;s the quickest one. For extra robustness, I&rsquo;d do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -t f -e md -e gsed -i -x <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span>
</span></span></code></pre></div><p>&hellip;however it&rsquo;s always easier to remember the for loop syntax than the <code>fd</code>
one.</p>
<h2 id="why-fd-instead-of-a-for-loop">Why <code>fd</code> instead of a <code>for</code> loop?</h2>
<p><code>fd(1)</code> is more elegant than shell wildcards. Although, in practice, both ways
are equivalent and should yield no difference.</p>
<h2 id="why-gsed-instead-of-sed">Why <code>gsed</code> instead of <code>sed</code>?</h2>
<p>I am on macOS. The GNU version of <code>sed</code> does not create backup files, which is what I want in most cases. There&rsquo;s no need for backups because everything is checked into git already; if I make a mistake, I can always <code>git reset --hard</code> or <code>git checkout</code>. The BSD version of <code>sed</code> will leave this mess behind:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -t f -e md -x /usr/bin/sed -i -e <span style="color:#e6db74">&#39;s/- german/- deutsch/g&#39;</span>
</span></span><span style="display:flex;"><span>% git st
</span></span><span style="display:flex;"><span>% git st
</span></span><span style="display:flex;"><span>On branch master
</span></span><span style="display:flex;"><span>Your branch is up to date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Changes not staged <span style="color:#66d9ef">for</span> commit:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	modified:   2022-02-27-linux-us-international-keyboard-layout.md
</span></span><span style="display:flex;"><span>	modified:   2022-04-03-translating-german-to-english.md
</span></span><span style="display:flex;"><span>	modified:   2024-01-29-anki-find-all-notes-with-an-empty-field.md
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Untracked files:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	2014-01-07-testando-uma-iso-no-linux-sem-o-virtualbox.md-e
</span></span><span style="display:flex;"><span>	2014-04-18-mini-recovery-tipico-via-usb.md-e
</span></span><span style="display:flex;"><span>	2014-05-01-instalando-o-gentoo-a-partir-do-arch.md-e
</span></span><span style="display:flex;"><span>	2014-09-28-my-first-ebuild.md-e
</span></span><span style="display:flex;"><span>	2015-01-07-the-eudyptula-challenge.md-e
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>There are way more of these <code>*-e</code> files, and they are super annoying. It&rsquo;s easy to get rid of them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% rm **/*-e
</span></span></code></pre></div><p>&hellip;but why bother, if we can just stick to the more familiar GNU <code>sed</code> anyway?</p>
<h2 id="caveats">Caveats</h2>
<p>Finally, note the caveat: this find and replace is naive and could end up replacing false positives! Nonetheless, I&rsquo;m still a big fan of this approach, because it&rsquo;s the quickest one. As my blog is checked into <code>git</code> anyway, I can always easily review the changes before committing them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git diff
</span></span></code></pre></div><p>If there are too many diffs, then prefer an incremental approach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git add -p
</span></span></code></pre></div><p>Happy tag renaming! Well, this only happens every once in a while anyway.</p>]]></content:encoded></item><item><title>Anki: find all notes with an empty field</title><link>https://thiagowfx.github.io/2024/01/anki-find-all-notes-with-an-empty-field/</link><pubDate>Mon, 29 Jan 2024 00:06:49 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/anki-find-all-notes-with-an-empty-field/</guid><description>&lt;p>Gabriel Wyner recommends, in its &lt;a href="https://fluent-forever.com/index.html">Fluent
Forever&lt;/a> book, that each
&lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> note (card) has at least one image
associated to it. This is intended to improve overall retention.&lt;/p></description><content:encoded><![CDATA[<p>Gabriel Wyner recommends, in its <a href="https://fluent-forever.com/index.html">Fluent
Forever</a> book, that each
<a href="https://apps.ankiweb.net/">Anki</a> note (card) has at least one image
associated to it. This is intended to improve overall retention.</p>
<p>Back when I started my German Anki deck for language learning, I did not add
any images. Now I find myself slowly backfilling my already existing notes
with images. However, the more images I add, the harder it becomes to find
notes without images.</p>
<p>Upon reading the <a href="https://docs.ankiweb.net/">Anki manual</a> I figured out a way to find out which notes are still missing images:</p>
<ol>
<li>Open Anki.</li>
<li>Open the deck you want to modify – in my case, <code>Languages::German</code>.</li>
<li>Click &ldquo;Browse&rdquo;.</li>
<li>Type in <code>deck:current &quot;Front Example:&quot;</code>.</li>
</ol>
<p>&ldquo;Front Example&rdquo; is the name of the field of my note template wherein I add images; you should replace it with the corresponding one you use. This syntax isn&rsquo;t intuitive at all. Initially I was trying something like <code>-&quot;Front Example:*&quot;</code>.</p>]]></content:encoded></item><item><title>sd-world: perform a full system upgrade</title><link>https://thiagowfx.github.io/2024/01/sd-world-perform-a-full-system-upgrade/</link><pubDate>Sun, 28 Jan 2024 01:42:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/sd-world-perform-a-full-system-upgrade/</guid><description>&lt;p>Whenever I want to upgrade any one of my systems, I run &lt;code>sd-world&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I want to upgrade any one of my systems, I run <code>sd-world</code>.</p>
<p>You can find the current version of <code>sd-world</code>
<a href="https://github.com/thiagowfx/.dotfiles/blob/master/scripts/.bin/sd-world">here</a>
in my dotfiles.</p>
<p>Here&rsquo;s a snapshot<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># perform a full system upgrade</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set -euo pipefail
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>log<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	local bold<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>tput bold<span style="color:#66d9ef">)</span> normal<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>tput sgr0<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>bold<span style="color:#e6db74">}</span>$*<span style="color:#e6db74">${</span>normal<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>run_if_exists<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> command -v <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>			log <span style="color:#e6db74">&#34;Running </span>$1<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			log <span style="color:#e6db74">&#34;Running </span>$*<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[[</span> -d <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		shift
</span></span><span style="display:flex;"><span>		log <span style="color:#e6db74">&#34;Running </span>$*<span style="color:#e6db74">...&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># usage: do_git &lt;path/to/git/repo&gt;</span>
</span></span><span style="display:flex;"><span>do_git<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -d <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> git -C <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> pull origin master
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>uname<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># linux</span>
</span></span><span style="display:flex;"><span>	Linux<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># alpine linux</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apk&#34;</span> doas apk upgrade
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># arch linux</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;pacman&#34;</span> sudo pacman -Syu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># debian linux</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># warning: macos has /usr/bin/apt which is a Java thing</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apt-get&#34;</span> sudo apt-get upgrade -y
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;apt-get&#34;</span> sudo apt-get autoremove
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># macOS</span>
</span></span><span style="display:flex;"><span>	Darwin<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># homebrew</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;brew&#34;</span> brew upgrade
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;brew&#34;</span> brew cleanup
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># system update and app store</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># run_if_exists &#34;softwareupdate&#34; softwareupdate --install --all</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;mas&#34;</span> mas upgrade
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># windows</span>
</span></span><span style="display:flex;"><span>	MINGW*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># third-party package manager</span>
</span></span><span style="display:flex;"><span>		run_if_exists <span style="color:#e6db74">&#34;scoop&#34;</span> scoop update
</span></span><span style="display:flex;"><span>		;;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flatpaks</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;flatpak&#34;</span> flatpak update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># nix</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;nix-channel&#34;</span> nix-channel --update
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;nix-env&#34;</span> nix-env -u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pihole</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># update pihole itself and gravity lists</span>
</span></span><span style="display:flex;"><span>run_if_exists <span style="color:#e6db74">&#34;pihole&#34;</span> pihole -up
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dotfiles</span>
</span></span><span style="display:flex;"><span>do_git <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.dotfiles&#34;</span>
</span></span><span style="display:flex;"><span>do_git <span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.dotfiles_corp&#34;</span>
</span></span></code></pre></div><p>There&rsquo;s a lot to unpack here.</p>
<h2 id="why-is-it-called-sd-world">Why is it called <code>sd-world</code>?</h2>
<p><code>world</code> is an inspiration taken from <a href="https://www.gentoo.org/">Gentoo Linux</a>.
To upgrade a typical gentoo system, you usually run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>emerge --ask --quiet --update --changed-use --deep @world
</span></span></code></pre></div><p>There&rsquo;s something deeply inspiring about saying it out loud: &ldquo;emerge the
world&rdquo;. As if the whole world is at your fingertips.</p>
<p><code>sd</code> stands for &ldquo;script directory&rdquo;, it&rsquo;s an inspiration taken from <a href="https://ianthehenry.com/posts/sd-my-script-directory/">Ian
Henry</a>.</p>
<p><strong>Rationale</strong>: I tend to put scripts I run semi-frequently in a <code>.bin</code>
directory that is in my system <code>$PATH</code>. However, there&rsquo;s always a chance their
name could clash with a built-in one (e.g. in <code>/usr/bin/</code>). In order to prevent
(or mitigate) it from happening, a prefix is added. For a long time in my life
I used the <code>t-</code> prefix, merely because of my first name initial. At some point
I migrated to <code>sd-</code>. That&rsquo;s all, nothing fancy about it.</p>
<h2 id="why-bash">Why <code>bash</code>?</h2>
<p><code>bash</code> is the de-facto standard shell in most Linux distributions I care about.
And it&rsquo;s also easily available in macOS and BSDs. And it&rsquo;s POSIX compliant.</p>
<p><strong>Therefore</strong>: availability, portability and compatibility.</p>
<h2 id="why-usrbinenv-bash-instead-of-binbash">Why <code>/usr/bin/env bash</code> instead of <code>/bin/bash</code>?</h2>
<p>Because the <code>env</code> shebang is more portable. This is more relevant when working
with BSDs. On Linux <code>/bin/bash</code> should be mostly fine.</p>
<h2 id="why-set--euo-pipefail">Why <code>set -euo pipefail</code>?</h2>
<p>A well-established <a href="https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425">good
practice</a>.</p>
<h2 id="why-use-a-separare-log-function">Why use a separare <code>log</code> function?</h2>
<ol>
<li>Old habits die hard.</li>
<li>Consistent formatting.</li>
</ol>
<h2 id="why-run_if_exists">Why <code>run_if_exists</code>?</h2>
<p>Since the script attempts to upgrade (potentially) many package managers, at
the very least we try to skip the ones that aren&rsquo;t installed. For example,
there&rsquo;s no need to attempt to run <code>pacman</code> in a macOS system.</p>
<h2 id="what-else">What else?</h2>
<p>The rest should be quite straightforward to understand. Some design decisions:</p>
<ul>
<li><code>sudo</code> permissions are not asked upfront, because not every system uses
<code>sudo</code>. Notably, Alpine Linux and OpenBSD use <code>doas</code> by default. Also,
laziness is OK as the script is intended for interactive use.</li>
<li><code>git</code> is there merely for convenience. Updating my dotfiles could be done
from a separate script, but that would be overkill for my simple use case.</li>
<li>There&rsquo;s no concurrency / parallelism, and that&rsquo;s intentional. I prefer output
readability and system stability in this case.</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Scarface:_The_World_Is_Yours">The world is yours</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Prefer to refer to the up-to-date version in my
<a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a> repository though. I
included a snapshot merely because there&rsquo;s a non-zero chance the git
version could be moved elsewhere someday.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ (Google) Chrome for Testing: reliable downloads for browser automation</title><link>https://thiagowfx.github.io/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</link><pubDate>Thu, 25 Jan 2024 18:27:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/</guid><description>&lt;p>Let&amp;rsquo;s discuss the &lt;em>raison d&amp;rsquo;etre&lt;/em> of &lt;a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing&lt;/a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s discuss the <em>raison d&rsquo;etre</em> of <a href="https://developer.chrome.com/blog/chrome-for-testing">Google Chrome for
Testing</a>, a project I was
the Tech Lead of during my tenure on the Chrome Tooling / Browser Automation team
at Google.</p>
<p><a href="https://www.youtube.com/watch?v=9y4A15WCGdc">Once upon a time, a few (debugging) mistakes
ago</a>, web developers would run
(web) integration tests with <a href="https://www.w3.org/TR/webdriver2/">WebDriver
Classic</a> using Google Chrome (or Chromium)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.
This was a <a href="https://three-body-problem.fandom.com/wiki/Chaotic_Era">chaotic
era</a>.</p>
<p><em>&ldquo;Why?&rdquo;</em>, you may rightfully ask.</p>
<ul>
<li>The web browser and/or its components / extensions / etc could
<strong>auto-update</strong> in-between successive test runs, yielding different test
results, i.e. tests were not guaranteed to be hermetic / deterministic due to
their (potentially) changing environment, yielding test flakiness</li>
<li>Chrome adds an <strong>info bar</strong> whenever it is controlled in an automated
fashion, which changes the CSS viewport, resulting in changes compared to a
production environment. For example: an automated test that takes a
screenshot would have a slightly smaller height whenever an infobar is
present.</li>
<li>There are no versioned Chrome builds for download. There&rsquo;s no <strong>browser
pinning</strong>. As a developer you always download the latest version. This makes
it hard to reason about invariants, especially when new browser versions
introduce breaking changes, even seemingly small ones.
<ul>
<li><strong>Corollary</strong>: The lack of versioned Chrome builds makes it hard to obtain
a corresponding (matching)
<a href="https://chromedriver.chromium.org/downloads">Chromedriver</a> version for
Chrome. The mismatch (delta) could provoke testing inconsistencies whenever
browser APIs diverge<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ul>
</li>
</ul>
<p>In order to address these (and other) issues, <a href="https://goo.gle/chrome-for-testing">Chrome for
Testing</a> (hereafter &ldquo;CfT&rdquo;) was born. To
clarify, today where are three flavours of Chrom*:</p>
<ul>
<li><strong>Chromium</strong>: the open-source project, <a href="https://chromium.org/">https://chromium.org/</a>. The root of all
derivatives (Microsoft Edge, Brave, etc). It is available in full source
form, but there are no (official) pre-built binaries for it.</li>
<li><strong>Google Chrome</strong>: the proprietary, closed-source version of Chromium developed
by Google. Think of it as Chromium on steroids. Google distributes pre-built
Chrome binaries for every platform it supports.</li>
<li><strong>Google Chrome for Testing</strong>: think of it as &ldquo;reproducible (or pinned, or
frozen) Google Chrome&rdquo;. It is basically a snapshot of Google Chrome in a
fixed time in the past, plus a few bits of developer-oriented features
mentioned in this article.</li>
</ul>
<p>There are other <em>niceties</em> that Chrome for Testing accomplishes as of today:</p>
<ul>
<li>The <a href="https://chromedevtools.github.io/devtools-protocol/">CDP (Chrome DevTools
Protocol)</a> experiment
(&ldquo;Protocol Monitor&rdquo;) is enabled by default, out-of-the-box. This kind of
experiment, which enriches your debugging toolbox, is exactly the sensible
state you want during the development cycle.</li>
<li>Mechanisms such as <a href="https://developer.chrome.com/blog/self-xss">self-XSS confirmation
prompts</a> are disabled by default,
which is the desired behavior for automation. Consider an analogy with
setting
<a href="https://askubuntu.com/questions/972516/debian-frontend-environment-variable"><code>DEBIAN_FRONTEND=noninteractive</code></a>
when running <code>apt</code> in dockerfiles. You don&rsquo;t want prompts (even benign ones)
to suddenly get in the way of your tests and end up interrupting their
execution flow.</li>
<li>Completely agnostic to the concept of &ldquo;Stable&rdquo; / &ldquo;Beta&rdquo; / &ldquo;Dev&rdquo;. If you have
pinned versions, you don&rsquo;t need to care about any of that.</li>
<li>CfT releases are made available alongside a subset of corresponding Google
Chrome releases</li>
</ul>
<p>Something important to note:</p>
<blockquote>
<p><strong>Warning</strong>: Chrome for Testing has been created purely for browser
automation and testing purposes, and is not suitable for daily browsing.</p>
</blockquote>
<p>The main reason for that is the fact that it does not auto-update. You could
argue that it doesn&rsquo;t matter: Chrome for most linux distributions also does not
auto-update by itself. The updates are normally deferred to the distribution&rsquo;s
package manager (e.g. <code>apt</code>, <code>dnf</code>, <code>pacman</code>, etc). Why should it be different
for Chrome for Testing?</p>
<p>An additional point to consider here is that Chrome for Testing could have new
features in the future that would be optimized for developers, not for end
users. You don&rsquo;t want end users to shoot themselves on the foot, therefore it&rsquo;s
easier, better and safer to do a blanket anti-recommendation of CfT for
non-developers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>Because of that, CfT cannot be made the default system browser.</p>
<p>The easiest way to obtain CfT is via its public API, which is documented here:
<a href="https://googlechromelabs.github.io/chrome-for-testing/">https://googlechromelabs.github.io/chrome-for-testing/</a>, or through the official
<a href="https://pptr.dev/browsers-api">CLI utility</a> that is part of Puppeteer.</p>
<p>Today, for all the reasons above (and more to come!), CfT is the de-facto
recommended solution for browser automation for all things web applications and
web platform testing. If you&rsquo;re currently using either Chromium or Google
Chrome for these purposes, you should switch to it.</p>
<h2 id="bonus-how-to-run-chrome-for-testing-in-ci">Bonus: How to run Chrome for Testing in CI?</h2>
<p>The <a href="https://github.com/GoogleChromeLabs/chromium-bidi">chromium-bidi</a> repository is an excellent (and simple-ish) example on how to do so<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Given a <code>.github/workflows/e2e.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">E2E tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">e2e</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm ci</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is the exciting part wherein we fetch CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Despite the &#34;chromium&#34; name, this is actually CfT.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We set a explicit shell to force &#34;set -eo pipefail&#34; so that,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># if the command fails, then the entire step fails.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We do not want &#34;cut&#34; to run if the download fails for some reason.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The syntactic sugar of the parsing could be improved in a future</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># version of the CLI tool, but that&#39;s how it should be done for now.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We store the location of the CfT binary in an environment variable.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Google Chrome for Testing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          cft_binary=&#34;$(npx @puppeteer/browsers install chromium@latest | cut -f 2- -d&#39; &#39;)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;cft_binary=$chromium_binary&#34; &gt;&gt; $GITHUB_ENV</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.10&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">pip install -r tests/requirements.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This is an example on how to run a test suite by explicitly pointing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># out to CfT, using the environment variable set earlier.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run E2E tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm run e2e</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">BROWSER_BIN</span>: <span style="color:#ae81ff">${{ env.chromium_binary }}</span>
</span></span></code></pre></div><p>You can find the complete version of this example in an <a href="https://github.com/GoogleChromeLabs/chromium-bidi/blob/7d0962eb85c014dbb2cace7d471dd29474f11eab/.github/workflows/e2e.yml">older
commit</a>
within that repository. The reason I link to an older commit is due to its
direct usage of the <a href="https://pptr.dev/browsers-api">@puppeteer/browsers</a> CLI
tool, which makes it easier to illustrate how to fetch CfT. Recent commits of
the repository use a JS wrapper to do so, which is more flexible / robust for
the purposes of that particular repository at the expense of decreased
readability for a newcomer. Software Engineering is all about trade-offs after
all.</p>
<p>To fully realize the benefits of reproducibility, you should not use <code>latest</code>.
Instead, pin the browser to a specific version.</p>
<p>If using an environment variable (or a command-line flag) is not an option for
some reason, then an alternative would be to create a symlink (<code>ln -s</code>) to
<code>$cft_binary</code> from a place in the front of your <code>$PATH</code>. Or, alternatively,
temporarily update your <code>$PATH</code> with the <code>dirname</code> of <code>$cft_binary</code>.</p>
<p>Also, if you cannot or do not want to install <code>npm</code> (<code>npx</code>) just for the sake
of fetching CfT<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, then just fetch it directly (use <code>curl</code> or <code>wget</code>) from
its <a href="https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints">API
endpoint</a>, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/121.0.6167.85/linux64/chrome-linux64.zip
</span></span></code></pre></div><p>Although note that this is not a future-proof way of fetching CfT. It&rsquo;s a
simple shortcut. The better way is to query the JSON metadata file for a
specific platform and browser version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% curl https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json | jq -r <span style="color:#e6db74">&#39;.builds.&#34;121.0.6167&#34;.downloads.chrome[] | select(.platform == &#34;linux64&#34;).url&#39;</span>
</span></span></code></pre></div><p>&hellip;so that the download works even if the URL changes in the future <a href="https://github.com/GoogleChromeLabs/chrome-for-testing/pull/102">for some
reason</a>.</p>
<h2 id="references">References</h2>
<ul>
<li>Chrome for Testing Design Document: <a href="https://goo.gle/chrome-for-testing">https://goo.gle/chrome-for-testing</a></li>
<li><a href="https://developer.chrome.com/blog/self-xss#can_you_disable_it_for_test_automation">How Chrome DevTools helps to defend against self-XSS attacks</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>For simplicity, referred to as just <em>Chrome</em> hereafter.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>You can find lots of such reports <a href="https://groups.google.com/g/chromedriver-users">here</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>The same way you wouldn&rsquo;t recommend Arch Linux for linux newbies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><strong>Disclaimer</strong>: I used to work on that repository, thus my self-assessment is clearly biased :-)&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>I know, I know, JS bloat.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Terraforming a Linode: hello world</title><link>https://thiagowfx.github.io/2024/01/terraforming-a-linode-hello-world/</link><pubDate>Tue, 23 Jan 2024 23:27:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/terraforming-a-linode-hello-world/</guid><description>&lt;p>I host my own &lt;a href="https://miniflux.app/">Miniflux&lt;/a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running &lt;a href="https://www.alpinelinux.org/">Alpine Linux&lt;/a>.&lt;/p>
&lt;p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I host my own <a href="https://miniflux.app/">Miniflux</a> instance, which happens to be
my favorite RSS reader. Currently it is hosted on Linode (Akamai Cloud)
running <a href="https://www.alpinelinux.org/">Alpine Linux</a>.</p>
<p>My current setup was performed manually. I was thinking that, for fun, it would
be cool to fully automate it under the principles of
<a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IaC</a>.</p>
<p>The current setup does not use any containers. I had proudly made it as KISS as
possible at the time:</p>
<ol>
<li>Linode is a very beginner-friendly (and cheap) VPS</li>
<li>Alpine Linux is a first-class citizen on Linode</li>
<li>There&rsquo;s an <code>apk</code> <a href="https://pkgs.alpinelinux.org/packages?name=miniflux">package</a> for <code>miniflux</code></li>
<li>There&rsquo;s an OpenRC<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> script for <code>miniflux</code> (so that it can be controlled via <code>service</code>)</li>
</ol>
<p>For the first part of this automation we will look into provisioning a Linode
with an Alpine Linux installation. In order to do so we will use HashiCorp
<a href="https://www.terraform.io/">Terraform</a>.</p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>Provision a new Linode</li>
<li>Deploy it in Europe</li>
<li>Use the smallest shape (a so-called <a href="https://www.linode.com/community/questions/211/what-is-a-nanode">Nanode</a>)</li>
<li>Run Alpine Linux</li>
<li>Set it up with my <a href="https://github.com/thiagowfx.keys">public ssh key</a>, which is hosted on Github</li>
</ul>
<h2 id="terraform-setup">Terraform setup</h2>
<ul>
<li>Install a provider for Linode: <a href="https://registry.terraform.io/providers/linode/linode/latest/docs">https://registry.terraform.io/providers/linode/linode/latest/docs</a></li>
</ul>
<p>Scaffold it like this, in a <code>main.tf</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform init
</span></span></code></pre></div><ul>
<li>Generate a Linode API token</li>
</ul>
<p>Go to <a href="https://cloud.linode.com/profile/tokens">https://cloud.linode.com/profile/tokens</a>, create a new token called
<code>terraform</code>. with the &ldquo;Linodes&rdquo; scope set to &ldquo;Read/Write&rdquo;.</p>
<ul>
<li>Append this API token to <code>main.tf</code>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">token</span> = <span style="color:#e6db74">&#34;&lt;your token here&gt;&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Add a
<a href="https://registry.terraform.io/providers/linode/linode/latest/docs/resources/instance"><code>linode_instance</code></a>
with the appropriate fields set according to the documentation:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>  = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>  = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>   = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = [<span style="color:#e6db74">&#34;&lt;your ssh public key here&gt;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan
</span></span></code></pre></div><p>&ldquo;Plan&rdquo; is basically a dry-run. Terraform will output what it intends to do, but nothing will be done yet.</p>
<ul>
<li>Analyze the output and double check that it looks correct.</li>
</ul>
<p>To actually perform the provisioning, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform apply
</span></span></code></pre></div><p>Then confirm the prompt.</p>
<p>Within a few seconds (or maybe minutes), you should see your new Linode in the
<a href="https://cloud.linode.com/">Linode Console</a>.</p>
<p>We can test our deployment by ssh&rsquo;ing to our new machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ssh root@&lt;public IP address&gt; -i ~/.ssh/my_ssh_key
</span></span><span style="display:flex;"><span>Welcome to Alpine!
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Alpine Wiki contains a large amount of how-to guides and general
</span></span><span style="display:flex;"><span>information about administrating Alpine systems.
</span></span><span style="display:flex;"><span>See &lt;https://wiki.alpinelinux.org/&gt;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You can setup the system with the command: setup-alpine
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You may change this message by editing /etc/motd.
</span></span></code></pre></div><p>Let&rsquo;s take a pause to appreciate how lightweight it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>localhost:~# df -h
</span></span><span style="display:flex;"><span>Filesystem                Size      Used Available Use% Mounted on
</span></span><span style="display:flex;"><span>devtmpfs                 10.0M         <span style="color:#ae81ff">0</span>     10.0M   0% /dev
</span></span><span style="display:flex;"><span>shm                     487.8M         <span style="color:#ae81ff">0</span>    487.8M   0% /dev/shm
</span></span><span style="display:flex;"><span>/dev/sda                 24.1G    238.1M     22.6G   1% /
</span></span><span style="display:flex;"><span>tmpfs                   195.1M    268.0K    194.8M   0% /run
</span></span></code></pre></div><p>Only 238 MiB!</p>
<p>To deprovision it, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -destroy
</span></span></code></pre></div><p>If everything looks correct, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform destroy
</span></span></code></pre></div><p><strong>Warning</strong>: It turns out the &ldquo;Linodes&rdquo; scope was not enough to do the
deprovisioning. I needed to create a new scope, with more permissions, in order
to do so.</p>
<p>As you can see, terraform makes it very trivial to deprovision systems.</p>
<p><strong>Bonus points</strong>: run <code>terraform fmt</code> to format your file. Never go <a href="https://www.youtube.com/watch?v=-CmadmM5cOk">out of
style</a>.</p>
<p><strong>Tip</strong>: At any point you can run <code>terraform validate</code> to verify your <code>main.tf</code>
file is syntatically correct.</p>
<p>Two things could be improved in the previous setup:</p>
<ul>
<li>We could use <code>authorized_users</code> to pass in our linode username. If we add an
SSH key to our linode account, then that key would be automatically deployed
to the system, thereby removing the need to specify <code>authorized_keys</code>.</li>
<li>Alternatively, we could fetch our key from an URL endpoint with the use of
the <code>hashicorp/http</code> provider, like so:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;thiagowfx_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/thiagowfx.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">thiagowfx_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>The &ldquo;list comprehension&rdquo; above does line splitting magic to convert them to a
list of string, and the <code>compact</code> removes the empty new line at the end.</p>
<p>We could improve the example above even further.</p>
<p>For starters, let&rsquo;s parameterize out the username to a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;user_ssh_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://github.com/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">.keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We could then easily supply another username with <code>-var</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% terraform plan -var github_username<span style="color:#f92672">=</span>torvalds
</span></span></code></pre></div><p>Note that the above example leverages <a href="https://developer.hashicorp.com/terraform/language/expressions/strings">string interpolation</a>.</p>
<p>We could also extract the SSH keys list to its own &ldquo;variable&rdquo; (<a href="https://developer.hashicorp.com/terraform/language/values/locals">locals</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = compact([<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">line</span> <span style="color:#66d9ef">in</span> split(<span style="color:#e6db74">&#34;</span><span style="color:#960050;background-color:#1e0010">\</span><span style="color:#e6db74">n&#34;</span>, data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">user_ssh_keys</span>.<span style="color:#a6e22e">response_body</span>) <span style="color:#f92672">:</span> chomp(<span style="color:#a6e22e">line</span>)])
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;coruscant&#34;</span> {<span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">ssh_keys</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  # ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>A more robust (and stable) way to query the key though is through the Github API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ssh_keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that a typical response body looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;id&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;&lt;ssh key&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>API endpoint documentation:
<a href="https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user">https://docs.github.com/en/rest/users/keys?apiVersion=2022-11-28#list-public-keys-for-a-user</a></p>
<p>If we use <code>output</code> instead of <code>locals</code>, then we can debug (inspect) it with
<code>terraform output</code>.</p>
<p>And that&rsquo;s it for today! In a future post, we will continue from here by using
<a href="https://www.ansible.com/">Ansible</a> to install and set up Miniflux in our new
Linode.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Alpine Linux does not use <code>systemd</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>The fundamental right to paste</title><link>https://thiagowfx.github.io/2024/01/the-fundamental-right-to-paste/</link><pubDate>Mon, 22 Jan 2024 18:55:13 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/the-fundamental-right-to-paste/</guid><description>&lt;p>Some websites attempt to prevent users from pasting text (i.e. &lt;code>Ctrl+V&lt;/code> /
&lt;code>Cmd+V&lt;/code>) in web browsers.&lt;/p>
&lt;p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.&lt;/p></description><content:encoded><![CDATA[<p>Some websites attempt to prevent users from pasting text (i.e. <code>Ctrl+V</code> /
<code>Cmd+V</code>) in web browsers.</p>
<p>It serves no purpose in most cases other than hindering accessibility and
increasing annoyance for users.</p>
<p>It is relatively easy to bypass most trivial blocks with plain JavaScript. Open a DevTools console (<code>Option + Cmd + I</code> in Google Chrome on macOS), then paste in the following snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">forceEnableCopyPaste</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">e</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;paste&#39;</span>, <span style="color:#e6db74">&#39;copy&#39;</span>].<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span> =&gt; {
</span></span><span style="display:flex;"><span>    document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span>, <span style="color:#a6e22e">forceEnableCopyPaste</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>})();
</span></span></code></pre></div><p><strong>Bonus points</strong>: it also works for copying text.</p>
<p>I can see the point of trying to attempt to block copying (e.g. copyright,
online exams), but there&rsquo;s little reason to prevent pasting.</p>
<p>The only <em>arguably valid</em> use case I&rsquo;ve seen to date for blocking pasting is
in some sign-up forms wherein you need to type in some piece of user ID (e.g.
your email, or your telephone number) twice. The second text field is
sometimes blocked, as to <em>encourage</em> you to double check it is absolutely
correct™, by the means of carefully typing it out.</p>
<p>The snippet above could also be easily converted to a bookmarklet.</p>
<p>Search for &ldquo;bookmarklet builder&rdquo; in your favorite search engine, go to a website such as <a href="https://caiorss.github.io/bookmarklet-maker/">https://caiorss.github.io/bookmarklet-maker/</a>, paste the above snippet therein, then get a compressed version such as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">Bjavascript</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#66d9ef">function</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">const</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>(<span style="color:#a6e22e">e</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">stopImmediatePropagation</span>()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">return</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">B</span><span style="color:#e6db74">&#39;paste&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#e6db74">&#39;copy&#39;</span><span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#a6e22e">D</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">D</span><span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">E</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span>document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#a6e22e">event</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#a6e22e">forceEnableCopyPaste</span><span style="color:#f92672">%</span><span style="color:#ae81ff">2</span><span style="color:#a6e22e">C</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#66d9ef">true</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">20</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">0</span><span style="color:#a6e22e">A</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span><span style="color:#f92672">%</span><span style="color:#ae81ff">7</span><span style="color:#a6e22e">D</span>)()<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#a6e22e">B</span>
</span></span></code></pre></div><p>Now just create a web browser favorite with that resource. Clicking the
bookmark will yield the same effect as pasting the snippet into devtools.</p>]]></content:encoded></item><item><title>Remove large files from your computer</title><link>https://thiagowfx.github.io/2024/01/remove-large-files-from-your-computer/</link><pubDate>Sun, 21 Jan 2024 10:40:13 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/remove-large-files-from-your-computer/</guid><description>&lt;p>Whenever disk space gets almost full, I like to use the following software to
clean up (unnecessary) big files from my computers:&lt;/p></description><content:encoded><![CDATA[<p>Whenever disk space gets almost full, I like to use the following software to
clean up (unnecessary) big files from my computers:</p>
<h2 id="windows">Windows</h2>
<p><a href="https://windirstat.net/">WinDirStat</a>:</p>
<blockquote>
<p>WinDirStat is a disk usage statistics viewer and cleanup tool for various
versions of Microsoft Windows.</p>
</blockquote>
<p>It&rsquo;s user-friendly and open source.</p>
<h2 id="linux--macos">Linux / macOS</h2>
<p><a href="https://dev.yorhel.nl/ncdu">ncdu</a>:</p>
<blockquote>
<p>Ncdu is a disk usage analyzer with an ncurses interface. It is designed to
find space hogs on a remote server where you don’t have an entire graphical
setup available, but it is a useful tool even on regular desktop systems.
Ncdu aims to be fast, simple and easy to use, and should be able to run in
any minimal POSIX-like environment with ncurses installed.</p>
</blockquote>
<p>Naturally, the command line way™ prevails on Unix systems. It&rsquo;s one
installation command away from your favorite package manager. Usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ncdu /
</span></span></code></pre></div>]]></content:encoded></item><item><title>Create a family tree with graphviz</title><link>https://thiagowfx.github.io/2024/01/create-a-family-tree-with-graphviz/</link><pubDate>Fri, 19 Jan 2024 16:44:46 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/create-a-family-tree-with-graphviz/</guid><description>&lt;p>&lt;a href="https://graphviz.org/">Graphviz&lt;/a>&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>is open source graph visualization software. Graph visualization is a way of
representing structural information as diagrams of abstract graphs and
networks.&lt;/p>
&lt;/blockquote>
&lt;p>We can also use it to craft family trees!&lt;/p></description><content:encoded><![CDATA[<p><a href="https://graphviz.org/">Graphviz</a>&hellip;</p>
<blockquote>
<p>is open source graph visualization software. Graph visualization is a way of
representing structural information as diagrams of abstract graphs and
networks.</p>
</blockquote>
<p>We can also use it to craft family trees!</p>
<p>I came up with the following template:</p>
<pre tabindex="0"><code class="language-graphviz" data-lang="graphviz">digraph G {
    {Greatgrandfather Greatgrandmother} -&gt; Grandfather;
    {Grandfather Grandmother} -&gt; Father;
    {Father Mother} -&gt; Me;

    Greatgrandfather [shape = box;label = &#34;Greatgrandfather Lastname&#34;;];
    Greatgrandmother [shape = box;label = &#34;Greatgrandmother Lastname&#34;;];
    Grandfather [shape = box;label = &#34;Grandfather Lastname&#34;;];
    Grandmother [shape = box;label = &#34;Grandmother Lastname&#34;;];
    Father [shape = box;label = &#34;Father Lastname&#34;;];
    Mother [shape = box;label = &#34;Mother Lastname&#34;;];
    Me [shape = box;label = &#34;Me Lastname&#34;;];

    Greatgrandfather [color = &#34;lightblue&#34;;style = filled;];
    Greatgrandmother [color = &#34;pink&#34;;style = filled;];
    Grandfather [color = &#34;lightblue&#34;;style = filled;];
    Grandmother [color = &#34;pink&#34;;style = filled;];
    Father [color = &#34;lightblue&#34;;style = filled;];
    Mother [color = &#34;pink&#34;;style = filled;];
    Me [style = filled;color = lightblue;];
}
</code></pre><p>&hellip;save this to a <code>tree.dot</code> file.</p>
<p>A <code>.png</code> representation of the graph can then be generated with the following
command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>dot -Tpng tree.dot &gt; tree.png
</span></span></code></pre></div><p>Note that <code>dot</code> is part of the graphviz distribution.</p>
<p>In case it&rsquo;s not installed on your system, it&rsquo;s <a href="https://repology.org/project/graphviz/versions">widely
available</a>, just do it. For
example, on macOS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>brew install graphviz
</span></span></code></pre></div><p>The final result:</p>
<p><img loading="lazy" src="tree.png" alt="family tree"  />
</p>]]></content:encoded></item><item><title>Start an HTTP server ASAP</title><link>https://thiagowfx.github.io/2024/01/start-an-http-server-asap/</link><pubDate>Wed, 17 Jan 2024 16:41:41 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/start-an-http-server-asap/</guid><description>&lt;p>Sometimes I need to start a local HTTP server for a quick one-off task, often
just to serve static content. It is not important which one it is, so long as I
can do it quickly.&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I need to start a local HTTP server for a quick one-off task, often
just to serve static content. It is not important which one it is, so long as I
can do it quickly.</p>
<h2 id="option-1-use-python">Option #1: use <code>python</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% python3 -m http.server
</span></span><span style="display:flex;"><span>Serving HTTP on :: port <span style="color:#ae81ff">8000</span> <span style="color:#f92672">(</span>http://<span style="color:#f92672">[</span>::<span style="color:#f92672">]</span>:8000/<span style="color:#f92672">)</span> ...
</span></span></code></pre></div><p>This is often the most universal and convenient option, as <code>python</code> is widely
available out-of-the-box.</p>
<h2 id="option-2-use-darkhttpd">Option #2: use <code>darkhttpd</code></h2>
<p><a href="https://unix4lyfe.org/darkhttpd/"><code>darkhttpd</code></a> is available <a href="https://repology.org/project/darkhttpd/versions">almost
everywhere</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% darkhttpd .
</span></span><span style="display:flex;"><span>darkhttpd/1.14, copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2003-2022 Emil Mikulic.
</span></span><span style="display:flex;"><span>listening on: http://0.0.0.0:8080/
</span></span></code></pre></div><p>Their own <code>README</code> states:</p>
<blockquote>
<p>When you need a web server in a hurry.</p>
</blockquote>
<p>This is the most convenient option when you are in control of a package
manager, as it is one installation command away from your system. In
particular, it&rsquo;s available in both homebrew and nixpkgs.</p>
<h2 id="option-3-use-nodejs">Option #3: use <code>nodejs</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% npx http-server -p <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>Starting up http-server, serving ./
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http-server version: 14.1.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http-server settings:
</span></span><span style="display:flex;"><span>CORS: disabled
</span></span><span style="display:flex;"><span>Cache: <span style="color:#ae81ff">3600</span> seconds
</span></span><span style="display:flex;"><span>Connection Timeout: <span style="color:#ae81ff">120</span> seconds
</span></span><span style="display:flex;"><span>Directory Listings: visible
</span></span><span style="display:flex;"><span>AutoIndex: visible
</span></span><span style="display:flex;"><span>Serve GZIP Files: false
</span></span><span style="display:flex;"><span>Serve Brotli Files: false
</span></span><span style="display:flex;"><span>Default File Extension: none
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Available on:
</span></span><span style="display:flex;"><span>  http://127.0.0.1:8000
</span></span><span style="display:flex;"><span>Hit CTRL-C to stop the server
</span></span></code></pre></div><p>If you&rsquo;re already within the node ecosystem, this is also just one installation
away. I would typically not recommend this setup though if you don&rsquo;t already
have <code>npm</code> installed on your system.</p>
<h2 id="option-4-use-busybox">Option #4: use <code>busybox</code></h2>
<p>This option seemed very attractive for use on Linux systems:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% busybox httpd -f -p <span style="color:#ae81ff">8080</span>
</span></span></code></pre></div><p>However in an up-to-date Alpine Linux system (3.20) it does not work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% busybox httpd -f -p <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>httpd: applet not found
</span></span></code></pre></div><p>Therefore I don&rsquo;t consider it universal enough.</p>
<p><strong>Reference</strong>: <a href="https://gist.github.com/willurd/5720255">https://gist.github.com/willurd/5720255</a></p>]]></content:encoded></item><item><title>Why do you need to know my last name?</title><link>https://thiagowfx.github.io/2024/01/why-do-you-need-to-know-my-last-name/</link><pubDate>Tue, 16 Jan 2024 09:39:58 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://thiagowfx.github.io/2024/01/why-do-you-need-to-know-my-last-name/</guid><description>&lt;p>Some (annoying) websites and/or mobile apps will refuse to let you proceed past
their registration / login screen unless you provide a last name. Isn&amp;rsquo;t my
first name enough&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>?&lt;/p></description><content:encoded><![CDATA[<p>Some (annoying) websites and/or mobile apps will refuse to let you proceed past
their registration / login screen unless you provide a last name. Isn&rsquo;t my
first name enough<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>?</p>
<p>There are a couple of ways to work around this:</p>
<ul>
<li>Provide a fake last name</li>
<li>Provide a gibberish last name (aklsjslkja)</li>
<li>Provide only the first or second letter of your real last name (e.g. &ldquo;Thiago
P&rdquo;)</li>
<li>Provide some non-latin-alphabetic character (e.g. &ldquo;1&rdquo;, &ldquo;.&rdquo;, &ldquo;Э̇&rdquo;)</li>
</ul>
<p>Recently it occurred to me there&rsquo;s an even cleverer idea: provide an empty
(whitespace) character.</p>
<p>Some services have validation in place to prevent you from inserting a mere
ASCII whitespace (&rsquo; &lsquo;).</p>
<p>However, most will not bother to check &ldquo;invisible&rdquo; unicode whitespace:</p>
<pre tabindex="0"><code>‎
</code></pre><p>There&rsquo;s a single whitespace character above you can easily copy. <code>vim</code> displays
it as <code>&lt;200e&gt;</code>.</p>
<p><strong>Reference</strong>: <a href="https://emptycharacter.com/">https://emptycharacter.com/</a></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Actually, why do you even need to know my first name in the first place?
I am just some random database primary key ID.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>