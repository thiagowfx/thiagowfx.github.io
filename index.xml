<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>not just serendipity</title><link>https://perrotta.dev/</link><description>Recent content on not just serendipity</description><generator>Hugo</generator><language>en-us</language><managingEditor>tbperrotta@gmail.com (Thiago Perrotta)</managingEditor><webMaster>tbperrotta@gmail.com (Thiago Perrotta)</webMaster><lastBuildDate>Fri, 27 Dec 2024 22:24:11 -0300</lastBuildDate><atom:link href="https://perrotta.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>localhost under your own domain</title><link>https://perrotta.dev/2024/12/localhost-under-your-own-domain/</link><pubDate>Fri, 27 Dec 2024 22:24:11 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/localhost-under-your-own-domain/</guid><description>&lt;p>To interact with &lt;code>localhost&lt;/code>, you can use &lt;code>127.0.0.1&lt;/code>.&lt;/p>
&lt;p>In certain scenarios, you may need a domain name though.&lt;/p>
&lt;p>You could use &lt;a href="https://nip.io">nip.io&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>dead simple wildcard DNS for any IP Address&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;for example, via &lt;code>127.0.0.1.nip.io&lt;/code>.&lt;/p>
&lt;p>Or you could use &lt;code>local.gd&lt;/code> e.g. &lt;code>localhost.local.gd&lt;/code>.&lt;/p>
&lt;p>But what if you wanted to eliminate the dependence on third-parties and,
instead, do this yourself?&lt;/p>
&lt;p>Assuming you have your own domain, create the following DNS record – I&amp;rsquo;ll use my
own &lt;code>perrotta.dev&lt;/code> domain as an example:&lt;/p></description></item><item><title>Advents</title><link>https://perrotta.dev/2024/12/advents/</link><pubDate>Fri, 27 Dec 2024 20:36:42 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advents/</guid><description>&lt;p>Too many advents:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://adventofcode.com/">Advent of Code&lt;/a>: my favorite. See &lt;a href="https://perrotta.dev/tags/aoc/">aoc&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://jimmyhmiller.github.io/advent-of-papers">Advent of Papers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.debugdecember.com/">Debug December&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://htmhell.dev/adventcalendar/">HTMLHell Advent Calendar&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Surely you will never run out of daily technical challenges to do in December!&lt;/p>
&lt;p>And don&amp;rsquo;t forget about the likes of &lt;a href="https://wordly.org/">Wordly&lt;/a>.&lt;/p></description></item><item><title>Versioning schemes</title><link>https://perrotta.dev/2024/12/versioning-schemes/</link><pubDate>Fri, 27 Dec 2024 20:34:20 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/versioning-schemes/</guid><description>&lt;p>Today I learned: &lt;a href="https://0ver.org/">https://0ver.org/&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>With software releases at an all-time high, the consensus has never been
clearer: Major versions are over. So what does the past, present, and future
of software versioning look like? Welcome to ZeroVer 0.0.1.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Unlike other versioning schemes like Semantic Versioning and Calendar
Versioning, ZeroVer (AKA 0ver) is simple: Your software&amp;rsquo;s major version should
never exceed the first and most important number in computing: zero.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>A down-to-earth demo:&lt;/p></description></item><item><title>Keep sorted</title><link>https://perrotta.dev/2024/12/keep-sorted/</link><pubDate>Thu, 26 Dec 2024 15:07:02 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/keep-sorted/</guid><description>&lt;p>&lt;a href="https://github.com/google/keep-sorted">keep-sorted&lt;/a> is, by far, one of my
favorite tools to enforce tidying up a codebase.&lt;/p>
&lt;p>It is such an undiscovered gem (~130 stars on github), proving that popularity
isn&amp;rsquo;t always a pre-requisite for quality nor success.&lt;/p>
&lt;p>It started as someone&amp;rsquo;s 20% project at Google. When using the internal IDE
(legacy Cider) and/or the internal Code Review tool (legacy Critique) with the
CI tool (Tricorder), linting warnings / errors would surface all over the place,
forcing you to address them. It was also possible to have them automatically
fixed.&lt;/p></description></item><item><title>Hyperfine: a CLI benchmarking tool</title><link>https://perrotta.dev/2024/12/hyperfine-a-cli-benchmarking-tool/</link><pubDate>Thu, 26 Dec 2024 13:22:21 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/hyperfine-a-cli-benchmarking-tool/</guid><description>&lt;p>This week I accidentally stumbled upon &lt;a href="https://github.com/sharkdp/hyperfine">&lt;code>hyperfine&lt;/code>&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s a CLI benchmarking tool, with the most sensible user interface I could ever
conceive:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% hyperfine --warmup &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#39;find -iname &amp;#34;*.ts&amp;#34; | wc&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;fd -e ts | wc&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmark 1: find -iname &lt;span style="color:#e6db74">&amp;#34;*.ts&amp;#34;&lt;/span> | wc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Time &lt;span style="color:#f92672">(&lt;/span>mean ± σ&lt;span style="color:#f92672">)&lt;/span>: 2.5 ms ± 2.7 ms &lt;span style="color:#f92672">[&lt;/span>User: 0.7 ms, System: 1.9 ms&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Range &lt;span style="color:#f92672">(&lt;/span>min … max&lt;span style="color:#f92672">)&lt;/span>: 0.0 ms … 8.4 ms &lt;span style="color:#ae81ff">260&lt;/span> runs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Warning: Command took less than &lt;span style="color:#ae81ff">5&lt;/span> ms to complete. Note that the results might be inaccurate because hyperfine can not calibrate the shell startup time much more precise than this limit. You can try to use the &lt;span style="color:#e6db74">`&lt;/span>-N&lt;span style="color:#e6db74">`&lt;/span>/&lt;span style="color:#e6db74">`&lt;/span>--shell&lt;span style="color:#f92672">=&lt;/span>none&lt;span style="color:#e6db74">`&lt;/span> option to disable the shell completely.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmark 2: fd -e ts | wc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Time &lt;span style="color:#f92672">(&lt;/span>mean ± σ&lt;span style="color:#f92672">)&lt;/span>: 103.9 ms ± 5.8 ms &lt;span style="color:#f92672">[&lt;/span>User: 238.4 ms, System: 688.8 ms&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Range &lt;span style="color:#f92672">(&lt;/span>min … max&lt;span style="color:#f92672">)&lt;/span>: 94.3 ms … 114.4 ms &lt;span style="color:#ae81ff">28&lt;/span> runs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> find -iname &lt;span style="color:#e6db74">&amp;#34;*.ts&amp;#34;&lt;/span> | wc ran
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 41.43 ± 44.04 times faster than fd -e ts | wc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hyperfine --warmup &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#39;find -iname &amp;#34;*.ts&amp;#34; | wc&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;fd -e ts | wc&amp;#39;&lt;/span> 7.84s user 23.35s system 443% cpu 7.034 total
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Give it two (or more) commands, fine-tune it as much as you need (see &lt;code>hyperfine --help&lt;/code>), and then profit&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Definitely adding it to my toolbox.&lt;/p></description></item><item><title>git reset --hard including submodules</title><link>https://perrotta.dev/2024/12/git-reset--hard-including-submodules/</link><pubDate>Thu, 26 Dec 2024 13:04:27 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/git-reset--hard-including-submodules/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Whenever I open &lt;a href="https://rancherdesktop.io/">Rancher
Desktop&lt;/a> it insists on modifying my shell rc files.
Make it stop!&lt;/p>
&lt;p>bash:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span># diff --git bash/.bash_profile bash/.bash_profile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index c3962b2..89f475b 100644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- bash/.bash_profile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ bash/.bash_profile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -7,3 +7,7 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> #
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # The following line sources .bashrc and is recommended by http://mywiki.wooledge.org/DotFiles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ -r ~/.bashrc ] &amp;amp;&amp;amp; . ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+export PATH=&amp;#34;/Users/thiago.perrotta/.rd/bin:$PATH&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>diff --git bash/.bashrc bash/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index 7074bca..9ca8ffa 100644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- bash/.bashrc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ bash/.bashrc
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -61,3 +61,7 @@ src_files &amp;#34;/etc/bash_completion&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> # Load user scripts and functions if existing. Order is important.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Corp config is handled as part of .bashrc.d.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src_files &amp;#34;$HOME/.profile.d&amp;#34; &amp;#34;$HOME/.bashrc.d&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+export PATH=&amp;#34;/Users/thiago.perrotta/.rd/bin:$PATH&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>zsh:&lt;/p></description></item><item><title>Advent of Code 2024: Day 17</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</link><pubDate>Wed, 25 Dec 2024 16:13:30 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-17/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/17">Day #17&lt;/a> puzzle.&lt;/p>
&lt;p>It&amp;rsquo;s a simulation problem, a quite delightful one to implement.&lt;/p>
&lt;p>Using python data classes would have been natural, but I went full imperative in
this one.&lt;/p>
&lt;p>Part 2 would require clever backwards computation, and I wasn&amp;rsquo;t interested in
doing so. I liked the approach from &lt;a href="https://todd.ginsberg.com/post/advent-of-code/2024/day17/">Todd
Ginsberg&lt;/a>.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a, b, c &lt;span style="color:#f92672">=&lt;/span> [int(line&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">2&lt;/span>]) &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">3&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> program &lt;span style="color:#f92672">=&lt;/span> [int(op) &lt;span style="color:#66d9ef">for&lt;/span> op &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split()[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">combo&lt;/span>(operand):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> operand &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operand &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ip &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(program) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#f92672">=&lt;/span> program[ip]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operand &lt;span style="color:#f92672">=&lt;/span> program[ip &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># adv, division&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxl, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bst, modulo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># jnz&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> operand
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bxc, bitwise xor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">^=&lt;/span> c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdout&lt;span style="color:#f92672">.&lt;/span>append(combo(operand) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># bdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># cdv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> opcode &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numerator &lt;span style="color:#f92672">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> denominator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">**&lt;/span> combo(operand)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> numerator &lt;span style="color:#f92672">//&lt;/span> denominator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, stdout)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Advent of Code 2024: Day 9</title><link>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</link><pubDate>Wed, 25 Dec 2024 16:09:53 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/advent-of-code-2024-day-9/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/9">Day #9&lt;/a> puzzle.&lt;/p>
&lt;p>A disk fragmentation problem.&lt;/p>
&lt;p>It&amp;rsquo;s mostly an ad-hoc problem, there isn&amp;rsquo;t much commentary to make.&lt;/p>
&lt;p>Part two was quite annoying so I simply skipped it.&lt;/p>
&lt;p>The full solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">expand&lt;/span>(disk: list[int]) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> disk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> fill:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> [str(s) &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> [d]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#f92672">+=&lt;/span> n &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">not&lt;/span> fill
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">defrag&lt;/span>(disk: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> str:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> expand(disk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">=&lt;/span> len(p) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> p[left] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p[left], p[right] &lt;span style="color:#f92672">=&lt;/span> p[right], p[left]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p[right] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">checksum&lt;/span>(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, d &lt;span style="color:#f92672">in&lt;/span> enumerate(disk):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> d &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#f92672">+=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> int(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> input:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> input&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>splitlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> disk &lt;span style="color:#f92672">=&lt;/span> [int(x) &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># part one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(checksum(defrag(disk)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Picking a monospaced code font</title><link>https://perrotta.dev/2024/12/picking-a-monospaced-code-font/</link><pubDate>Wed, 25 Dec 2024 02:32:55 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/picking-a-monospaced-code-font/</guid><description>&lt;p>Surely you can afford to be picky&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with your code fonts these days.&lt;/p>
&lt;p>Don&amp;rsquo;t know where to start? &lt;a href="https://www.codingfont.com/">https://www.codingfont.com/&lt;/a> (&lt;a href="https://www.codingfont.com/">via John
Gruber&lt;/a>) is a good start:&lt;/p>
&lt;blockquote>
&lt;p>[&amp;hellip;] fun &amp;ldquo;tournament&amp;rdquo; from Typogram that lets you pick your favorite
monospaced coding font from 32 choices. One limitation is that the only
options are free fonts&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>I highly recommend you disable showing the font names while you play, to avoid
any bias toward fonts you already think you have an opinion about.&lt;/p></description></item><item><title>Switching from Google to ChatGPT search</title><link>https://perrotta.dev/2024/12/switching-from-google-to-chatgpt-search/</link><pubDate>Tue, 24 Dec 2024 21:14:04 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/switching-from-google-to-chatgpt-search/</guid><description>&lt;p>Following the footsteps of &lt;a href="https://www.linkedin.com/posts/danielmiessler_ive-not-used-google-to-search-since-searchgpt-activity-7258159059944538113-dxZG">Daniel
Miessler&lt;/a>,
I have changed my default search engine in Chrome from Google to ChatGPT
Search&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
by installing their official &lt;a href="https://chromewebstore.google.com/detail/chatgpt-search/ejcfepkfckglbgocfkanmcdngdijcgld">chrome
extension&lt;/a>.&lt;/p>
&lt;p>This is effectively possible because, after
&lt;a href="https://openai.com/index/introducing-chatgpt-search/?utm_source=chatgpt.com">launching&lt;/a>
it for a few months, this month they made it free for everyone.&lt;/p>
&lt;p>So far the results are impressive and almost always what I am looking for.&lt;/p>
&lt;p>When they are not, I can easily fall back to Google by starting my search query
in Chrome with &amp;lsquo;g&amp;rsquo;, or to DuckDuckGo with &amp;rsquo;d&amp;rsquo;.&lt;/p></description></item><item><title>Just: make Justfile self-contained</title><link>https://perrotta.dev/2024/12/just-make-justfile-self-contained/</link><pubDate>Mon, 23 Dec 2024 23:23:13 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/just-make-justfile-self-contained/</guid><description>&lt;p>A commit is worth a thousand words, following up on my previous &lt;a href="https://perrotta.dev/2024/12/just/">just&lt;/a> post:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>diff --git Justfile Justfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>old mode 100644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>new mode 100755
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index 1e1e33c7..cb0cd5e2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- Justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ Justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -1,10 +1,16 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">+#!/usr/bin/env just --justfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> # https://github.com/casey/just
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set dotenv-load
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+_default:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ @just --list
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Add a shebang to invoke your &lt;code>Justfile&lt;/code>&lt;/li>
&lt;li>Make your &lt;code>Justfile&lt;/code> executable (with &lt;code>chmod +x&lt;/code>)&lt;/li>
&lt;li>Add a default target that invokes &lt;code>just --list&lt;/code>. It should be the first one.
The underscore makes it private, effectively hiding it from the list output.&lt;/li>
&lt;/ul>
&lt;p>The diff above is for the &lt;code>Justfile&lt;/code> used for this blog. The above change
yields:&lt;/p></description></item><item><title>Running multiple servers in a single bash script</title><link>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</link><pubDate>Mon, 23 Dec 2024 22:52:40 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/running-multiple-servers-in-a-single-bash-script/</guid><description>&lt;p>Inspired by &lt;a href="https://github.com/simonw/til/blob/main/bash/multiple-servers.md">Simon
Willison&lt;/a>&amp;rsquo;s
TIL.&lt;/p>
&lt;p>When I was working on the &lt;a href="https://stadia.com/">Stadia&lt;/a> Partner Portal as a
full-stack tech lead, I wrote and maintained a &lt;code>run.sh&lt;/code> script that would start
up our two (front-end and back-end) Boq&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> server instances.&lt;/p>
&lt;p>It resembled the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kill $pid_fe $pid_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trap cleanup SIGINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal/ui &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_fe&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># [...init deps...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boq run //java/com/google/chrome/cloudcast/&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>/publishing/partnerportal &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid_be&lt;span style="color:#f92672">=&lt;/span>$!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_fe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_be
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wait
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This version is heavily simplified, but that was its gist. It worked perfectly.
Back in ~2018, it took quite a bit of trial-and-error to get it right. Now it
seems so easy to just ask GenAI to generate it for you! Yikes. Our profession
might get obsoleted in just a few more years to come&amp;hellip;&lt;/p></description></item><item><title>Unbuffer</title><link>https://perrotta.dev/2024/12/unbuffer/</link><pubDate>Mon, 23 Dec 2024 21:41:38 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/unbuffer/</guid><description>&lt;p>The &lt;code>unbuffer&lt;/code> binary comes from the &lt;a href="https://www.nist.gov/services-resources/software/expect">expect&lt;/a> package.
I didn&amp;rsquo;t realize until now that it is hosted in NIST.gov!&lt;/p>
&lt;p>There are two scenarios in which I find &lt;code>unbuffer&lt;/code> quite helpful:&lt;/p>
&lt;ol>
&lt;li>flush stdout line output immediately, in programs such as &lt;code>tail&lt;/code> or &lt;code>python&lt;/code>.
Julia Evans noted this
&lt;a href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/#solution-5-use-unbuffer">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% tail -f /some/log/file | unbuffer grep thing1 | grep thing2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without &lt;code>unbuffer&lt;/code> there&amp;rsquo;s no guarantee &lt;code>tail&lt;/code> would print its stdout output in
real time.&lt;/p></description></item><item><title>Reply to: Introduce yourself to your remote team</title><link>https://perrotta.dev/2024/12/reply-to-introduce-yourself-to-your-remote-team/</link><pubDate>Mon, 23 Dec 2024 20:47:55 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/reply-to-introduce-yourself-to-your-remote-team/</guid><description>&lt;p>(&lt;a href="https://cassidoo.co/post/remote-intros/">via&lt;/a>) Cassidy Williams:&lt;/p>
&lt;blockquote>
&lt;p>Something that that a few of my teams have done well is introducing themselves
asynchronously. It can be a hard thing to do! When you&amp;rsquo;re on a fully remote
team and you&amp;rsquo;re seeing everyone&amp;rsquo;s face on Zoom for the first time, it&amp;rsquo;s a
little nerve-wracking to figure out how to present yourself, how to &amp;ldquo;bring
your whole self to work,&amp;rdquo; and not be a total weirdo.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What my team at GitHub does (and what I&amp;rsquo;ve seen at a few other orgs now, it&amp;rsquo;s
catching on!) is we have a repository of &amp;ldquo;Human User Guides&amp;rdquo; full of details
about each other.&lt;/p></description></item><item><title>Anki workflow</title><link>https://perrotta.dev/2024/12/anki-workflow/</link><pubDate>Mon, 23 Dec 2024 00:12:52 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/anki-workflow/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> since 2-3 years ago to keep up
with German vocabulary and grammar. I had originally started with Duolingo.&lt;/p>
&lt;p>In the beginning my workflow was quite basic.
Then I created &lt;a href="https://perrotta.dev/2024/02/anki-custom-language-card/">custom language&lt;/a> &lt;a href="https://perrotta.dev/2024/09/anki-custom-language-card-cont./">cards&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>After you install Anki, you need to set up a Note Type to keep your flashcards
formatted as you like. Anki comes with a few basic Note Types, but they aren&amp;rsquo;t
suited for learning Japanese.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://tatsumoto.neocities.org/blog/setting-up-anki">via&lt;/a>). The advantage of
creating a custom note type (language card) is that I can format it the way I
want.&lt;/p></description></item><item><title>Online diff tool</title><link>https://perrotta.dev/2024/12/online-diff-tool/</link><pubDate>Sun, 22 Dec 2024 23:39:25 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/online-diff-tool/</guid><description>&lt;p>Sometimes I have two snippets of text in my clipboard&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that I need to diff.&lt;/p>
&lt;p>The quickest way to do so is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% cdtmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR a &lt;span style="color:#75715e"># then paste&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% $EDITOR b &lt;span style="color:#75715e"># then paste the other one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% diff -uN a b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/">&lt;code>cdtmp&lt;/code>&lt;/a> was previously covered, it &lt;code>cd&lt;/code>s to a
temporary directory.&lt;/p>
&lt;p>The &lt;code>diff&lt;/code> tool in the CLI is not very important, you could pick any one between
&lt;code>diff -uN&lt;/code>, &lt;code>colordiff -uN&lt;/code> or &lt;a href="https://perrotta.dev/2024/07/icdiff-side-by-side-diff/">&lt;code>icdiff&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Stylometry</title><link>https://perrotta.dev/2024/12/stylometry/</link><pubDate>Sun, 22 Dec 2024 22:57:26 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/stylometry/</guid><description>&lt;p>Jeff Kaufman&amp;rsquo;s &lt;a href="https://www.jefftk.com/p/good-reasons-for-alts">&amp;ldquo;Good Reasons for
Alts&amp;rdquo;&lt;/a> is a very insightful
read.&lt;/p>
&lt;p>Alt in this context stands for &amp;ldquo;alternate account&amp;rdquo;.&lt;/p>
&lt;p>Apparently there&amp;rsquo;s a whole ordeal dedicated to studying linguistic styles from
people in order to uniquely cluster / identify them, this is what
&lt;a href="https://en.wikipedia.org/wiki/Stylometry">stylometry&lt;/a> is.&lt;/p>
&lt;p>Like &lt;a href="https://www.jefftk.com/p/linking-alt-accounts">Jeff&lt;/a>, I agree that:&lt;/p>
&lt;blockquote>
&lt;p>(If you do want somewhat more protection now, however, I think best practice
is running your alt comments through an LLM to change the style.)&lt;/p></description></item><item><title>Digital mending circle</title><link>https://perrotta.dev/2024/12/digital-mending-circle/</link><pubDate>Sun, 22 Dec 2024 22:50:50 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/digital-mending-circle/</guid><description>&lt;blockquote>
&lt;p>TIL what a digital mending circle is.&lt;/p>
&lt;/blockquote>
&lt;p>(&lt;a href="https://cdevroe.com/2024/12/17/8285/">via&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>What, you ask, is a digital mending circle? A virtual co-working session for
the kinds of oft-neglected maintenance tasks that accrue around our digital
lives. Instead of darning socks and patching jeans, we update personal
websites, delete unused accounts, work on side projects, or even just catch up
on email.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve been doing this ever since forever. December is always a great month to do
so, as it&amp;rsquo;s quiet and uneventful&amp;hellip;&lt;/p></description></item><item><title>New post workflow</title><link>https://perrotta.dev/2024/12/new-post-workflow/</link><pubDate>Sun, 22 Dec 2024 22:26:46 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/new-post-workflow/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>% just new &lt;span style="color:#e6db74">&amp;#34;post title&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% vim content/posts/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hit &amp;lsquo;G&amp;rsquo;, open up the post, it looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;New post workflow&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: 2024-12-22T22:26:46-03:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> bestof★
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> macos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> meta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> portuguese
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> privacy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> selfhosted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-&lt;/span> serenity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Delete tags that are not applicable from the exhaustive list above. Most of the
time I&amp;rsquo;ll use &lt;code>dev&lt;/code>.&lt;/p>
&lt;p>Once it&amp;rsquo;s done, save the file with &lt;code>:Gwq&lt;/code> (&lt;a href="https://github.com/tpope/vim-fugitive">vim-fugitive&lt;/a>).&lt;/p></description></item><item><title>Link blogs</title><link>https://perrotta.dev/2024/12/link-blogs/</link><pubDate>Sun, 22 Dec 2024 22:16:59 -0300</pubDate><author>tbperrotta@gmail.com (Thiago Perrotta)</author><guid>https://perrotta.dev/2024/12/link-blogs/</guid><description>&lt;p>Simon Willison&amp;rsquo;s &amp;ldquo;My approach to running a link blog&amp;rdquo;
(&lt;a href="https://simonwillison.net/2024/Dec/22/link-blog/">via&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>The point of that article was to emphasize that blogging doesn&amp;rsquo;t have to be
about unique insights. The value is in writing frequently and having something
to show for it over time—worthwhile even if you don&amp;rsquo;t attract much of an
audience (or any audience at all).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In that article I proposed two categories of content that are low stakes and
high value: things I learned and descriptions of my projects.&lt;/p></description></item></channel></rss>