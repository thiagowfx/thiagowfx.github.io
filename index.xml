<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Not Just Serendipity</title><link>https://www.perrotta.dev/</link><description>Recent content on Not Just Serendipity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta • [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) • [RSS](/index.xml) •</copyright><lastBuildDate>Sun, 07 Apr 2024 23:13:09 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell text substitution</title><link>https://www.perrotta.dev/2024/04/shell-text-substitution/</link><pubDate>Sun, 07 Apr 2024 23:13:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/04/shell-text-substitution/</guid><description>&lt;p>I learned a neat shell trick this week. In both &lt;code>bash&lt;/code> and &lt;code>zsh&lt;/code> you can use the
circumflex / caret (&lt;code>^&lt;/code>) symbol to find &amp;amp; replace a word from the previous
command.&lt;/p>
&lt;p>Usage: &lt;code>^prev^next&lt;/code>. It&amp;rsquo;s best illustrated with examples:&lt;/p></description><content:encoded><![CDATA[<p>I learned a neat shell trick this week. In both <code>bash</code> and <code>zsh</code> you can use the
circumflex / caret (<code>^</code>) symbol to find &amp; replace a word from the previous
command.</p>
<p>Usage: <code>^prev^next</code>. It&rsquo;s best illustrated with examples:</p>
<h2 id="terraform">terraform</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform plan -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>terraform apply -var-file /path/to/foo.tfvars
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>terraform init -var-file /path/to/foo.tfvars
</span></span><span style="display:flex;"><span>^init^plan
</span></span><span style="display:flex;"><span>^plan^apply
</span></span></code></pre></div><h2 id="systemd">systemd</h2>
<p>Instead of running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>sudo systemctl status nginx
</span></span></code></pre></div><p>Run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span><span style="display:flex;"><span>^restart^status
</span></span></code></pre></div><h2 id="one-observation">one observation</h2>
<p><code>zsh</code> will run the substitution right away, whereas <code>bash</code> will allow you
to edit review and edit the replaced command before running it.</p>]]></content:encoded></item><item><title>pyenv</title><link>https://www.perrotta.dev/2024/03/pyenv/</link><pubDate>Sun, 10 Mar 2024 22:18:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/pyenv/</guid><description>&lt;p>When working on Python projects, &lt;a href="https://github.com/pyenv/pyenv">&lt;code>pyenv&lt;/code>&lt;/a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.&lt;/p></description><content:encoded><![CDATA[<p>When working on Python projects, <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a> is a
great python environment / version manager, especially on macOS wherein you
cannot easily control the python system version.</p>
<p>I&rsquo;d recommend to install it with homebrew (<code>brew install pyenv</code>).</p>
<p>The upstream documentation is great. The commands you&rsquo;ll typically use are:</p>
<ul>
<li><code>pyenv versions</code>: list all installed versions</li>
<li><code>pyenv global &lt;version&gt;</code>: set a specific python version for your whole system</li>
<li><code>pyenv local</code>: set a specific python version only for a specific project
(directory)</li>
</ul>
<p>And then it&rsquo;s handy to add the following blurb to your shell rc file to make
<code>pyenv</code> work properly out-of-the-box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># pyenv: https://github.com/pyenv/pyenv</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> hash pyenv &gt;/dev/null 2&gt;&amp;1; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	export PYENV_ROOT<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.pyenv&#34;</span>
</span></span><span style="display:flex;"><span>	path_munge <span style="color:#e6db74">&#34;</span>$PYENV_ROOT<span style="color:#e6db74">/bin&#34;</span>
</span></span><span style="display:flex;"><span>	eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>pyenv init -<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>Note that <code>path_munge</code> is a custom function, it merely appends the given
argument to the <code>$PATH</code>.</p>]]></content:encoded></item><item><title>chrome-fresh: start a fresh instance of Google Chrome</title><link>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</link><pubDate>Sun, 10 Mar 2024 21:55:16 +0100</pubDate><guid>https://www.perrotta.dev/2024/03/chrome-fresh-start-a-fresh-instance-of-google-chrome/</guid><description>&lt;p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on &lt;a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing&lt;/a> in the Browser Automation team at
Google:&lt;/p></description><content:encoded><![CDATA[<p>I used to have the following handy script to launch a new (fresh!) instance of
Google Chrome when working on <a href="https://www.perrotta.dev/2024/01/google-chrome-for-testing-reliable-downloads-for-browser-automation/">Chrome for Testing</a> in the Browser Automation team at
Google:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># start chrome with ephemeral settings (every run of Chrome is empty)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># usage: chrome-fresh out/Default/chrome</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TMPDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>mktemp -d<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>trap <span style="color:#e6db74">&#39;rm -rf &#34;${TMPDIR}&#34;&#39;</span> EXIT
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CHROME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span>google-chrome<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; shift
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md</span>
</span></span><span style="display:flex;"><span>CHROME_FLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;--use-mock-keychain&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;Darwin&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> *.app <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	open -n <span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> --args <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>  <span style="color:#75715e"># &#34;Linux&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;</span>$CHROME<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$CHROME_FLAGS<span style="color:#e6db74">&#34;</span> --user-data-dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$TMPDIR<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>The script is self-documenting, it was properly tested on both Linux and macOS.</p>
<p>The typical use case would be to compile a new Google Chrome binary
(<code>/out/Default/chrome</code>), and then use the script to launch it with a fresh user
data directory, to ensure the previous launch settings do not interfere with the
current one.</p>]]></content:encoded></item><item><title>Set terminal language to English</title><link>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</link><pubDate>Thu, 22 Feb 2024 09:48:34 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/set-terminal-language-to-english/</guid><description>&lt;p>I changed my macOS system language to German, with the intent of &lt;a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it&lt;/a>.&lt;/p>
&lt;p>One negative side effect is that most binaries I execute with my shell (for
example: &lt;code>git&lt;/code>) are now outputting German text as well&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In hindsight, this
should have been expected.&lt;/p></description><content:encoded><![CDATA[<p>I changed my macOS system language to German, with the intent of <a href="https://www.perrotta.dev/2022/04/translating-german-to-english/">getting more
exposure to it</a>.</p>
<p>One negative side effect is that most binaries I execute with my shell (for
example: <code>git</code>) are now outputting German text as well<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. In hindsight, this
should have been expected.</p>
<p>A simple fix is to override the environment locale with English. I made the
following
<a href="https://github.com/thiagowfx/.dotfiles/commit/4b784b1fa89f569623340cf3d58cc22d8504926a">addition</a>
to my <a href="https://github.com/thiagowfx/.dotfiles">dotfiles</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Force the system-wide language to English.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Both &#34;en_US&#34; and &#34;en_CA&#34; work here.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We could also optionally set LC_ALL but it is not necessary.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Verify current locale settings with `locale`.</span>
</span></span><span style="display:flex;"><span>export LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US&#34;</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You could argue that it&rsquo;s actually desirable to have terminal applications
output German. However, nothing beats the standardization, consistency and
familiarity of English for developer tooling. If I really need to have this
extreme exposure one day, it&rsquo;s always possible to just <code>unset LANG</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Force captive portal to open</title><link>https://www.perrotta.dev/2024/02/force-captive-portal-to-open/</link><pubDate>Thu, 22 Feb 2024 09:33:57 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/force-captive-portal-to-open/</guid><description>&lt;p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.&lt;/p></description><content:encoded><![CDATA[<p>Sometimes, when connecting to public Wi-Fi hotposts, especially in airports and
coffee shops, the captive portal gateway required to get internet access will
simply not show up.</p>
<p>The simplest way to force it to do so is to <a href="https://www.youtube.com/watch?v=DPqdyoTpyEs">turn the Wi-Fi off and on
again</a>.</p>
<p>Should it not work, the second way is to open your favorite browser and navigate
to <a href="https://captive.apple.com">captive.apple.com</a> (macOS, iOS).</p>]]></content:encoded></item><item><title>Organic Maps: off-line maps</title><link>https://www.perrotta.dev/2024/02/organic-maps-off-line-maps/</link><pubDate>Wed, 21 Feb 2024 00:36:57 +0100</pubDate><guid>https://www.perrotta.dev/2024/02/organic-maps-off-line-maps/</guid><description>&lt;p>&lt;a href="https://organicmaps.app/">https://organicmaps.app/&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Organic Maps is a free Android &amp;amp; iOS offline maps app for travelers,
tourists, hikers, drivers and cyclists based on OpenStreetMap data created
by the community. It is a privacy-focused, open-source fork of [&amp;hellip;]&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Organic Maps is one of the few applications nowadays that supports 100% of
features without an active Internet connection. Install Organic Maps,
download maps, throw away your SIM card, and go for a weeklong trip on a
single battery charge without any byte sent to the network.&lt;/p>
&lt;/blockquote>
&lt;p>Positive impressions:&lt;/p>
&lt;ul>
&lt;li>works great on iOS (didn&amp;rsquo;t test on Android yet)&lt;/li>
&lt;li>a great companion for &lt;strong>cycling&lt;/strong> within the city&lt;/li>
&lt;li>more fun and more lightweight than Google Maps&lt;/li>
&lt;li>low impact on device battery life&lt;/li>
&lt;li>extremely privacy friendly (no ads, no tracking, no push notifications, etc)&lt;/li>
&lt;li>extremely mobile data friendly (works fully offline)&lt;/li>
&lt;li>open-source, and without any IAP&lt;/li>
&lt;li>works out-of-the-box, no sign up necessary&lt;/li>
&lt;/ul>
&lt;p>Negative impressions:&lt;/p>
&lt;ul>
&lt;li>do not use it for public transit, it is terrible as it does not have
real-time data integration&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p><a href="https://organicmaps.app/">https://organicmaps.app/</a>:</p>
<blockquote>
<p>Organic Maps is a free Android &amp; iOS offline maps app for travelers,
tourists, hikers, drivers and cyclists based on OpenStreetMap data created
by the community. It is a privacy-focused, open-source fork of [&hellip;]</p>
</blockquote>
<blockquote>
<p>Organic Maps is one of the few applications nowadays that supports 100% of
features without an active Internet connection. Install Organic Maps,
download maps, throw away your SIM card, and go for a weeklong trip on a
single battery charge without any byte sent to the network.</p>
</blockquote>
<p>Positive impressions:</p>
<ul>
<li>works great on iOS (didn&rsquo;t test on Android yet)</li>
<li>a great companion for <strong>cycling</strong> within the city</li>
<li>more fun and more lightweight than Google Maps</li>
<li>low impact on device battery life</li>
<li>extremely privacy friendly (no ads, no tracking, no push notifications, etc)</li>
<li>extremely mobile data friendly (works fully offline)</li>
<li>open-source, and without any IAP</li>
<li>works out-of-the-box, no sign up necessary</li>
</ul>
<p>Negative impressions:</p>
<ul>
<li>do not use it for public transit, it is terrible as it does not have
real-time data integration</li>
</ul>]]></content:encoded></item><item><title>New domain</title><link>https://www.perrotta.dev/2024/02/new-domain/</link><pubDate>Sun, 04 Feb 2024 23:27:09 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/new-domain/</guid><description>&lt;p>I got a new domain! This blog is now available on &lt;a href="https://www.perrotta.dev/">https://www.perrotta.dev/&lt;/a>.
There&amp;rsquo;s also a redirect to it from &lt;a href="https://blog.perrotta.dev/">https://blog.perrotta.dev/&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>I got a new domain! This blog is now available on <a href="https://www.perrotta.dev/">https://www.perrotta.dev/</a>.
There&rsquo;s also a redirect to it from <a href="https://blog.perrotta.dev/">https://blog.perrotta.dev/</a>.</p>
<p>I don&rsquo;t know which one I like best, so <code>www</code> is the canonical subdomain for now.
Feel free to update the RSS in your feed reader, although
<a href="https://thiagowfx.github.io/">https://thiagowfx.github.io/</a> should keep working for a little longer, until (if
ever) I decide to migrate the static hosting off Github Pages.</p>
<p>This is a project I wanted to do since ages ago, and my goals go beyond merely
making my blog available under it. Stay tuned for more updates.</p>]]></content:encoded></item><item><title>WHOIS</title><link>https://www.perrotta.dev/2024/02/whois/</link><pubDate>Sun, 04 Feb 2024 00:20:15 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/whois/</guid><description>&lt;p>I got myself a brand new domain! As I play with it, expect documentation to
be added.&lt;/p>
&lt;p>&lt;strong>How to query the WHOIS for the domain?&lt;/strong>&lt;/p></description><content:encoded><![CDATA[<p>I got myself a brand new domain! As I play with it, expect documentation to
be added.</p>
<p><strong>How to query the WHOIS for the domain?</strong></p>
<ol>
<li>From the command line: <code>$ whois &lt;domain&gt;</code></li>
<li>From the registrar WHOIS, e.g. <a href="https://porkbun.com/whois">https://porkbun.com/whois</a>, <a href="https://www.gandi.net/en/domain/p/whois">https://www.gandi.net/en/domain/p/whois</a></li>
<li>From the registry WHOIS, e.g. <a href="https://lookup.icann.org/">https://lookup.icann.org/</a>, <a href="https://www.registry.google/whois-lookup/">https://www.registry.google/whois-lookup/</a></li>
</ol>
<p>It&rsquo;s a good idea to set up WHOIS privacy, so that your domain registration
details stay private. Some registrars such as Porkbun and NearlyFreeSpeech will
gladly offer an option for that, either for free or at a low cost, respectively.</p>]]></content:encoded></item><item><title>Anki: custom language card</title><link>https://www.perrotta.dev/2024/02/anki-custom-language-card/</link><pubDate>Sat, 03 Feb 2024 13:02:21 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/anki-custom-language-card/</guid><description>&lt;p>The more time you spent playing with &lt;a href="https://apps.ankiweb.net/">Anki&lt;/a>, the
more opinionated you become.&lt;/p>
&lt;p>Upon reading &lt;a href="https://fluent-forever.com/index.html">Fluent Forever&lt;/a> by Gabriel
Wyner, I got an itch to create my own Anki note template for learning
languages.&lt;/p></description><content:encoded><![CDATA[<p>The more time you spent playing with <a href="https://apps.ankiweb.net/">Anki</a>, the
more opinionated you become.</p>
<p>Upon reading <a href="https://fluent-forever.com/index.html">Fluent Forever</a> by Gabriel
Wyner, I got an itch to create my own Anki note template for learning
languages.</p>
<h2 id="the-template">The template</h2>
<p>There&rsquo;s no point explaining how to create a new template; the excellent <a href="https://docs.ankiweb.net/templates/intro.html">Anki
documentation</a> already does so.
Instead, I&rsquo;ll just list and explain the template I created.</p>
<p>The template is called &ldquo;Deutsch Language Card 🇩🇪&rdquo;. It has four fields:</p>
<ol>
<li>Front</li>
<li>Front Example</li>
<li>Back</li>
<li>Striked</li>
</ol>
<p>Front and Back come from the built-in template. There&rsquo;s nothing special about
them. I use &ldquo;Front&rdquo; for the canonical term in the foreign language I&rsquo;m
learning, and &ldquo;Back&rdquo; for the explanation in the base / native language I&rsquo;m
mostly familiar with<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Here&rsquo;s an example:</p>
<pre tabindex="0"><code>Front: das Buch
Back: book 📚
</code></pre><p>Whenever possible I include one or more emojis 😃 in the &ldquo;Back&rdquo; field.</p>
<p>The <strong>canonicalization</strong> of the &ldquo;Front&rdquo; field is important, and one of the best
(key, even!) features of Anki. It will smartly detect (and prevent!) duplicates
from being created. It is case sensitive, therefore it&rsquo;s important to create
one convention and stick to it.</p>
<p>&ldquo;Front Example&rdquo; is used to complement the &ldquo;Front&rdquo; field. It consists of one or
both of the following:</p>
<ul>
<li>A phrase or sentence containing the Front term.</li>
<li>A picture representing the Front term.</li>
</ul>
<p>To increase overall retention, it&rsquo;s always best to add cues familiar to your
context.</p>
<p>Add phrases that resonate with you or that you find in textbooks or
blog posts that resonate with you. In my experience, adding random phrases is
not effective.</p>
<p>Add images that represent well that you&rsquo;re describing and that
resonate with you. Photos that you take yourself are also fair game!</p>
<p>&ldquo;Striked&rdquo; is to disambiguate synonyms or false cognates. For example:</p>
<pre tabindex="0"><code>Front: der Sturm
Back: storm ⛈️
Striked: das Gewitter, das Unwetter
</code></pre><p>When I am reviewing the Back card, I want to cue myself not to think about the
striked terms.</p>
<h2 id="the-source-code">The source code</h2>
<h3 id="the-front-card">The Front card</h3>
<pre tabindex="0"><code class="language-anki" data-lang="anki">{{Front}} {{tts de_DE:Front}}

{{#Front Example}}
&lt;br&gt;
&lt;i&gt;{{Front Example}}&lt;/i&gt; {{tts de_DE:Front Example}}
{{/Front Example}}
</code></pre><p>The front card includes a text-to-speech sample that is generated on-the-fly.
It works very well on macOS and iOS. In fact, that&rsquo;s main reason why the
template is called &ldquo;Deutsch Language Card&rdquo; instead of just &ldquo;Language Card&rdquo;. The
text-to-speech engine is customized to have an accent in the given language.
For (High) German, that is <code>de_DE</code>.</p>
<h3 id="the-back-card">The Back card</h3>
<pre tabindex="0"><code class="language-anki" data-lang="anki">{{Back}}

{{#Striked}}
&lt;br&gt;&lt;br&gt;
&lt;s&gt;{{Striked}}&lt;/s&gt;
{{/Striked}}
</code></pre><p>The striked terms are <del>striked</del>, as you would expect.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Interestingly I prefer to use English most of the time, even though it is
not my mother tongue.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Integrating terraform with ansible</title><link>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</link><pubDate>Thu, 01 Feb 2024 14:02:28 -0300</pubDate><guid>https://www.perrotta.dev/2024/02/integrating-terraform-with-ansible/</guid><description>&lt;p>This post is a follow-up of &lt;a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.&lt;/p>
&lt;/blockquote>
&lt;p>Before we extensively use Ansible to configure our VPS instance, first let&amp;rsquo;s
set up a basic integration between Terraform and Ansible.&lt;/p></description><content:encoded><![CDATA[<p>This post is a follow-up of <a href="https://www.perrotta.dev/2024/01/terraforming-a-linode-hello-world/">Terraforming a Linode: hello world</a>.</p>
<blockquote>
<p>In a future post, we will continue from here by using Ansible to install and
set up Miniflux in our new Linode.</p>
</blockquote>
<p>Before we extensively use Ansible to configure our VPS instance, first let&rsquo;s
set up a basic integration between Terraform and Ansible.</p>
<p>First of all, here&rsquo;s an overview of where I stopped last time. There were a
couple of lightweight modifications since then. I&rsquo;ll explain some of them
below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> var<span style="color:#a6e22e">iables</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;github_username&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;thiagowfx&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_hostname&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;coruscant&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;linode_region&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = <span style="color:#a6e22e">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = <span style="color:#e6db74">&#34;eu-central&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>All variables were moved to a <code>variables.tf</code> file. This is to follow standard
terraform
<a href="https://developer.hashicorp.com/terraform/language/modules/develop/structure">conventions</a>
/ recommendations for module structures. Furthermore, it becomes easier to
manage variables when they are all stored in a single place.</p>
<p>The main module file now looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">main</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">http</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;hashicorp/http&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">linode</span> = {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">source</span> = <span style="color:#e6db74">&#34;linode/linode&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">provider</span> <span style="color:#e6db74">&#34;linode&#34;</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#e6db74">&#34;github_keys&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;https://api.github.com/users/</span><span style="color:#e6db74">${</span>var.<span style="color:#a6e22e">github_username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/keys&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">locals</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">keys</span> = jsondecode(data.<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">github_keys</span>.<span style="color:#a6e22e">response_body</span>)[<span style="color:#f92672">*</span>].<span style="color:#a6e22e">key</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;linode_instance&#34;</span> <span style="color:#e6db74">&#34;nanode&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>             = <span style="color:#e6db74">&#34;g6-nanode-1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">image</span>            = <span style="color:#e6db74">&#34;linode/alpine3.19&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">label</span>            = var.<span style="color:#a6e22e">linode_hostname</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">region</span>           = var.<span style="color:#a6e22e">linode_region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authorized_keys</span>  = <span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">keys</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backups_enabled</span>  = <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">booted</span>           = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">watchdog_enabled</span> = <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I removed the token from the linode provider. Now it is supplied via the
<code>LINODE_TOKEN</code> environment variable. In order to automatically populate that
variable, I use <a href="https://www.perrotta.dev/2022/01/direnv-automate-your-environment-variables/"><code>direnv</code></a>. There&rsquo;s an <code>.envrc</code> file that provides its value, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># terraform init</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export LINODE_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my-token-here&#34;</span>
</span></span></code></pre></div><p>I also created a repository for this project:
<a href="https://github.com/thiagowfx/knol">https://github.com/thiagowfx/knol</a>. That&rsquo;s enough for preliminaries, now let&rsquo;s
go back to Ansible.</p>
<p>The first component we&rsquo;ll need is an Ansible
<a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">inventory</a>
file, containing the IP address of the host we&rsquo;ll manage. It could look like
this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#66d9ef">[all]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">1.2.3.4 ansible_user</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
</span></span></code></pre></div><p>&hellip;wherein <code>1.2.3.4</code> is the IP address of our VPS.</p>
<p>That said, due to the fact the VPS instance is created dynamically, maintaining
that IP address manually would be tedious. Therefore, let&rsquo;s have Terraform
manage it.</p>
<p>We can do so with a
<a href="https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file"><code>local_file</code></a>.
Heck, we could even use a
<a href="https://registry.terraform.io/providers/hashicorp/template/latest/docs/data-sources/file"><code>template_file</code></a>,
however it would be overkill as there are only two simple lines in our
inventory at this point. A <code>local_file</code> is created upon <code>terraform apply</code> and
deleted upon <code>terraform destroy</code>. Therefore it doesn&rsquo;t even need to be tracked
by our VCS:</p>
<pre tabindex="0"><code>resource &#34;local_file&#34; &#34;ansible_inventory&#34; {
  content  = &lt;&lt;-EOF
[all]
${linode_instance.nanode.ip_address} ansible_user=root
EOF
  filename = &#34;inventory.ini&#34;
  file_permission = &#34;0644&#34;
}
</code></pre><p>Once we run terraform (plan + apply), an <code>inventory.ini</code> file should be created
with the above contents.</p>
<p>Because the IP address is ephemeral and dynamic, we should have a
straightforward way to see its value. A terraform
<a href="https://developer.hashicorp.com/terraform/language/values/outputs"><code>output</code></a>
is perfect for that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#f92672">%</span> <span style="color:#a6e22e">cat</span> <span style="color:#a6e22e">outputs</span>.<span style="color:#a6e22e">tf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">output</span> <span style="color:#e6db74">&#34;ip_address&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">value</span> = <span style="color:#a6e22e">linode_instance</span>.<span style="color:#a6e22e">nanode</span>.<span style="color:#a6e22e">ip_address</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Later on (after terraforming) we will be able to use <code>terraform output</code> to see
the server IP address.</p>
<p>We have the inventory file. Now we need a
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html">playbook</a>.
A playbook contains a sequence of tasks to be applied to our server.</p>
<p>Let&rsquo;s start with a basic playbook that just installs and starts <code>nginx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">all</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install the web server (nginx)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">community.general.apk</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Start the web server</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">state</span>: <span style="color:#ae81ff">started</span>
</span></span></code></pre></div><p>Save this to a <code>playbook.yml</code> file.</p>
<p>After terraforming, we should now be able to run ansible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% ansible-playbook -i inventory.ini playbook.yml
</span></span></code></pre></div><p>In order to make this setup more ergonomic, let&rsquo;s create a <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> terraform ansible
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ansible</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	ansible-playbook -i inventory.ini playbook.yml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">terraform</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> init
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> plan
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> destroy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all ansible terraform clean
</span></span></code></pre></div><p>Then we can just run <code>make terraform</code> or <code>make ansible</code> for granular steps. Or
just <code>make</code> to run everything in the right order.</p>
<p>I extracted the <code>terraform</code> binary to its own variable because it facilitates
the use of <a href="https://opentofu.org/">OpenTofu</a> (a fork) in lieu of terraform.</p>
<p>And that&rsquo;s it for today! In a future post, we&rsquo;ll look into extending our
Ansible usage to fully bootstrap Miniflux on the server.</p>]]></content:encoded></item></channel></rss>