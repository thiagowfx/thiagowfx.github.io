<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>not just serendipity</title><link>https://perrotta.dev/posts/</link><description>Recent content on not just serendipity</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright © 2021 - 2025 Thiago Perrotta · [RSS](/index.xml) · [hugo ʕ•ᴥ•ʔ bear](https://github.com/janraasch/hugo-bearblog/)</copyright><lastBuildDate>Sat, 21 Dec 2024 16:02:54 -0300</lastBuildDate><atom:link href="https://perrotta.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>★ Default apps 2024</title><link>https://perrotta.dev/2024/12/default-apps-2024/</link><pubDate>Sat, 21 Dec 2024 16:02:54 -0300</pubDate><guid>https://perrotta.dev/2024/12/default-apps-2024/</guid><description>&lt;p>The list of my default apps for this year.&lt;/p>
&lt;p>In the past I would maintain an &lt;a href="https://uses.tech/">&amp;ldquo;uses&amp;rdquo;&lt;/a> page in my blog, but I no longer believe in it.
User needs change all the time, and it&amp;rsquo;s a chore to keep them up-to-date.
People shouldn&amp;rsquo;t be defined by the software they use.&lt;/p>
&lt;p>That said, having a clean snapshot of the software I use at a fixed point in time isn&amp;rsquo;t a bad proposition.
It doesn&amp;rsquo;t need to be maintained.
I will probably look back at it within 5 years and laugh at myself for how many things changed.
And also for how many didn&amp;rsquo;t.&lt;/p>
&lt;ul>
&lt;li>Browser: Google Chrome on macOS, Chromium on Linux, Safari on iOS.&lt;/li>
&lt;li>Search: A combination of Google and DuckDuckGo (mostly for their &lt;a href="https://duckduckgo.com/bangs">!bangs&lt;/a>).&lt;/li>
&lt;li>Writing: A combination of VSCode, &lt;code>vim&lt;/code> and &lt;a href="https://github.com/MarkEdit-app/MarkEdit">MarkEdit&lt;/a> (macOS markdown app). I never got around to long-form writing in Obsidian or Logseq, however it&amp;rsquo;s something I strive to.&lt;/li>
&lt;li>Cloud File Storage: There&amp;rsquo;s no need to share this. Basic OpSec. Why would people share it?&lt;/li>
&lt;li>Chat: WhatsApp remains king in terms of popularity, despite Telegram being superior from an architectural and usability perspective for power users. Facebook Messenger is officially dead at this point. And I&amp;rsquo;m too much of a millennial for all other apps (Discord, Matrix, etc). Disappearing messages exist in all of these, except Instagram.&lt;/li>
&lt;li>Scheduling: There&amp;rsquo;s no real choice here. You use the platform your employer uses. Otherwise, Google Calendar is the most sensible choice other than self-hosting.&lt;/li>
&lt;li>Video Calls: Ditto. I am way too used to Google Meet to justify switching to an alternative at this point.&lt;/li>
&lt;li>Music: Spotify, hands down. YouTube Music is a good fallback. There&amp;rsquo;s no need to pay for YouTube Premium for music, do your research.&lt;/li>
&lt;li>Podcasts: Overcast on iOS.&lt;/li>
&lt;li>Password Management: Once again, why would you share this?&lt;/li>
&lt;li>Code Editor: VScode and &lt;code>vim&lt;/code>. Maybe I&amp;rsquo;ll switch to &lt;code>neovim&lt;/code> at some point. I refrain from using IDEs in general but, when I need to, JetBrains is the answer. I tried &lt;a href="https://zed.dev/">&lt;code>zed&lt;/code>&lt;/a> this year but wasn&amp;rsquo;t convinced, and their core team is quite small. The flurry of &amp;ldquo;AI&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> editors should be ignored, as none of them are likely to stick long-term. Instead, it&amp;rsquo;s better to invest in &amp;ldquo;AI&amp;rdquo; tooling that is editor agnostic; for example, Simon Willison&amp;rsquo;s &lt;a href="https://github.com/simonw/llm">&lt;code>llm&lt;/code>&lt;/a>, or GitHub Copilot.&lt;/li>
&lt;li>Terminal: iTerm2 on macOS. I haven&amp;rsquo;t used desktop linux in a while (:sad:), but I&amp;rsquo;d probably still stick to Tilix and/or Alacritty there. I no longer use hterm (ChromeOS).&lt;/li>
&lt;li>VPN: Unless you&amp;rsquo;re rolling your own, it doesn&amp;rsquo;t matter too much. Avoid the big players if you can afford to.&lt;/li>
&lt;li>Bookmarks: None. &lt;a href="https://www.goodreads.com/book/show/25614984-spark-joy">Absolutely none&lt;/a>. When I need to store &lt;em>transient&lt;/em> link lists, I use my Second Brain app to do so.&lt;/li>
&lt;li>Read It Later: Ditto as above. Otherwise: starring articles on Miniflux, or keeping Safari tabs open until I get to them, or parking a handful of items in an &amp;ldquo;inbox&amp;rdquo; browser bookmarks folder.&lt;/li>
&lt;li>Mail Client: The official clients of my email providers. No agnostic app at this time. It&amp;rsquo;s especially inconvenient to do so on iOS.&lt;/li>
&lt;li>Mail Server: N/A.&lt;/li>
&lt;li>Launcher: &lt;code>Cmd-Space&lt;/code> on macOS a.k.a. Spotlight. I keep Raycast around but I rarely use it. On Linux &lt;code>i3-dmenu-desktop&lt;/code> is still my favorite.&lt;/li>
&lt;li>Screenshots: &lt;code>Cmd-Shift-4&lt;/code> on macOS, or &lt;code>scrot&lt;/code> on Linux.&lt;/li>
&lt;li>Menu Bar: &lt;a href="https://github.com/dwarvesf/hidden">Hidden Bar&lt;/a>. It&amp;rsquo;s free, and available as a cask on homebrew.&lt;/li>
&lt;li>Containers: Rancher Desktop.&lt;/li>
&lt;li>Automation: None. I tried Hammerspoon this year but found no use for it.&lt;/li>
&lt;li>Second Brain: A mixture of Obsidian and Logseq. Which I&amp;rsquo;d really like to end, it would be easier to have a single app to rule them all, as they both support multiple vaults / graphs anyway (e.g. to partition personal vs work notes).&lt;/li>
&lt;li>Operating System: &lt;a href="https://alpinelinux.org/">Alpine Linux&lt;/a> is my current favorite for servers, and I&amp;rsquo;m biased anyway because I maintain a couple of aports (packages) there. For desktop, it&amp;rsquo;s awfully hard to use anything other than macOS ever since M1 processors got released. I miss Linux desktop from time to time but realistically it&amp;rsquo;s no longer an intrinsic goal of mine; that said, I&amp;rsquo;d likely go back to my beloved Arch Linux should that ever reoccur.&lt;/li>
&lt;li>Shell: &lt;code>zsh&lt;/code> + &lt;a href="https://grml.org/zsh/">&lt;code>grml-zsh-config&lt;/code>&lt;/a>, no change here. Sometimes I think of migrating to &lt;code>fish&lt;/code>, but the POSIX incompability always discourages me to do so.&lt;/li>
&lt;li>Terminal Multiplexer: &lt;code>tmux&lt;/code>, but only for remote sessions (&lt;code>ssh&lt;/code>). Locally I tend to just open new terminal tabs on VSCode and/or iTerm2. Alas, &lt;code>tmux&lt;/code> + &lt;code>VSCode&lt;/code> do not play well together anyway (citation needed, for another day).&lt;/li>
&lt;/ul></description></item><item><title>Reply to: I Hate the News</title><link>https://perrotta.dev/2024/12/reply-to-i-hate-the-news/</link><pubDate>Sat, 21 Dec 2024 01:44:16 -0300</pubDate><guid>https://perrotta.dev/2024/12/reply-to-i-hate-the-news/</guid><description>&lt;p>Link to the &lt;a href="http://www.aaronsw.com/weblog/hatethenews">original article&lt;/a> from
2006 from the late Aaron Swartz:&lt;/p>
&lt;blockquote>
&lt;p>Some people start their day by reading The New York Times. Others end it by
watching the nightly news. Some get it from The Daily Show. Others download it
from a variety weblogs. Some keep up-to-the-minute by following CNN. Others
have instant news updates automatically text messaged to their phone. But
everybody seems to agree: it’s a citizen’s responsibility to keep up with the
news. Everybody except me.&lt;/p></description></item><item><title>New theme: BearBlog</title><link>https://perrotta.dev/2024/12/new-theme-bearblog/</link><pubDate>Sat, 21 Dec 2024 01:30:10 -0300</pubDate><guid>https://perrotta.dev/2024/12/new-theme-bearblog/</guid><description>&lt;p>Inspired by &lt;a href="https://bearblog.dev/">Bear Blog&lt;/a>, via &lt;a href="https://sive.rs/now2">Derek
Sivers&lt;/a>, I updated my Hugo theme to resemble its looks and
simplicity.&lt;/p>
&lt;p>The base theme is &lt;a href="https://github.com/janraasch/hugo-bearblog/">hugo-bearblog&lt;/a>,
but I&amp;rsquo;ve overridden most of its files. I should probably fork it at some point.&lt;/p>
&lt;p>Side effect: no JS is served anymore. And it still scores
&lt;a href="https://pagespeed.web.dev/analysis/https-perrotta-dev/eyfna507jk?form_factor=desktop">100&lt;/a>
on lighthouse.&lt;/p></description></item><item><title>Advent of Code: Day 8</title><link>https://perrotta.dev/2024/12/advent-of-code-day-8/</link><pubDate>Fri, 20 Dec 2024 22:47:51 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-8/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/8">Day #8&lt;/a> puzzle.&lt;/p></description></item><item><title>hugo: merge two tags</title><link>https://perrotta.dev/2024/12/hugo-merge-two-tags/</link><pubDate>Fri, 20 Dec 2024 00:46:50 -0300</pubDate><guid>https://perrotta.dev/2024/12/hugo-merge-two-tags/</guid><description>&lt;p>So far I&amp;rsquo;ve been using the &lt;code>dev&lt;/code> and &lt;code>devops&lt;/code> tags pretty much interchangeably
(and inconsistently) in this blog. There&amp;rsquo;s no real difference: Dev and Ops work
overlap quite a lot. It&amp;rsquo;s time to do some house cleaning and merge them. I
choose &lt;code>dev&lt;/code> as it is more generic / agnostic.&lt;/p></description></item><item><title>git: push --force with style</title><link>https://perrotta.dev/2024/12/git-push--force-with-style/</link><pubDate>Fri, 20 Dec 2024 00:38:07 -0300</pubDate><guid>https://perrotta.dev/2024/12/git-push--force-with-style/</guid><description>&lt;p>TIL:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>git push --force&lt;/code>: This command forcefully pushes your changes to the remote
branch, even if it results in overwriting or losing commits. It does not
consider the current state of the remote branch. If someone else has pushed
changes to the same branch in the meantime, their changes will be lost.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>git push --force-with-lease&lt;/code>: This command is a safer alternative to git push
— force. It will only force push if the remote branch matches your
expectations. It checks if someone else has pushed changes to the branch in
the meantime. If the branch on the remote repository has not diverged (i.e.,
no new commits were pushed by others), your push will be allowed. If someone
else has pushed changes, the push will be rejected, ensuring you do not
accidentally overwrite someone else’s work.&lt;/p></description></item><item><title>Manage your Kindle library online</title><link>https://perrotta.dev/2024/12/manage-your-kindle-library-online/</link><pubDate>Thu, 19 Dec 2024 22:53:39 -0300</pubDate><guid>https://perrotta.dev/2024/12/manage-your-kindle-library-online/</guid><description>&lt;p>Managing your Kindle library from the ground up directly in your Kindle device
is very slow.&lt;/p>
&lt;p>Instead, do it
&lt;a href="https://www.amazon.ca/hz/mycd/digital-console/contentlist/allcontent/dateDsc">online&lt;/a>]&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
via your web browser in a computer!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The link is for Amazon Canada 🇨🇦.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>pre-commit: create hooks for unsupported tools</title><link>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</link><pubDate>Tue, 17 Dec 2024 22:46:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/pre-commit-create-hooks-for-unsupported-tools/</guid><description>&lt;p>When using &lt;a href="https://pre-commit.com/">pre-commit.com&lt;/a>, in an ideal world, every
formatter / linter / code analyzer would have a &lt;code>.pre-commit-config.yaml&lt;/code> file
in its repository root.&lt;/p>
&lt;p>In the real world, that&amp;rsquo;s not always the case.&lt;/p>
&lt;p>A recent example: &lt;a href="https://github.com/cloudflare/pint">cloudflare/pint&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Prometheus rule linter/validator&lt;/p>
&lt;/blockquote>
&lt;p>It is a golang binary that lints &lt;a href="https://prometheus.io/">prometheus&lt;/a> rules.&lt;/p>
&lt;p>Can we bridge the gap?&lt;/p></description></item><item><title>skopeo: operate container images and registries</title><link>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</link><pubDate>Tue, 17 Dec 2024 17:49:31 -0300</pubDate><guid>https://perrotta.dev/2024/12/skopeo-operate-container-images-and-registries/</guid><description>&lt;p>When working with &lt;code>docker&lt;/code> and private image registries, a common workflow is to copy images from one private registry in the cloud to another. This can be done with &lt;a href="https://github.com/containers/skopeo/">&lt;code>skopeo&lt;/code>&lt;/a>.&lt;/p>
&lt;p>This post includes some common recipes for it.&lt;/p>
&lt;h2 id="usage-1-default--root-to-staging">Usage 1) Default / Root to Staging&lt;/h2>
&lt;p>From the default / root account registry to the staging registry:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>skopeo sync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile default&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --dest-creds &lt;span style="color:#e6db74">&amp;#34;AWS:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws ecr get-login-password --region &lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span> --profile staging&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --override-os linux --override-arch amd64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --src docker --dest docker &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_root&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>/&lt;span style="color:#f92672">{&lt;/span>repository&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>tag&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">{&lt;/span>account_id_staging&lt;span style="color:#f92672">}&lt;/span>.dkr.ecr.&lt;span style="color:#f92672">{&lt;/span>region&lt;span style="color:#f92672">}&lt;/span>.amazonaws.com/&lt;span style="color:#f92672">{&lt;/span>org&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example values&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p></description></item><item><title>Kubernetes: tail logs from pods with stern</title><link>https://perrotta.dev/2024/12/kubernetes-tail-logs-from-pods-with-stern/</link><pubDate>Tue, 17 Dec 2024 16:37:16 -0300</pubDate><guid>https://perrotta.dev/2024/12/kubernetes-tail-logs-from-pods-with-stern/</guid><description>&lt;p>You can always use &lt;code>kubectl logs -n {namespace} {pod} [-c {container}] -f&lt;/code> to
inspect logs from a specific pod&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Nonetheless that doesn&amp;rsquo;t scale when you don&amp;rsquo;t know which pod you want in the
first place.&lt;/p></description></item><item><title>Kubernetes: debugging services</title><link>https://perrotta.dev/2024/12/kubernetes-debugging-services/</link><pubDate>Mon, 16 Dec 2024 10:14:11 -0300</pubDate><guid>https://perrotta.dev/2024/12/kubernetes-debugging-services/</guid><description>&lt;p>I am deploying a new helm chart to our staging environments, and needed a way to
ensure its dependencies in &lt;code>values.yaml&lt;/code> are properly configured.&lt;/p>
&lt;p>From the official kubernetes
&lt;a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/">documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>An issue that comes up rather frequently for new installations of Kubernetes
is that a Service is not working properly. You&amp;rsquo;ve run your Pods through a
Deployment (or other workload controller) and created a Service, but you get
no response when you try to access it. This document will hopefully help you
to figure out what&amp;rsquo;s going wrong.&lt;/p>
&lt;/blockquote></description></item><item><title>★ Just</title><link>https://perrotta.dev/2024/12/just/</link><pubDate>Fri, 13 Dec 2024 01:16:41 -0300</pubDate><guid>https://perrotta.dev/2024/12/just/</guid><description>&lt;p>&lt;a href="https://github.com/casey/just">Just&lt;/a> is a command runner, a modern replacement
for GNU Make.&lt;/p></description></item><item><title>Advent of Code: Day 7</title><link>https://perrotta.dev/2024/12/advent-of-code-day-7/</link><pubDate>Thu, 12 Dec 2024 23:12:31 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-7/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/7">Day #7&lt;/a> puzzle.&lt;/p></description></item><item><title>Advent of Code: discussion group</title><link>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</link><pubDate>Thu, 12 Dec 2024 19:30:53 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-discussion-group/</guid><description>&lt;p>Assuming you are following this year&amp;rsquo;s advent of code, you are welcome to join
our Telegram discussion group &lt;a href="https://t.me/+mtPcW45EuFBjNGMx">here&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. It is
a supergroup, one of its channels is &lt;code>#adventofcode&lt;/code>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>It&amp;rsquo;s a moderated group, and this invitation link will expire within 2
weeks of the time of this post.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Advent of Code: Day 11</title><link>https://perrotta.dev/2024/12/advent-of-code-day-11/</link><pubDate>Thu, 12 Dec 2024 19:15:35 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-11/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/11">Day #11&lt;/a> puzzle.&lt;/p></description></item><item><title>Advent of Code: Day 6</title><link>https://perrotta.dev/2024/12/advent-of-code-day-6/</link><pubDate>Thu, 12 Dec 2024 15:26:35 -0300</pubDate><guid>https://perrotta.dev/2024/12/advent-of-code-day-6/</guid><description>&lt;p>Link to &lt;a href="https://adventofcode.com/2024/day/6">Day #6&lt;/a> puzzle.&lt;/p></description></item><item><title>Semantic versioning constraints</title><link>https://perrotta.dev/2024/12/semantic-versioning-constraints/</link><pubDate>Thu, 12 Dec 2024 12:34:39 -0300</pubDate><guid>https://perrotta.dev/2024/12/semantic-versioning-constraints/</guid><description>&lt;p>When working with semantic versioning a.k.a. &lt;a href="https://semver.org/">semver&lt;/a>, it&amp;rsquo;s
often useful to use range constraints&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to express the versions you&amp;rsquo;re
interested in.&lt;/p>
&lt;p>The most useful ones are the tilde (&lt;code>~&lt;/code>) and the circumflex / hat / caret
(&lt;code>^&lt;/code>)&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>~4.2.1&lt;/code>: picks up &lt;code>4.2.x&lt;/code> for &lt;code>x &amp;gt;= 1&lt;/code>&lt;/li>
&lt;li>&lt;code>^5.0.2&lt;/code>: picks up &lt;code>5.x.y&lt;/code> for &lt;code>x &amp;gt;= 0&lt;/code> and &lt;code>y &amp;gt;= 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Popular software tooling that uses them include:&lt;/p>
&lt;ul>
&lt;li>nodejs / npm packages&lt;/li>
&lt;li>terraform&lt;/li>
&lt;li>ruby gems (here &lt;code>~&amp;gt;&lt;/code> is used instead of simply &lt;code>~&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>.gitignore without .gitignore</title><link>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</link><pubDate>Wed, 11 Dec 2024 11:44:12 -0300</pubDate><guid>https://perrotta.dev/2024/12/.gitignore-without-.gitignore/</guid><description>&lt;p>&lt;code>.gitignore&lt;/code> is the canonical way to exclude files from your git repository.&lt;/p>
&lt;p>In some situations, however, you may want to exclude files without adding them
to &lt;code>.gitignore&lt;/code>, because they are only relevant to you, as opposed to your
teammates.&lt;/p>
&lt;p>Common examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ackrc&lt;/code>: exclude file patterns from search with &lt;code>ack&lt;/code> – not everyone in your
team may use &lt;code>ack&lt;/code> at all&lt;/li>
&lt;li>&lt;code>.envrc&lt;/code>: &lt;code>direnv&lt;/code> integration to automatically run a couple of commands
whenever &lt;code>cd&lt;/code>&amp;lsquo;ing to within the repository – not everyone in your team may use
&lt;code>direnv&lt;/code> at all&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p></description></item><item><title>Alpine Linux 3.21</title><link>https://perrotta.dev/2024/12/alpine-linux-3.21/</link><pubDate>Tue, 10 Dec 2024 19:52:33 -0300</pubDate><guid>https://perrotta.dev/2024/12/alpine-linux-3.21/</guid><description>&lt;p>&lt;a href="https://alpinelinux.org/posts/Alpine-3.21.0-released.html">Alpine Linux 3.21.0&lt;/a>
got released last Thursday.&lt;/p></description></item><item><title>Docker build: ignore cache</title><link>https://perrotta.dev/2024/12/docker-build-ignore-cache/</link><pubDate>Tue, 10 Dec 2024 19:45:42 -0300</pubDate><guid>https://perrotta.dev/2024/12/docker-build-ignore-cache/</guid><description>&lt;p>To build a docker image completely from scratch, without reusing cache layers on
your system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker build --no-cache -f Dockerfile . -t &lt;span style="color:#f92672">{&lt;/span>image name&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>image tag&lt;span style="color:#f92672">}&lt;/span> --platform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>linux/amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>