<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on not just serendipity</title><link>https://www.perrotta.dev/posts/</link><description>Recent content in Posts on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 · RSS · Made with ♥ in 🇨🇦</copyright><lastBuildDate>Thu, 14 Nov 2024 15:05:49 +0100</lastBuildDate><atom:link href="https://www.perrotta.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Helm: JSON schema generation</title><link>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</link><pubDate>Thu, 14 Nov 2024 15:05:49 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-json-schema-generation/</guid><description>&lt;p>Helm charts support the inclusion of a &lt;code>values.schema.json&lt;/code> file to validate
&lt;code>values.yaml&lt;/code>. Documentation: &lt;a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files&lt;/a>&lt;/p>
&lt;p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &amp;ldquo;shift left&amp;rdquo; the lifecycle of your helm releases.&lt;/p>
&lt;p>For a pre-existing &lt;code>values.yaml&lt;/code> file, it may be quite tedious to generate the
schema from scratch, by hand.&lt;/p>
&lt;p>&lt;strong>Can we automate this process?&lt;/strong>&lt;/p></description><content:encoded><![CDATA[<p>Helm charts support the inclusion of a <code>values.schema.json</code> file to validate
<code>values.yaml</code>. Documentation: <a href="https://helm.sh/docs/topics/charts/#schema-files">https://helm.sh/docs/topics/charts/#schema-files</a></p>
<p>A JSON schema is akin to defining the structure of and type-annotating a JSON
file. It helps to &ldquo;shift left&rdquo; the lifecycle of your helm releases.</p>
<p>For a pre-existing <code>values.yaml</code> file, it may be quite tedious to generate the
schema from scratch, by hand.</p>
<p><strong>Can we automate this process?</strong></p>
<p>Of course we can.</p>
<p>One possibility is to use GenAI / LLMs. This is out of scope of this post.</p>
<p>Another possibility is to leverage a helm plug-in to do so.</p>
<p>I had a good experience with <a href="https://github.com/karuppiah7890/helm-schema-gen">https://github.com/karuppiah7890/helm-schema-gen</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm plugin install https://github.com/karuppiah7890/helm-schema-gen.git
</span></span><span style="display:flex;"><span>cd path/to/helm/chart
</span></span><span style="display:flex;"><span>helm schema-gen values.yaml | tee values.schema.json
</span></span></code></pre></div><p>Afterwards, test the generated schema with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm lint path/to/helm/chart
</span></span></code></pre></div><p>Usually I need to do some follow-up edits to the generated file, including:</p>
<ul>
<li>add string enum types for a tighter validation of strings</li>
<li>mark certain fields as required</li>
<li>mark certain fields with <code>additionalProperties: &quot;false&quot;</code></li>
<li>augment <code>[&quot;null&quot;]</code> to <code>[&quot;null&quot;, &quot;string&quot;]</code> for keys that do not have a
default value</li>
</ul>
<p>It&rsquo;s worth to observe that, at the time of this publication, the following
notice is present in the repository of the plug-in:</p>
<blockquote>
<p>This repository has been archived by the owner on Aug 31, 2021. It is now
read-only.</p>
</blockquote>
<p>Nonetheless, it still works well.</p>]]></content:encoded></item><item><title>sort deterministically</title><link>https://www.perrotta.dev/2024/11/sort-deterministically/</link><pubDate>Tue, 12 Nov 2024 11:25:12 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/sort-deterministically/</guid><description>&lt;p>We had the following code in a CI pipeline:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find apps/base/ -type d -exec basename &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\;&lt;/span> | sort | sed -e &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s/^/- /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It lists all directories in &lt;code>apps/base&lt;/code>.
We add &lt;code>sort&lt;/code> to make the output canonical.
The &lt;code>sed&lt;/code> part is just to make an unordered list out of it.&lt;/p>
&lt;p>There was an issue though.&lt;/p></description><content:encoded><![CDATA[<p>We had the following code in a CI pipeline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>find apps/base/ -type d -exec basename <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> | sort | sed -e <span style="color:#960050;background-color:#1e0010">&#39;</span>s/^/- /
</span></span></code></pre></div><p>It lists all directories in <code>apps/base</code>.
We add <code>sort</code> to make the output canonical.
The <code>sed</code> part is just to make an unordered list out of it.</p>
<p>There was an issue though.</p>
<p>In my machine, and in CI (GitHub Actions), the following output was produced:</p>
<pre tabindex="0"><code>garden-info-export
gardenia
</code></pre><p>I use macOS + <code>sort</code> from GNU <code>coreutils</code> via homebrew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% which sort
</span></span><span style="display:flex;"><span>/opt/homebrew/opt/coreutils/libexec/gnubin/sort
</span></span><span style="display:flex;"><span>% sort --version
</span></span><span style="display:flex;"><span>sort <span style="color:#f92672">(</span>GNU coreutils<span style="color:#f92672">)</span> 9.5
</span></span><span style="display:flex;"><span>Copyright <span style="color:#f92672">(</span>C<span style="color:#f92672">)</span> <span style="color:#ae81ff">2024</span> Free Software Foundation, Inc.
</span></span><span style="display:flex;"><span>License GPLv3+: GNU GPL version <span style="color:#ae81ff">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;.
</span></span><span style="display:flex;"><span>This is free software: you are free to change and redistribute it.
</span></span><span style="display:flex;"><span>There is NO WARRANTY, to the extent permitted by law.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Written by Mike Haertel and Paul Eggert.
</span></span></code></pre></div><p>In a coworker’s machine (Ubuntu Linux), it produced the following instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gardenia
</span></span><span style="display:flex;"><span>garden-info-export
</span></span></code></pre></div><p>We had the same <code>locale</code> (<code>en_US.UTF-8</code>), and the coworker was also using <code>sort</code> from GNU <code>coreutils</code>. Puzzling.</p>
<p>In order to force a deterministic output, I proposed to use <code>-d</code>. From <code>sort(1)</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>-d, --dictionary-order
</span></span><span style="display:flex;"><span>	Consider only blank spaces and alphanumeric characters in comparisons.
</span></span></code></pre></div><p>And therein reproducibility was achieved<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I do not really know why the outputs were different even with the same <code>locale</code> (<code>LANG</code>, <code>LC_COLLATE</code>, <code>LC_ALL</code>, etc). For future reference, my current locale:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><p>And my coworker’s:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ locale
</span></span><span style="display:flex;"><span>LANG<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LANGUAGE<span style="color:#f92672">=</span>en_US
</span></span><span style="display:flex;"><span>LC_CTYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_NUMERIC<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TIME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_COLLATE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_MONETARY<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MESSAGES<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>
</span></span><span style="display:flex;"><span>LC_PAPER<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_NAME<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ADDRESS<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_TELEPHONE<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_MEASUREMENT<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_IDENTIFICATION<span style="color:#f92672">=</span>en_US.UTF-8
</span></span><span style="display:flex;"><span>LC_ALL<span style="color:#f92672">=</span>
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this case, the coworker’s version became the canonical one.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Helm: enforce the directory name matches the chart name</title><link>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</link><pubDate>Tue, 12 Nov 2024 11:13:06 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/helm-enforce-the-directory-name-matches-the-chart-name/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a helm chart called &lt;code>foo&lt;/code>, enforce that its &lt;code>Chart.yaml&lt;/code> file lives in a directory called &lt;code>foo&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a helm chart called <code>foo</code>, enforce that its <code>Chart.yaml</code> file lives in a directory called <code>foo</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="background">Background</h2>
<p>In 2016, this <a href="https://github.com/helm/helm/pull/818/">used to be</a> the default behavior in Helm:</p>
<blockquote>
<p>fix(helm): produce error if package name is inconsistent</p>
</blockquote>
<p>In 2018, this enforcement was <a href="https://github.com/helm/helm/pull/4141">removed</a>:</p>
<blockquote>
<p>remove dirname constraint on helm package</p>
</blockquote>
<p>We would like to reintroduce this requirement in our Helm charts codebase, as a best practice, to prevent chart name collisions.</p>
<p>What would be the most native way to accomplish that?</p>
<p>I would probably write a git pre-commit hook if there is no native way (e.g. via some <code>helm lint</code> flag).</p>
<h2 id="solution">Solution</h2>
<p>Use the following script with <a href="https://pre-commit.com/">pre-commit</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check that the directory name matches the chart name in Chart.yaml.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Examples:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: hey-foo&#34; fails the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   - foo/Chart.yaml with &#34;name: foo&#34; passes the check.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage: $0 [path/to/chart/Chart.yaml ...]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> chart in <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>basename <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Remove trailing slash.</span>
</span></span><span style="display:flex;"><span>	dirname<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dirname%/<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Fetch chart name from Chart.yaml.</span>
</span></span><span style="display:flex;"><span>	chart_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>yq e <span style="color:#e6db74">&#39;.name&#39;</span> <span style="color:#e6db74">&#34;</span>$chart<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $dirname !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span>$chart_name<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>		echo <span style="color:#e6db74">&#34;error: directory name &#39;</span><span style="color:#e6db74">${</span>dirname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39; does not match chart name &#39;</span><span style="color:#e6db74">${</span>chart_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>		exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="reference">Reference</h2>
<p>I asked and self-answered this question on <a href="https://stackoverflow.com/questions/79166730/how-to-enforce-that-the-directory-name-must-match-the-chart-name/79180650#79180650">Stack Overflow</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Why</em>? For ease of management, simplicity, consistency &amp; uniformity.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>jq: remove quotes from output</title><link>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</link><pubDate>Thu, 07 Nov 2024 14:13:17 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/jq-remove-quotes-from-output/</guid><description>Given:
% aws eks --profile global --region us-east-1 list-clusters { &amp;#34;clusters&amp;#34;: [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] } Query:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters&amp;#39; [ &amp;#34;aws-us-east-1-global-0&amp;#34; ] Further:
% aws eks --profile global --region us-east-1 list-clusters | jq &amp;#39;.clusters[0]&amp;#39; &amp;#34;aws-us-east-1-global-0&amp;#34; What if we wanted to remove the quotes? Add -r (--raw-output):
% aws eks --profile global --region us-east-1 list-clusters | jq -r &amp;#39;.clusters[0]&amp;#39; aws-us-east-1-global-0</description><content:encoded><![CDATA[<p>Given:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters
{
    &#34;clusters&#34;: [
        &#34;aws-us-east-1-global-0&#34;
    ]
}
</code></pre><p>Query:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters&#39;
[
  &#34;aws-us-east-1-global-0&#34;
]
</code></pre><p>Further:</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq &#39;.clusters[0]&#39;
&#34;aws-us-east-1-global-0&#34;
</code></pre><p>What if we wanted to remove the quotes? Add <code>-r</code> (<code>--raw-output</code>):</p>
<pre tabindex="0"><code>% aws eks --profile global --region us-east-1 list-clusters | jq -r &#39;.clusters[0]&#39;
aws-us-east-1-global-0
</code></pre>]]></content:encoded></item><item><title>Ruby: update Gemfile dependencies</title><link>https://www.perrotta.dev/2024/11/ruby-update-gemfile-dependencies/</link><pubDate>Wed, 06 Nov 2024 13:16:21 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/ruby-update-gemfile-dependencies/</guid><description>Oneshot:
% gem update rubocop That won&amp;rsquo;t update the .gemspec file though. To do so:
bundler update rubocop Tip: Omitting the gem name has the effect of updating all gems.</description><content:encoded><![CDATA[<p>Oneshot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% gem update rubocop
</span></span></code></pre></div><p>That won&rsquo;t update the <code>.gemspec</code> file though. To do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>bundler update rubocop
</span></span></code></pre></div><p><strong>Tip</strong>: Omitting the gem name has the effect of updating all gems.</p>
]]></content:encoded></item><item><title>Github Actions: multiple docker images</title><link>https://www.perrotta.dev/2024/11/github-actions-multiple-docker-images/</link><pubDate>Tue, 05 Nov 2024 17:05:22 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/github-actions-multiple-docker-images/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a monorepo on Github with multiple docker images in
it, write a github workflow to build and push all of them.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a monorepo on Github with multiple docker images in
it, write a github workflow to build and push all of them.</p>
<p>Here is an abridged version of the resulting workflow. The images are listed one
by one for fine-grained control purposes, but it would also be possible to glob
them with a single command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Global services</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">permissions</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">id-token</span>: <span style="color:#ae81ff">write</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">contents</span>: <span style="color:#ae81ff">read</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Replace with workflow trigger conditions.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>: {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">global-services</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">${{ matrix.image }}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">fail-fast</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">matrix</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">include</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted start</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">path/to/one/Dockerfile</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">image</span>: <span style="color:#ae81ff">org/one</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">path/to/two/Dockerfile</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">image</span>: <span style="color:#ae81ff">org/two</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted end</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Check out source code</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Get git SHA</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">git-sha</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ./scripts/get-versions.sh
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          echo &#34;sha=$(grep &#39;^services_sha&#39; versions.yaml | cut -d&#39; &#39; -f 2)&#34; &gt;&gt; &#34;$GITHUB_OUTPUT&#34;</span>          
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">./.github/actions/setup-ecr-buildx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">setup-ecr-buildx</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build and push global service images</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">docker/build-push-action@6.9.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cache-from</span>: <span style="color:#ae81ff">type=gha</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cache-to</span>: <span style="color:#ae81ff">type=gha,mode=max</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">context</span>: <span style="color:#ae81ff">path/to</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">file</span>: <span style="color:#ae81ff">${{ matrix.dockerfile }}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">provenance</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">push</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">tags</span>: <span style="color:#ae81ff">${{ steps.setup-ecr-buildx.outputs.ecr_registry }}/${{ matrix.image }}:${{ steps.git-sha.outputs.sha }}</span>
</span></span></code></pre></div><p>A matrix strategy kicks off independent multiple build jobs all at once.</p>
<p>Docs: <a href="https://github.com/docker/build-push-action">https://github.com/docker/build-push-action</a></p>]]></content:encoded></item><item><title>VSCode: auto restart extensions</title><link>https://www.perrotta.dev/2024/11/vscode-auto-restart-extensions/</link><pubDate>Mon, 04 Nov 2024 11:34:36 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/vscode-auto-restart-extensions/</guid><description>&lt;p>Whenever I open VSCode, there are some extension updates. Every time, I need to
manually click &amp;ldquo;Extensions&amp;rdquo; in the left-side navigation bar and then &amp;ldquo;Restart&amp;rdquo;
so that the upgrades take effect.&lt;/p>
&lt;p>This should be automated.&lt;/p></description><content:encoded><![CDATA[<p>Whenever I open VSCode, there are some extension updates. Every time, I need to
manually click &ldquo;Extensions&rdquo; in the left-side navigation bar and then &ldquo;Restart&rdquo;
so that the upgrades take effect.</p>
<p>This should be automated.</p>
<p>There is a solution: add the following to your <code>settings.json</code> (<code>Cmd + ,</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;extensions.autoRestart&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>Documentation:</p>
<blockquote>
<p>// If activated, extensions will automatically restart following an update if
the window is not in focus.</p>
</blockquote>
<p><strong>Source</strong>: <a href="https://code.visualstudio.com/docs/getstarted/settings">https://code.visualstudio.com/docs/getstarted/settings</a></p>]]></content:encoded></item><item><title>Jellyfin Trakt plug-in</title><link>https://www.perrotta.dev/2024/11/jellyfin-trakt-plug-in/</link><pubDate>Fri, 01 Nov 2024 20:38:19 +0100</pubDate><guid>https://www.perrotta.dev/2024/11/jellyfin-trakt-plug-in/</guid><description>&lt;p>&lt;a href="https://github.com/jellyfin/jellyfin-plugin-trakt">Trakt for Jellyfin Plugin&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Available for install through the plugin catalog, Trakt for Jellyfin allows you to synchronize your watch states with ease.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p><a href="https://github.com/jellyfin/jellyfin-plugin-trakt">Trakt for Jellyfin Plugin</a>:</p>
<blockquote>
<p>Available for install through the plugin catalog, Trakt for Jellyfin allows you to synchronize your watch states with ease.</p>
</blockquote>
<p>I’ve been enjoying this free plug-in.
When watching content in Jellyfin (e.g. via Android TV, or via your laptop), it automatically scrobbles<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> TV shows and movies to your Jellyfin account.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Perhaps only we millennials peruse this term, which comes from <a href="https://last.fm/">LastFM</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Mermaid: rich diagrams in markdown</title><link>https://www.perrotta.dev/2024/10/mermaid-rich-diagrams-in-markdown/</link><pubDate>Mon, 28 Oct 2024 15:58:39 +0100</pubDate><guid>https://www.perrotta.dev/2024/10/mermaid-rich-diagrams-in-markdown/</guid><description>&lt;p>When writing documentation in markdown e.g. for projects stored in git, adding
a system architecture or design diagram is a great way to boost its readability,
especially to unfamiliar readers.&lt;/p>
&lt;p>My favorite way to generate diagrams is with &lt;a href="https://graphviz.org/">GraphViz&lt;/a>.
It is widely available and easy to use.&lt;/p>
&lt;p>That said, &lt;a href="https://mermaid.js.org/">MermaidJS&lt;/a> has native integration with
&lt;a href="https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/">GitHub&lt;/a>
and &lt;a href="https://docs.gitlab.com/ee/user/markdown.html#mermaid">GitLab&lt;/a> circa &lt;a href="https://github.com/github/roadmap/issues/372">2
years ago&lt;/a>, and that&amp;rsquo;s hard to
beat. Graphviz, sadly, &lt;a href="https://forum.graphviz.org/t/github-adding-support-for-mermaid-diagrams/998">does
not&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>When writing documentation in markdown e.g. for projects stored in git, adding
a system architecture or design diagram is a great way to boost its readability,
especially to unfamiliar readers.</p>
<p>My favorite way to generate diagrams is with <a href="https://graphviz.org/">GraphViz</a>.
It is widely available and easy to use.</p>
<p>That said, <a href="https://mermaid.js.org/">MermaidJS</a> has native integration with
<a href="https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/">GitHub</a>
and <a href="https://docs.gitlab.com/ee/user/markdown.html#mermaid">GitLab</a> circa <a href="https://github.com/github/roadmap/issues/372">2
years ago</a>, and that&rsquo;s hard to
beat. Graphviz, sadly, <a href="https://forum.graphviz.org/t/github-adding-support-for-mermaid-diagrams/998">does
not</a>.</p>
<p>There is a live editor for quick prototyping and iteration: <a href="https://mermaid.live/">https://mermaid.live/</a></p>
<p>Once you are happy with the result, you can easily embed it in markdown<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre><code>```mermaid
flowchart TD
A[Christmas] --&gt;|Get money| B(Go shopping)
B --&gt; C{Let me think}
C --&gt;|One| D[Laptop]
C --&gt;|Two| E[iPhone]
C --&gt;|Three| F[fa:fa-car Car]
```
</code></pre>
<p>&hellip;and it will get automatically rendered in the aforementioned git forges.</p>
<p>MermaidJS is quite intuitive to use. There is plenty of documentation for it<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
e.g. for graphs / flowcharts: <a href="https://mermaid.js.org/syntax/flowchart.html">https://mermaid.js.org/syntax/flowchart.html</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is one of the examples in the official documentation.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>And, as increasingly common these days, you can always resort to GenAI for
an extra push.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Board games</title><link>https://www.perrotta.dev/2024/10/board-games/</link><pubDate>Fri, 25 Oct 2024 15:02:46 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/board-games/</guid><description>Me: Would you like to play board games next week?
Acquaintance 1: What kind of board games?
Acquaintance 2: Which board games?
Acquaintance 3: What games are you playing?
People, have some room for serendipity and spontaneity, come on. Just say yes!</description><content:encoded><![CDATA[<blockquote>
<p><strong>Me</strong>: Would you like to play board games next week?</p>
<p><strong>Acquaintance 1</strong>: What kind of board games?</p>
<p><strong>Acquaintance 2</strong>: Which board games?</p>
<p><strong>Acquaintance 3</strong>: What games are you playing?</p>
</blockquote>
<p>People, have some room for serendipity and spontaneity, <em>come on</em>. <a href="https://www.youtube.com/watch?v=8xg3vE8Ie_E"><strong>Just say
yes</strong></a>!</p>
]]></content:encoded></item><item><title>Conventional commits</title><link>https://www.perrotta.dev/2024/10/conventional-commits/</link><pubDate>Fri, 25 Oct 2024 14:43:55 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/conventional-commits/</guid><description>&lt;p>Conventional commits: &lt;a href="https://www.conventionalcommits.org/">https://www.conventionalcommits.org/&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A specification for adding human and machine readable meaning to commit
messages&lt;/p>
&lt;p>[&amp;hellip;] a lightweight convention on top of commit messages. It provides an easy
set of rules for creating an explicit commit history; which makes it easier to
write automated tools on top of. This convention dovetails with SemVer, by
describing the features, fixes, and breaking changes made in commit messages.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p>Conventional commits: <a href="https://www.conventionalcommits.org/">https://www.conventionalcommits.org/</a>:</p>
<blockquote>
<p>A specification for adding human and machine readable meaning to commit
messages</p>
<p>[&hellip;] a lightweight convention on top of commit messages. It provides an easy
set of rules for creating an explicit commit history; which makes it easier to
write automated tools on top of. This convention dovetails with SemVer, by
describing the features, fixes, and breaking changes made in commit messages.</p>
</blockquote>
<p>It looks like the following:</p>
<pre tabindex="0"><code>&lt;type&gt;[optional scope]: &lt;description&gt;

[optional body]

[optional footer(s)]
</code></pre><p>In practice, it looks like the following:</p>
<pre tabindex="0"><code>feat(sessions): add integration with github sso

So that developers no longer need to log in with the shared admin account.

Follow-up-of: #4242
Tested: `make test`
</code></pre><p>One way to enforce it in a <code>git</code> project is with its <a href="https://pre-commit.com/">pre-commit.com</a> integration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/compilerla/conventional-pre-commit</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rev</span>: <span style="color:#ae81ff">v3.4.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># https://conventionalcommits.org</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">conventional-pre-commit</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">stages</span>: [<span style="color:#ae81ff">commit-msg]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted start</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">base</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">chore</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">ci</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">docs</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">feat</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">fix</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">meta</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">refactor</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># keep-sorted end</span>
</span></span></code></pre></div><p>The above hook only runs in the <code>commit-msg</code> stage, which is not installed by
default via <code>pre-commit install</code>. You&rsquo;ll need to pass <code>-t commit-msg</code> to it.</p>
<p>I have mixed experiences and opinions with conventional commits in a team
setting.</p>
<p>In a <a href="https://github.com/GoogleChromeLabs/chromium-bidi">previous team</a>, it was
successfully
<a href="https://github.com/GoogleChromeLabs/chromium-bidi/pull/900">adopted</a>. It was
very easy to generate changelogs this way.</p>
<p>In other teams, only a handful of members adopted it. In this setting there
isn&rsquo;t much value in enforcing a half-adopted convention, it must be all or
nothing.</p>
<p>In repositories that I own, I tend to adopt something in-between, writing a
prefix in the commit message title.</p>]]></content:encoded></item><item><title>Check if docker image exists in registry</title><link>https://www.perrotta.dev/2024/10/check-if-docker-image-exists-in-registry/</link><pubDate>Fri, 25 Oct 2024 14:11:14 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/check-if-docker-image-exists-in-registry/</guid><description>&lt;p>Given a docker registry, image and tag, run the following command:&lt;/p></description><content:encoded><![CDATA[<p>Given a docker registry, image and tag, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% docker manifest inspect 9876543210.foo.ecr.us-east-1.amazonaws.com/org/image:123456789
</span></span></code></pre></div><p>If it does not exist, you&rsquo;ll see:</p>
<pre tabindex="0"><code>no such manifest: 9876543210.foo.ecr.us-east-1.amazonaws.com/org/image:123456789
</code></pre><p>Ensure you are authenticated and/or connected to the VPN in case of a private registry.</p>
<p>When using ECR (AWS&rsquo;s registry), you can authenticate this way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% which docker_login
</span></span><span style="display:flex;"><span>docker_login <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 9876543210.foo.ecr.us-east-1.amazonaws.com
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content:encoded></item><item><title>Performance reviews</title><link>https://www.perrotta.dev/2024/10/performance-reviews/</link><pubDate>Sun, 20 Oct 2024 12:15:14 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/performance-reviews/</guid><description>&lt;p>During performance reviews&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, it&amp;rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.&lt;/p></description><content:encoded><![CDATA[<p>During performance reviews<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, it&rsquo;s handy to obtain an overview of your
accomplishments that are stored as artifacts in source control systems.</p>
<p>Usually accomplishments for a software engineer span more than just code: design
documents, documentation, bug triage and fixes, product health initiatives,
tackling of technical debt, processes&hellip;the list is endless.</p>
<p>Nonetheless in this post I&rsquo;ll focus only in contributions in the form of code.</p>
<p>99.999% of the time this means <code>git</code> commits (and/or pull requests, if you will).</p>
<p>Other than <code>git</code>, and the <em>very very very</em> occasional mercurial (<code>hg</code>), the only
other VCS I used significantly was Google&rsquo;s Perforce / Piper.</p>
<h2 id="piper">Piper</h2>
<p>Although there are command-line tools to summarize your accomplishments, I
find the easiest way to do so is via Critique.</p>
<h3 id="your-cl-submissions">Your CL submissions</h3>
<p>Use a query like:</p>
<pre tabindex="0"><code>(author:me OR pair:me) is:submitted since:2024-01-03 to:2024-01-09
</code></pre><p>Update <code>since</code> and <code>to</code> according to the current PERF / GRAD cycle.</p>
<p>If you are a high-performer and/or send lots of LSCs (large-scale changes), the
output can be noisy. Filter it out with <code>d:{description}</code> as needed.</p>
<p>For example, to call out LSC changes in a separate section in your packet, you
may want to exclude them from your overall contributions with <code>-d:LSC</code> or
<code>-d:Rosie</code> or similar.</p>
<p><code>pair</code> is for crediting pair programming.</p>
<p><strong>Disclaimer</strong>: There is a possibility the syntax is incorrect, as I am not able
to test it at the moment.</p>
<h3 id="your-cl-reviews">Your CL reviews</h3>
<pre tabindex="0"><code>r:me is:submitted since:2024-01-03 to:2024-01-09
</code></pre><p>You&rsquo;ll likely want to call out readability reviews separately. Use something
like <code>-cc:typescript-readability-approvers</code>.</p>
<h2 id="git"><code>git</code></h2>
<p>One option is to use the web UI of your forge (GitHub, GitLab, etc).</p>
<p>I strive for a forge-agnostic solution though.</p>
<h3 id="your-pull-requests--commits">Your pull requests / commits</h3>
<p><a href="https://git-scm.com/docs/git-shortlog"><code>git shortlog</code></a> is your friend!</p>
<p>Example for this blog:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> --since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;6 months ago&#34;</span>  <span style="color:#75715e"># alt: --since=&#34;2024-03-01&#34;</span>
</span></span><span style="display:flex;"><span>Thiago Perrotta <span style="color:#f92672">(</span>499<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>      Initial commit
</span></span><span style="display:flex;"><span>      add gitignore: go,hugo,vim
</span></span><span style="display:flex;"><span>      hugo: add config.toml and default archetype
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>If there are multiple repositories, combine the command with <a href="https://myrepos.branchable.com/"><code>myrepos</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% mr run git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span>
</span></span></code></pre></div><p>To filter out irrelevant commits, use <code>grep -v</code>. Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git shortlog --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Thiago Perrotta&#34;</span> | grep -Ev <span style="color:#e6db74">&#39;^\s*ci|^.*pre-commit&#39;</span>
</span></span></code></pre></div><p>&hellip;filters out commits that contain &ldquo;ci&rdquo; or &ldquo;pre-commit&rdquo; in the message summary.</p>
<h3 id="your-pr-reviews">Your PR reviews</h3>
<p>PR reviews are a concept from forges. From a <code>git</code> CLI perspective it would only
be possible to do so when automation adds git tags to commits e.g. <code>Reviewed-by: Thiago Perrotta &lt;thiago@example.com&gt;</code>.</p>
<p><a href="https://www.gerritcodereview.com/">Gerrit</a> does that.
<a href="https://chromium-review.googlesource.com/c/chromium/src/+/5012895">Here</a> is an
example in Chromium. In this case, one could just <code>grep</code> for <code>Reviewed-by</code> in
<code>git log</code>.</p>
<p>Otherwise: on GitHub, use a query such as <code>is:pr reviewed-by:@me</code> in the Pull
Request search tab.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>PERF, GRAD, TPG: there are all sorts of naming schemes for them.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ prodaccess</title><link>https://www.perrotta.dev/2024/10/prodaccess/</link><pubDate>Fri, 18 Oct 2024 14:57:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/prodaccess/</guid><description>&lt;p>At Google we had a &lt;code>prodaccess&lt;/code> command used to log in and authenticate in all
sorts of internal corp systems&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> for 20 hours. It became a daily ritual to run
&lt;code>prodaccess&lt;/code> first thing in the morning when logging in upon unlocking our
physical workstations&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>During the pandemic, when heavily using our virtual workstations (dubbed
&lt;em>cloudtops&lt;/em>, think of an EC2 instance or a VPS) it was common to hook
&lt;code>prodaccess&lt;/code> into &lt;code>ssh&lt;/code>. There was a &lt;code>prodcertstatus&lt;/code> command that would tell
you when &lt;code>prodaccess&lt;/code> would expire. A common pattern was to modify your &lt;code>ssh&lt;/code>
startup command to automatically run &lt;code>prodaccess&lt;/code> whenever &lt;code>prodcertstatus&lt;/code>
indicated that access would expire within 2-4 hours, depending on the user&amp;rsquo;s
preference.&lt;/p>
&lt;p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:&lt;/p></description><content:encoded><![CDATA[<p>At Google we had a <code>prodaccess</code> command used to log in and authenticate in all
sorts of internal corp systems<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> for 20 hours. It became a daily ritual to run
<code>prodaccess</code> first thing in the morning when logging in upon unlocking our
physical workstations<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>During the pandemic, when heavily using our virtual workstations (dubbed
<em>cloudtops</em>, think of an EC2 instance or a VPS) it was common to hook
<code>prodaccess</code> into <code>ssh</code>. There was a <code>prodcertstatus</code> command that would tell
you when <code>prodaccess</code> would expire. A common pattern was to modify your <code>ssh</code>
startup command to automatically run <code>prodaccess</code> whenever <code>prodcertstatus</code>
indicated that access would expire within 2-4 hours, depending on the user&rsquo;s
preference.</p>
<p>Given my trained muscle memory, I wanted to continue to use this alias even in
environments other than Google:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat ~/.profile.d/functions_corp.sh
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>prodaccess<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; VPN&#34;</span>
</span></span><span style="display:flex;"><span>	vpn_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; Teleport&#34;</span>
</span></span><span style="display:flex;"><span>	teleport_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	echo <span style="color:#e6db74">&#34;--&gt; AWS&#34;</span>
</span></span><span style="display:flex;"><span>	aws_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;--&gt; Azure&#34;</span>
</span></span><span style="display:flex;"><span>    azure_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>		-u|--update<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; mr&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Update all well-known corp repositories</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">(</span>cd ~/Corp <span style="color:#f92672">&amp;&amp;</span> mr update <span style="color:#f92672">&amp;&amp;</span> mr run git world<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Package manager upgrade</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; sd-world&#34;</span>
</span></span><span style="display:flex;"><span>			sd-world
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			;;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		-a|--all<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>			echo <span style="color:#e6db74">&#34;--&gt; Atlas Mongo&#34;</span>
</span></span><span style="display:flex;"><span>			atlas_login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			shift
</span></span><span style="display:flex;"><span>			;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Notes:</p>
<ul>
<li><code>mr</code> is <a href="https://myrepos.branchable.com/">https://myrepos.branchable.com/</a> (&ldquo;a tool to manage all your version
control repositories&rdquo;)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li><code>sd-world</code> was introduced in a <a href="https://www.perrotta.dev/2024/01/sd-world-perform-a-full-system-upgrade/">previous post</a>: it performs a full system upgrade</li>
<li><code>--all</code> holds services I only need / use from time to time.</li>
<li><code>shift</code> is not really needed, but IMHO it&rsquo;s a good practice (and another
ingrained habit of mine), especially when inside <code>for</code> loops</li>
<li><code>git world</code> is an alias in my <code>~/.gitconfig</code> that runs <code>git fetch --all &amp;&amp; git remote prune origin</code></li>
</ul>
<p>Every morning I invoke <code>prodaccess -u</code> when starting my work day. A few password
prompts and touch IDs later and I do not need to worry about logging in anymore
during the middle of the day, which reduces overall context switching and
stress.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Until someone in CorpEng decided it was a good idea to
<a href="https://killedbygoogle.com/">deprecate</a> it in favour of a new <code>gcert</code>
command, destroying many SWE-years of developed muscle memory.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Ah, the <em>good ol&rsquo; times</em>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I should write a post about it sometime.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Makefile: path to root dir</title><link>https://www.perrotta.dev/2024/10/makefile-path-to-root-dir/</link><pubDate>Fri, 18 Oct 2024 14:52:44 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/makefile-path-to-root-dir/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a &lt;code>Makefile&lt;/code> within &lt;code>~/git/scaffolding/Makefile&lt;/code>,
and a command that needs to run from the &lt;code>scaffolding/&lt;/code> directory, create an
&lt;code>all&lt;/code> target that works from any directory.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a <code>Makefile</code> within <code>~/git/scaffolding/Makefile</code>,
and a command that needs to run from the <code>scaffolding/</code> directory, create an
<code>all</code> target that works from any directory.</p>
<p><strong>Solution</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># The directory wherein the Makefile resides.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>ROOT_DIR <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>patsubst %/,%,<span style="color:#66d9ef">$(</span>dir <span style="color:#66d9ef">$(</span>realpath <span style="color:#66d9ef">$(</span>lastword <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)))))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    @echo <span style="color:#66d9ef">$(</span>ROOT_DIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	kickstart <span style="color:#66d9ef">$(</span>ROOT_DIR<span style="color:#66d9ef">)</span>/app
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all
</span></span></code></pre></div><p><strong>Explanation</strong>:</p>
<ul>
<li>The <code>echo</code> is used only for debugging, therefore it should be removed in prod.</li>
<li>The <code>kickstart</code> command will properly run having <code>~/git/scaffolding</code> as <code>$PWD</code>
whether you invoke it from <code>~/git/scaffolding</code> or from <code>~/git</code> (via <code>make -C</code>).</li>
<li><code>pathsubst</code> is needed to remove the trailing slash (<code>/</code>) from the directory,
so that <code>$(ROOT_DIR)/</code> does not yield a double slash, which works but it is
ugly.</li>
</ul>
<p><strong>Source</strong> (adapted): <a href="https://stackoverflow.com/questions/18136918/how-to-get-current-relative-directory-of-your-makefile">https://stackoverflow.com/questions/18136918/how-to-get-current-relative-directory-of-your-makefile</a></p>]]></content:encoded></item><item><title>kubectl: list all node pods</title><link>https://www.perrotta.dev/2024/10/kubectl-list-all-node-pods/</link><pubDate>Wed, 16 Oct 2024 12:26:24 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/kubectl-list-all-node-pods/</guid><description>&lt;p>Recipe to list all pods that belong to a given node:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl get pod -o wide --field-selector spec.nodeName&lt;span style="color:#f92672">={&lt;/span>node_name&lt;span style="color:#f92672">}&lt;/span> -A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p>Recipe to list all pods that belong to a given node:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ kubectl get pod -o wide --field-selector spec.nodeName<span style="color:#f92672">={</span>node_name<span style="color:#f92672">}</span> -A
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://stackoverflow.com/questions/39231880/kubernetes-api-get-pods-on-specific-nodes">https://stackoverflow.com/questions/39231880/kubernetes-api-get-pods-on-specific-nodes</a></p>
<p>This <em>ought to</em> be easier to remember&hellip;</p>]]></content:encoded></item><item><title>kubectl: force delete pods</title><link>https://www.perrotta.dev/2024/10/kubectl-force-delete-pods/</link><pubDate>Tue, 15 Oct 2024 13:14:40 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/kubectl-force-delete-pods/</guid><description>&lt;p>Our installation of &lt;code>traefik&lt;/code> via &lt;code>helm&lt;/code> got stuck today in such a way that its
pods did not terminate, even with successive &lt;code>kubectl delete&lt;/code>.&lt;/p>
&lt;p>&lt;code>--force&lt;/code> did not work either :mildshock:&lt;/p></description><content:encoded><![CDATA[<p>Our installation of <code>traefik</code> via <code>helm</code> got stuck today in such a way that its
pods did not terminate, even with successive <code>kubectl delete</code>.</p>
<p><code>--force</code> did not work either :mildshock:</p>
<p><code>--grace-period=0</code> (alongside <code>--force</code>) did the trick:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl delete pod traefik-<span style="color:#f92672">{</span>...<span style="color:#f92672">}</span> --grace-period<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> --force --namespace kube-system
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://stackoverflow.com/questions/35453792/pods-stuck-in-terminating-status">https://stackoverflow.com/questions/35453792/pods-stuck-in-terminating-status</a></p>]]></content:encoded></item><item><title>★ New series: Raspberry Pi fun with DevOps</title><link>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</link><pubDate>Sun, 13 Oct 2024 11:31:13 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I have two raspberry pi&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> units sitting idle at home, a 3B and a 4.&lt;/p>
&lt;p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.&lt;/p></description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>I have two raspberry pi<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> units sitting idle at home, a 3B and a 4.</p>
<p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.</p>
<p>The roadblock to do so was the most classic excuse: lack of non-interrupted time.</p>
<p>There’s plenty of motivation, and ideas. These will likely <em>never</em> run out, any time soon.</p>
<p>That said: It’s very easy to get distracted and lose focus.
There is so much information today, in the form of
YouTube videos,
blog posts,
forums and communities (e.g. the likes of Hacker News and Reddit),
podcasts,
books…the list goes on, and it does not end.</p>
<p>Therefore, for the sake of fixing a North Star path,
I wanted to make an initial blog post with some of the ideas that are currently in my head.</p>
<p>There’s no guarantee I will follow up on all of these ideas but,
as long as their spirit is ingrained in semi-permanent written form,
I figured that shall be enough to make me accountable to myself.</p>
<h2 id="guiding-principles">Guiding principles</h2>
<p><em>a.k.a. rules of engagement</em></p>
<ol>
<li>It must run Unix</li>
</ol>
<p>No Windows. No macOS. Anything else is fair game. Corollary: It must run either Linux or BSD.</p>
<ol start="2">
<li>It must be vanilla / upstream</li>
</ol>
<p>No spin-offs. For example: for Ubuntu, no Xubuntu. For Arch Linux, no Manjaro. For Gentoo, no Funtoo.
And so on. Stick to the <em>core</em> / base Linux distributions.
For BSD, this is a non-issue.</p>
<ol start="3">
<li>Every software installation <em>must</em> come from a package</li>
</ol>
<p>If there is no package, I will create one myself.
This is easier if I use Arch Linux or Alpine Linux, but I am willing to contribute to other distributions as well.</p>
<ol start="4">
<li>It must have no X11 nor Wayland nor a graphical system</li>
</ol>
<p>It should be a pure server.
In the past I ran RaspberryPi OS (neé Raspbian) and it wasn’t very useful, besides being super slow and sluggish.</p>
<ol start="5">
<li>Software updates must happen with a single command</li>
</ol>
<p>There is no need for auto-updates (these are often not well-supported anyways), but a human operator should be able to upgrade
<em>everything</em> in a single shot. It doesn’t have to be a single command (e.g. <code>apt update</code> + <code>apt upgrade</code> is acceptable), but it
should be contained within a short script.</p>
<ol start="6">
<li>It should be reasonably popular and well-supported</li>
</ol>
<p>No obscure distributions.
I don’t particularly care about a sizeable community (I won’t join their Discord server nor Reddit community anyway),
but there should be at least one official support channel, and it would be preferred that it is old-school (BBS / Discourse / forums, mailing lists, IRC / Matrix).
Stack Exchange is also acceptable to an extent.
The problem with the modern stuff (Discord, Reddit) is that it is too proprietary, can / will disappear at any moment, and will be heavily used to train LLMs with no scrutiny.
Commercial support is fine. For example, Red Hat backing Fedora, Canonical backing Ubuntu, and SUSE backing openSUSE is a non-issue.
I would just avoid commercial enterprises that suffocate their open counterparts.</p>
<ol start="7">
<li>It should support Raspberry Pi (the ARM architecture, for that matter) as a first-class citizen</li>
</ol>
<p>If Raspberry Pi support is considered experimental, I would avoid the trouble at this time.</p>
<p>Stopping briefly here for a moment, the following list comes to mind, using <a href="https://distrowatch.com/">DistroWatch</a> and <a href="https://en.m.wikipedia.org/wiki/File:Linux_Distribution_Timeline.svg">Linux Distribution timeline</a> as an aid:</p>
<ul>
<li>Debian
<ul>
<li>RaspberryPi OS</li>
</ul>
</li>
<li>Ubuntu</li>
<li>Fedora</li>
<li>openSUSE</li>
<li>Alpine Linux</li>
<li>Arch Linux (Arch Linux ARM)</li>
<li>Void Linux</li>
<li>Gentoo</li>
<li>NixOS</li>
<li>FreeBSD</li>
<li>OpenBSD</li>
<li>Slackware Linux</li>
</ul>
<p>This list is still quite large.
I will need to trim it down further in the following days. Stay tuned.</p>
<p>Some observations before I make a final decision:</p>
<ul>
<li>I have two units, so one decision to make is whether to choose the same distribution for both or distinct distributions for each. One Linux and one BSD, for example.</li>
<li>I never used the following distros: Void Linux, NixOS, OpenBSD, Slackware Linux. There’s always an appeal to trying out something new, even if just ephemerally.</li>
<li>I am heavily experienced in Debian / Ubuntu, Arch and Alpine (with a tad of Gentoo as well). There’s an appeal to using something I am already familiar with to get the OS out of the way, and thus focus more on DevOps.</li>
<li>NixOS is very tempting for the purposes of reproducibility, but every time I look at it I feel lost in its sea of complexity. And it oftentimes feels bloated. Reproducibility comes with a non-trivial upfront cost.</li>
<li>OpenBSD feels very tempting as a self-contained, “do one thing and do it well”, KISS &amp; secure system. It lacks on integration with third-party software, but perhaps that’s a feature.</li>
<li>Let’s be honest, as much as Slackware has its charm, realistically I am not choosing it. Its ecosystem is too small today. It doesn’t provide any value when compared to the rest of the list. Between Slack and Alpine, I’d easily pick Alpine with no effort.</li>
</ul>
<p>Hence we can already eliminate one: <del>Slackware Linux</del>.</p>
<p>To be continued ■</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Two units</em> is a safer choice than “raspberry pies” or “raspberry pis”.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>cdg: change directory to the git root</title><link>https://www.perrotta.dev/2024/10/cdg-change-directory-to-the-git-root/</link><pubDate>Fri, 11 Oct 2024 12:01:48 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/cdg-change-directory-to-the-git-root/</guid><description>&lt;p>Shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>alias cdg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cd &amp;#34;$(git root)&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.gitconfig&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[alias]
root = rev-parse --show-toplevel
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>Shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>alias cdg<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cd &#34;$(git root)&#34;&#39;</span>
</span></span></code></pre></div><p><code>~/.gitconfig</code>:</p>
<pre tabindex="0"><code>[alias]
  root = rev-parse --show-toplevel
</code></pre><p>Sadly it is not possible to do so with a git alias, c.f. <a href="https://stackoverflow.com/questions/19032372/git-alias-for-shell-command-to-cd-into-git-root-not-working-as-expected">https://stackoverflow.com/questions/19032372/git-alias-for-shell-command-to-cd-into-git-root-not-working-as-expected</a>:</p>
<blockquote>
<p>Your shell is invoking Git, and Git is invoking another shell in which to run
your cd command. This command is successful, and this changes the working
directory of the child shell, but it does not change the working directory of
Git, nor of the parent shell.</p>
<p>In order to do this you need to run the command in your current shell, which
means that invoking Git will not be able to accomplish this. You will have to
continue using a shell alias.</p>
</blockquote>
<p>Since we cannot change directory with a git alias, then at least we can use one
to print the repository root.</p>]]></content:encoded></item><item><title>Convert JSON to YAML</title><link>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</link><pubDate>Fri, 11 Oct 2024 11:47:50 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</guid><description>&lt;p>Given a YAML file that is effectively JSON, convert it to YAML format.&lt;/p></description><content:encoded><![CDATA[<p>Given a YAML file that is effectively JSON, convert it to YAML format.</p>
<h2 id="input">Input</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;The Big Bang Theory&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;characters&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Sheldon&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Leonard&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="output">Output</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -i -P file.yaml
</span></span><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span>title: The Big Bang Theory
</span></span><span style="display:flex;"><span>characters:
</span></span><span style="display:flex;"><span>  - name: Sheldon
</span></span><span style="display:flex;"><span>  - name: Leonard
</span></span></code></pre></div><p><a href="https://github.com/mikefarah/yq"><code>yq</code></a> is like <code>jq</code> for YAML.</p>
<p><code>-i</code> is for in-place modification<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, <code>-P</code> is for pretty-printing.</p>
<p>If you don’t know about <code>-i</code>, you can always use <a href="https://joeyh.name/code/moreutils/"><code>sponge</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -P file.yaml | sponge file.yaml
</span></span></code></pre></div><p>Happy YAML’ing!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this context avoid using <code>&gt;</code> output redirection because it would mangle the input file. Unless you redirect to another file, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>