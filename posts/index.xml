<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Not Just Serendipity</title><link>https://www.perrotta.dev/posts/</link><description>Recent content in Posts on Not Just Serendipity</description><generator>Hugo -- 0.128.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta • CC BY-NC-SA 4.0 • RSS •</copyright><lastBuildDate>Mon, 01 Jul 2024 18:48:47 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Explain a crontab expression</title><link>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</link><pubDate>Mon, 01 Jul 2024 18:48:47 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/explain-a-crontab-expression/</guid><description>&lt;p>Given, for example, &lt;code>0 0 * * *&lt;/code>, how do you figure out when it will run?&lt;/p></description><content:encoded><![CDATA[<p>Given, for example, <code>0 0 * * *</code>, how do you figure out when it will run?</p>
<ul>
<li>Option 1: Read the docs! The <a href="https://wiki.archlinux.org/title/Cron">ArchWiki</a>
is frequently a great reference. Alternatively, use your favorite search
engine.</li>
<li>Option 2: Ask ChatGPT! A simple <code>cron: '0 0 * * *</code> prompt is enough. No need
to embezzle it with <code>explain what this does</code> or <code>what does this do?</code>.</li>
<li>Option 3: Paste it into <a href="https://crontab.guru/">https://crontab.guru/</a>.</li>
</ul>]]></content:encoded></item><item><title>Localhost domain</title><link>https://www.perrotta.dev/2024/07/localhost-domain/</link><pubDate>Mon, 01 Jul 2024 11:34:34 +0200</pubDate><guid>https://www.perrotta.dev/2024/07/localhost-domain/</guid><description>&lt;p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://localdev.me:1313/">http://localdev.me:1313/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/&lt;/a>&lt;/li>
&lt;/ul></description><content:encoded><![CDATA[<p>If you find yourself in a situation wherein http://localhost:1313 has issues,
you can use a domain that redirects to localhost. For example:</p>
<ul>
<li><a href="http://localdev.me:1313/">http://localdev.me:1313/</a></li>
<li><a href="http://demo.localdev.me:1313/">http://demo.localdev.me:1313/</a></li>
</ul>
<blockquote>
<p>When I’m doing local development, I sometimes need a domain name that routes
back to localhost. I’ve long run into cases where I need subdomains and ended
up modifying my local hosts file. I’ve used this for a variety of situations
going back for a long time. From Kubernetes ingress work to web development.</p>
</blockquote>
<blockquote>
<p><code>localdev.me</code> DNS is served through amazon. The domain name and any subdomains
point to <code>127.0.0.1</code>.</p>
</blockquote>
<blockquote>
<p>The next time you need a custom domain or subdomain for local development,
instead of hancking your hosts file you might consider localdev.me.</p>
</blockquote>
<p>Source: <a href="https://codeengineered.com/blog/2022/localdev-me/">https://codeengineered.com/blog/2022/localdev-me/</a></p>]]></content:encoded></item><item><title>Copy files from laptop to Steam Deck</title><link>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</link><pubDate>Sun, 30 Jun 2024 15:05:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/copy-files-from-laptop-to-steam-deck/</guid><description>&lt;p>Let&amp;rsquo;s say the files you want to copy are in &lt;code>~/Downloads&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s say the files you want to copy are in <code>~/Downloads</code>.</p>
<p>Start a local HTTP server on your laptop:</p>
<pre tabindex="0"><code>$ cd ~/Downloads
$ python3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
</code></pre><p>Find the IP address of your laptop within your LAN:</p>
<pre tabindex="0"><code>$ ifconfig  # macOS
$ ip addr   # linux
</code></pre><p>Now go to your Steam Deck, access <code>http://&lt;ip&gt;:8000</code> via the installed web
browser, and download your files.</p>
<p>Alternatively, run <code>wget</code> / <code>curl</code> in a terminal.</p>]]></content:encoded></item><item><title>★ XY problem</title><link>https://www.perrotta.dev/2024/06/xy-problem/</link><pubDate>Sun, 23 Jun 2024 14:50:19 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/xy-problem/</guid><description>&lt;p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:&lt;/p></description><content:encoded><![CDATA[<p>When asking questions or filing bugs / feature requests in the internet, I often
refer to these two invaluable resources:</p>
<ul>
<li><a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a> by Eric S. Raymond</li>
<li><a href="https://xyproblem.info">XY problem</a>: The XY problem is asking about your
attempted solution rather than your actual problem. This leads to enormous
amounts of wasted time and energy, both on the part of people asking for help,
and on the part of those providing help.</li>
</ul>
<p>Here is a recent example: <a href="https://github.com/23andMe/Yamale/issues/250">https://github.com/23andMe/Yamale/issues/250</a></p>
<blockquote>
<p><a href="https://xyproblem.info">https://xyproblem.info</a> / Motivation: Somewhat related to #228: It&rsquo;s not
currently possible to exclude files from a given directory. In the context of
developing Kubernetes GitOps repository this is often an issue. The ability to
run yamale on individual files would address it.</p>
</blockquote>]]></content:encoded></item><item><title>Rename files in bulk</title><link>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</link><pubDate>Wed, 19 Jun 2024 13:39:04 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/rename-files-in-bulk/</guid><description>&lt;p>Whenever the files are in the same directory, &lt;code>vidir&lt;/code> from &lt;a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils&lt;/a> is the best
interactive tool.&lt;/p>
&lt;p>If files are scattered across multiple directories, consider using the
&lt;a href="https://man.archlinux.org/man/rename.1.en">&lt;code>rename&lt;/code>&lt;/a> utility from &lt;code>util-linux&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>Whenever the files are in the same directory, <code>vidir</code> from <a href="https://www.perrotta.dev/2022/05/tools-you-should-know-about-moreutils/">moreutils</a> is the best
interactive tool.</p>
<p>If files are scattered across multiple directories, consider using the
<a href="https://man.archlinux.org/man/rename.1.en"><code>rename</code></a> utility from <code>util-linux</code>.</p>
<p>A simple example to rename all <code>readme.md</code> files to <code>README.md</code> for consistency:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>rename <span style="color:#e6db74">&#39;s/readme\.md/README.md/&#39;</span> **/*
</span></span></code></pre></div>]]></content:encoded></item><item><title>Sleep forever</title><link>https://www.perrotta.dev/2024/06/sleep-forever/</link><pubDate>Sat, 15 Jun 2024 15:01:02 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/sleep-forever/</guid><description>&lt;p>The following commands will make the shell sleep indefinitely:&lt;/p></description><content:encoded><![CDATA[<p>The following commands will make the shell sleep indefinitely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep inf
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sleep infinity
</span></span></code></pre></div><p>Previously I would call a command such as a <code>while true</code> loop or the <code>yes</code>
utility, but <code>sleep</code> is also handy.</p>]]></content:encoded></item><item><title>Bcrypt-hash a password</title><link>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</link><pubDate>Thu, 06 Jun 2024 13:35:05 +0200</pubDate><guid>https://www.perrotta.dev/2024/06/bcrypt-hash-a-password/</guid><description>&lt;p>Given the password &lt;code>correct horse battery staple&lt;/code>, we would like to bcrypt-hash
it.&lt;/p>
&lt;figure class="align-center ">&lt;a href="https://xkcd.com/936/">
&lt;img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
alt="Through 20 years of effort, we&amp;#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> &lt;/a>&lt;figcaption>
&lt;p>XKCD Courtesy of Randall Munroe&lt;/p>
&lt;/figcaption>
&lt;/figure></description><content:encoded><![CDATA[<p>Given the password <code>correct horse battery staple</code>, we would like to bcrypt-hash
it.</p>
<figure class="align-center "><a href="https://xkcd.com/936/">
    <img loading="lazy" src="https://imgs.xkcd.com/comics/password_strength.png#center"
         alt="Through 20 years of effort, we&#39;ve successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess."/> </a><figcaption>
            <p>XKCD Courtesy of Randall Munroe</p>
        </figcaption>
</figure>

<p>Here&rsquo;s one way to do so via the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ htpasswd -nbBC <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#e6db74">&#39;correct horse battery staple&#39;</span> | tr -d <span style="color:#e6db74">&#39;:\n&#39;</span> | sed <span style="color:#e6db74">&#39;s/$2y/$2a/&#39;</span>
</span></span></code></pre></div><p>&hellip;which yields:</p>
<pre tabindex="0"><code>$2a$10$HKSHfLu4l7TvOmnLkhUngu2U1pJUUw7hEU0LE1iN84S09fJsZowHm
</code></pre><p>You could verify it matches e.g. via <a href="https://bcrypt-generator.com/">https://bcrypt-generator.com/</a>.</p>
<p><strong>Context</strong>: <a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> expects a
bcrypt-hashed password in its config file.</p>]]></content:encoded></item><item><title>★ Github actions workflow</title><link>https://www.perrotta.dev/2024/05/github-actions-workflow/</link><pubDate>Tue, 28 May 2024 10:23:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/github-actions-workflow/</guid><description>&lt;p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.&lt;/p></description><content:encoded><![CDATA[<p>This post exemplifies an efficient workflow to shorten the edit-refresh loop
when dealing with github actions.</p>
<h2 id="assumptions">Assumptions</h2>
<ul>
<li>You have <code>git</code>, <code>jq</code> and the <a href="https://cli.github.com/"><code>gh</code></a> command-line tool
installed (<code>brew install gh</code>)</li>
<li>You have a github actions file in
<code>~/.github/workflows/package-release-dispatch.yml</code>.</li>
<li>The action has the following form:</li>
</ul>
<pre tabindex="0"><code>on:
  workflow_dispatch:
    inputs:
      ref:
        description: &#39;Ref to build from. This can either be a SHA or a branch/tag&#39;
        required: true
        type: string
  push:
    branches:
      - master
    paths:
      - &#39;.github/workflows/package-release-dispatch.yml&#39;
      - &#39;helm/**&#39;
</code></pre><p>The goal is to iterate on the <code>jobs:</code> section of the action.</p>
<h2 id="workflow">Workflow</h2>
<p>Trigger an action run from the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml <span style="color:#f92672">[</span>--ref master<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-f ref<span style="color:#f92672">=</span>master<span style="color:#f92672">]</span>
</span></span></code></pre></div><p><code>--ref</code> should be the git branch you&rsquo;re working on, for example,
<code>thiagowfx/my-cool-feature</code>.</p>
<p><code>-f</code> provides an input to the workflow. In this case, there&rsquo;s an input named
<code>ref</code>, which is meant to be the branch the action will act upon.</p>
<p>The action takes a little while to trigger, we can <code>sleep</code> to give it some time.
I found that <code>sleep 3</code> is a sensible value (3 seconds).</p>
<p>How to view the action?</p>
<p>First we need to get its ID. Here&rsquo;s one way to do so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span>
</span></span></code></pre></div><h3 id="option-1-via-the-command-line">Option 1) Via the command-line</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run watch &lt;id&gt;
</span></span></code></pre></div><p>It&rsquo;s analogous to <code>watch</code>, continuously refreshing the action progress in the
background, step by step. Example:</p>
<pre tabindex="0"><code>* master Package release dispatch · 12345678
Triggered via workflow_dispatch about 1 minute ago

JOBS
* build (ID 23456789)
  ✓ Set up job
  ✓ Checkout source code
  ✓ Run azure/setup-helm@v4
  ✓ Install yq
  ✓ Install helm cm-push plugin
  ✓ Set up Helm repos
  * Helm package all charts sans blacklist
  * Publish all helm packages
  * Post Checkout source code
</code></pre><h3 id="option-2-via-the-web-browser">Option 2) Via the web browser</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh run view &lt;id&gt; -w
</span></span></code></pre></div><p>It will open the system web browser in the right page, pertaining to the action
run.</p>
<h2 id="putting-everything-together">Putting everything together</h2>
<h3 id="option-1">Option 1)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run watch <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="option-2">Option 2)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gh workflow run package-release-dispatch.yml --ref master -f ref<span style="color:#f92672">=</span>master <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sleep <span style="color:#ae81ff">3</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  gh run view <span style="color:#66d9ef">$(</span>gh run list --workflow<span style="color:#f92672">=</span>package-release-dispatch.yml --json databaseId --jq <span style="color:#e6db74">&#39;.[0].databaseId&#39;</span><span style="color:#66d9ef">)</span> -w
</span></span></code></pre></div>]]></content:encoded></item><item><title>Terraform: AWS deployment to random availability zones</title><link>https://www.perrotta.dev/2024/05/terraform-aws-deployment-to-random-availability-zones/</link><pubDate>Tue, 21 May 2024 14:31:03 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/terraform-aws-deployment-to-random-availability-zones/</guid><description>&lt;p>A common scenario: there&amp;rsquo;s a new deployment you would like to roll out to AWS.
Let&amp;rsquo;s say you pick &amp;ldquo;us-east-1&amp;rdquo; as your cloud region. There are multiple
availability zones within it:&lt;/p>
&lt;ul>
&lt;li>us-east-1a&lt;/li>
&lt;li>us-east-1b&lt;/li>
&lt;li>us-east-1c&lt;/li>
&lt;li>us-east-1d&lt;/li>
&lt;li>us-east-1e&lt;/li>
&lt;li>us-east-1f&lt;/li>
&lt;/ul>
&lt;p>Suppose you want to pick two of them for your service/app, and you don&amp;rsquo;t
particularly care about which one. How to proceed?&lt;/p></description><content:encoded><![CDATA[<p>A common scenario: there&rsquo;s a new deployment you would like to roll out to AWS.
Let&rsquo;s say you pick &ldquo;us-east-1&rdquo; as your cloud region. There are multiple
availability zones within it:</p>
<ul>
<li>us-east-1a</li>
<li>us-east-1b</li>
<li>us-east-1c</li>
<li>us-east-1d</li>
<li>us-east-1e</li>
<li>us-east-1f</li>
</ul>
<p>Suppose you want to pick two of them for your service/app, and you don&rsquo;t
particularly care about which one. How to proceed?</p>
<h2 id="option-1-hard-coding">Option #1: Hard-coding</h2>
<p>Pick two arbitrary zones and hard-code them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">variable</span> <span style="color:#e6db74">&#34;availability_zones&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">type</span>    = list(<span style="color:#a6e22e">string</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">default</span> = [<span style="color:#e6db74">&#34;us-east-1a&#34;</span>, <span style="color:#e6db74">&#34;us-east-1b&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(var.<span style="color:#a6e22e">availability_zones</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Caveat</strong>: <a href="https://www.goodreads.com/book/show/10639.The_Paradox_of_Choice">The paradox of
choice</a>,
unnecessary decision fatigue.</p>
<h2 id="option-2-pick-the-first-two">Option #2: Pick the first two</h2>
<p>Use the AWS data source to dynamically find all zones, and pick the first two.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;aws_availability_zones&#34;</span> <span style="color:#e6db74">&#34;available&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">state</span> = <span style="color:#e6db74">&#34;available&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(data.<span style="color:#a6e22e">aws_availability_zones</span>.<span style="color:#a6e22e">available</span>.<span style="color:#a6e22e">names</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note that <code>terraform plan</code> should display the full zone list.</p>
<p><strong>Caveat</strong>: Heavily biased towards the first two zones.</p>
<h2 id="option-3-random-shuffling">Option #3: Random shuffling</h2>
<p>Pick two zones at random!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-terraform" data-lang="terraform"><span style="display:flex;"><span><span style="color:#66d9ef">data</span> <span style="color:#e6db74">&#34;aws_availability_zones&#34;</span> <span style="color:#e6db74">&#34;available&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">state</span> = <span style="color:#e6db74">&#34;available&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;random_shuffle&#34;</span> <span style="color:#e6db74">&#34;aws_availability_zone_names&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">input</span>        = data.<span style="color:#a6e22e">aws_availability_zones</span>.<span style="color:#a6e22e">available</span>.<span style="color:#a6e22e">names</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">result_count</span> = <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">
</span></span></span><span style="display:flex;"><span><span style="color:#66d9ef">resource</span> <span style="color:#e6db74">&#34;aws_subnet&#34;</span> <span style="color:#e6db74">&#34;private&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vpc_id</span>            = <span style="color:#a6e22e">aws_vpc</span>.<span style="color:#a6e22e">chartmuseum</span>.<span style="color:#a6e22e">id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">cidr_block</span>        = element(var.<span style="color:#a6e22e">private_subnets</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">availability_zone</span> = element(<span style="color:#a6e22e">random_shuffle</span>.<span style="color:#a6e22e">aws_availability_zone_names</span>.<span style="color:#a6e22e">result</span>, count.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">count</span>             = length(var.<span style="color:#a6e22e">private_subnets</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Winner</strong>: In my opinion, this is the most elegant approach.</p>
<p><code>random_shuffle</code> will output the selected regions upon running <code>terraform apply</code>.</p>]]></content:encoded></item><item><title>Adding a healthcheck to chartmuseum in AWS Fargate</title><link>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</link><pubDate>Fri, 17 May 2024 11:15:09 +0200</pubDate><guid>https://www.perrotta.dev/2024/05/adding-a-healthcheck-to-chartmuseum-in-aws-fargate/</guid><description>&lt;p>Assume that you have a &lt;a href="https://chartmuseum.com/">Chartmuseum&lt;/a> container running
in &lt;a href="https://aws.amazon.com/fargate/">AWS Fargate&lt;/a>.&lt;/p>
&lt;p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&amp;ldquo;serverless&amp;rdquo;), being part of ECS (Elastic Container Service).&lt;/p>
&lt;p>Problem statement: Add a container &lt;em>healthcheck&lt;/em> to the chartmuseum task
definition associated with the container.&lt;/p></description><content:encoded><![CDATA[<p>Assume that you have a <a href="https://chartmuseum.com/">Chartmuseum</a> container running
in <a href="https://aws.amazon.com/fargate/">AWS Fargate</a>.</p>
<p>Chartmuseum is a repository for helm charts. AWS Fargate is an Amazon service to
run containers (&ldquo;serverless&rdquo;), being part of ECS (Elastic Container Service).</p>
<p>Problem statement: Add a container <em>healthcheck</em> to the chartmuseum task
definition associated with the container.</p>
<p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html">official
docs</a>
suggest using <code>curl</code>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/ || exit 1&#34;]
</code></pre><p>For Chartmuseum specifically we&rsquo;re interested in its <code>/health</code> endpoint, as per
<a href="https://github.com/helm/chartmuseum/issues/28">this reference</a>:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost/health || exit 1&#34;]
</code></pre><p>But we&rsquo;re using port 8080:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;curl -f http://localhost:8080/health || exit 1&#34;]
</code></pre><p>If you use this healthcheck for the official chartmuseum image
(<code>ghcr.io/helm/chartmuseum</code>) it will fail, because the Alpine Linux environment
it uses does not contain <code>curl</code>.</p>
<p>A straightforward fix is to use <code>wget</code> instead:</p>
<pre tabindex="0"><code>[&#34;CMD-SHELL&#34;, &#34;wget -q --spider http://localhost:8080/health || exit 1&#34;]
</code></pre><p><code>--spider</code> is needed because we do not want to download anything, <code>-q</code> is
optional and short for &ldquo;quiet&rdquo;.</p>
<p>The <code>/health</code> endpoint merely returns a simple JSON:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;healthy&#34;</span>:<span style="color:#66d9ef">true</span>}
</span></span></code></pre></div><p>References: <a href="https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl">https://stackoverflow.com/questions/47722898/how-can-i-make-a-docker-healthcheck-with-wget-instead-of-curl</a></p>]]></content:encoded></item></channel></rss>