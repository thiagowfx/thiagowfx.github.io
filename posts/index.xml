<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on not just serendipity</title><link>https://www.perrotta.dev/posts/</link><description>Recent content in Posts on not just serendipity</description><generator>Hugo -- 0.134.3</generator><language>en-us</language><copyright>Copyright Â© 2021 - 2024 Thiago Perrotta Â· CC BY-NC-SA 4.0 Â· RSS Â· Made with â™¥ in ðŸ‡¨ðŸ‡¦</copyright><lastBuildDate>Sun, 22 Sep 2024 14:30:29 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Life without ack</title><link>https://www.perrotta.dev/2024/09/life-without-ack/</link><pubDate>Sun, 22 Sep 2024 14:30:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/life-without-ack/</guid><description>&lt;p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This time: the upgrade to macOS Sequoia (15.0) broke &lt;code>ack&lt;/code> (Perl).&lt;/p></description><content:encoded><![CDATA[<p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>This time: the upgrade to macOS Sequoia (15.0) broke <code>ack</code> (Perl).</p>
<pre tabindex="0"><code>% ack
zsh: /opt/homebrew/bin/ack: bad interpreter: /usr/bin/perl5.30: no such file or directory
</code></pre><p>I desperately needed to use <code>ack</code>, however there was no internet connection. And
I didn&rsquo;t have any of its alternatives installed (e.g. <code>ag</code>, <code>ripgrep</code> / <code>rg</code>).</p>
<p>Then the best way is to fall back to good ol&rsquo; <code>grep</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<pre tabindex="0"><code>% grep [-l] &#39;\bref\b&#39; **/*
</code></pre><p>Alternatively, within a git repository, there is <code>git grep</code>:</p>
<pre tabindex="0"><code>% git grep [-l] &#39;\bref\b&#39;
</code></pre><p>With <code>git grep</code> there is no need to specify which files to <code>grep</code>, as it entails
all files that belong to the repository&hellip;which happens to be a caveat for newly
created files that were not yet <code>git add</code>-ed.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Homebrew (<code>brew</code>) being <em>almost always</em> one of them.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If <code>grep</code> ever breaks, we are screwed.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Slack: AI plug-in</title><link>https://www.perrotta.dev/2024/09/slack-ai-plug-in/</link><pubDate>Wed, 18 Sep 2024 14:15:56 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/slack-ai-plug-in/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Coworker&lt;/strong>: Do you have an AI plug-in for Slack?&lt;/p>
&lt;p>&lt;strong>Coworker&lt;/strong>: I see that you use things like this: AI: Exclude &amp;ldquo;cert-manager&amp;rdquo; from the alert (manually)&lt;/p>
&lt;p>&lt;strong>Me&lt;/strong>: lol, this is just an abbrev. for &amp;ldquo;Action Item&amp;rdquo;. Might as well have been &amp;ldquo;TODO:&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Coworker&lt;/strong>: AI is such a buzzword nowadays, looks like I&amp;rsquo;m starting to get brainwashed to see it in everything&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<blockquote>
<p><strong>Coworker</strong>: Do you have an AI plug-in for Slack?</p>
<p><strong>Coworker</strong>: I see that you use things like this: AI: Exclude &ldquo;cert-manager&rdquo; from the alert (manually)</p>
<p><strong>Me</strong>: lol, this is just an abbrev. for &ldquo;Action Item&rdquo;. Might as well have been &ldquo;TODO:&rdquo;</p>
<p><strong>Coworker</strong>: AI is such a buzzword nowadays, looks like I&rsquo;m starting to get brainwashed to see it in everything</p>
</blockquote>
]]></content:encoded></item><item><title>Chromium: Delete entry in URL bar</title><link>https://www.perrotta.dev/2024/09/chromium-delete-entry-in-url-bar/</link><pubDate>Wed, 18 Sep 2024 09:40:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/chromium-delete-entry-in-url-bar/</guid><description>&lt;p>&lt;strong>TL;DR&lt;/strong>: &lt;code>Shift + &amp;lt;DEL&amp;gt;&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p><strong>TL;DR</strong>: <code>Shift + &lt;DEL&gt;</code>.</p>
<p>Perhaps you don&rsquo;t have a <code>DEL</code> key in your keyboard. Macbooks can emit <code>DEL</code>
with <code>Fn + Delete</code> (<code>Delete</code> here is the traditional <code>Backspace</code>).</p>]]></content:encoded></item><item><title>less(1): scroll back one page</title><link>https://www.perrotta.dev/2024/09/less1-scroll-back-one-page/</link><pubDate>Tue, 10 Sep 2024 12:02:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/less1-scroll-back-one-page/</guid><description>&lt;p>&lt;code>less(1)&lt;/code>: you use &lt;code>SPC&lt;/code> to scroll forward. How to scroll back?&lt;/p></description><content:encoded><![CDATA[<p><code>less(1)</code>: you use <code>SPC</code> to scroll forward. How to scroll back?</p>
<p>I would think <code>Shift + SPC</code> would be the sought shortcut, but it isn&rsquo;t.</p>
<p>Press <code>b</code> (short for &ldquo;backward(s)&rdquo;).</p>
<p>&hellip;which also implies: use <code>f</code> to scroll forward.</p>]]></content:encoded></item><item><title>Diceware passphrases</title><link>https://www.perrotta.dev/2024/09/diceware-passphrases/</link><pubDate>Mon, 09 Sep 2024 23:10:57 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/diceware-passphrases/</guid><description>&lt;p>I wanted to create a new secure passphrase for my WLAN (Wi-Fi).&lt;/p></description><content:encoded><![CDATA[<p>I wanted to create a new secure passphrase for my WLAN (Wi-Fi).</p>
<p>It&rsquo;s always an option to use the password generator built into my password
manager, however I wanted to take this opportunity to employ <em>Diceware</em>:</p>
<blockquote>
<p>Diceware Password Generator
Generate high-entropy passwords the easy way!</p>
</blockquote>
<p>The original source has the best explanation: <a href="https://diceware.dmuth.org/">https://diceware.dmuth.org/</a>.</p>
<p>Or you could read <a href="https://en.wikipedia.org/wiki/Diceware">Wikipedia</a> as well.</p>
<p>For example, for this post:</p>
<blockquote>
<p>ScratchObscureTrendHumiliate</p>
<p>Number of possible passwords:
3 quadrillion</p>
</blockquote>
<p>Good (and memorable!) enough for me.</p>]]></content:encoded></item><item><title>Wi-Fi QR code generator</title><link>https://www.perrotta.dev/2024/09/wi-fi-qr-code-generator/</link><pubDate>Fri, 06 Sep 2024 19:21:22 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/wi-fi-qr-code-generator/</guid><description>&lt;p>&lt;a href="https://qifi.org/">https://qifi.org/&lt;/a> is a pure JS Wi-Fi QR Code generator.&lt;/p>
&lt;p>&lt;strong>Input&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>SSID&lt;/li>
&lt;li>Passphrase&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Output&lt;/strong>: QR Code with the appropriate information your friends can use from
Android / iOS to log into your Wi-Fi.&lt;/p>
&lt;p>Preferably use this for your guest network for better isolation / security.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://qifi.org/">https://qifi.org/</a> is a pure JS Wi-Fi QR Code generator.</p>
<p><strong>Input</strong>:</p>
<ul>
<li>SSID</li>
<li>Passphrase</li>
</ul>
<p><strong>Output</strong>: QR Code with the appropriate information your friends can use from
Android / iOS to log into your Wi-Fi.</p>
<p>Preferably use this for your guest network for better isolation / security.</p>
]]></content:encoded></item><item><title>End of life package info</title><link>https://www.perrotta.dev/2024/09/end-of-life-package-info/</link><pubDate>Fri, 06 Sep 2024 17:41:30 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/end-of-life-package-info/</guid><description>&lt;p>&lt;a href="https://endoflife.date/">https://endoflife.date/&lt;/a> is like &lt;a href="https://repology.org/">Repology&lt;/a> but, instead
of package versions, it tracks the &lt;em>end of life&lt;/em> of various packages, linux
distributions, frameworks, etc.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://endoflife.date/">https://endoflife.date/</a> is like <a href="https://repology.org/">Repology</a> but, instead
of package versions, it tracks the <em>end of life</em> of various packages, linux
distributions, frameworks, etc.</p>
<p>For example, Alpine Linux: <a href="https://endoflife.date/alpine">https://endoflife.date/alpine</a></p>]]></content:encoded></item><item><title>AWS S3: search by suffix</title><link>https://www.perrotta.dev/2024/09/aws-s3-search-by-suffix/</link><pubDate>Thu, 05 Sep 2024 17:09:38 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/aws-s3-search-by-suffix/</guid><description>&lt;p>Given an AWS S3 bucket, how to recursively list all objects within it that match
a given suffix?&lt;/p></description><content:encoded><![CDATA[<p>Given an AWS S3 bucket, how to recursively list all objects within it that match
a given suffix?</p>
<p>The following example searches for all objects that end with <code>thiagowfx</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>aws s3 rm --profile <span style="color:#f92672">{</span>aws_profile<span style="color:#f92672">}</span> s3://example.com/my/path/ --recursive --dryrun --exclude <span style="color:#e6db74">&#39;*&#39;</span> --include <span style="color:#e6db74">&#34;*thiagowfx&#34;</span>
</span></span></code></pre></div><p>This is a hack with a dry-run deletion operation.</p>
<p>Alternatively, use <code>aws s3 ls</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> plus <code>grep</code> / <code>awk</code> / <code>sed</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>aws s3 ls --profile <span style="color:#f92672">{</span>aws_profile<span style="color:#f92672">}</span> s3://example.com/my/path | awk -F <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;{print $4}&#39;</span> | grep <span style="color:#e6db74">&#39;thiagowfx$&#39;</span>
</span></span></code></pre></div><p>Why would you use <code>rm</code> in lieu of <code>ls</code>? Mostly because of the built-in
<code>--include</code> / <code>--exclude</code> options. If you happen to have millions of objects in
your S3 bucket, then you do not need to list them all.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html">https://docs.aws.amazon.com/cli/latest/reference/s3/ls.html</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>git: create a throwaway branch</title><link>https://www.perrotta.dev/2024/09/git-create-a-throwaway-branch/</link><pubDate>Wed, 04 Sep 2024 22:01:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/git-create-a-throwaway-branch/</guid><description>&lt;p>Let&amp;rsquo;s say you want to submit a quick, perhaps even trivial, one-off pull request
(PR).&lt;/p>
&lt;p>One step you can do to minimize the number of decisions&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> to make is to have
a git alias that creates a branch with an arbitrary name.&lt;/p>
&lt;pre tabindex="0">&lt;code>% cat ~/.gitconfig
# ...
[alias]
nbt = !git nb \&amp;#34;thiagowfx/$(shuf -n1 /usr/share/dict/words | tr \&amp;#34;[:upper:]\&amp;#34; \&amp;#34;[:lower:]\&amp;#34;)\&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Running &lt;code>git nbt&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> will create a branch such as &lt;code>thiagowfx/foo&lt;/code>.&lt;/p>
&lt;p>The &lt;code>{username}/&lt;/code> prefix is to make it easier to attribute your branches to
yourself, which can be handy when working collaboratively with other engineers
in a team.&lt;/p>
&lt;p>The word after the slash is sourced from dictionary words on your system.&lt;/p></description><content:encoded><![CDATA[<p>Let&rsquo;s say you want to submit a quick, perhaps even trivial, one-off pull request
(PR).</p>
<p>One step you can do to minimize the number of decisions<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to make is to have
a git alias that creates a branch with an arbitrary name.</p>
<pre tabindex="0"><code>% cat ~/.gitconfig
# ...
[alias]
nbt = !git nb \&#34;thiagowfx/$(shuf -n1 /usr/share/dict/words | tr \&#34;[:upper:]\&#34; \&#34;[:lower:]\&#34;)\&#34;
</code></pre><p>Running <code>git nbt</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> will create a branch such as <code>thiagowfx/foo</code>.</p>
<p>The <code>{username}/</code> prefix is to make it easier to attribute your branches to
yourself, which can be handy when working collaboratively with other engineers
in a team.</p>
<p>The word after the slash is sourced from dictionary words on your system.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>See <a href="https://en.wikipedia.org/wiki/Decision_fatigue">https://en.wikipedia.org/wiki/Decision_fatigue</a>, <a href="https://en.wikipedia.org/wiki/The_Paradox_of_Choice">https://en.wikipedia.org/wiki/The_Paradox_of_Choice</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><code>nbt</code> stands for &ldquo;new branch throwaway&rdquo;.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>YAML multiline strings</title><link>https://www.perrotta.dev/2024/09/yaml-multiline-strings/</link><pubDate>Tue, 03 Sep 2024 11:55:53 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/yaml-multiline-strings/</guid><description>&lt;p>I keep forgetting what the correct syntax is.&lt;/p>
&lt;p>This reference is the best: &lt;a href="https://yaml-multiline.info/">https://yaml-multiline.info/&lt;/a>&lt;/p></description><content:encoded><![CDATA[<p>I keep forgetting what the correct syntax is.</p>
<p>This reference is the best: <a href="https://yaml-multiline.info/">https://yaml-multiline.info/</a></p>
<p>Summary:</p>
<ul>
<li><code>&gt;</code> eats newlines, <code>|</code> keeps them.</li>
<li>Appending a <code>-</code> to either of these eats the newline(s) at the end. Omitting it
keeps one. Appending a <code>+</code> preserves all newlines at the end.</li>
</ul>]]></content:encoded></item><item><title>Helm: list all installed charts in the cluster</title><link>https://www.perrotta.dev/2024/08/helm-list-all-installed-charts-in-the-cluster/</link><pubDate>Mon, 26 Aug 2024 17:57:07 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/helm-list-all-installed-charts-in-the-cluster/</guid><description>&lt;p>In theory this ought to be really easy:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ helm ls -h
[...]
-a, --all show all releases without any filter applied
-A, --all-namespaces list releases across all namespaces
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>In theory this ought to be really easy:</p>
<pre tabindex="0"><code>$ helm ls -h
[...]
  -a, --all                  show all releases without any filter applied
  -A, --all-namespaces       list releases across all namespaces
</code></pre><p>So&hellip;one of these should work, right?</p>
<pre tabindex="0"><code>helm ls -a
helm ls -A
</code></pre><p>I have a <code>sms-service</code> running in the cluster in the <code>default</code> namespace. If I
<code>grep</code> any of the previous commands to <code>sms</code>, it does not show up though.</p>
<p>Then&hellip;maybe <code>helm ls -a -A</code>? Nope.</p>
<p>Here&rsquo;s what works:</p>
<pre tabindex="0"><code>$ helm ls -a --max 9999 | grep sms
sms-service                  	default  	356     	2024-08-26 14:09:50.705277885 +0000 UTC	deployed	sms-v0.1.0
</code></pre><p>Kinda ridiculous, eh?</p>
<pre tabindex="0"><code> -m, --max int              maximum number of releases to fetch (default 256)
</code></pre><p>From <a href="https://helm.sh/docs/helm/helm_list/">https://helm.sh/docs/helm/helm_list/</a>:</p>
<blockquote>
<p>By default, up to 256 items may be returned. To limit this, use the &lsquo;&ndash;max&rsquo;
flag. Setting &lsquo;&ndash;max&rsquo; to 0 will not return all results. Rather, it will return
the server&rsquo;s default, which may be much higher than 256. Pairing the &lsquo;&ndash;max&rsquo;
flag with the &lsquo;&ndash;offset&rsquo; flag allows you to page through results.</p>
</blockquote>
<p>Therefore I settle with this form:</p>
<pre tabindex="0"><code>$ helm ls -a -A --max 9999 | grep sms
</code></pre><p>Happy helming.</p>]]></content:encoded></item><item><title>Browser tabs are not TODO lists</title><link>https://www.perrotta.dev/2024/08/browser-tabs-are-not-todo-lists/</link><pubDate>Mon, 26 Aug 2024 15:25:53 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/browser-tabs-are-not-todo-lists/</guid><description>&lt;p>Using browser tabs as rolling TODO lists is &lt;em>always&lt;/em> a terrible idea.&lt;/p>
&lt;p>Bookmarks (favorites) are slightly better, but also not a great idea.&lt;/p></description><content:encoded><![CDATA[<p>Using browser tabs as rolling TODO lists is <em>always</em> a terrible idea.</p>
<p>Bookmarks (favorites) are slightly better, but also not a great idea.</p>
]]></content:encoded></item><item><title>Accomplishment</title><link>https://www.perrotta.dev/2024/08/accomplishment/</link><pubDate>Mon, 26 Aug 2024 01:47:40 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/accomplishment/</guid><description>&lt;p>Few things in life spark joy so consistently as finishing a book you&amp;rsquo;ve been
reading for the past two months. Books are magical.&lt;/p></description><content:encoded>&lt;p>Few things in life spark joy so consistently as finishing a book you&amp;rsquo;ve been
reading for the past two months. Books are magical.&lt;/p>
</content:encoded></item><item><title>Diffoscope: recursive diffs</title><link>https://www.perrotta.dev/2024/08/diffoscope-recursive-diffs/</link><pubDate>Sat, 24 Aug 2024 01:09:42 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/diffoscope-recursive-diffs/</guid><description>&lt;p>There are many ways to &lt;code>diff&lt;/code> two individual files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>diff&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://www.colordiff.org/">&lt;code>colordiff&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jeffkaufman/icdiff">&lt;code>icdiff&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dandavison/delta">&lt;code>delta&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>But how can you &lt;code>diff&lt;/code> two individual directories?&lt;/p></description><content:encoded><![CDATA[<p>There are many ways to <code>diff</code> two individual files:</p>
<ul>
<li><code>diff</code></li>
<li><a href="https://www.colordiff.org/"><code>colordiff</code></a></li>
<li><a href="https://github.com/jeffkaufman/icdiff"><code>icdiff</code></a></li>
<li><a href="https://github.com/dandavison/delta"><code>delta</code></a></li>
</ul>
<p>But how can you <code>diff</code> two individual directories?</p>
<p>Enter <a href="https://diffoscope.org/"><code>diffoscope</code></a>.</p>
<p>Install it with your favorite package manager. Usage is as simple as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>diffoscope /path/to/dir1 /path/to/dir2
</span></span></code></pre></div><p>There&rsquo;s also a webapp: <a href="https://try.diffoscope.org/">https://try.diffoscope.org/</a></p>
<p>It is particularly handy in the context of <a href="https://reproducible-builds.org/">Reproducible
Builds</a>.</p>]]></content:encoded></item><item><title>apk autoupdate on alpine linux</title><link>https://www.perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</link><pubDate>Sun, 18 Aug 2024 17:32:48 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/apk-autoupdate-on-alpine-linux/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Upon running &lt;code>doas apk upgrade&lt;/code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Upon running <code>doas apk upgrade</code> on Alpine Linux, select
packages with binaries backed by system services should be automatically
restarted.</p>
<p>Deb-based systems have
<a href="https://manpages.debian.org/bookworm/debian-goodies/checkrestart.8.en.html"><code>checkrestart(8)</code></a>.</p>
<p>On Alpine, the best available approach as of today is <a href="https://github.com/jirutka/apk-autoupdate/">https://github.com/jirutka/apk-autoupdate/</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>doas apk add apk-autoupdate
</span></span><span style="display:flex;"><span>$EDITOR /etc/apk/autoupdate.conf
</span></span></code></pre></div><p>Then make the two following changes<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre tabindex="0"><code># Because the default is &#39;*&#39;, which will prevent all services from restarting.
services_blacklist=&#34;&#34;

# List of services that should be restarted upon package upgrades.
services_whitelist=&#34;miniflux tailscale&#34;
</code></pre><p>From this point on, whenever there are system upgrades for the aforementioned
services (<code>doas apk upgrade</code>), they will be automatically restarted. There&rsquo;s no
need for <code>doas /etc/init.d/miniflux restart</code>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>h/t to @fossdd for replying to my
<a href="https://github.com/jirutka/apk-autoupdate/issues/8">https://github.com/jirutka/apk-autoupdate/issues/8</a> thread.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>JSON schema negation</title><link>https://www.perrotta.dev/2024/08/json-schema-negation/</link><pubDate>Tue, 13 Aug 2024 11:27:17 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/json-schema-negation/</guid><description>&lt;p>&lt;a href="https://json-schema.org/">JSON Schema&lt;/a> is a powerful validation tool to enforce
a given structure and/or data type in JSON and YAML files.&lt;/p>
&lt;p>&lt;strong>Problem statement&lt;/strong>: Disallow &lt;code>aws.iam_role&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, with the implicit goal of
allowing &lt;code>aws.iamRole&lt;/code>. Because naming and sticking to conventions is hard.&lt;/p>
&lt;p>Illustration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">aws&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">iamRole&lt;/span>: &lt;span style="color:#ae81ff">fooArn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">iam_role&lt;/span>: &lt;span style="color:#ae81ff">barArn &lt;/span> &lt;span style="color:#75715e"># &amp;lt;-- disallow&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p><a href="https://json-schema.org/">JSON Schema</a> is a powerful validation tool to enforce
a given structure and/or data type in JSON and YAML files.</p>
<p><strong>Problem statement</strong>: Disallow <code>aws.iam_role</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, with the implicit goal of
allowing <code>aws.iamRole</code>. Because naming and sticking to conventions is hard.</p>
<p>Illustration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">aws</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">iamRole</span>: <span style="color:#ae81ff">fooArn</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">iam_role</span>: <span style="color:#ae81ff">barArn </span> <span style="color:#75715e"># &lt;-- disallow</span>
</span></span></code></pre></div><p>We can accomplish this with the following schema (<code>% cat values.schema.json</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;$schema&#34;</span>: <span style="color:#e6db74">&#34;http://json-schema.org/draft-07/schema#&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Schema that disallows aws.iam_role&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;additionalProperties&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;properties&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;object&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;additionalProperties&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;not&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;required&#34;</span>: [<span style="color:#e6db74">&#34;iam_role&#34;</span>]
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Test</strong>: <code>helm lint</code> should fail that schema validation with the aforementioned
input.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is for a <a href="https://helm.sh/docs/topics/charts/#schema-files">helm
chart</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Release</title><link>https://www.perrotta.dev/2024/08/release/</link><pubDate>Sat, 10 Aug 2024 21:30:27 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/release/</guid><description>&lt;blockquote>
&lt;p>&lt;em>me&lt;/em>: &lt;em>walks towards a linux laptop&lt;/em> from someone in a party&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;em>me&lt;/em>: &lt;em>runs&lt;/em> &lt;code>cat /etc/*release&lt;/code>&lt;/p>
&lt;p>&amp;hellip;Gentoo Linux&amp;hellip;&lt;/p>
&lt;p>A smile appears. Enlightenment irradiates.&lt;/p>
&lt;/blockquote>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Which kind of party is this?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><content:encoded><![CDATA[<blockquote>
<p><em>me</em>: <em>walks towards a linux laptop</em> from someone in a party<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><em>me</em>: <em>runs</em> <code>cat /etc/*release</code></p>
<p>&hellip;Gentoo Linux&hellip;</p>
<p>A smile appears. Enlightenment irradiates.</p>
</blockquote>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Which kind of party is this?&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>â˜… Self-documented Makefiles</title><link>https://www.perrotta.dev/2024/08/self-documented-makefiles/</link><pubDate>Thu, 08 Aug 2024 10:42:49 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/self-documented-makefiles/</guid><description>&lt;p>&lt;code>Makefile&lt;/code>s are often great &lt;code>bash&lt;/code> script replacements. Instead of creating a
&lt;code>bash&lt;/code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of &lt;code>Makefile&lt;/code> targets.&lt;/p></description><content:encoded><![CDATA[<p><code>Makefile</code>s are often great <code>bash</code> script replacements. Instead of creating a
<code>bash</code> script with multiple functions with various dependencies (from a
topological graph viewpoint), just create a bunch of <code>Makefile</code> targets.</p>
<p>Recently I found myself writing the following <code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># It is idempotent.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>ROOT <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell git rev-parse --show-toplevel<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>TERRAFORM_GITHUB_PATH <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/terraform/modules/global-github&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Update helm dependencies.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">helm helm-dep-update</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/argocd&#34;</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/external-secrets&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Edit all files.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">edit</span><span style="color:#f92672">:</span> edit-webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Modify github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">edit-webhook webhook-edit</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">EDITOR&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">/main.tf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Apply github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">webhook</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> -chdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
</span></span></code></pre></div><p>As you can see, there are a bunch of comments on top of each target. The
question is: How to surface these comments to the user?</p>
<p>A <code>make help</code> command would be great.</p>
<p>With a bit of searching, I found:</p>
<ul>
<li><a href="https://gist.github.com/prwhite/8168133">https://gist.github.com/prwhite/8168133</a></li>
<li><a href="https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html">https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html</a></li>
</ul>
<p>These were good starting points. The technique was to transform the above
<code>Makefile</code> into the following one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># This Makefile is used to bootstrap the ArgoCD installation in the cluster.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"># It is idempotent.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>ROOT <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell git rev-parse --show-toplevel<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>TERRAFORM_GITHUB_PATH <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/terraform/modules/global-github&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TERRAFORM <span style="color:#f92672">:=</span> terraform
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> webhook
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">helm helm-dep-update</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Update helm dependencies.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/argocd&#34;</span>
</span></span><span style="display:flex;"><span>	helm dep update <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>ROOT<span style="color:#66d9ef">)</span><span style="color:#e6db74">/helm/external-secrets&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edit</span><span style="color:#f92672">:</span> edit-webhook  <span style="color:#75715e">## Edit all files.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">edit-webhook webhook-edit</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Modify github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">EDITOR&#34;</span> <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">/main.tf&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">webhook</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Apply github webhooks to the deploy servers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">$(</span>TERRAFORM<span style="color:#66d9ef">)</span> -chdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>TERRAFORM_GITHUB_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> apply
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all edit edit-webhook helm helm-dep-update webhook webhook-edit
</span></span></code></pre></div><p>Then we would add a <code>help</code> target to parse the comments after the <code>##</code>.</p>
<p>The first source suggested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>           <span style="color:#75715e">## Show this help.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	@fgrep -h <span style="color:#e6db74">&#34;##&#34;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | fgrep -v fgrep | sed -e <span style="color:#e6db74">&#39;s/\\$$//&#39;</span> | sed -e <span style="color:#e6db74">&#39;s/##//&#39;</span>
</span></span></code></pre></div><p>It is simple and gets the job done, but the formatting was poor:</p>
<pre tabindex="0"><code>% make help
help:            Show this help.
helm helm-dep-update:   Update helm dependencies.
edit: edit-webhook   Edit all files.
edit-webhook webhook-edit:   Modify github webhooks to the deploy servers.
webhook:   Apply github webhooks to the deploy servers.
</code></pre><p>The second source suggested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	@grep -E <span style="color:#e6db74">&#39;^[a-zA-Z_-]+:.*?## .*$$&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | sort | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-30s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</span></span></code></pre></div><p>&hellip;which produces:</p>
<pre tabindex="0"><code>% make help
edit                           Edit all files.
webhook                        Apply github webhooks to the deploy servers.
</code></pre><p>The formatting is great, but alas it does not match multiple targets in a single
line.</p>
<p>I could have modified the targets to be like this:</p>
<pre tabindex="0"><code>edit-webhook: webhook-edit
webhook-edit:  ## Description here
</code></pre><p>However then I would have to duplicate their comments. I wanted to do better.</p>
<p>With a bit of LLM<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> magic from GPT-4o, we can have the best of both worlds,
supporting both single and multiple targets in the same line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Show this help.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	@grep -E <span style="color:#e6db74">&#39;^[a-zA-Z_-]+([ \t]+[a-zA-Z_-]+)*:[ \t]*## .*$$&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&lt;=n; i++) {if (targets[i] != &#34;&#34;) printf &#34;\033[36m%-30s\033[0m %s\n&#34;, targets[i], $$2}}&#39;</span> | sort
</span></span></code></pre></div><p>The output (amazing!):</p>
<pre tabindex="0"><code>% make help
edit-webhook                   Modify github webhooks to the deploy servers.
helm                           Update helm dependencies.
helm-dep-update                Update helm dependencies.
help                           Show this help.
webhook                        Apply github webhooks the deploy servers.
webhook-edit                   Modify github webhooks to the deploy servers.
</code></pre><p>The chat session: <a href="https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6">https://chatgpt.com/share/f9872dfa-650e-4a0c-b974-701181c237c6</a>.</p>
<p>We could also add:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span>.DEFAULT_GOAL <span style="color:#f92672">:=</span> help
</span></span></code></pre></div><p>&hellip;to ensure that a plain <code>make</code> invocation behaves like <code>make help</code>.</p>
<p><strong>Edit(2024-08-08)</strong>: I had to make one small adaptation<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to make it work with
dependencies, which is the whole point of <code>make</code>:</p>
<pre tabindex="0"><code>help:  ## Show this help.
	@grep -E &#39;^[.a-zA-Z_-]+([ \t]+[.a-zA-Z_-]+)*:[ \t.a-zA-Z_-]*## .*$$&#39; $(MAKEFILE_LIST) | awk &#39;BEGIN {FS = &#34;:.*?## &#34;}; {n=split($$1, targets, /[ \t]+/); for (i=1; i&lt;=n; i++) {if (targets[i] != &#34;&#34;) printf &#34;\033[36m%-30s\033[0m %s\n&#34;, targets[i], $$2}}&#39; | sort
</code></pre><p>The previous version would not recognize the following entry:</p>
<pre tabindex="0"><code>all-in-dev: edit webhook  ## Run all necessary steps in the development environment.`
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>If I&rsquo;ll start to talk about &ldquo;AI&rdquo; in this blog, the very least I can do is
to call them what they really are: <strong>LLMs</strong>. The &ldquo;AI&rdquo; acronym is currently <em>way</em>
too hyped.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Never fully trust LLMs. Well, drop the <em>fully</em>. Just <strong>never trust LLMs</strong>,
period.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Optimize PNG images</title><link>https://www.perrotta.dev/2024/08/optimize-png-images/</link><pubDate>Tue, 06 Aug 2024 14:39:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/optimize-png-images/</guid><description>&lt;p>Before checking &lt;code>.png&lt;/code> images into git repositories, you should optimize them â€“
mostly for their file size.&lt;/p></description><content:encoded><![CDATA[<p>Before checking <code>.png</code> images into git repositories, you should optimize them â€“
mostly for their file size.</p>
<p>The Chromium project provides <a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/tools/resources/optimize-png-files.sh">this
script</a>
to do so. It boils down to installing and running the following executables:</p>
<ul>
<li><code>optipng</code>: <a href="https://optipng.sourceforge.net/">https://optipng.sourceforge.net/</a></li>
<li><code>pngcrush</code>: <a href="https://pmt.sourceforge.io/pngcrush/">https://pmt.sourceforge.io/pngcrush/</a></li>
<li><code>pngout</code>: <a href="https://www.jonof.id.au/kenutils.html">https://www.jonof.id.au/kenutils.html</a></li>
</ul>
<p>The first two are available via homebrew.</p>]]></content:encoded></item><item><title>kubectl: print all secret values in plain text</title><link>https://www.perrotta.dev/2024/08/kubectl-print-all-secret-values-in-plain-text/</link><pubDate>Tue, 06 Aug 2024 13:37:31 +0200</pubDate><guid>https://www.perrotta.dev/2024/08/kubectl-print-all-secret-values-in-plain-text/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret/">kubernetes
secret&lt;/a> with more
than one key-value pair, print &lt;strong>all&lt;/strong> of them in plain text (i.e.
base64-decoded in this context).&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a <a href="https://kubernetes.io/docs/concepts/configuration/secret/">kubernetes
secret</a> with more
than one key-value pair, print <strong>all</strong> of them in plain text (i.e.
base64-decoded in this context).</p>
<p><strong>Edit(2024-08-08)</strong>: It turns out I made a mistake. The effect of the post
below is akin to <code>kubectl get [...] -o yaml</code>. I&rsquo;ll keep the post for
bookkeeping purposes anyway.</p>
<p>Basically, something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl cat secret -n infra-services my-cool-secret
</span></span></code></pre></div><p>Except that there is no <code>kubectl cat</code>, what a shame. It would be really great if
we had it, for consistency with <code>systemctl cat</code>. Oh well.</p>
<p>There is <code>kubectl edit</code> though â€“ amen, just like <code>systemctl edit</code>. This will
open your <code>$EDITOR</code>. It&rsquo;s often inconvenient to copy text to the clipboard from
your terminal-based editor though, due to intricacies of different terminals,
shells, terminal multiplexers, and OSC-52, therefore I don&rsquo;t deem this as an
acceptable solution.</p>
<p>There is a simple trick though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>EDITOR<span style="color:#f92672">=</span>cat kubectl edit secret -n infra-services my-cool-secret
</span></span></code></pre></div><p>&hellip;which works exactly as you would expect <code>kubectl cat</code> to behave. It displays
a warning at the end:</p>
<pre tabindex="0"><code>Edit cancelled, no changes made.
</code></pre><p>&hellip;however it can be duly ignored.</p>
<p>If we didn&rsquo;t have this trick, we could have:</p>
<ul>
<li>written a bloated tool in golang to pipe to e.g. <a href="https://github.com/ashleyschuett/kubernetes-secret-decode">https://github.com/ashleyschuett/kubernetes-secret-decode</a> (<a href="https://itnext.io/secrets-in-plain-text-13a98f54ef97">via</a>)</li>
<li>used the <code>kubectl edit</code> trick above, with a decent terminal and OSC-52 setup</li>
<li>used <code>jq</code> with its <code>map</code> and <code>base64d</code> constructs (c.f. <a href="https://stackoverflow.com/questions/50286066/kubernetes-kubectl-print-all-secrets">Stack
Overflow</a>)</li>
<li>used <code>kubectl describe</code> with <code>-o jsonpath</code>, specifying every single field, one
by one (super tedious) c.f. <a href="https://www.perrotta.dev/2024/07/kubectl-get-secret-with-jsonpath-and-add-a-newline/">this previous post</a></li>
</ul>]]></content:encoded></item></channel></rss>