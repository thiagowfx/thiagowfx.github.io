<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on not just serendipity</title><link>https://www.perrotta.dev/posts/</link><description>Recent content in Posts on not just serendipity</description><generator>Hugo -- 0.124.0</generator><language>en-us</language><copyright>Copyright © 2021 - 2024 Thiago Perrotta · CC BY-NC-SA 4.0 · RSS · Made with ♥ in 🇨🇦</copyright><lastBuildDate>Fri, 18 Oct 2024 14:52:44 +0200</lastBuildDate><atom:link href="https://www.perrotta.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Makefile: path to root dir</title><link>https://www.perrotta.dev/2024/10/makefile-path-to-root-dir/</link><pubDate>Fri, 18 Oct 2024 14:52:44 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/makefile-path-to-root-dir/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a &lt;code>Makefile&lt;/code> within &lt;code>~/git/scaffolding/Makefile&lt;/code>,
and a command that needs to run from the &lt;code>scaffolding/&lt;/code> directory, create an
&lt;code>all&lt;/code> target that works from any directory.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a <code>Makefile</code> within <code>~/git/scaffolding/Makefile</code>,
and a command that needs to run from the <code>scaffolding/</code> directory, create an
<code>all</code> target that works from any directory.</p>
<p><strong>Solution</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-make" data-lang="make"><span style="display:flex;"><span><span style="color:#75715e"># The directory wherein the Makefile resides.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>ROOT_DIR <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>patsubst %/,%,<span style="color:#66d9ef">$(</span>dir <span style="color:#66d9ef">$(</span>realpath <span style="color:#66d9ef">$(</span>lastword <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)))))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    @echo <span style="color:#66d9ef">$(</span>ROOT_DIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>	kickstart <span style="color:#66d9ef">$(</span>ROOT_DIR<span style="color:#66d9ef">)</span>/app
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all
</span></span></code></pre></div><p><strong>Explanation</strong>:</p>
<ul>
<li>The <code>echo</code> is used only for debugging, therefore it should be removed in prod.</li>
<li>The <code>kickstart</code> command will properly run having <code>~/git/scaffolding</code> as <code>$PWD</code>
whether you invoke it from <code>~/git/scaffolding</code> or from <code>~/git</code> (via <code>make -C</code>).</li>
<li><code>pathsubst</code> is needed to remove the trailing slash (<code>/</code>) from the directory,
so that <code>$(ROOT_DIR)/</code> does not yield a double slash, which works but it is
ugly.</li>
</ul>
<p><strong>Source</strong> (adapted): <a href="https://stackoverflow.com/questions/18136918/how-to-get-current-relative-directory-of-your-makefile">https://stackoverflow.com/questions/18136918/how-to-get-current-relative-directory-of-your-makefile</a></p>]]></content:encoded></item><item><title>kubectl: list all node pods</title><link>https://www.perrotta.dev/2024/10/kubectl-list-all-node-pods/</link><pubDate>Wed, 16 Oct 2024 12:26:24 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/kubectl-list-all-node-pods/</guid><description>&lt;p>Recipe to list all pods that belong to a given node:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl get pod -o wide --field-selector spec.nodeName&lt;span style="color:#f92672">={&lt;/span>node_name&lt;span style="color:#f92672">}&lt;/span> -A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[<p>Recipe to list all pods that belong to a given node:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ kubectl get pod -o wide --field-selector spec.nodeName<span style="color:#f92672">={</span>node_name<span style="color:#f92672">}</span> -A
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://stackoverflow.com/questions/39231880/kubernetes-api-get-pods-on-specific-nodes">https://stackoverflow.com/questions/39231880/kubernetes-api-get-pods-on-specific-nodes</a></p>
<p>This <em>ought to</em> be easier to remember&hellip;</p>]]></content:encoded></item><item><title>kubectl: force delete pods</title><link>https://www.perrotta.dev/2024/10/kubectl-force-delete-pods/</link><pubDate>Tue, 15 Oct 2024 13:14:40 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/kubectl-force-delete-pods/</guid><description>&lt;p>Our installation of &lt;code>traefik&lt;/code> via &lt;code>helm&lt;/code> got stuck today in such a way that its
pods did not terminate, even with successive &lt;code>kubectl delete&lt;/code>.&lt;/p>
&lt;p>&lt;code>--force&lt;/code> did not work either :mildshock:&lt;/p></description><content:encoded><![CDATA[<p>Our installation of <code>traefik</code> via <code>helm</code> got stuck today in such a way that its
pods did not terminate, even with successive <code>kubectl delete</code>.</p>
<p><code>--force</code> did not work either :mildshock:</p>
<p><code>--grace-period=0</code> (alongside <code>--force</code>) did the trick:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl delete pod traefik-<span style="color:#f92672">{</span>...<span style="color:#f92672">}</span> --grace-period<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> --force --namespace kube-system
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://stackoverflow.com/questions/35453792/pods-stuck-in-terminating-status">https://stackoverflow.com/questions/35453792/pods-stuck-in-terminating-status</a></p>]]></content:encoded></item><item><title>★ New series: Raspberry Pi fun with DevOps</title><link>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</link><pubDate>Sun, 13 Oct 2024 11:31:13 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/new-series-raspberry-pi-fun-with-devops/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I have two raspberry pi&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> units sitting idle at home, a 3B and a 4.&lt;/p>
&lt;p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.&lt;/p></description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>I have two raspberry pi<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> units sitting idle at home, a 3B and a 4.</p>
<p>For a long time I’ve been wanting to do something useful with them,
while increasing my DevOps toolkit knowledge.</p>
<p>The roadblock to do so was the most classic excuse: lack of non-interrupted time.</p>
<p>There’s plenty of motivation, and ideas. These will likely <em>never</em> run out, any time soon.</p>
<p>That said: It’s very easy to get distracted and lose focus.
There is so much information today, in the form of
YouTube videos,
blog posts,
forums and communities (e.g. the likes of Hacker News and Reddit),
podcasts,
books…the list goes on, and it does not end.</p>
<p>Therefore, for the sake of fixing a North Star path,
I wanted to make an initial blog post with some of the ideas that are currently in my head.</p>
<p>There’s no guarantee I will follow up on all of these ideas but,
as long as their spirit is ingrained in semi-permanent written form,
I figured that shall be enough to make me accountable to myself.</p>
<h2 id="guiding-principles">Guiding principles</h2>
<p><em>a.k.a. rules of engagement</em></p>
<ol>
<li>It must run Unix</li>
</ol>
<p>No Windows. No macOS. Anything else is fair game. Corollary: It must run either Linux or BSD.</p>
<ol start="2">
<li>It must be vanilla / upstream</li>
</ol>
<p>No spin-offs. For example: for Ubuntu, no Xubuntu. For Arch Linux, no Manjaro. For Gentoo, no Funtoo.
And so on. Stick to the <em>core</em> / base Linux distributions.
For BSD, this is a non-issue.</p>
<ol start="3">
<li>Every software installation <em>must</em> come from a package</li>
</ol>
<p>If there is no package, I will create one myself.
This is easier if I use Arch Linux or Alpine Linux, but I am willing to contribute to other distributions as well.</p>
<ol start="4">
<li>It must have no X11 nor Wayland nor a graphical system</li>
</ol>
<p>It should be a pure server.
In the past I ran RaspberryPi OS (neé Raspbian) and it wasn’t very useful, besides being super slow and sluggish.</p>
<ol start="5">
<li>Software updates must happen with a single command</li>
</ol>
<p>There is no need for auto-updates (these are often not well-supported anyways), but a human operator should be able to upgrade
<em>everything</em> in a single shot. It doesn’t have to be a single command (e.g. <code>apt update</code> + <code>apt upgrade</code> is acceptable), but it
should be contained within a short script.</p>
<ol start="6">
<li>It should be reasonably popular and well-supported</li>
</ol>
<p>No obscure distributions.
I don’t particularly care about a sizeable community (I won’t join their Discord server nor Reddit community anyway),
but there should be at least one official support channel, and it would be preferred that it is old-school (BBS / Discourse / forums, mailing lists, IRC / Matrix).
Stack Exchange is also acceptable to an extent.
The problem with the modern stuff (Discord, Reddit) is that it is too proprietary, can / will disappear at any moment, and will be heavily used to train LLMs with no scrutiny.
Commercial support is fine. For example, Red Hat backing Fedora, Canonical backing Ubuntu, and SUSE backing openSUSE is a non-issue.
I would just avoid commercial enterprises that suffocate their open counterparts.</p>
<ol start="7">
<li>It should support Raspberry Pi (the ARM architecture, for that matter) as a first-class citizen</li>
</ol>
<p>If Raspberry Pi support is considered experimental, I would avoid the trouble at this time.</p>
<p>Stopping briefly here for a moment, the following list comes to mind, using <a href="https://distrowatch.com/">DistroWatch</a> and <a href="https://en.m.wikipedia.org/wiki/File:Linux_Distribution_Timeline.svg">Linux Distribution timeline</a> as an aid:</p>
<ul>
<li>Debian
<ul>
<li>RaspberryPi OS</li>
</ul>
</li>
<li>Ubuntu</li>
<li>Fedora</li>
<li>openSUSE</li>
<li>Alpine Linux</li>
<li>Arch Linux (Arch Linux ARM)</li>
<li>Void Linux</li>
<li>Gentoo</li>
<li>NixOS</li>
<li>FreeBSD</li>
<li>OpenBSD</li>
<li>Slackware Linux</li>
</ul>
<p>This list is still quite large.
I will need to trim it down further in the following days. Stay tuned.</p>
<p>Some observations before I make a final decision:</p>
<ul>
<li>I have two units, so one decision to make is whether to choose the same distribution for both or distinct distributions for each. One Linux and one BSD, for example.</li>
<li>I never used the following distros: Void Linux, NixOS, OpenBSD, Slackware Linux. There’s always an appeal to trying out something new, even if just ephemerally.</li>
<li>I am heavily experienced in Debian / Ubuntu, Arch and Alpine (with a tad of Gentoo as well). There’s an appeal to using something I am already familiar with to get the OS out of the way, and thus focus more on DevOps.</li>
<li>NixOS is very tempting for the purposes of reproducibility, but every time I look at it I feel lost in its sea of complexity. And it oftentimes feels bloated. Reproducibility comes with a non-trivial upfront cost.</li>
<li>OpenBSD feels very tempting as a self-contained, “do one thing and do it well”, KISS &amp; secure system. It lacks on integration with third-party software, but perhaps that’s a feature.</li>
<li>Let’s be honest, as much as Slackware has its charm, realistically I am not choosing it. Its ecosystem is too small today. It doesn’t provide any value when compared to the rest of the list. Between Slack and Alpine, I’d easily pick Alpine with no effort.</li>
</ul>
<p>Hence we can already eliminate one: <del>Slackware Linux</del>.</p>
<p>To be continued ■</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Two units</em> is a safer choice than “raspberry pies” or “raspberry pis”.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>cdg: change directory to the git root</title><link>https://www.perrotta.dev/2024/10/cdg-change-directory-to-the-git-root/</link><pubDate>Fri, 11 Oct 2024 12:01:48 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/cdg-change-directory-to-the-git-root/</guid><description>&lt;p>Shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>alias cdg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cd &amp;#34;$(git root)&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>~/.gitconfig&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>[alias]
root = rev-parse --show-toplevel
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[<p>Shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>alias cdg<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cd &#34;$(git root)&#34;&#39;</span>
</span></span></code></pre></div><p><code>~/.gitconfig</code>:</p>
<pre tabindex="0"><code>[alias]
  root = rev-parse --show-toplevel
</code></pre><p>Sadly it is not possible to do so with a git alias, c.f. <a href="https://stackoverflow.com/questions/19032372/git-alias-for-shell-command-to-cd-into-git-root-not-working-as-expected">https://stackoverflow.com/questions/19032372/git-alias-for-shell-command-to-cd-into-git-root-not-working-as-expected</a>:</p>
<blockquote>
<p>Your shell is invoking Git, and Git is invoking another shell in which to run
your cd command. This command is successful, and this changes the working
directory of the child shell, but it does not change the working directory of
Git, nor of the parent shell.</p>
<p>In order to do this you need to run the command in your current shell, which
means that invoking Git will not be able to accomplish this. You will have to
continue using a shell alias.</p>
</blockquote>
<p>Since we cannot change directory with a git alias, then at least we can use one
to print the repository root.</p>]]></content:encoded></item><item><title>Convert JSON to YAML</title><link>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</link><pubDate>Fri, 11 Oct 2024 11:47:50 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/convert-json-to-yaml/</guid><description>&lt;p>Given a YAML file that is effectively JSON, convert it to YAML format.&lt;/p></description><content:encoded><![CDATA[<p>Given a YAML file that is effectively JSON, convert it to YAML format.</p>
<h2 id="input">Input</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;The Big Bang Theory&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;characters&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Sheldon&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Leonard&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="output">Output</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -i -P file.yaml
</span></span><span style="display:flex;"><span>% cat file.yaml
</span></span><span style="display:flex;"><span>title: The Big Bang Theory
</span></span><span style="display:flex;"><span>characters:
</span></span><span style="display:flex;"><span>  - name: Sheldon
</span></span><span style="display:flex;"><span>  - name: Leonard
</span></span></code></pre></div><p><a href="https://github.com/mikefarah/yq"><code>yq</code></a> is like <code>jq</code> for YAML.</p>
<p><code>-i</code> is for in-place modification<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, <code>-P</code> is for pretty-printing.</p>
<p>If you don’t know about <code>-i</code>, you can always use <a href="https://joeyh.name/code/moreutils/"><code>sponge</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% yq -P file.yaml | sponge file.yaml
</span></span></code></pre></div><p>Happy YAML’ing!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>In this context avoid using <code>&gt;</code> output redirection because it would mangle the input file. Unless you redirect to another file, of course.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>git misspellings</title><link>https://www.perrotta.dev/2024/10/git-misspellings/</link><pubDate>Thu, 10 Oct 2024 13:26:57 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/git-misspellings/</guid><description>Buried into a ~/.bashrc far away&amp;hellip;1
# misspellings for git alias t=git alias it=git alias gi=git alias gt=git alias gti=git History makes no mistake: all these have occurred at least once.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description><content:encoded><![CDATA[<p>Buried into a <code>~/.bashrc</code> far away&hellip;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<pre tabindex="0"><code># misspellings for git
alias t=git
alias it=git
alias gi=git
alias gt=git
alias gti=git
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>History makes <em>no mistake</em>: all these have occurred at least once.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>New APKBUILD: argocd</title><link>https://www.perrotta.dev/2024/10/new-apkbuild-argocd/</link><pubDate>Wed, 09 Oct 2024 23:03:32 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/new-apkbuild-argocd/</guid><description>&lt;p>&lt;a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD&lt;/a> is a widely used GitOps
software for Kubernetes Continuous Delivery (see
&lt;a href="https://github.com/argoproj/argo-cd/blob/master/USERS.md">USERS.md&lt;/a>).&lt;/p>
&lt;p>I am quite surprised no one bothered to create an Alpine Linux package for it.&lt;/p>
&lt;p>Until&amp;hellip;&lt;a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/73305">now&lt;/a>,
by yours truly.&lt;/p></description><content:encoded><![CDATA[<p><a href="https://argo-cd.readthedocs.io/en/stable/">ArgoCD</a> is a widely used GitOps
software for Kubernetes Continuous Delivery (see
<a href="https://github.com/argoproj/argo-cd/blob/master/USERS.md">USERS.md</a>).</p>
<p>I am quite surprised no one bothered to create an Alpine Linux package for it.</p>
<p>Until&hellip;<a href="https://gitlab.alpinelinux.org/alpine/aports/-/merge_requests/73305">now</a>,
by yours truly.</p>
<p>This <code>APKBUILD</code> took a bit longer to create than the usual.
There were a couple of issues with <code>-buildmode=pie</code>, addressed with
<code>export CGO_ENABLED=1</code> (via <code>make CGO_FLAG=1</code>).</p>
<p>Also, not every architecture is compatible with it. The following error message
appears in ARM builds:</p>
<pre tabindex="0"><code>cannot use math.MaxInt64 (untyped int constant 9223372036854775807) as int value in argument to env.ParseNumFromEnv (overflows)
</code></pre><p>Anyway, once it is merged upstream, enjoy!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% doas apk add argocd
</span></span></code></pre></div>]]></content:encoded></item><item><title>Exponential Idle</title><link>https://www.perrotta.dev/2024/10/exponential-idle/</link><pubDate>Mon, 07 Oct 2024 23:26:14 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/exponential-idle/</guid><description>&lt;p>&lt;a href="https://conicgames.github.io/exponentialidle/">Exponential Idle&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Exponential Idle is a math-inspired incremental game available on Android and iOS. Your goal is to stack up money by taking advantage of exponential growth. To do so, you have to step through time by tapping the equation or simply let the time follow its course. You can perform change of variables to accelerate the process, buy upgrades, get rewards, and unlock achievements while earning virtual money.&lt;/p>
&lt;/blockquote></description><content:encoded><![CDATA[<p><a href="https://conicgames.github.io/exponentialidle/">Exponential Idle</a>:</p>
<blockquote>
<p>Exponential Idle is a math-inspired incremental game available on Android and iOS. Your goal is to stack up money by taking advantage of exponential growth. To do so, you have to step through time by tapping the equation or simply let the time follow its course. You can perform change of variables to accelerate the process, buy upgrades, get rewards, and unlock achievements while earning virtual money.</p>
</blockquote>
<p>I’ve been in love with this game, it is very fun and chill.
The typography is beautiful, with LaTeX equations all over the place.</p>
<p>It’s very similar to <a href="https://www.decisionproblem.com/paperclips/index2.html">Universal Paperclips</a>, but with an academic<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> tad.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As of the time of this post I am a Master’s student, and my thesis proposal has just been accepted!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>bash built-in date</title><link>https://www.perrotta.dev/2024/10/bash-built-in-date/</link><pubDate>Mon, 07 Oct 2024 15:12:20 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/bash-built-in-date/</guid><description>&lt;p>To format dates &lt;a href="https://www.gnu.org/software/coreutils/manual/html_node/Examples-of-date.html">GNU
date&lt;/a>
is often used:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ date &lt;span style="color:#e6db74">&amp;#39;+%Y-%m-%d&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2024-10-07
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It turns out bash (&amp;gt;=4.2) has this feature built-in as part of &lt;code>printf&lt;/code>:&lt;/p></description><content:encoded><![CDATA[<p>To format dates <a href="https://www.gnu.org/software/coreutils/manual/html_node/Examples-of-date.html">GNU
date</a>
is often used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ date <span style="color:#e6db74">&#39;+%Y-%m-%d&#39;</span>
</span></span><span style="display:flex;"><span>2024-10-07
</span></span></code></pre></div><p>It turns out bash (&gt;=4.2) has this feature built-in as part of <code>printf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ printf <span style="color:#e6db74">&#39;%(%Y-%m-%d)T\n&#39;</span>
</span></span><span style="display:flex;"><span>2024-10-07
</span></span></code></pre></div><p>It does not work on <code>zsh</code> though:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% printf <span style="color:#e6db74">&#39;%(%Y-%m-%d)T\n&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>printf: %<span style="color:#f92672">(</span>: invalid directive
</span></span></code></pre></div><p><strong>Source</strong>: <a href="https://blog.marco.ninja/notes/technology/linux/working-with-dates-in-bash-and-other-shells/">https://blog.marco.ninja/notes/technology/linux/working-with-dates-in-bash-and-other-shells/</a></p>]]></content:encoded></item><item><title>cdtmp: change to a temporary directory</title><link>https://www.perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/</link><pubDate>Mon, 07 Oct 2024 10:40:37 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/cdtmp-change-to-a-temporary-directory/</guid><description>&lt;p>Sometimes I need to do random experimentation in a throwaway directory.&lt;/p>
&lt;p>For that, I have the following &lt;code>cdtmp&lt;/code> function in my shell:&lt;/p></description><content:encoded><![CDATA[<p>Sometimes I need to do random experimentation in a throwaway directory.</p>
<p>For that, I have the following <code>cdtmp</code> function in my shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cdtmp <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	builtin cd <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>mktemp -d <span style="color:#e6db74">&#34;/tmp/</span>$USER<span style="color:#e6db74">-</span><span style="color:#e6db74">${</span>1:+$1-<span style="color:#e6db74">}</span><span style="color:#66d9ef">$(</span>date +%Y-%m-%d<span style="color:#66d9ef">)</span><span style="color:#e6db74">-XXXXXX&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	builtin pwd
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Here are two example usages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cdtmp
</span></span><span style="display:flex;"><span>/tmp/thiago-2024-10-07-V3c3Na
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-V3c3Na
</span></span><span style="display:flex;"><span>% cdtmp devops
</span></span><span style="display:flex;"><span>/tmp/thiago-devops-2024-10-07-P4W1fh
</span></span></code></pre></div><p>This idea was built upon <a href="https://frantic.im/cdtmp/">Alex Kotliarskyi&rsquo;s</a>, which
he describes as:</p>
<blockquote>
<p>It’s a super simple alias that creates a temporary directory and then jumps
into it. Here are a few examples of what I use it for:</p>
<ul>
<li>Clone a random interesting git repo to experiment with</li>
</ul>
</blockquote>
<p>I also use it for testing one-off bash, C++, golang or python scripts, for
example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% cdtmp
</span></span><span style="display:flex;"><span>/tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>% vim main.sh
</span></span><span style="display:flex;"><span>thiago@thiagoperrotta-MacBook-Pro /tmp/thiago-2024-10-07-F5aFrJ
</span></span><span style="display:flex;"><span>% bash main.sh
</span></span><span style="display:flex;"><span>hello world
</span></span></code></pre></div><p><a href="https://github.com/thiagowfx/.dotfiles/blob/3645ea5811d07c9f4be3cea91c0ffaf43ba4071c/profile/.profile.d/functions.sh#L5">Here</a>
is the definition my dotfiles.</p>]]></content:encoded></item><item><title>Tracking cheap flights from Munich</title><link>https://www.perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</link><pubDate>Sun, 06 Oct 2024 00:31:23 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/tracking-cheap-flights-from-munich/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>I wanted to be notified whenever a flight deal from Munich&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> appeared. The
destination doesn&amp;rsquo;t really matter.&lt;/p></description><content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>I wanted to be notified whenever a flight deal from Munich<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> appeared. The
destination doesn&rsquo;t really matter.</p>
<p>There are several ways to do so semi-automatically, I tried all of them at least
once:</p>
<ul>
<li>follow travel blogs</li>
<li>sign up for newsletters</li>
<li>follow instagram pages or influencers that relay promos</li>
<li>visit the websites from airlines directly</li>
<li>use bots / scraping</li>
<li>ask friends periodically</li>
<li>date a flight attendant</li>
</ul>
<p>The list above is overwhelming, and I have no time for all of it. Furthermore, I
have zero desire to inundate myself with (even) more social media posts, that
are often empty in nature.</p>
<p>Moreover I wanted to build a permanent and long-lasting solution on top of my
personal infrastructure.</p>
<p>Hence the only real options were: (i) travel blogs, (ii) newsletters, (iii)
scraping.</p>
<p>The first phase is implemented as a Telegram channel:
<a href="https://t.me/bavariabudgetbirds">https://t.me/bavariabudgetbirds</a>.</p>
<p>Whenever there are new deals my server pushes an update to the Telegram channel
above for each of them. The deals<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> are tracked via a list of curated RSS feed
subscriptions, which is filtered to only match keywords that are pertaining to
Munich. It is not perfect, but it is good enough for my purposes, virtually
marginally free to run, and needs zero maintenance.</p>
<h2 id="technical-details">Technical Details</h2>
<p>I have a VPS that runs <a href="https://www.alpinelinux.org/">Alpine Linux</a>. The VPS
provider is not important.</p>
<p>The OS runs the excellent <a href="https://miniflux.app/">Miniflux</a> app, managed via
OpenRC. In this specific deployment, there is no <code>systemd</code>, and there is no
virtualization (<code>docker</code>, <code>kubernetes</code>, etc). It is 100%
<a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a>. Miniflux is actively
developed and Alpine Linux package releases happen frequently and quickly. Even
if they do not, I have the means to create <code>APKBUILD</code>s myself when needed
(see previous posts).</p>
<p>Miniflux is populated with the list of travel blogs I follow, filtering out
non-relevant posts, polled roughly every 2 hours. There is a separate Miniflux
user for this purpose, so that my own subscriptions do not get mingled
in-between.</p>
<p>I use the Miniflux integration with Telegram to ensure that new posts are
immediately pushed to the aforementioned channel with my Telegram bot.</p>
<p>Wishlist for the future:</p>
<ol>
<li>Add the ability to integrate with websites that do not support
RSS directly and/or that block RSS readers. Examples:</li>
</ol>
<ul>
<li><a href="https://lowcost.pro/route/MUC/XXX/EN/">https://lowcost.pro/route/MUC/XXX/EN/</a></li>
<li><a href="https://www.secretflying.com/posts/category/cities-countries/germany/">https://www.secretflying.com/posts/category/cities-countries/germany/</a></li>
<li><a href="https://www.trabber.de/en/flights-from-germany-de/">https://www.trabber.de/en/flights-from-germany-de/</a></li>
</ul>
<ol start="2">
<li>Convert newsletters-only sources to RSS feeds.</li>
</ol>
<p>This solution can easily be generalized for any location; there is absolutely
nothing special about Munich in this context.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Munich, Memmingen or Nuremberg (Nürnberg)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Blog posts, really.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Steam Deck "downloading update" boot loop</title><link>https://www.perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</link><pubDate>Sat, 05 Oct 2024 23:58:48 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/steam-deck-downloading-update-boot-loop/</guid><description>&lt;p>Today I tried to use my Steam Deck to no avail.&lt;/p>
&lt;p>Upon turning it on, a “Downloading update (…)” splash screen would appear, then the device would quickly turn itself off, in a matter of seconds.&lt;/p></description><content:encoded><![CDATA[<p>Today I tried to use my Steam Deck to no avail.</p>
<p>Upon turning it on, a “Downloading update (…)” splash screen would appear, then the device would quickly turn itself off, in a matter of seconds.</p>
<p>Repeating this dance a couple of times yielded the same results.</p>
<p>Then I found out that if you hold the three-dot button (the quick settings menu button) briefly after turning it on, you are prompted with a boot loader screen that resembles GRUB. In this screen it’s possible to roll back to an earlier OS version.</p>
<p>The Steam Deck disk partitioning has two partitions (A and B), just choose the second one (i.e. not the latest one).</p>
<p>This time upon restarting the device the boot loop was gone.</p>
<p><strong>Credits</strong>: <a href="https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/">https://www.reddit.com/r/SteamDeck/comments/1bb5767/steam_deck_stuck_at_update_complete_launching/</a></p>]]></content:encoded></item><item><title>★ Erratic: human-friendly google3 piper snapshots</title><link>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</link><pubDate>Wed, 02 Oct 2024 13:33:56 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/erratic-human-friendly-google3-piper-snapshots/</guid><description>&lt;p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called &lt;code>erratic&lt;/code> (abbrev: &lt;code>er&lt;/code>),
which was a 20% project of another Software Engineer&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description><content:encoded><![CDATA[<p>In the google3 codebase, when working with Piper directly (i.e. not
Fig[-on-CitC]), I often liked to use this tool called <code>erratic</code> (abbrev: <code>er</code>),
which was a 20% project of another Software Engineer<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="google3-workflow">google3 workflow</h2>
<p>The workflow is as follows:</p>
<ul>
<li>Make some changes: <code>g4 open</code>, <code>g4 edit</code>, etc</li>
<li>Create a CL (ChangeList) <code>g4 change</code></li>
</ul>
<p>Now let&rsquo;s say you&rsquo;re anticipating some heavy refactoring, in the same CL<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>,
that you could potentially regret and want to revert.</p>
<p>This would be a great moment to use <code>erratic</code>. After installing it (or aliasing
it, if using it via X20), run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% er explain <span style="color:#e6db74">&#34;this is working perfectly before bob@ asked me to refactor it&#34;</span>
</span></span></code></pre></div><ul>
<li>Make additional changes</li>
<li>Feel free to make more snapshots (checkpoints), as you see fit</li>
</ul>
<p>If you ever want to roll back, run <code>er list</code>. It will list all explicit
snapshots you annotated so far. Locate the one you want to roll back to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% er list
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span> <span style="color:#e6db74">&#34;this is working perfectly before bob@ asked me to refactor it&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">78</span> <span style="color:#e6db74">&#34;second refactoring&#34;</span>
</span></span></code></pre></div><p>Now just roll back to it:</p>
<pre tabindex="0"><code>% er restore 42
</code></pre><p>Sometimes you&rsquo;ll need to run <code>g4 add</code> afterwards. And we&rsquo;re done!</p>
<p><strong>Colophon</strong>: Why use <code>erratic</code> at all, since CitC already does automatic
periodic snapshots out-of-the-box? Because these automatic snapshots are meant
for machines, not humans; they are not very developer-friendly. You could get
your way around <code>rsync</code> + finding the correct timestamps to copy from, but
that&rsquo;s not fun at all, and not a good use of time either.</p>
<h2 id="git-workflow">git workflow</h2>
<p>How to replicate a similar workflow in a non-Google world?</p>
<p>For most of us, non-Google necessarily means <code>git</code>. Let&rsquo;s ignore <code>hg</code>
(mercurial) in this context.</p>
<p>There is not much to do, actually: <a href="https://github.blog/open-source/git/commits-are-snapshots-not-diffs/">https://github.blog/open-source/git/commits-are-snapshots-not-diffs/</a></p>
<p><code>git</code> commits are already snapshots. The workflow is:</p>
<ul>
<li>Make some changes, then <code>git add</code></li>
<li>Create a branch (<code>git switch --create</code>), commit your changes</li>
<li>To make a snapshot, just make a new commit and annotate it (<code>git commit -m &quot;foo&quot;</code>)</li>
<li>To list your snapshots, run <code>git rev-list $(git show-branch --merge-base HEAD)^..HEAD --pretty</code>. This will list all commits since your branch diverted.
You could add an alias to it in your <code>~/.gitconfig</code>.</li>
<li>To roll back, run <code>git reset --hard {commit}</code>.</li>
</ul>
<p><strong>Caveat</strong>: You will lose track of all commits after <code>{commit}</code>. Although it
would still be possible to recover them with <code>git reflog</code> (in case of a
mistake), that is not a developer-friendly workflow.</p>
<p>Then the follow-up question is: how to roll back without losing track of
intermediate work?</p>
<p>One way is to create a new branch that points out to <code>{commit}</code> instead of
hard-resetting your entire worktree:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git checkout -b mynewbranch <span style="color:#f92672">{</span>commit<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Once you are satisfied, just delete the previous branch and then rename the
current one to it.</p>
<p>Another possibility is the use of <a href="https://git-scm.com/docs/git-worktree">git
worktrees</a> to divert (spin-off) branches.</p>
<p>This becomes a very natural workflow once you repeat it a couple of times.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I have gladly peer bonused him. You should <em>always</em> peer bonus those folks
who helped you become more productive.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Arguably you should create a separate CL for that (go/small-cls), but who
am I to judge? Unless I am your teammate&hellip;&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>fd: match full path</title><link>https://www.perrotta.dev/2024/10/fd-match-full-path/</link><pubDate>Wed, 02 Oct 2024 13:30:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/fd-match-full-path/</guid><description>&lt;p>When using &lt;a href="https://github.com/sharkdp/fd">&lt;code>fd(1)&lt;/code>&lt;/a>, only the filename is
matched by default.&lt;/p>
&lt;p>To match the full path, use &lt;code>-p&lt;/code>. It is often useful to combine it with &lt;code>--type file&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p>When using <a href="https://github.com/sharkdp/fd"><code>fd(1)</code></a>, only the filename is
matched by default.</p>
<p>To match the full path, use <code>-p</code>. It is often useful to combine it with <code>--type file</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% fd -p clustermon --type file
</span></span><span style="display:flex;"><span>apps/base/clustermon/clustermon.yaml
</span></span><span style="display:flex;"><span>apps/base/clustermon/kustomization.yaml
</span></span><span style="display:flex;"><span>apps/overlays/g02/clustermon/patches.yaml
</span></span><span style="display:flex;"><span>apps/overlays/g02/clustermon/values.yaml
</span></span></code></pre></div><p>A natural extension is to pipe it to <code>| ifne xargs -n 1 gsed -i -e '{expression}'</code>. Changes in the entire codebase at your fingertips!</p>]]></content:encoded></item><item><title>ack: match and return only the matched string</title><link>https://www.perrotta.dev/2024/10/ack-match-and-return-only-the-matched-string/</link><pubDate>Tue, 01 Oct 2024 17:59:17 +0200</pubDate><guid>https://www.perrotta.dev/2024/10/ack-match-and-return-only-the-matched-string/</guid><description>&lt;p>&lt;strong>Context&lt;/strong>: Helm charts use &lt;code>.Values.{foo}&lt;/code> in &lt;code>templates/&lt;/code> for templating from
&lt;code>values.yaml&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Goal&lt;/strong>: Return all unique values used in &lt;code>templates/&lt;/code>. The intention for it is
to add them all as defaults to &lt;code>values.yaml&lt;/code>.&lt;/p></description><content:encoded><![CDATA[<p><strong>Context</strong>: Helm charts use <code>.Values.{foo}</code> in <code>templates/</code> for templating from
<code>values.yaml</code>.</p>
<p><strong>Goal</strong>: Return all unique values used in <code>templates/</code>. The intention for it is
to add them all as defaults to <code>values.yaml</code>.</p>
<p>First attempt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack <span style="color:#e6db74">&#39;\.Values\.&#39;</span>
</span></span></code></pre></div><p>One could proceed manually from here, but this is not very ergonomic in big helm
charts.</p>
<p>A better (and more precise) attempt is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span></code></pre></div><p>This will match <code>.Values.config.foo</code>, in addition to <code>.Values.foo</code>.</p>
<p>To return only the matched strings, add <code>-o</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span></code></pre></div><p>Here is a real example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>values.yaml
</span></span><span style="display:flex;"><span>349:29:.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>863:29:.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>903:20:.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>To return only the values, add <code>-h</code> (it will hide the filenames):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o -h <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>Now all that is left to do is to pipe it to <code>sort -u</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ ack -o -h <span style="color:#e6db74">&#39;\.Values[\.\w+]+&#39;</span> | sort -u
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>.Values.global.prometheus_scrape_interval
</span></span><span style="display:flex;"><span>.Values.global.global_grafana_ingest_url
</span></span></code></pre></div><p>It turns out that <code>grep</code> also has a <code>-o</code> flag with a similar behavior.</p>]]></content:encoded></item><item><title>helm: list recent chart upgrades</title><link>https://www.perrotta.dev/2024/09/helm-list-recent-chart-upgrades/</link><pubDate>Tue, 24 Sep 2024 14:21:20 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/helm-list-recent-chart-upgrades/</guid><description>&lt;p>&lt;strong>Problem statement&lt;/strong>: Given a kubernetes cluster with many helm charts in
different namespaces, how to use &lt;code>helm&lt;/code> to query the list of the last recently
&amp;ldquo;touched&amp;rdquo; charts?&lt;/p>
&lt;p>By &amp;ldquo;touched&amp;rdquo; we mean either installed (via &lt;code>helm install&lt;/code>) or upgraded (via
&lt;code>helm upgrade&lt;/code>).&lt;/p>
&lt;p>Something like: &lt;code>helm ls --all --sort-by updated&lt;/code>. Using &lt;code>kubectl&lt;/code> directly
would also be OK.&lt;/p></description><content:encoded><![CDATA[<p><strong>Problem statement</strong>: Given a kubernetes cluster with many helm charts in
different namespaces, how to use <code>helm</code> to query the list of the last recently
&ldquo;touched&rdquo; charts?</p>
<p>By &ldquo;touched&rdquo; we mean either installed (via <code>helm install</code>) or upgraded (via
<code>helm upgrade</code>).</p>
<p>Something like: <code>helm ls --all --sort-by updated</code>. Using <code>kubectl</code> directly
would also be OK.</p>
<h2 id="solution">Solution</h2>
<p>The brute force way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>helm ls --max <span style="color:#ae81ff">99999</span> -A -o json | jq -r <span style="color:#e6db74">&#39;.[] | &#34;\(.updated)\t\(.name)&#34;&#39;</span> | sort | tail | column -t
</span></span></code></pre></div><ul>
<li><code>-A</code> for all namespaces</li>
<li><code>--max 99999</code> to &ldquo;disable&rdquo; <a href="https://github.com/helm/helm/issues/3322">paging</a> (there&rsquo;s no better way as of 2024-09-24)</li>
<li><code>jq</code> to filter out on the &ldquo;updated&rdquo; field</li>
</ul>
<p>Note that a sample json entry looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;hoth-cb7f8a327&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;namespace&#34;</span>: <span style="color:#e6db74">&#34;default&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;revision&#34;</span>: <span style="color:#e6db74">&#34;2&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;updated&#34;</span>: <span style="color:#e6db74">&#34;2024-06-14 15:02:16.775174131 +0000 UTC&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#e6db74">&#34;deployed&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;chart&#34;</span>: <span style="color:#e6db74">&#34;hoth-0.1.0&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;app_version&#34;</span>: <span style="color:#e6db74">&#34;1.0.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Sample output of the aforementioned command:</p>
<pre tabindex="0"><code>2024-09-24  10:56:15.655674586  +0000  UTC  geonosis
2024-09-24  10:56:15.731630075  +0000  UTC  coruscant
2024-09-24  11:01:35.156973247  +0000  UTC  endor
2024-09-24  11:02:30.314014351  +0000  UTC  hoth
</code></pre>]]></content:encoded></item><item><title>Life without ack</title><link>https://www.perrotta.dev/2024/09/life-without-ack/</link><pubDate>Sun, 22 Sep 2024 14:30:29 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/life-without-ack/</guid><description>&lt;p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This time: the upgrade to macOS Sequoia (15.0) broke &lt;code>ack&lt;/code> (Perl).&lt;/p></description><content:encoded><![CDATA[<p>Every macOS upgrade comes with disappointment and sorrow in the form of some
tool, dependency / library or system-wide configuration breaking<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>This time: the upgrade to macOS Sequoia (15.0) broke <code>ack</code> (Perl).</p>
<pre tabindex="0"><code>% ack
zsh: /opt/homebrew/bin/ack: bad interpreter: /usr/bin/perl5.30: no such file or directory
</code></pre><p>I desperately needed to use <code>ack</code>, however there was no internet connection. And
I didn&rsquo;t have any of its alternatives installed (e.g. <code>ag</code>, <code>ripgrep</code> / <code>rg</code>).</p>
<p>Then the best way is to fall back to good ol&rsquo; <code>grep</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<pre tabindex="0"><code>% grep [-l] &#39;\bref\b&#39; **/*
</code></pre><p>Alternatively, within a git repository, there is <code>git grep</code>:</p>
<pre tabindex="0"><code>% git grep [-l] &#39;\bref\b&#39;
</code></pre><p>With <code>git grep</code> there is no need to specify which files to <code>grep</code>, as it entails
all files that belong to the repository&hellip;which happens to be a caveat for newly
created files that were not yet <code>git add</code>-ed.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Homebrew (<code>brew</code>) being <em>almost always</em> one of them.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>If <code>grep</code> ever breaks, we are screwed.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>★ Anki: custom language card (cont.)</title><link>https://www.perrotta.dev/2024/09/anki-custom-language-card-cont./</link><pubDate>Sun, 22 Sep 2024 13:02:39 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/anki-custom-language-card-cont./</guid><description>&lt;p>This post builds upon the previous &lt;a href="https://www.perrotta.dev/2024/02/anki-custom-language-card/">Anki: custom language card&lt;/a>.&lt;/p></description><content:encoded><![CDATA[<p>This post builds upon the previous <a href="https://www.perrotta.dev/2024/02/anki-custom-language-card/">Anki: custom language card</a>.</p>
<h2 id="searching-word-boundaries">Searching word boundaries</h2>
<p>When searching for a word such as <em>Mann</em>, results such as <em>Mannschaft</em> come up.</p>
<p>To search accounting for the word boundary, like a typical <code>\bMann\b</code> regex, use
<code>w:</code>. In this example: <code>w:Mann</code>.</p>
<h2 id="searching-ignoring-accents">Searching ignoring accents</h2>
<p>When searching for a word with Umlauts such as <em>Über</em>, you should type it
exactly as is.</p>
<p>If you are lazy or do not recall where the umlaut falls, perhaps you would think
of searching for <em>uber</em>, however that does not work.</p>
<p>To make it work, prepend <code>nc:</code> to the word. In this case: <code>nc:uber</code> will
properly match <em>über</em>. NC stands for non-combining.</p>
<h2 id="searching-word-boundaries-whilst-ignoring-accents">Searching word boundaries <strong>whilst</strong> ignoring accents</h2>
<p>Is it possible to combine the two aforementioned operators? For example, to
match <em>für</em>. Unfortunately, <a href="https://stackoverflow.com/questions/79011851/anki-how-to-match-while-using-both-w-and-nc-simultaneously">it is
not</a>.
Anki does not support <code>w:nc:fur</code> nor <code>nc:w:fur</code>, which is unfortunate. <em>Schade</em>!</p>
<p>In this case the best compromise would be to search for <code>w:für</code>.</p>
<h2 id="adding-images-to-flashcards">Adding images to flashcards</h2>
<p>It is pretty straightforward: Right click the image in your favorite web
browser, copy it, and then paste it (Ctrl/Cmd + V) into Anki. The image is
automatically imported.</p>
<p>No-brainer image sources:</p>
<ul>
<li><a href="https://dict.cc/">dict.cc</a></li>
<li><a href="https://images.google.com/">Google Images</a></li>
</ul>
<p>Nowadays it would also be natural<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> to use &ldquo;AI&rdquo; to generate images.</p>
<h2 id="providing-examples-style">Providing examples: style</h2>
<p>To illustrate with a concrete example:</p>
<p><strong>1</strong>: <!-- raw HTML omitted -->Ja<!-- raw HTML omitted -->, genau.</p>
<p><strong>2</strong>: Das ist <!-- raw HTML omitted -->ja<!-- raw HTML omitted --> komisch.</p>
<p><em>Affirmative</em></p>
<p>The structure:</p>
<ul>
<li><strong>Bold</strong> numbers to disambiguate</li>
<li><!-- raw HTML omitted -->Underscore<!-- raw HTML omitted --> the word in question to emphasize it</li>
<li><em>Italicize</em> everything that is meta or an explanation about the word</li>
</ul>
<p>To highlight substrings, e.g. <em>Mann</em> in <em>Mannschaft</em>, use underscores<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="tags">Tags</h2>
<p>I seldom tag notes because there is no need for categorization, all cards are
treated the same way. Tagging is only useful in two scenarios:</p>
<ul>
<li>
<p>for grouping / retrieval: for example, if you want to make custom study
sessions for a specific domain / area (e.g. animals, programming, trips)</p>
</li>
<li>
<p>for provenance annotations: to make it easier to remember where a given note
came from (e.g. &ldquo;textbook&rdquo;, &ldquo;my german teacher&rdquo;, &ldquo;blog&rdquo;, &ldquo;podcast&rdquo;, &ldquo;work&rdquo;)</p>
</li>
</ul>
<p>Adding tags creates the burden of managing and standardizing them. You do not
want to spend valuable mental effort derailing from your main task.</p>
<h2 id="sources">Sources</h2>
<ul>
<li><a href="https://docs.ankiweb.net/searching.html">https://docs.ankiweb.net/searching.html</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Albeit deeply unnecessary and wasteful (energy-wise).&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This principle is not strict. I often interchange bold and underscore.
Choose whichever feels more natural in the appropriate context.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>Slack: AI plug-in</title><link>https://www.perrotta.dev/2024/09/slack-ai-plug-in/</link><pubDate>Wed, 18 Sep 2024 14:15:56 +0200</pubDate><guid>https://www.perrotta.dev/2024/09/slack-ai-plug-in/</guid><description>Coworker: Do you have an AI plug-in for Slack?
Coworker: I see that you use things like this: AI: Exclude &amp;ldquo;cert-manager&amp;rdquo; from the alert (manually)
Me: lol, this is just an abbrev. for &amp;ldquo;Action Item&amp;rdquo;. Might as well have been &amp;ldquo;TODO:&amp;rdquo;
Coworker: AI is such a buzzword nowadays, looks like I&amp;rsquo;m starting to get brainwashed to see it in everything</description><content:encoded><![CDATA[<blockquote>
<p><strong>Coworker</strong>: Do you have an AI plug-in for Slack?</p>
<p><strong>Coworker</strong>: I see that you use things like this: AI: Exclude &ldquo;cert-manager&rdquo; from the alert (manually)</p>
<p><strong>Me</strong>: lol, this is just an abbrev. for &ldquo;Action Item&rdquo;. Might as well have been &ldquo;TODO:&rdquo;</p>
<p><strong>Coworker</strong>: AI is such a buzzword nowadays, looks like I&rsquo;m starting to get brainwashed to see it in everything</p>
</blockquote>
]]></content:encoded></item></channel></rss>